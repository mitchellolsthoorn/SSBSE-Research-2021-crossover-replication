/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:28:04 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1863.6179F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-567.1808F);
      floatArray0[3] = 106.0F;
      floatArray0[4] = 1636.17F;
      floatArray0[5] = 4150.6F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.subarray(floatArray0, Integer.MAX_VALUE, (-2147006747));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)120;
      shortArray0[2] = (short)8192;
      shortArray0[3] = (short)5215;
      shortArray0[4] = (short) (-2352);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2352), (short)5215, (short)8192, (short)120, (short) (-1)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)5215;
      floatArray0[1] = (float) (short)5215;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {5215.0F, 5215.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) (short)120);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {120.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 37.0F;
      floatArray0[2] = 39.0F;
      float float0 = 746.0F;
      floatArray0[3] = 746.0F;
      floatArray0[4] = 118.0F;
      floatArray0[5] = 1373.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-276.0F);
      floatArray0[8] = (-2210.5215F);
      int int0 = 2;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2210.5215F), 2);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 37.0F, 39.0F, 746.0F, 118.0F, 1373.0F, 0.0F, (-276.0F), (-2210.5215F)}, floatArray0, 0.01F);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{8}", bitSet0.toString());
      assertEquals(9, bitSet0.length());
      assertEquals(9, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, (int) (short)0, 1536);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.swap(shortArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, 2052);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)0, (int) (short)0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = 2103.210063468632;
      doubleArray0[2] = (-4431.483);
      doubleArray0[3] = 3262.0;
      doubleArray0[4] = 2005.17344929138;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {0.7, 2103.210063468632, (-4431.483), 3262.0, 2005.17344929138, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1588;
      shortArray0[1] = (short) (-1821);
      doubleArray0[5] = (double) (short) (-1847);
      shortArray0[3] = (short) (-1400);
      shortArray0[4] = (short)1;
      ArrayUtils.reverse(shortArray0, 0, (int) (short) (-1400));
      assertArrayEquals(new short[] {(short)1588, (short) (-1821), (short)0, (short) (-1400), (short)1}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.7, 2103.210063468632, (-4431.483), 3262.0, 2005.17344929138, (-1847.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.7, 2103.210063468632, (-4431.483), 3262.0, 2005.17344929138, (-1847.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 54.0F;
      floatArray0[1] = (float) (short)1588;
      floatArray0[2] = (float) (short)1;
      floatArray0[3] = (float) (short) (-1400);
      floatArray0[4] = (float) (short) (-1400);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) (short)1;
      floatArray0[7] = (float) (short)1588;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (short) (-1821));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {54.0F, 1588.0F, 1.0F, (-1400.0F), (-1400.0F), 0.0F, 1.0F, 1588.0F, (-1821.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {54.0F, 1588.0F, 1.0F, (-1400.0F), (-1400.0F), 0.0F, 1.0F, 1588.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray1.length);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 906);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 100.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2478);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(2478, (int)integer1);
      
      Integer integer2 = Integer.valueOf(2146849667);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(2146849667, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertEquals(8, integerArray0.length);
      assertEquals(2146849667, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf((int) integerArray0[0]);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(8, integerArray0.length);
      assertEquals(2, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-672));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals((-672), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-109));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertEquals((-109), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1499);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertEquals(1499, (int)integer7);
      
      integerArray0[7] = integer7;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 64;
      longArray0[1] = (long) (-2427);
      longArray0[2] = (long) (-2427);
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) (short)605;
      floatArray0[2] = (float) (-2427);
      ArrayUtils.swap(floatArray0, 8, 8, (int) (short)605);
      assertArrayEquals(new float[] {8.0F, 605.0F, (-2427.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
      
      Double double0 = new Double(2852.0);
      assertNotNull(double0);
      assertEquals(2852.0, (double)double0, 0.01);
      
      Double double1 = new Double(2852.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2852.0, (double)double1, 0.01);
      
      Double double2 = new Double((-1116.32628694));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-1116.32628694), (double)double2, 0.01);
      
      Double double3 = new Double(605.0F);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(605.0, (double)double3, 0.01);
      
      Double double4 = new Double(693.42480104805);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals(693.42480104805, (double)double4, 0.01);
      
      Double double5 = new Double(605.0F);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertEquals(605.0, (double)double5, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      Double double6 = new Double((-1116.32628694));
      assertNotNull(double6);
      assertEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals((-1116.32628694), (double)double6, 0.01);
      
      doubleArray0[0] = double6;
      Double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray1 = ArrayUtils.subarray((long[]) null, 0, 2146373607);
      assertNull(longArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'C';
      charArray0[1] = 'O';
      charArray0[2] = 'U';
      charArray0[3] = '3';
      charArray0[4] = '~';
      charArray0[5] = 'A';
      charArray0[6] = '=';
      charArray0[7] = 'N';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(99, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1679.0543359);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-92));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) (short) (-92));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-92);
      longArray0[1] = (long) (short) (-92);
      longArray0[2] = (long) (short) (-92);
      boolean boolean0 = ArrayUtils.contains(longArray0, 1260L);
      assertArrayEquals(new long[] {(-92L), (-92L), (-92L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap((Object[]) doubleArray1, (int) (short) (-92), (-695), (int) (short) (-92));
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (short) (-92);
      floatArray0[2] = 1499.5232F;
      floatArray0[3] = (float) 1260L;
      ArrayUtils.shift(floatArray0, 0);
      assertArrayEquals(new float[] {0.0F, (-92.0F), 1499.5232F, 1260.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      ArrayUtils.swap(floatArray0, (-695), 53);
      assertArrayEquals(new float[] {0.0F, (-92.0F), 1499.5232F, 1260.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 127.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 4, 4);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 1.0, 127.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 1.0, 127.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, ')');
      assertNull(charArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 1.0, 127.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1679.0543359);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-92));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) (short) (-92));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-92);
      longArray0[1] = (long) (short) (-92);
      longArray0[2] = (long) (short) (-92);
      boolean boolean0 = ArrayUtils.contains(longArray0, 1260L);
      assertArrayEquals(new long[] {(-92L), (-92L), (-92L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap((Object[]) doubleArray1, (int) (short) (-92), (-695), (int) (short) (-92));
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (short) (-92);
      floatArray0[2] = 1499.5232F;
      floatArray0[3] = (float) 1260L;
      ArrayUtils.shift(floatArray0, 0);
      assertArrayEquals(new float[] {0.0F, (-92.0F), 1499.5232F, 1260.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-695);
      longArray1[1] = 1260L;
      longArray1[2] = 1260L;
      longArray1[3] = (long) 0;
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray0);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {(-695L), 1260L, 1260L, 0L}, longArray1);
      assertArrayEquals(new long[] {(-92L), (-92L), (-92L)}, longArray0);
      assertArrayEquals(new long[] {(-695L), 1260L, 1260L, 0L}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray2.length);
      
      double[] doubleArray3 = ArrayUtils.addAll(doubleArray2, doubleArray2);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-324));
      assertNotNull(short0);
      assertEquals((short) (-324), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals(3, shortArray0.length);
      assertEquals((short) (-324), (short)short1);
      
      short[] shortArray1 = new short[4];
      shortArray1[0] = (short) shortArray0[0];
      shortArray1[1] = (short) shortArray0[0];
      shortArray1[2] = (short) (-324);
      shortArray1[3] = (short) (-16);
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertArrayEquals(new short[] {(short) (-324), (short) (-324), (short) (-324), (short) (-16)}, shortArray1);
      assertEquals(4, shortArray1.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((short) (-16));
      assertNotNull(integer0);
      assertEquals((-16), (int)integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-2146855791), integer0);
      assertNotNull(integer1);
      assertEquals(0, integerArray0.length);
      assertEquals((-16), (int)integer1);
      
      boolean boolean2 = ArrayUtils.contains((Object[]) null, (Object) integer1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = '\"';
      charArray0[4] = 'w';
      charArray0[5] = 'p';
      charArray0[6] = 'q';
      charArray0[7] = '4';
      charArray0[8] = 'e';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'q');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'9', 'r', 'r', '\"', 'w', 'p', 'q', '4', 'e'}, charArray0);
      assertArrayEquals(new char[] {'9', 'r', 'r', '\"', 'w', 'p', '4', 'e'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 32.284642247454975;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) (short) (-681);
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = (-59.7254815);
      int int0 = ArrayUtils.indexOf(doubleArray0, 32.284642247454975, 5, 32.284642247454975);
      assertArrayEquals(new double[] {32.284642247454975, 5.0, (-681.0), 5.0, 5.0, 5.0, (-59.7254815)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-99);
      ArrayUtils.shift(byteArray0, 5, 2, 82);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)3, (byte)89, (byte) (-1), (byte) (-58), (byte) (-99)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Short short0 = new Short((short) (-681));
      assertNotNull(short0);
      assertEquals((short) (-681), (short)short0);
      
      String string0 = ArrayUtils.toString((Object) short0, "");
      assertNotNull(string0);
      assertEquals("-681", string0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 32.284642247454975;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) (short) (-681);
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = (-59.7254815);
      int int0 = ArrayUtils.indexOf(doubleArray0, 32.284642247454975, 5, 32.284642247454975);
      assertArrayEquals(new double[] {32.284642247454975, 5.0, (-681.0), 5.0, 5.0, 5.0, (-59.7254815)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-99);
      ArrayUtils.shift(byteArray0, 5, 2, 82);
      assertArrayEquals(new byte[] {(byte)2, (byte)37, (byte)3, (byte)89, (byte) (-1), (byte) (-58), (byte) (-99)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[2] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(18, shortArray0.length);
      assertEquals(18, shortArray1.length);
      
      ArrayUtils.shift((byte[]) null, (-2844));
      char[] charArray0 = new char[18];
      charArray0[0] = '8';
      charArray0[1] = '4';
      charArray0[2] = 'T';
      charArray0[3] = 'v';
      charArray0[4] = '#';
      charArray0[5] = '\"';
      charArray0[6] = '!';
      charArray0[7] = 'f';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(18, charArray0.length);
      assertEquals(17, charArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'T';
      intArray0[1] = 37;
      intArray0[2] = (int) '4';
      intArray0[3] = (int) '!';
      intArray0[5] = (int) (short)0;
      intArray0[7] = (int) (short)0;
      ArrayUtils.swap(intArray0, (int) (short)0, (int) (short)0, 2);
      assertArrayEquals(new int[] {84, 37, 52, 33, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-126));
      assertNotNull(byte0);
      assertEquals((byte) (-126), (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = '}';
      ArrayUtils.swap(charArray0, (-2), (-2), (-2));
      assertArrayEquals(new char[] {'U', 'U', 'U', '}'}, charArray0);
      assertEquals(4, charArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(16, booleanArray0.length);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) 'U';
      ArrayUtils.shift(objectArray0, (int) (byte) (-126));
      assertEquals(2, objectArray0.length);
      
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1464.53, (int) (byte) (-126), 1.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 64L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = new Boolean("java.lang.Object@6743778a");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = ';';
      charArray0[3] = 'h';
      charArray0[4] = 'l';
      charArray0[5] = '6';
      charArray0[6] = '2';
      charArray0[7] = ',';
      ArrayUtils.reverse(charArray0, Integer.MAX_VALUE, (-2252));
      assertArrayEquals(new char[] {'h', 'h', ';', 'h', 'l', '6', '2', ','}, charArray0);
      assertEquals(8, charArray0.length);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0, 1073741824, 2585);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 2585;
      ArrayUtils.shift(intArray0, 2585, 0, 0);
      assertArrayEquals(new int[] {0, 2585}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-2147483648L);
      longArray0[1] = 64L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-695.22F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = ';';
      charArray0[3] = 'z';
      charArray0[4] = 'l';
      charArray0[5] = '6';
      charArray0[6] = '2';
      charArray0[7] = '\u001E';
      ArrayUtils.reverse(charArray0, Integer.MAX_VALUE, (-2252));
      assertArrayEquals(new char[] {'h', 'h', ';', 'z', 'l', '6', '2', '\u001E'}, charArray0);
      assertEquals(8, charArray0.length);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '2';
      doubleArray0[1] = (double) 64L;
      doubleArray0[2] = (double) 'h';
      doubleArray0[3] = (double) 'l';
      doubleArray0[4] = (double) ';';
      ArrayUtils.swap(doubleArray0, 0, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {50.0, 64.0, 104.0, 108.0, 59.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short) (-324);
      longArray0[1] = 311L;
      longArray0[2] = 2723L;
      longArray0[3] = (long) (short) (-324);
      longArray0[4] = 311L;
      longArray0[5] = 2723L;
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf("ja2a.l\n*.Oooley ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("ja2a.l\n*.Oooley ");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      int[] intArray0 = new int[18];
      intArray0[0] = (int) (short) (-324);
      intArray0[1] = (int) (short) (-324);
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(18, intArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-324L), 311L, 2723L, (-324L), 311L, 2723L}, longArray0);
      assertFalse(boolean3 == boolean2);
      assertEquals(6, longArray0.length);
      assertFalse(boolean3);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-324);
      doubleArray0[1] = (double) (short) (-324);
      doubleArray0[2] = (double) (-324L);
      doubleArray0[3] = (double) 311L;
      doubleArray0[4] = (double) 2723L;
      doubleArray0[5] = (double) (-324);
      doubleArray0[6] = (double) 311L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-324));
      assertArrayEquals(new double[] {(-324.0), (-324.0), (-324.0), 311.0, 2723.0, (-324.0), 311.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, int0);
      
      Boolean boolean4 = Boolean.FALSE;
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) booleanArray0, 0, (Object) boolean4);
      assertNotNull(objectArray0);
      assertNotSame(booleanArray0, objectArray0);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (-1195);
      shortArray0[1] = (short)549;
      shortArray0[2] = (short) (-1195);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-1195);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Byte byte0 = new Byte((byte) (-60));
      assertNotNull(byte0);
      assertEquals((byte) (-60), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-119));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-119), (byte)byte1);
      
      ArrayUtils.reverse((char[]) null, (int) (short) (-1195), 2);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1195.0F);
      doubleArray0[1] = (double) (byte) (-60);
      doubleArray0[2] = (double) (byte) (-60);
      doubleArray0[3] = (double) (-1195.0F);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-1195.0), (-60.0), (-60.0), (-1195.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Short short0 = new Short((short)523);
      assertNotNull(short0);
      assertEquals((short)523, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Byte byte2 = Byte.valueOf((byte)34);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)34, (byte)byte2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte2, 1136);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)34;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)34}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)34}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayUtils.swap(objectArray0, (-1), (-1));
      assertEquals(2, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayUtils.swap(objectArray0, (-1), (-1));
      assertEquals(2, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[1] = 3207L;
      longArray0[2] = (long) (-503);
      longArray0[3] = (long) (-503);
      longArray0[4] = (long) (byte)56;
      longArray0[5] = (-28L);
      longArray0[6] = 3207L;
      int int0 = ArrayUtils.indexOf(longArray0, 771L, (-503));
      assertArrayEquals(new long[] {0L, 3207L, (-503L), (-503L), 56L, (-28L), 3207L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'Q');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)55;
      byteArray0[0] = (byte) (-1);
      ArrayUtils.shift(byteArray0, (int) (byte)0, (int) (byte) (-1), (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte) (-1), (byte)121, (byte)0, (byte)55, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      byteArray0[7] = (byte) (-103);
      shortArray0[1] = (short) (byte)0;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte)0;
      byteArray0[0] = (byte)121;
      shortArray0[8] = (short) (byte)55;
      ArrayUtils.shift(shortArray0, (-1062));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1), (short)0, (short)0, (short)0, (short)0, (short)55}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[23];
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(23, booleanArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)121;
      ArrayUtils.shift(floatArray0, (int) (byte) (-103), 10, 1942);
      assertArrayEquals(new float[] {121.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1942;
      intArray0[1] = (int) (byte)121;
      intArray0[2] = (-2375);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte)121;
      intArray0[5] = (int) (byte) (-1);
      ArrayUtils.reverse(intArray0, (-2379), 102);
      assertArrayEquals(new int[] {(-1), 121, (-1), (-2375), 121, 1942}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)55;
      byteArray0[0] = (byte) (-1);
      ArrayUtils.shift(byteArray0, (int) (byte)0, (int) (byte) (-1), (int) (byte)15);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)15, (byte)121, (byte)0, (byte)55, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      byteArray0[7] = (byte) (-103);
      shortArray0[1] = (short) (byte)0;
      shortArray0[3] = (short) (byte)15;
      shortArray0[4] = (short) (byte)0;
      byteArray0[0] = (byte)121;
      shortArray0[8] = (short)1119;
      ArrayUtils.shift(shortArray0, (-1062));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)15, (short)0, (short)0, (short)0, (short)0, (short)1119}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)121;
      ArrayUtils.shift(floatArray0, (int) (byte) (-103), 10, 1942);
      assertArrayEquals(new float[] {121.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1942;
      intArray0[1] = 18;
      intArray0[2] = (-2375);
      intArray0[3] = (int) (byte)15;
      intArray0[4] = (int) (byte)121;
      intArray0[5] = (int) (byte)15;
      ArrayUtils.reverse(intArray0, (-2379), 102);
      assertArrayEquals(new int[] {15, 121, 15, (-2375), 18, 1942}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte) (-1);
      ArrayUtils.shift(byteArray1, 82);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) 82;
      doubleArray0[2] = (double) (byte) (-103);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) 82;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (double) 82);
      assertArrayEquals(new double[] {(-1.0), 82.0, (-103.0), (-1.0), (-1.0), 82.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, int0);
      
      Long long0 = new Long(2147483647L);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2147483647L}, longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte) (-1);
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (byte) (-1);
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = 'a';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'a', (-4387));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'+', 'a'}, charArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'a';
      longArray0[1] = (long) '+';
      ArrayUtils.swap(longArray0, (int) (byte) (-1), (int) (byte) (-103), 976);
      assertArrayEquals(new long[] {97L, 43L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-375L);
      longArray0[1] = 1L;
      longArray0[2] = (-1L);
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-375L), 1L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-375L), 1L, (-1L), 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-104);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)91, (int) (byte) (-126));
      assertArrayEquals(new byte[] {(byte) (-126), (byte)19, (byte) (-104)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-126);
      floatArray0[1] = (float) (byte) (-104);
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (byte)19;
      floatArray0[4] = (float) 1L;
      floatArray0[5] = (float) (byte)91;
      floatArray0[6] = (float) (-375L);
      ArrayUtils.reverse(floatArray0, (int) (byte)19, (-1578));
      assertArrayEquals(new float[] {(-126.0F), (-104.0F), (-1.0F), 19.0F, 1.0F, 91.0F, (-375.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (-3977L), (int) (byte) (-126));
      assertNotNull(bitSet0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-375L), 1L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-375L), 1L, (-1L), 1L}, longArray1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, (int) (byte) (-104), 59);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 917, 917, 1384);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 917;
      doubleArray0[1] = 430.0;
      doubleArray0[2] = (double) 917;
      doubleArray0[3] = (double) 1384;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-11361);
      shortArray0[1] = (short) (-1594);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)19;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-11361), (short) (-1594), (short)1, (short)2, (short)19}, shortArray0);
      assertArrayEquals(new short[] {(short) (-11361), (short) (-1594), (short)1, (short)2, (short)19}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      Short[] shortArray2 = new Short[1];
      shortArray2[0] = (Short) (short)2;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertNotNull(shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertArrayEquals(new short[] {(short)2}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertEquals(1, shortArray3.length);
      assertEquals(1, shortArray2.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-2427L);
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) (short)19;
      longArray0[3] = (long) 917;
      longArray0[4] = (long) (short) (-11361);
      ArrayUtils.shift(longArray0, (int) (short)19, 8, 8);
      assertArrayEquals(new long[] {(-2427L), 1L, 19L, 917L, (-11361L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = '$';
      char[] charArray1 = ArrayUtils.add(charArray0, (int) (short)1, '\'');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\'', '$'}, charArray0);
      assertArrayEquals(new char[] {'\'', '\'', '$'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)127, (-2020));
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)16;
      longArray0[1] = (long) (byte)16;
      Long[] longArray1 = new Long[3];
      longArray1[0] = (Long) 16L;
      longArray1[1] = (Long) 16L;
      longArray1[2] = (Long) 16L;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray0));
      
      longArray3[0] = 281L;
      int int1 = ArrayUtils.lastIndexOf(longArray3, 281L);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {281L}, longArray3);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertEquals(1, longArray3.length);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 44L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1537.3754335295516, 72.0);
      assertArrayEquals(new double[] {0.0, 44.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 72.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 44.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 44.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray1, (-1.0), 44.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 44.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 44.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int2);
      
      Long long0 = new Long((-2020));
      assertNotNull(long0);
      assertEquals((-2020L), (long)long0);
      
      int int3 = ArrayUtils.indexOf(longArray0, 1077L, (-2240));
      assertNotSame(longArray0, longArray3);
      assertArrayEquals(new long[] {16L, 16L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray3));
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int3);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)127);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)127}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Byte byte0 = new Byte((byte)16);
      assertNotNull(byte0);
      assertEquals((byte)16, (byte)byte0);
      
      boolean boolean1 = ArrayUtils.isEquals(longArray1[2], long0);
      assertSame(longArray1, longArray2);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, longArray1.length);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) longArray1[0]);
      assertNotNull(floatArray1);
      assertSame(longArray1, longArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {16.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, longArray1.length);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) 16L;
      floatArray2[1] = (float) (long)longArray1[1];
      floatArray2[2] = (float) (long)longArray1[0];
      floatArray2[3] = (float) 281L;
      floatArray2[4] = (float) 0;
      floatArray2[5] = (float) 16L;
      floatArray2[6] = 3526.076F;
      float[] floatArray3 = ArrayUtils.removeElements(floatArray2, floatArray0);
      assertNotNull(floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      assertArrayEquals(new float[] {16.0F, 16.0F, 16.0F, 281.0F, 0.0F, 16.0F, 3526.076F}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {16.0F, 16.0F, 16.0F, 281.0F, 0.0F, 16.0F, 3526.076F}, floatArray2, 0.01F);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(7, floatArray3.length);
      assertEquals(0, floatArray0.length);
      assertEquals(7, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-242L);
      longArray0[2] = 0L;
      longArray0[3] = (-1829L);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0L;
      longArray0[2] = 0L;
      Object object0 = ArrayUtils.get(objectArray0, 52);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = null;
      ArrayUtils.shift(objectArray0, (-1166));
      assertEquals(3, objectArray0.length);
      
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, (-242L), 0L, (-1829L), 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(12, longArray1.length);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, 'j', 52);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray1, 65, (-1), (-1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, (-242L), 0L, (-1829L), 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(12, longArray1.length);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-30309);
      shortArray0[2] = (short)988;
      shortArray0[3] = (short)8;
      shortArray0[5] = (short) (-177);
      Float float0 = new Float((-1583.529992872));
      assertNotNull(float0);
      assertEquals((-1583.53F), (float)float0, 0.01F);
      
      Float float1 = new Float((-278.8163574707489));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-278.81635F), (float)float1, 0.01F);
      
      Float float2 = new Float((double) (short) (-1));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.swap((Object[]) floatArray0, 1, 1186, (-2683));
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(floatArray1, 0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) floatArray0, (Object[]) floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.swap((Object[]) floatArray0, (int) (short) (-30309), (int) (short) (-1), (int) (short)988);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-17);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short)988, (int) (short)0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-108), (byte)98, (byte) (-115), (byte) (-17)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 90);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long[] longArray0 = new long[1];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '=';
      floatArray0[1] = (float) '=';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2832.0F));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {61.0F, 61.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(2, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-2341));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt(876);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) 61.0F;
      objectArray0[2] = (Object) mockRandom0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 61.0F;
      objectArray0[5] = (Object) 61.0F;
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      objectArray0[6] = null;
      objectArray0[7] = (Object) 61.0F;
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom1);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(8, objectArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) 876);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2861), 50, (-2861));
      short[] shortArray0 = new short[5];
      shortArray0[4] = (short)13;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)64);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)13}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(5, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)16;
      byteArray0[6] = (byte) (-120);
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-120), (int) (byte)16);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte) (-45), (byte)16, (byte) (-120), (byte)16, (byte)0, (byte)0, (byte) (-120)}, byteArray0);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(7, byteArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '&');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Short short0 = new Short((short) (-681));
      assertNotNull(short0);
      assertEquals((short) (-681), (short)short0);
      
      String string0 = ArrayUtils.toString((Object) short0, "");
      assertNotNull(string0);
      assertEquals("-681", string0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      doubleArray0[6] = (-59.7254815);
      int int0 = ArrayUtils.indexOf(doubleArray0, 34.0, 5, 0.0);
      assertArrayEquals(new double[] {0.0, 5.0, 0.0, 5.0, 5.0, 0.0, (-59.7254815)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-99);
      ArrayUtils.shift(byteArray0, (-1), 2, 82);
      assertArrayEquals(new byte[] {(byte)2, (byte)37, (byte)3, (byte)89, (byte) (-1), (byte) (-58), (byte) (-99)}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)2559;
      floatArray0[1] = (float) (short)2559;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {2559.0F, 2559.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)2559;
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte) (-99);
      ArrayUtils.shift(byteArray0, (int) (byte) (-58), 65536, 657);
      assertEquals(18, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Short short0 = new Short((short) (-681));
      assertNotNull(short0);
      assertEquals((short) (-681), (short)short0);
      
      String string0 = ArrayUtils.toString((Object) short0, "");
      assertNotNull(string0);
      assertEquals("-681", string0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = (-59.7254815);
      int int0 = ArrayUtils.indexOf(doubleArray0, 34.0, 5, 0.0);
      assertArrayEquals(new double[] {0.0, 5.0, 1.5, 5.0, 5.0, 5.0, (-59.7254815)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-99);
      ArrayUtils.shift(byteArray0, (-1), 2, 82);
      assertArrayEquals(new byte[] {(byte)2, (byte)37, (byte)3, (byte)89, (byte) (-1), (byte) (-58), (byte) (-99)}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Double double0 = new Double((short) (-324));
      assertNotNull(double0);
      assertEquals((-324.0), (double)double0, 0.01);
      
      Double double1 = new Double((short) (-324));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-324.0), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double1;
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0, comparator0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 217.187450496;
      doubleArray0[1] = (-3349.7182520336974);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Byte byte0 = new Byte((byte) (-60));
      assertNotNull(byte0);
      assertEquals((byte) (-60), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-60));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-60), (byte)byte1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((byte) (-60));
      assertNotNull(integer0);
      assertEquals((-60), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2003));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2003), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2369);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2369, (int)integer2);
      
      integerArray0[2] = integer2;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, (int) integerArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -60, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)321;
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(112.40675690759603);
      assertNotNull(float0);
      assertEquals(112.40675F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (short)0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {112.40675F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Character[] characterArray0 = new Character[6];
      char char0 = 'B';
      Character character0 = Character.valueOf('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertEquals('B', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertEquals('B', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('y');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertEquals('y', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character1);
      assertNotNull(character4);
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character3));
      assertTrue(character1.equals((Object)character0));
      assertEquals('B', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf((char) character2);
      assertNotNull(character5);
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character4));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character3));
      assertEquals('B', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('g');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character1));
      assertEquals('g', (char)character6);
      
      Character[] characterArray1 = ArrayUtils.removeAllOccurences(characterArray0, character6);
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character1));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(6, characterArray1.length);
      assertEquals(6, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'a';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'e', 0);
      assertArrayEquals(new char[] {'e', 'a'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'e';
      longArray0[3] = (long) 'e';
      longArray0[4] = (long) 0;
      Integer integer0 = Integer.getInteger("{#yAV%(;", 0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-1648));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1648), (int)integer1);
      
      Integer integer2 = new Integer((-919));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals((-919), (int)integer2);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-13), (byte)1, (byte) (-13), (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-13), (byte)1}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray1.length);
      assertEquals(2, byteArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, '|', (-919));
      assertArrayEquals(new char[] {'e', 'a'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Tb)";
      stringArray0[1] = "{#yAV%(;";
      stringArray0[2] = "{#yAV%(;";
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, " vs ");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-503), (-503));
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'E', (-503));
      assertEquals((-1), int0);
      
      Integer integer0 = Integer.getInteger("qv'$m\"QJ4Anyk(u_pX", 0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-503));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-503), (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(0, (int)integer2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-919);
      intArray0[2] = 98;
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-919), (-1));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-919), 0, 98, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-919);
      doubleArray0[1] = 0.7;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 564.84811929138, 1440.32533);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-919.0), 0.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertEquals("{1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray1, (-2107715431), 111);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-919), 0, 98, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Character character0 = new Character('.');
      assertNotNull(character0);
      assertEquals('.', (char)character0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "qv'$m\"QJ4Anyk(u_pX";
      stringArray0[1] = "";
      stringArray0[2] = "qv'$m\"QJ4Anyk(u_pX";
      stringArray0[3] = "qv'$m\"QJ4Anyk(u_pX";
      stringArray0[4] = "!86\"_b8LGc[*x=*O";
      stringArray0[5] = "qv'$m\"QJ4Anyk(u_pX";
      stringArray0[6] = "qv'$m\"QJ4Anyk(u_pX";
      stringArray0[7] = "qv'$m\"QJ4Anyk(u_pX";
      String string0 = ArrayUtils.get(stringArray0, 9, "!86\"_b8LGc[*x=*O");
      assertNotNull(string0);
      assertEquals(8, stringArray0.length);
      assertEquals("!86\"_b8LGc[*x=*O", string0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) character0, (Object) "!86\"_b8LGc[*x=*O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 906);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 906);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2478);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(2478, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(2146849667);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(2146849667, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(8, integerArray0.length);
      assertEquals(2146849667, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf((int) integerArray0[0]);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertEquals(8, integerArray0.length);
      assertEquals(2, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-672));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals((-672), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-109));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertEquals((-109), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1499);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertEquals(1499, (int)integer7);
      
      integerArray0[7] = integer7;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {2, 2478, 2146849667, 2146849667, 2, (-672), (-109), 1499}, intArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2458;
      shortArray0[1] = (short)1534;
      shortArray0[2] = (short)45;
      shortArray0[3] = (short) (-1016);
      shortArray0[4] = (short)64;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)2458;
      shortArray0[7] = (short)2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-109), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -109, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 906);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 100.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2478);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2478, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(2146849667);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(2146849667, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(8, integerArray0.length);
      assertEquals(2146849667, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf((int) integerArray0[0]);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertEquals(8, integerArray0.length);
      assertEquals(2, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-672));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertEquals((-672), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-109));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertEquals((-109), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1499);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertEquals(1499, (int)integer7);
      
      integerArray0[7] = integer7;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {2, 2478, 2146849667, 2146849667, 2, (-672), (-109), 1499}, intArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2458;
      shortArray0[1] = (short)1534;
      shortArray0[2] = (short)45;
      shortArray0[3] = (short) (-1016);
      shortArray0[4] = (short)64;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-450);
      shortArray0[7] = (short)2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(36, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-450);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)1534, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1534, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(737);
      assertNotNull(integer0);
      assertEquals(737, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(9, integerArray0.length);
      assertEquals(737, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(737);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(737, (int)integer2);
      
      integerArray0[2] = integer2;
      int int0 = 18;
      Integer integer3 = new Integer(18);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertEquals(18, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(18, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertEquals(2, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(737);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer1));
      assertEquals(737, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[0]);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer2));
      assertEquals(9, integerArray0.length);
      assertEquals(737, (int)integer7);
      
      Integer integer8 = Integer.getInteger("&KEb3~@cMt", integer7);
      assertNotNull(integer8);
      assertFalse(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer6));
      assertEquals(9, integerArray0.length);
      assertEquals(737, (int)integer8);
      
      integerArray0[7] = integer8;
      Integer integer9 = new Integer(Integer.MIN_VALUE);
      assertNotNull(integer9);
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer5));
      assertEquals(Integer.MIN_VALUE, (int)integer9);
      
      integerArray0[8] = integer9;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-952));
      assertEquals(9, integerArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)56);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement((byte[]) null, (byte)89);
      assertNull(byteArray1);
      
      Long long0 = new Long(1072L);
      assertNotNull(long0);
      assertEquals(1072L, (long)long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[6];
      short[] shortArray0 = new short[19];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray1.length);
      
      ArrayUtils.shift(charArray0, (int) (short)0, (int) (short)0, 17);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2989.60891409), 844.223817171278);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      int[] intArray0 = new int[9];
      intArray0[1] = (int) (short)0;
      intArray0[3] = (int) (short) (-471);
      intArray0[4] = (int) (short)0;
      intArray0[5] = 17;
      intArray0[6] = (-1710);
      intArray0[7] = 17;
      intArray0[8] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (-2034.59908);
      doubleArray0[2] = (-2075.8);
      doubleArray0[3] = (-2034.59908);
      doubleArray0[3] = (-2034.59908);
      doubleArray0[5] = (-2034.59908);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(21, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      Character character0 = new Character('[');
      assertNotNull(character0);
      assertEquals('[', (char)character0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 52);
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[6] = null;
      objectArray0[7] = (Object) character0;
      objectArray0[8] = (Object) false;
      MutableInt mutableInt0 = new MutableInt(1373);
      assertNotNull(mutableInt0);
      assertEquals(1373, (int)mutableInt0.toInteger());
      assertEquals(1373, (int)mutableInt0.getValue());
      assertEquals(1373.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1373.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)93, mutableInt0.byteValue());
      assertEquals((short)1373, mutableInt0.shortValue());
      assertEquals(1373, mutableInt0.intValue());
      assertEquals("1373", mutableInt0.toString());
      assertEquals(1373L, mutableInt0.longValue());
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) mutableInt0);
      assertEquals(1373, (int)mutableInt0.toInteger());
      assertEquals(1373, (int)mutableInt0.getValue());
      assertEquals(1373.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1373.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)93, mutableInt0.byteValue());
      assertEquals((short)1373, mutableInt0.shortValue());
      assertEquals(1373, mutableInt0.intValue());
      assertEquals("1373", mutableInt0.toString());
      assertEquals(1373L, mutableInt0.longValue());
      assertEquals(9, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 52;
      floatArray0[3] = (float) 1373;
      floatArray0[4] = (float) '[';
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 52.0F, 1373.0F, 91.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.0F, 1373.0F, 91.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, (-2799), (-283));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2799, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1307), (-1307));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-213);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)11158;
      shortArray0[4] = (short)57;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-213), (short)1, (short)11158, (short)57}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-213), (short)1, (short)11158, (short)57}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-213);
      shortArray0[4] = (short)57;
      longArray0[3] = (long) (short)1;
      longArray0[4] = (long) (short)57;
      longArray0[5] = (long) (short)11158;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray1);
      assertNotNull(longArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new long[] {(-213L), 0L, 1L, 57L, 11158L}, longArray1);
      assertArrayEquals(new long[] {0L, (-213L), 0L, 1L, 57L, 11158L}, longArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, intArray1.length);
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isEquals(11158L, (short)57);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-213);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (short)11158;
      ArrayUtils.shift(doubleArray0, 2550, (int) (short) (-213), 2550);
      assertArrayEquals(new double[] {(-213.0), 1.0, 11158.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 2550);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 917, 917, 1384);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 917;
      doubleArray0[3] = (double) 1384;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 430.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {917.0, 0.0, 0.0, 1384.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {917.0, 0.0, 0.0, 1384.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-11361);
      shortArray0[1] = (short) (-1594);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)19;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-11361), (short) (-1594), (short)1, (short)2, (short)19}, shortArray0);
      assertArrayEquals(new short[] {(short) (-11361), (short) (-1594), (short)1, (short)2, (short)19}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      Short[] shortArray2 = new Short[1];
      shortArray2[0] = (Short) (short)2;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertNotNull(shortArray3);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertEquals(1, shortArray2.length);
      assertEquals(1, shortArray3.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)16;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {16L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (byte)127;
      doubleArray0[3] = 100.0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = 100.0;
      doubleArray0[7] = (double) (-2020);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2034.59908), 100.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 127.0, 0.0, 100.0, 0.0, 100.0, 0.0, (-2020.0)}, doubleArray0, 0.01);
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{7}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(8, doubleArray0.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)19;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)127, (-2020));
      assertArrayEquals(new byte[] {(byte)16, (byte)19}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)16;
      longArray0[1] = (long) (byte)16;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {16L, 16L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (byte)127;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 100.0;
      doubleArray0[4] = (double) 16L;
      doubleArray0[5] = 1475.5710385391596;
      doubleArray0[6] = (double) (byte)16;
      doubleArray0[7] = (double) (-2020);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2034.59908), 100.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 127.0, (-1.0), 100.0, 16.0, 1475.5710385391596, 16.0, (-2020.0)}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertEquals("{7}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, doubleArray0.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char char0 = 'e';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'e';
      doubleArray0[1] = (double) 'e';
      doubleArray0[2] = (double) 'e';
      Object[] objectArray0 = new Object[0];
      char char1 = '[';
      Character character0 = new Character('[');
      assertNotNull(character0);
      assertTrue(character0.equals((Object)char1));
      assertFalse(character0.equals((Object)char0));
      assertEquals('[', (char)character0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) character0);
      assertTrue(character0.equals((Object)char1));
      assertFalse(character0.equals((Object)char0));
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) '[';
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 91.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 91.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'e';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 101, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1006.16904015944;
      doubleArray0[1] = (double) 160;
      doubleArray0[2] = (double) (-364);
      doubleArray0[3] = (double) (-807);
      doubleArray0[4] = (-842.8);
      ArrayUtils.shift(doubleArray0, (-807), (-807), 160);
      assertArrayEquals(new double[] {1006.16904015944, 160.0, (-364.0), (-807.0), (-842.8)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1535;
      shortArray0[1] = (short) (-917);
      shortArray0[2] = (short) (-59);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-1225);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short) (-917), (short) (-59), (short)2, (short) (-1225), (short)1535}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (-1195);
      shortArray0[1] = (short)549;
      shortArray0[2] = (short) (-1195);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(18, shortArray0.length);
      assertEquals(18, shortArray1.length);
      
      ArrayUtils.shift((byte[]) null, (-2844));
      char[] charArray0 = new char[18];
      charArray0[0] = '8';
      charArray0[1] = '4';
      charArray0[2] = 'T';
      charArray0[3] = 'v';
      charArray0[4] = '#';
      charArray0[5] = '\"';
      charArray0[6] = '!';
      charArray0[7] = 'f';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(18, charArray0.length);
      assertEquals(17, charArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, 'v', (-251));
      assertNotNull(bitSet0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(18, charArray0.length);
      assertEquals(17, charArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'T';
      intArray0[1] = 37;
      intArray0[2] = (int) '4';
      intArray0[3] = (int) '!';
      intArray0[4] = (int) '\"';
      intArray0[5] = (int) (short) (-1195);
      intArray0[6] = (int) '!';
      intArray0[7] = (int) (short)549;
      ArrayUtils.swap(intArray0, (int) (short) (-1195), (int) (short) (-1195), 2);
      assertArrayEquals(new int[] {84, 37, 52, 33, 34, (-1195), 33, 549}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (-1195);
      shortArray0[1] = (short) (-1195);
      shortArray0[2] = (short) (-1195);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(18, shortArray0.length);
      assertEquals(18, shortArray1.length);
      
      ArrayUtils.shift((byte[]) null, (-2844));
      char[] charArray0 = new char[18];
      charArray0[0] = '8';
      charArray0[1] = '4';
      charArray0[2] = 'T';
      charArray0[3] = 'v';
      charArray0[4] = '#';
      charArray0[5] = '\"';
      charArray0[6] = '!';
      charArray0[7] = 'f';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(18, charArray0.length);
      assertEquals(17, charArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'T';
      intArray0[1] = 37;
      intArray0[2] = (int) '4';
      intArray0[3] = (int) '!';
      intArray0[5] = (int) (short) (-1195);
      intArray0[6] = (int) '!';
      intArray0[7] = (int) (short) (-1195);
      ArrayUtils.swap(intArray0, (int) (short) (-1195), (int) (short) (-1195), 2);
      assertArrayEquals(new int[] {84, 37, 52, 33, 0, (-1195), 33, (-1195)}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray1, 2, 0, 795);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Short[] shortArray2 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray2.length);
      
      try { 
        Short.valueOf("java.lang.Boolean", 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'a';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'e', 0);
      assertArrayEquals(new char[] {'e', 'a'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[10];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'e';
      longArray0[3] = (long) 'e';
      longArray0[4] = (long) 0;
      Integer integer0 = Integer.getInteger("{#yAV%(;", 0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-1648));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-1648), (int)integer1);
      
      Integer integer2 = new Integer((-919));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-919), (int)integer2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (int) 'e';
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 98);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 101}, intArray1);
      assertArrayEquals(new int[] {0, 101}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-919);
      doubleArray0[1] = (double) 'e';
      doubleArray0[2] = 0.7;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 98;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {101.0, 0.7, 0.0, 98.0, (-919.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 101L;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0L;
      Object[] objectArray1 = ArrayUtils.remove(objectArray0, 2);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(3, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 101}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)16;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)16;
      shortArray0[7] = (short) (byte)16;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)16, (short)0, (short)0, (short)0, (short)16, (short)16}, shortArray0);
      assertArrayEquals(new short[] {(short)16, (short)16, (short)16}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (short)0, (int) (short)0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-28), 26);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)0;
      ArrayUtils.swap(byteArray0, (-123), (-2217), 966);
      assertArrayEquals(new byte[] {(byte)0, (byte)16, (byte)16, (byte)16, (byte)16, (byte)16, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      ArrayUtils.swap(intArray0, 1405, 966, 0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 217.187450496;
      doubleArray0[1] = (-3340.4304546973785);
      doubleArray0[2] = (-3340.4304546973785);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {217.187450496, (-3340.4304546973785), (-3340.4304546973785)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1536;
      floatArray0[2] = (float) 'R';
      floatArray0[3] = (float) 'R';
      floatArray0[7] = (float) 'R';
      ArrayUtils.shift(floatArray0, 1536);
      assertArrayEquals(new float[] {82.0F, 0.0F, 0.0F, 0.0F, 82.0F, 0.0F, 1536.0F, 0.0F, 82.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 'R';
      longArray0[3] = 920L;
      longArray0[4] = (long) 1536;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 82L, 0L, 920L, 1536L}, longArray0);
      assertArrayEquals(new long[] {0L, 82L, 0L, 920L, 1536L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)12398;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1764;
      shortArray0[4] = (short)2061;
      shortArray0[6] = (short)2681;
      ArrayUtils.shift(shortArray0, (int) (short)1, (int) (short)2061, (-3259));
      assertArrayEquals(new short[] {(short) (-1), (short)1, (short)1764, (short)2061, (short)0, (short)2681, (short)12398}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)12398);
      assertArrayEquals(new short[] {(short) (-1), (short)1, (short)1764, (short)2061, (short)0, (short)2681, (short)12398}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Character[] characterArray0 = new Character[7];
      char char0 = 'v';
      Character character0 = Character.valueOf('v');
      assertNotNull(character0);
      assertEquals('v', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('e');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('e', (char)character1);
      
      characterArray0[1] = character1;
      char char1 = '$';
      Character character2 = Character.valueOf('$');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('$', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character1);
      assertNotNull(character3);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)char1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char1));
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertEquals('e', (char)character3);
      
      characterArray0[3] = character3;
      char char2 = 'H';
      Character character4 = new Character('H');
      assertNotNull(character4);
      assertTrue(character4.equals((Object)char2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)char1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertEquals('H', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('\"');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)char2));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char1));
      assertFalse(character5.equals((Object)character1));
      assertEquals('\"', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('H');
      assertNotNull(character6);
      assertTrue(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char1));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character5));
      assertEquals('H', (char)character6);
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'v', 'e', '$', 'e', 'H', '\"', 'H'}, charArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (char)character4;
      intArray0[1] = (int) char1;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {72, 36}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) char2;
      floatArray0[1] = (float) 72;
      floatArray0[2] = (float) (char)character1;
      floatArray0[3] = (float) char1;
      floatArray0[4] = (float) char2;
      floatArray0[5] = (float) (char)character3;
      floatArray0[6] = (float) char0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 72.0F);
      assertArrayEquals(new float[] {72.0F, 72.0F, 101.0F, 36.0F, 72.0F, 101.0F, 118.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[3];
      int int0 = 1437;
      intArray0[0] = 1437;
      intArray0[1] = 2766;
      int int1 = 0;
      intArray0[2] = 0;
      int int2 = 11;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Long[] longArray0 = new Long[16];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      longArray0[3] = (Long) long0;
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift((Object[]) longArray0, 3453);
      assertEquals(16, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean1);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(529.4569939862782);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(529.457F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(longArray0[2], float1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      longArray0[0] = 0L;
      objectArray0[1] = (Object) 0L;
      Byte byte0 = new Byte((byte) (-99));
      assertNotNull(byte0);
      assertEquals((byte) (-99), (byte)byte0);
      
      int int0 = ArrayUtils.getLength(objectArray0[0]);
      assertEquals(2, objectArray0.length);
      assertEquals(0, int0);
      
      String string0 = ArrayUtils.toString(objectArray0[1], "java.lang.String");
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      int int0 = ArrayUtils.indexOf(intArray0, 15, (int) (short)0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-64);
      int int1 = ArrayUtils.lastIndexOf(intArray0, 15, (int) (byte)0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int1);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)0, object0);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-64), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = ",";
      String[] stringArray1 = ArrayUtils.add(stringArray0, ",");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertEquals(2, stringArray0.length);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(2147483647L);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short)1);
      assertNotNull(bitSet0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (double) 2147483647L;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 15;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (-231);
      doubleArray0[8] = (double) (byte)0;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-231.0), 0.0, 15.0, 0.0, 0.0, 2.147483647E9, 15.0, 1.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'E';
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 'E';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 25.65F);
      assertArrayEquals(new float[] {69.0F, 0.0F, 69.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 25.65F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1));
      assertArrayEquals(new double[] {0.0, 25.649999618530273}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      booleanArray0[1] = boolean3;
      Boolean boolean4 = new Boolean(false);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      
      booleanArray0[2] = (Boolean) boolean1;
      Boolean boolean5 = Boolean.valueOf(" 'A=IceMGu");
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)127, (int) (byte)127);
      assertArrayEquals(new byte[] {(byte)127, (byte)127, (byte)127, (byte)127}, byteArray0);
      assertTrue(int1 == int0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int1);
      
      long[] longArray0 = new long[0];
      boolean boolean6 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertEquals(0, longArray0.length);
      assertTrue(boolean6);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 0.0F, 1475.5710385391596);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 25.649999618530273}, doubleArray0, 0.01);
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)127);
      assertNotNull(byte0);
      assertEquals((byte)127, (byte)byte0);
      
      Byte byte1 = new Byte((byte)127);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)127, (byte)byte1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) byte0, (Object) byte1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 2513, 2513, (-1500));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Short short0 = new Short((short)474);
      assertNotNull(short0);
      assertEquals((short)474, (short)short0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(short0, integer0);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) short0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '6';
      floatArray0[1] = (float) '6';
      floatArray0[2] = (float) '#';
      floatArray0[3] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {54.0F, 54.0F, 35.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {54.0F, 54.0F, 35.0F, (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = ';';
      charArray0[2] = '~';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ';');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'6', '~'}, charArray1);
      assertArrayEquals(new char[] {'6', ';', '~'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      assertEquals(3, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {54.0F, 35.0F, (-1.0F), 54.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) null, (Object) integer0);
      assertTrue(boolean1 == boolean0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-59.7254815);
      doubleArray0[1] = (-2.147483648E9);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3353.0), 2146213221);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-59.7254815), (-2.147483648E9)}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(2, doubleArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-59.7254815);
      objectArray0[1] = (Object) (-59.7254815);
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) (-59.7254815);
      objectArray0[5] = (Object) bitSet0;
      objectArray0[6] = (Object) (-59.7254815);
      objectArray0[7] = (Object) (-59.7254815);
      objectArray0[8] = (Object) (-2.147483648E9);
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(9, objectArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2146213221;
      intArray0[1] = 2146213221;
      intArray0[2] = 2263;
      intArray0[3] = 2146213221;
      intArray0[4] = 6;
      intArray0[5] = 2146213221;
      intArray0[6] = 2146213221;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2146213221, 2146213221, 2263, 2146213221, 6, 2146213221, 2146213221}, intArray1);
      assertArrayEquals(new int[] {2146213221, 2146213221, 2263, 2146213221, 6, 2146213221, 2146213221}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 1, 2253);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-30309);
      shortArray0[2] = (short)988;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)42;
      shortArray0[5] = (short) (-177);
      Float float0 = new Float((-1583.529992872));
      assertNotNull(float0);
      assertEquals((-1583.53F), (float)float0, 0.01F);
      
      Float float1 = new Float((-278.8163574707489));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-278.81635F), (float)float1, 0.01F);
      
      Float float2 = new Float((double) (short) (-1));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.swap((Object[]) floatArray0, 1, 1186, (-2683));
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(floatArray1, 0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) floatArray0, (Object[]) floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.swap((Object[]) floatArray0, (int) (short) (-30309), (int) (short) (-1), (int) (short)988);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-17);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short)988, (-1740));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)1, (byte) (-108), (byte)98, (byte) (-115), (byte) (-17)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'e';
      doubleArray0[1] = (double) 'e';
      doubleArray0[2] = (double) 'e';
      Object[] objectArray0 = new Object[0];
      Character character0 = new Character('e');
      assertNotNull(character0);
      assertEquals('e', (char)character0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) character0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) character0, 2);
      assertTrue(int1 == int0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1084);
      shortArray0[1] = (short)99;
      shortArray0[2] = (short)392;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)22552;
      shortArray0[5] = (short)710;
      shortArray0[6] = (short)516;
      shortArray0[7] = (short)2034;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1084), (short)99, (short)392, (short)0, (short)22552, (short)710, (short)516, (short)2034}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray0.length);
      
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) (short)516, (int) (short)22552);
      assertArrayEquals(new double[] {101.0, 101.0, 101.0}, doubleArray0, 0.01);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1168.88));
      assertNotNull(double0);
      assertEquals((-1168.88), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = Double.valueOf((-164.422618501465));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-164.422618501465), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-35.48531102953));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-35.48531102953), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '@';
      charArray0[2] = '!';
      charArray0[3] = 'y';
      charArray0[4] = '!';
      charArray0[5] = 'O';
      charArray0[6] = '!';
      charArray0[7] = 'R';
      charArray0[8] = '\'';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'O');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'-', '@', '!', 'y', '!', 'O', '!', 'R', '\''}, charArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, charArray0.length);
      
      double[] doubleArray2 = new double[0];
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray2, 3.0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3.0}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(0, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1, "u|-w[E^oxFyEj#|");
      assertNotNull(stringArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, stringArray0.length);
      assertEquals(3, doubleArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2115;
      shortArray0[1] = (short) (-48);
      shortArray0[2] = (short) (-14298);
      shortArray0[3] = (short) (-549);
      shortArray0[4] = (short) (-125);
      shortArray0[5] = (short)3992;
      shortArray0[6] = (short)1016;
      shortArray0[7] = (short)4;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2115, (short) (-48), (short) (-14298), (short) (-549), (short) (-125), (short)3992, (short)1016, (short)4}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 1, 2253);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-30309);
      shortArray0[2] = (short)988;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)42;
      shortArray0[5] = (short) (-177);
      Float float0 = new Float((-1583.529992872));
      assertNotNull(float0);
      assertEquals((-1583.53F), (float)float0, 0.01F);
      
      Float float1 = new Float((-278.8163574707489));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-278.81635F), (float)float1, 0.01F);
      
      Float float2 = new Float((double) (short) (-1));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.swap((Object[]) floatArray0, 1, 1186, (-2683));
      assertEquals(0, floatArray0.length);
      
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, (float) (short)42);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 2509, 2509, (-1500));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Short short0 = new Short((short)474);
      assertNotNull(short0);
      assertEquals((short)474, (short)short0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(short0, integer0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = '6';
      charArray0[2] = ';';
      charArray0[3] = '6';
      charArray0[4] = '#';
      charArray0[5] = '|';
      charArray0[6] = 'G';
      charArray0[7] = '6';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'', '6', ';', '6', '#', '|', 'G', '6'}, charArray0);
      assertArrayEquals(new char[] {'6', ';', '6', '#', '|', 'G', '6'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) short0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '6';
      ArrayUtils.shift(floatArray0, 0);
      assertArrayEquals(new float[] {54.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 217.187450496;
      doubleArray0[1] = (-3340.4304546973785);
      doubleArray0[2] = (-3340.4304546973785);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {217.187450496, (-3340.4304546973785), (-3340.4304546973785)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1536;
      floatArray0[2] = (float) 'R';
      floatArray0[3] = (float) 'R';
      floatArray0[7] = (float) 'R';
      ArrayUtils.shift(floatArray0, 1536);
      assertArrayEquals(new float[] {82.0F, 0.0F, 0.0F, 0.0F, 82.0F, 0.0F, 1536.0F, 0.0F, 82.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 'R';
      longArray0[3] = 920L;
      longArray0[4] = (long) 1536;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 82L, 0L, 920L, 1536L}, longArray0);
      assertArrayEquals(new long[] {0L, 82L, 0L, 920L, 1536L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)12398;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1764;
      shortArray0[4] = (short)2061;
      shortArray0[6] = (short)2681;
      ArrayUtils.shift(shortArray0, (int) (short)1, (int) (short)2061, (-3259));
      assertArrayEquals(new short[] {(short) (-1), (short)1, (short)1764, (short)2061, (short)0, (short)2681, (short)12398}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      int int0 = ArrayUtils.indexOf(charArray0, 'R');
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', 'R', 'R'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1307), (-1307));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-213);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)11167;
      shortArray0[4] = (short)57;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-213), (short)1, (short)11167, (short)57, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-213), (short)1, (short)11167, (short)57, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[2] = (long) (short)57;
      longArray0[3] = (long) (short)57;
      longArray0[0] = (long) (short)57;
      longArray0[5] = (long) (short)11167;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new long[] {0L, 57L, 57L, 0L, 11167L}, longArray1);
      assertArrayEquals(new long[] {57L, 0L, 57L, 57L, 0L, 11167L}, longArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
      assertEquals(1, intArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1;
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-213), (short)1, (short)11167, (short)57, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-213), (short)1, (short)11167, (short)57, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(boolean0);
      
      Short[] shortArray2 = new Short[0];
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertNotNull(shortArray3);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertArrayEquals(new short[] {}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty((Object[]) shortArray2);
      assertNotNull(objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, shortArray2.length);
      assertEquals(0, objectArray1.length);
      
      ArrayUtils.reverse((Object[]) stringArray0);
      assertEquals(188, stringArray0.length);
      
      ArrayUtils.shift(intArray1, 207);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-104);
      ArrayUtils.swap(byteArray0, (int) (byte)0, (int) (short)0, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-24), (byte) (-98), (byte)46, (byte) (-104)}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[18];
      intArray0[0] = 546;
      intArray0[1] = 2024;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(18, intArray0.length);
      assertEquals(36, intArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 546;
      longArray0[1] = (long) 546;
      longArray0[2] = (long) 2024;
      longArray0[3] = (long) 2024;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 546L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {546L, 546L, 2024L, 2024L}, longArray0);
      assertArrayEquals(new long[] {2024L, 2024L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(2, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 2024);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {546L, 546L, 2024L, 2024L}, longArray0);
      assertArrayEquals(new long[] {2024L, 2024L}, longArray1);
      assertArrayEquals(new long[] {2024L, 2024L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences((float[]) null, (float) 2024);
      assertNull(floatArray2);
      
      Float[] floatArray3 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray3.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2024L;
      doubleArray0[1] = (double) 2024L;
      doubleArray0[2] = (double) 2024L;
      doubleArray0[3] = (double) 546;
      doubleArray0[4] = (double) 546L;
      doubleArray0[5] = (double) 546;
      doubleArray0[6] = (double) 2024;
      doubleArray0[7] = 1.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 303.4362551871067);
      assertArrayEquals(new double[] {2024.0, 2024.0, 2024.0, 546.0, 546.0, 546.0, 2024.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 546;
      intArray2[1] = (-1);
      intArray2[2] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray2, 120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = (-864.5F);
      floatArray0[0] = (-864.5F);
      floatArray0[1] = (-864.5F);
      floatArray0[2] = (-800.79474F);
      floatArray0[3] = (-2090.829F);
      floatArray0[4] = (-4044.3271F);
      floatArray0[6] = (-3424.8635F);
      floatArray0[7] = 10.0F;
      floatArray0[8] = 1348.0F;
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-864.5F), (-864.5F), (-800.79474F), (-2090.829F), (-4044.3271F), 0.0F, (-3424.8635F), 10.0F, 1348.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      try { 
        Double.valueOf("java.lang.Long");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)127, (-2020));
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)16;
      longArray0[1] = (long) (byte)16;
      Long[] longArray1 = new Long[3];
      longArray1[0] = (Long) 16L;
      longArray1[1] = (Long) 16L;
      longArray1[2] = (Long) 16L;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray0));
      
      longArray3[0] = 281L;
      int int1 = ArrayUtils.lastIndexOf(longArray3, 281L);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {281L}, longArray3);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertEquals(1, longArray3.length);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 44L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1537.3754335295516, 72.0);
      assertArrayEquals(new double[] {0.0, 44.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 72.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 44.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 44.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray1, (-1.0), 44.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 44.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 44.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int2);
      
      Long long0 = new Long((-2020));
      assertNotNull(long0);
      assertEquals((-2020L), (long)long0);
      
      int int3 = ArrayUtils.indexOf(longArray0, 1077L, (-2240));
      assertNotSame(longArray0, longArray3);
      assertArrayEquals(new long[] {16L, 16L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray3));
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int3);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)127);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)127}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Byte byte0 = new Byte((byte)16);
      assertNotNull(byte0);
      assertEquals((byte)16, (byte)byte0);
      
      boolean boolean1 = ArrayUtils.isEquals(longArray1[2], long0);
      assertSame(longArray1, longArray2);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, longArray1.length);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) longArray1[0]);
      assertNotNull(floatArray1);
      assertSame(longArray1, longArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {16.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, longArray1.length);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertNotNull(floatArray2);
      assertSame(longArray1, longArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {16.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {16.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(3, longArray1.length);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray3, (-324L));
      assertNotNull(bitSet0);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {281L}, longArray3);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertFalse(longArray3.equals((Object)longArray0));
      assertEquals(1, longArray3.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = (-59.7254815);
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) 5);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)128;
      shortArray0[2] = (short)100;
      shortArray0[3] = (short) (-5085);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short) (-1), (short)128, (short)100, (short) (-5085)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)16, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (int) (byte)16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 920.5897F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 920.5897F;
      floatArray0[4] = 0.0F;
      Double double0 = new Double((-2134.59908));
      assertNotNull(double0);
      assertEquals((-2134.59908), (double)double0, 0.01);
      
      Double double1 = new Double(1.5);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.5, (double)double1, 0.01);
      
      Double double2 = new Double((-1.0));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-1.0), (double)double2, 0.01);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = 'h';
      charArray0[2] = 'F';
      charArray0[3] = '6';
      charArray0[4] = 'l';
      charArray0[5] = 'M';
      charArray0[6] = 'p';
      charArray0[7] = '~';
      charArray0[8] = 'H';
      ArrayUtils.shift(charArray0, (-2366), 8, (-2147087287));
      assertArrayEquals(new char[] {'~', '{', 'h', 'F', '6', 'l', 'M', 'p', 'H'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((float[]) null, 971.6F, (-1839));
      assertEquals((-1), int0);
      
      try { 
        Byte.valueOf("org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1737.9319F;
      floatArray0[1] = 3150.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2274.0F;
      int int0 = ArrayUtils.indexOf((long[]) null, (-1488L), (-2146984116));
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-26));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-26)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray((short[]) null, (-2146983999), (-2146984116));
      assertNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (-2146983999));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false}, booleanArray0));
      assertFalse(int1 == int0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)19;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)127, (-2057));
      assertArrayEquals(new byte[] {(byte)16, (byte)19}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)16;
      longArray0[1] = (long) (byte)16;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {16L, 16L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 16L;
      doubleArray0[1] = (double) (byte)127;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 100.0;
      doubleArray0[4] = (double) 16L;
      doubleArray0[5] = 1473.3768017;
      doubleArray0[6] = (double) (byte)16;
      doubleArray0[7] = (double) (-2057);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2034.59908), 100.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {16.0, 127.0, (-1.0), 100.0, 16.0, 1473.3768017, 16.0, (-2057.0)}, doubleArray0, 0.01);
      assertEquals("{7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(8, doubleArray0.length);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (byte)19);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {16L, 16L, 19L}, longArray1);
      assertArrayEquals(new long[] {16L, 16L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray1.length);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)16;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)16;
      shortArray0[7] = (short) (byte)16;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)16, (short)0, (short)0, (short)0, (short)16, (short)16}, shortArray0);
      assertArrayEquals(new short[] {(short)16, (short)16, (short)16}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      int int0 = ArrayUtils.indexOf(intArray0, 15, (int) (short)0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)0;
      ArrayUtils.swap(byteArray0, (-123), (-2217), 979);
      assertArrayEquals(new byte[] {(byte)0, (byte)16, (byte)16, (byte)16, (byte)16, (byte)16, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      ArrayUtils.swap(intArray0, 1405, 979, 0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1737.9319F;
      floatArray0[1] = 3150.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2289.5403F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-2079.0671F);
      int int0 = ArrayUtils.indexOf(floatArray0, 1737.9319F, 0);
      assertArrayEquals(new float[] {1737.9319F, 3150.0F, 0.0F, 2289.5403F, 1.0F, (-2079.0671F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) 2289.5403F;
      objectArray0[2] = (Object) 1.0F;
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) long0);
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[3] = (Object) null;
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertTrue(int1 == int0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int1);
      
      org.evosuite.runtime.Random.setNextRandom(0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      ArrayUtils.shift(intArray0, (-2465), 99, 1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2398L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2398L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 1);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2398.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2725);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2725)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2550);
      assertArrayEquals(new short[] {(short) (-2725)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, 1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2725)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2725)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      String string0 = ArrayUtils.toString((Object) bitSet0, "=Z'm,p");
      assertNotNull(string0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(0, longArray0.length);
      assertEquals("{}", string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.146764416E9;
      doubleArray0[1] = (double) 2398.0F;
      doubleArray0[2] = (double) (short)634;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (int) (short)634, (-2193.65376434669));
      assertArrayEquals(new double[] {2.146764416E9, 2398.0, 634.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray2 = ArrayUtils.remove(intArray0, 0);
      assertNotNull(intArray2);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray2.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L, (-1L), 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      ArrayUtils.shift(intArray2, 50);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray2.length);
      
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom((-517L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, (-3345));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 906);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 100.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('|');
      assertNotNull(character0);
      assertEquals('|', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = 'P';
      Character character1 = new Character('P');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertEquals('P', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertNotNull(character2);
      assertFalse(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertEquals('P', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('%');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertEquals('%', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(char0);
      assertNotNull(character4);
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertEquals('P', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('%');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertEquals('%', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf((char) character0);
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)character5));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)char0));
      assertEquals('|', (char)character6);
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.insert(2, characterArray0, characterArray0);
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(14, characterArray1.length);
      assertEquals(7, characterArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Short short0 = new Short((short)51);
      assertNotNull(short0);
      assertEquals((short)51, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)51, object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = 1;
      intArray0[2] = (int) (byte)57;
      intArray0[3] = (int) (short)51;
      intArray0[4] = 1;
      intArray0[5] = (int) (byte)57;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {1, 57, 51, 1, 57, (-1)}, intArray0);
      assertEquals(6, intArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 51;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)57;
      longArray0[4] = (long) (byte)57;
      longArray0[5] = (long) 57;
      longArray0[6] = (-2320L);
      longArray0[7] = (long) 57;
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (byte)57);
      assertArrayEquals(new long[] {1L, 51L, 0L, 57L, 57L, 57L, (-2320L), 57L}, longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 51L;
      doubleArray0[1] = (double) 51;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) 57L;
      doubleArray0[4] = (double) (-2320L);
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) 57;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {57.0, 0.0, (-2320.0), 57.0, (-1.0), 51.0, 51.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 15;
      intArray0[2] = 1192;
      intArray0[3] = (-4439);
      intArray0[4] = 481;
      intArray0[5] = 84;
      intArray0[6] = Integer.MAX_VALUE;
      intArray0[7] = 0;
      ArrayUtils.shift(intArray0, 2146595290);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, 4, 15, 1192, (-4439), 481, 84}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = ArrayUtils.toString(objectArray0[1], "javf.lKngsString");
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      assertEquals("javf.lKngsString", string0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 21, 21, (-2240));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1307), (-1307));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-213);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)11158;
      shortArray0[4] = (short)57;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-213), (short)1, (short)11158, (short)57}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-213), (short)1, (short)11158, (short)57}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-213);
      shortArray0[4] = (short)57;
      longArray0[3] = (long) (short)1;
      longArray0[4] = (long) (short)57;
      longArray0[5] = (long) (short)11158;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray1);
      assertNotNull(longArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new long[] {(-213L), 0L, 1L, 57L, 11158L}, longArray1);
      assertArrayEquals(new long[] {0L, (-213L), 0L, 1L, 57L, 11158L}, longArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, intArray1.length);
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isEquals(11158L, (short)57);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = '-';
      charArray0[2] = 'A';
      charArray0[3] = '>';
      charArray0[4] = 'r';
      charArray0[5] = 'U';
      charArray0[6] = ',';
      boolean boolean2 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'B', '-', 'A', '>', 'r', 'U', ','}, charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-158L));
      assertNotNull(long0);
      assertEquals((-158L), (long)long0);
      
      longArray0[0] = long0;
      long long1 = 0L;
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((-158L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertEquals((-158L), (long)long3);
      
      longArray0[2] = long3;
      longArray0[3] = (Long) long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-158L), 0L, (-158L), 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[1] = '=';
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray0, (byte)0);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      ArrayUtils.shift(longArray1, (int) (byte)0);
      assertArrayEquals(new long[] {(-158L), 0L, (-158L), 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)0, (-1), (-1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Long long4 = new Long(0L);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long2));
      assertEquals(0L, (long)long4);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) long1);
      assertEquals(4, longArray0.length);
      assertEquals(3, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) long1;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (long)longArray0[0];
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (short)0;
      floatArray1[1] = (float) (long)longArray0[0];
      floatArray1[2] = (float) 0L;
      floatArray1[3] = (float) 0L;
      floatArray1[4] = Float.NaN;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(690, floatArray0, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 690, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte) (-1);
      ArrayUtils.shift(byteArray1, 82);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) (byte) (-1);
      ArrayUtils.swap(floatArray0, (-615), (int) (byte) (-1), 1227);
      assertArrayEquals(new float[] {1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-1);
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)127, (-2020));
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)16;
      longArray0[1] = (long) (byte)16;
      Long[] longArray1 = new Long[3];
      longArray1[0] = (Long) 16L;
      longArray1[1] = (Long) 16L;
      longArray1[2] = (Long) 16L;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray0));
      
      longArray3[0] = 281L;
      int int1 = ArrayUtils.lastIndexOf(longArray3, 281L);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {281L}, longArray3);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertEquals(1, longArray3.length);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 44L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1537.3754335295516, 72.0);
      assertArrayEquals(new double[] {0.0, 44.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 72.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 44.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 44.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray1, (-1.0), 44.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 44.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 44.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int2);
      
      Long long0 = new Long((-2020));
      assertNotNull(long0);
      assertEquals((-2020L), (long)long0);
      
      int int3 = ArrayUtils.indexOf(longArray0, 1077L, (-2240));
      assertNotSame(longArray0, longArray3);
      assertArrayEquals(new long[] {16L, 16L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray3));
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int3);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)127);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)127}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Byte byte0 = new Byte((byte)16);
      assertNotNull(byte0);
      assertEquals((byte)16, (byte)byte0);
      
      boolean boolean1 = ArrayUtils.isEquals(longArray1[2], long0);
      assertSame(longArray1, longArray2);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, longArray1.length);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) longArray1[0]);
      assertNotNull(floatArray1);
      assertSame(longArray1, longArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {16.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, longArray1.length);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      charArray0[1] = '/';
      charArray0[2] = '|';
      charArray0[3] = '|';
      boolean boolean2 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'i', '/', '|', '|'}, charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 1072);
      assertNull(object0);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = null;
      ArrayUtils.swap(objectArray0, 1072, 1072, 1072);
      assertEquals(1, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'm', 1072);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, 0.7, 1072);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3759.8F);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (-2070.4353F);
      floatArray0[5] = (float) 'm';
      floatArray0[6] = (float) (-1);
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (-1.0F));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new float[] {(-3759.8F), (-1.0F), (-1.0F), (-1.0F), (-2070.4353F), 109.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals("{1, 2, 3, 6}", bitSet1.toString());
      assertEquals(4, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(7, bitSet1.length());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(7, floatArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int3 = mockRandom0.nextInt((-1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(1, objectArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (-862L);
      longArray0[2] = (long) 1072;
      longArray0[3] = (long) 'm';
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 'm';
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1052L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), (-862L), 1072L, 109L, (-1L), 109L}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-862L), 1072L, 109L, (-1L), 109L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short) (-324);
      longArray0[1] = 311L;
      longArray0[2] = 2723L;
      longArray0[3] = (long) (short) (-324);
      longArray0[4] = 311L;
      longArray0[5] = 2723L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-324L), 311L, 2723L, (-324L), 311L, 2723L}, longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean1 = Boolean.valueOf("ja2a.l\n*.Oooley ");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean("ja2a.l\n*.Oooley ");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-324);
      intArray0[1] = (int) (short) (-324);
      boolean boolean3 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-324), (-324)}, intArray0);
      assertTrue(boolean3 == boolean0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean3);
      
      boolean boolean4 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-324L), 311L, 2723L, (-324L), 311L, 2723L}, longArray0);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertEquals(6, longArray0.length);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Long[] longArray0 = new Long[4];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      longArray0[3] = (Long) long0;
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift((Object[]) longArray0, 3453);
      assertEquals(4, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean1);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(529.4569939862782);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(529.457F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      boolean boolean2 = ArrayUtils.isSameType(long0, float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 2333);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = 'V';
      boolean boolean3 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'/', 'V'}, charArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(2, charArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-2427), 3310, 3310);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 3310;
      longArray0[1] = (long) (-2427);
      longArray0[2] = (long) (-2427);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) (short)605;
      floatArray0[2] = (float) (-2427);
      ArrayUtils.swap(floatArray0, 8, 8, 642);
      assertArrayEquals(new float[] {8.0F, 605.0F, (-2427.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Double double0 = new Double(2852.0);
      assertNotNull(double0);
      assertEquals(2852.0, (double)double0, 0.01);
      
      Double double1 = new Double(3310);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(3310.0, (double)double1, 0.01);
      
      Double double2 = new Double((-1116.32628694));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-1116.32628694), (double)double2, 0.01);
      
      Double double3 = new Double(605.0F);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(605.0, (double)double3, 0.01);
      
      Double double4 = new Double(693.42480104805);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals(693.42480104805, (double)double4, 0.01);
      
      Double double5 = new Double(605.0F);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals(605.0, (double)double5, 0.01);
      
      Double double6 = new Double(8);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals(8.0, (double)double6, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      Double double7 = new Double((-1116.32628694));
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertEquals((-1116.32628694), (double)double7, 0.01);
      
      doubleArray0[0] = double7;
      Double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      long[] longArray1 = ArrayUtils.subarray((long[]) null, 0, 2146373607);
      assertNull(longArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)10;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte)47, (byte) (-56), (byte) (-1), (byte) (-109), (byte) (-27), (byte)4, (byte)10}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 1373);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(1, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      ArrayUtils.shift(charArray0, 1, 1, 36);
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Short[] shortArray0 = new Short[8];
      short short0 = (short)1142;
      Short short1 = new Short((short)1142);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1142, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals(8, shortArray0.length);
      assertEquals((short)1142, (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) (-1416));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short) (-1416), (short)short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short((short) shortArray0[2]);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertEquals(8, shortArray0.length);
      assertEquals((short) (-1416), (short)short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)484);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertEquals((short)484, (short)short5);
      
      shortArray0[4] = short5;
      try { 
        Short.valueOf("VFihqS<.sD:Qp4jE(", 76);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 76 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = (-2146031663);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-2146031663), 2109.384F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146031663, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 217.187450496;
      doubleArray0[1] = (-3340.4304546973785);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Byte byte0 = new Byte((byte) (-60));
      assertNotNull(byte0);
      assertEquals((byte) (-60), (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) ", Length: 0", 1489);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((char[]) null, (int) (byte) (-60), 2146764463);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (byte) (-60);
      floatArray0[2] = (float) 2146764463;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1139.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-60.0F), 2.14676442E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1139.0F, (-1.0F), (-60.0F), 2.14676442E9F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      int int1 = ArrayUtils.indexOf((char[]) null, '1');
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-2427), 68, 68);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 68;
      longArray0[1] = (long) (-2427);
      longArray0[2] = (long) (-2427);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) (short)605;
      floatArray0[2] = (float) (-2427);
      ArrayUtils.swap(floatArray0, 8, 8, 642);
      assertArrayEquals(new float[] {8.0F, 605.0F, (-2427.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (byte)38);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-10.636F));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {8.0F, 605.0F, (-2427.0F)}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, floatArray0.length);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)38;
      shortArray0[1] = (short) (byte)38;
      shortArray0[2] = (short)605;
      shortArray0[3] = (short)605;
      shortArray0[4] = (short) (byte)38;
      shortArray0[5] = (short)605;
      ArrayUtils.shift(shortArray0, (-1409), (-2360), (-1));
      assertArrayEquals(new short[] {(short)38, (short)38, (short)605, (short)605, (short)38, (short)605}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, ':');
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = new Character[4];
      char char0 = ')';
      Character character0 = Character.valueOf(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('%');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertEquals('%', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertEquals(')', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertNotNull(character3);
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertEquals(')', (char)character3);
      
      characterArray0[3] = character3;
      Comparator<Character> comparator0 = (Comparator<Character>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-4446), 1199).when(comparator0).compare(anyChar() , anyChar());
      boolean boolean0 = ArrayUtils.isSorted(characterArray0, comparator0);
      assertEquals(4, characterArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-250L);
      longArray0[2] = 0L;
      longArray0[3] = (-1832L);
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) (-1832L);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray2);
      assertArrayEquals(new double[] {(-1832.0)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray2.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-3078);
      shortArray0[1] = (short) (-471);
      shortArray0[2] = (short) (-3078);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray1, (int) (short) (-3078), (int) (short) (-3078), (int) (short) (-471));
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray1.length);
      
      float[] floatArray0 = new float[3];
      Short[] shortArray2 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray2.length);
      
      ArrayUtils.shift((byte[]) null, 232);
      ArrayUtils.swap(floatArray0, 1, (-1), 95);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 232;
      longArray0[2] = (long) 95;
      longArray0[3] = (long) 232;
      longArray0[4] = 1548L;
      longArray0[5] = (long) 232;
      longArray0[6] = (long) (short) (-471);
      longArray0[7] = (long) (short) (-3078);
      longArray0[8] = (long) 1;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {232L, 95L, 232L, 1548L, 232L, (-471L), (-3078L), 1L, (-1L)}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3031.18907854511;
      doubleArray0[1] = (-884.0);
      doubleArray0[2] = (-1913.20834);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3031.18907854511, (-884.0), (-1913.20834)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'Q');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertArrayEquals(new char[] {'Q', 'Q'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      Byte byte0 = new Byte((byte)122);
      assertNotNull(byte0);
      assertEquals((byte)122, (byte)byte0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      String string0 = ArrayUtils.toString((Object) boolean1, "java.lang.String");
      assertNotNull(string0);
      assertFalse(boolean1.equals((Object)boolean0));
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 3);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2189;
      floatArray0[1] = (float) 2189;
      floatArray0[2] = 920.5897F;
      floatArray0[3] = (float) 3;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertArrayEquals(new float[] {2189.0F, 2189.0F, 920.5897F, 3.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 920.5897F;
      doubleArray0[1] = (double) 2189.0F;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 920.5897F;
      doubleArray0[4] = (double) 920.5897F;
      doubleArray0[5] = (double) 2189;
      doubleArray0[6] = (double) 2189.0F;
      doubleArray0[7] = (double) 3.0F;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {920.5897216796875, 2189.0, (-1.0), 920.5897216796875, 920.5897216796875, 2189.0, 2189.0, 3.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-158L));
      assertNotNull(long0);
      assertEquals((-158L), (long)long0);
      
      long long1 = 0L;
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((-158L));
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-158L), (long)long3);
      
      longArray0[2] = long3;
      longArray0[3] = (Long) long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-158L), 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = 'J';
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray0, (byte)0);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte)0, 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      long[] longArray2 = ArrayUtils.add(longArray1, (int) (byte)0, long1);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-158L), 0L}, longArray2);
      assertArrayEquals(new long[] {0L, 0L, (-158L), 0L}, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertEquals(5, longArray2.length);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = 'V';
      charArray0[2] = '?';
      charArray0[3] = 'q';
      charArray0[4] = 'U';
      charArray0[5] = 'd';
      charArray0[6] = '&';
      charArray0[7] = '\'';
      charArray0[8] = '/';
      int int0 = (-4387);
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-4387), (-2146758039));
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'z');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'P', 'V', '?', 'q', 'U', 'd', '&', '\'', '/'}, charArray0);
      assertArrayEquals(new char[] {'P', 'V', '?', 'q', 'U', 'd', '&', '\'', '/'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-194L);
      longArray0[1] = (long) 'U';
      longArray0[2] = (long) '/';
      longArray0[3] = (long) '/';
      longArray0[4] = (long) (-2146758039);
      longArray0[5] = (long) '/';
      longArray0[6] = 3835L;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-2146758039));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146758039, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      Byte byte0 = new Byte((byte) (-113));
      assertNotNull(byte0);
      assertEquals((byte) (-113), (byte)byte0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-113);
      shortArray0[1] = (short)7421;
      shortArray0[2] = (short) (byte) (-113);
      shortArray0[3] = (short) (byte) (-113);
      shortArray0[4] = (short)634;
      shortArray0[5] = (short) (-1775);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-113), (short)7421, (short) (-113), (short) (-113), (short)634, (short) (-1775)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-113), (short)7421, (short) (-113), (short) (-113), (short)634, (short) (-1775)}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      String string0 = ArrayUtils.toString(objectArray0[1], "java.lang.String");
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      assertEquals("0", string0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, 5, 2.146764416E9);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-864.5F);
      floatArray0[1] = (-864.5F);
      floatArray0[2] = (-800.79474F);
      floatArray0[3] = (-2090.829F);
      floatArray0[4] = (-4044.3271F);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.insert((-228), (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-228);
      doubleArray0[1] = (double) (-228);
      doubleArray0[2] = (double) (-228);
      doubleArray0[3] = (double) (-228);
      doubleArray0[4] = (double) (-228);
      doubleArray0[5] = 2041.104563;
      doubleArray0[6] = (-5077.148554916);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-228.0), (-228.0), (-228.0), (-228.0), (-228.0), 2041.104563, (-5077.148554916)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift((byte[]) null, (-503));
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 1927, 95, 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1);
      
      float[] floatArray1 = ArrayUtils.insert(95, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[6];
      short[] shortArray0 = new short[19];
      shortArray0[1] = (short) (-471);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray1.length);
      
      ArrayUtils.shift(charArray0, (int) (short) (-471), 8, 17);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2989.60891409), 844.223817171278);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      int[] intArray0 = new int[9];
      intArray0[1] = (int) (short)0;
      intArray0[3] = (int) (short) (-471);
      intArray0[4] = (int) (short)0;
      intArray0[5] = 17;
      intArray0[6] = (-1710);
      intArray0[7] = 17;
      intArray0[8] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1465.3754335295516;
      doubleArray0[1] = (-913.62111);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1465.3754335295516, (-913.62111)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = '^';
      charArray0[2] = ']';
      charArray0[3] = '8';
      ArrayUtils.shift(charArray0, 1310);
      assertArrayEquals(new char[] {']', '8', 'I', '^'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-503), (-503));
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      Float float0 = new Float((-422.5085F));
      assertNotNull(float0);
      assertEquals((-422.5085F), (float)float0, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) float0, (-503));
      assertFalse(int1 == int0);
      assertEquals(1, integerArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((char[]) null, 75, 0, int0);
      assertFalse(int0 == int1);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) int0, (double) (-422.5085F));
      assertFalse(int0 == int1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-1), (int)integer1);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, integerArray0.length);
      assertEquals((-1), int2);
      
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = floatArray0[3];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-422.5085F), (-422.5085F), (-422.5085F), 1.0F, (-422.5085F), (-422.5085F), 1.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)16;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)16;
      shortArray0[7] = (short) (byte)16;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)16, (short)0, (short)0, (short)0, (short)16, (short)16}, shortArray0);
      assertArrayEquals(new short[] {(short)16, (short)16, (short)16}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      int int0 = ArrayUtils.indexOf(intArray0, 15, (int) (short)0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 122, 1472);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)16;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(3, intArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, 15, (int) (byte)0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      
      Short short0 = new Short((short)16);
      assertNotNull(short0);
      assertEquals((short)16, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)16, object0);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)16, (byte) (-64), (byte)16, (byte)16, (byte)16, (byte)16}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = ",";
      String[] stringArray1 = ArrayUtils.add(stringArray0, ",");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-45.0);
      doubleArray0[1] = 2230.0;
      doubleArray0[2] = 44.0;
      doubleArray0[3] = 2024.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1818.4561), (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-45.0), 2230.0, 44.0, 2024.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (-1), (-1));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertEquals(8, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(8, bitSet1.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet1.toString());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(8, intArray0.length);
      
      bitSet0.andNot(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(bitSet0, bitSet1);
      assertArrayEquals(new double[] {(-45.0), 2230.0, 44.0, 2024.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertEquals(8, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(8, bitSet1.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet1.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertEquals(4, doubleArray0.length);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-2427), 64, 64);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 64;
      longArray0[1] = (long) (-2427);
      longArray0[2] = (long) (-2427);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) (short)605;
      floatArray0[2] = (float) (-2427);
      ArrayUtils.swap(floatArray0, 8, 8, 642);
      assertArrayEquals(new float[] {8.0F, 605.0F, (-2427.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (byte)38);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-10.636F));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {8.0F, 605.0F, (-2427.0F)}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, floatArray0.length);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)38;
      shortArray0[1] = (short) (byte)38;
      shortArray0[2] = (short)605;
      shortArray0[3] = (short)605;
      shortArray0[4] = (short) (byte)38;
      shortArray0[5] = (short)605;
      ArrayUtils.shift(shortArray0, (-1409), (-2360), (-1));
      assertArrayEquals(new short[] {(short)38, (short)38, (short)605, (short)605, (short)38, (short)605}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, ':');
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = new Character[4];
      char char0 = ')';
      Character character0 = Character.valueOf(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('%');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('%', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertEquals(')', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('Y');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('Y', (char)character3);
      
      characterArray0[3] = character3;
      Comparator<Character> comparator0 = (Comparator<Character>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyChar() , anyChar());
      boolean boolean0 = ArrayUtils.isSorted(characterArray0, comparator0);
      assertEquals(4, characterArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '1';
      intArray0[1] = (int) '1';
      intArray0[2] = (int) '*';
      intArray0[3] = (int) '*';
      intArray0[4] = (int) '*';
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {42, 42, 42, 49, 49}, intArray0);
      assertEquals(5, intArray0.length);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(49);
      assertNotNull(double0);
      assertEquals(49.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(Double.NaN);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(49);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(49.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(2025.857018654);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(2025.857018654, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(798.1536);
      assertNotNull(double0);
      assertEquals(798.1536, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(798.1536, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(798.1536);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(798.1536, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyDouble() , anyDouble());
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0, comparator0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, 0, 0, Integer.MAX_VALUE, 0}, intArray0);
      assertEquals("{4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)127, 0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(4, shortArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      ArrayUtils.swap(intArray0, (-3928), 839, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, Integer.MAX_VALUE, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-2108438490), (int) (short)0);
      assertNotNull(shortArray2);
      assertSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2122);
      shortArray0[1] = (short)196;
      shortArray0[2] = (short)403;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-525);
      shortArray0[5] = (short)101;
      shortArray0[6] = (short) (-302);
      shortArray0[7] = (short)2610;
      shortArray0[8] = (short) (-1);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2122), (short)196, (short)403, (short) (-1), (short) (-525), (short)101, (short) (-302), (short)2610, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2122), (short)196, (short)403, (short) (-1), (short) (-525), (short)101, (short) (-302), (short)2610, (short) (-1), (short) (-1)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('0');
      assertNotNull(character0);
      assertEquals('0', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('0', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('?');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('?', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('?');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertEquals('?', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character0);
      assertNotNull(character4);
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertEquals('0', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      assertEquals('', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('+');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character5));
      assertEquals('+', (char)character6);
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'g');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'0', '0', '?', '?', '0', '', '+'}, charArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) character4, (int) character1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character6));
      assertFalse(character0.equals((Object)character5));
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character4));
      assertFalse(character1.equals((Object)character6));
      assertFalse(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character5));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character4));
      assertFalse(character1.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character5));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character6));
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-32246);
      shortArray0[4] = (short)16748;
      shortArray0[5] = (short)4378;
      shortArray0[6] = (short)179;
      shortArray0[7] = (short)2621;
      ArrayUtils.reverse(shortArray0, (int) (short)2, 102);
      assertArrayEquals(new short[] {(short) (-1), (short)2, (short)2621, (short)179, (short)4378, (short)16748, (short) (-32246), (short) (-1)}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[1] = 3207L;
      longArray0[2] = (long) (-503);
      longArray0[3] = (long) (-503);
      longArray0[4] = (long) (byte)56;
      longArray0[5] = (-28L);
      longArray0[6] = 3207L;
      int int0 = ArrayUtils.indexOf(longArray0, 771L, (-503));
      assertArrayEquals(new long[] {0L, 3207L, (-503L), (-503L), 56L, (-28L), 3207L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)56;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (-159), 3024);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)56}, shortArray0);
      assertArrayEquals(new short[] {(short)56}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray2.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (int) (byte)56, 3024);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (int) (byte)56, (long) (-503));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 56, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)48}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short) (byte)0;
      shortArray0[1] = (short)127;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)127;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)0, 2);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Byte byte0 = new Byte((byte) (-78));
      assertNotNull(byte0);
      assertEquals((byte) (-78), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-78), object0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 67.85;
      doubleArray0[3] = 3262.0;
      char[] charArray2 = ArrayUtils.addAll(charArray0, charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray2);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray2.length);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 67.85, 245);
      assertArrayEquals(new double[] {0.0, 67.85, 0.0, 3262.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, int0);
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray0, (short)6);
      assertNotNull(shortArray2);
      assertSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray0);
      assertArrayEquals(new short[] {(short)6, (short)0, (short)127, (short)0, (short)127}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray2.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 303.4362551871067);
      assertArrayEquals(new double[] {0.0, 67.85, 0.0, 3262.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse(shortArray1, 93, 2);
      assertSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      double[] doubleArray1 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 217.187450496;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)16, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      ArrayUtils.shift(charArray0, (int) (byte)0);
      assertArrayEquals(new char[] {'I', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) (byte)16;
      longArray0[2] = (long) 'I';
      longArray0[3] = (long) (byte)16;
      longArray0[4] = (long) 'I';
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) 'I';
      longArray0[7] = (long) (byte)16;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {73L, 16L, 73L, 16L, 73L, 0L, 73L, 16L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(16, longArray1.length);
      assertEquals(8, longArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 73L;
      floatArray0[1] = (float) 73L;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {73.0F, 73.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {73.0F, 73.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 999;
      intArray0[2] = 2939;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) 'I';
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) 'I';
      intArray0[8] = (int) (byte)16;
      ArrayUtils.reverse(intArray0, 3149, 1183);
      assertArrayEquals(new int[] {0, 999, 2939, 0, 73, 0, 0, 73, 16}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'e';
      doubleArray0[1] = (double) 'e';
      doubleArray0[2] = (double) 'e';
      Object[] objectArray0 = new Object[0];
      Character character0 = new Character('[');
      assertNotNull(character0);
      assertEquals('[', (char)character0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) character0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) '[';
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 91.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 91.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 91.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)16;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)16;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (short)0, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.clone(objectArray0);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray1, "><iw4{M2JTE.");
      assertNotNull(stringArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[2] = '1';
      charArray0[3] = '|';
      charArray0[4] = 'U';
      charArray0[5] = 'r';
      charArray0[6] = ']';
      charArray0[7] = 'Z';
      charArray0[8] = 'k';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '*');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'*', '\u0000', '1', '|', 'U', 'r', ']', 'Z', 'k'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, charArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      boolean[] booleanArray3 = ArrayUtils.insert((-1244), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray3);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2184);
      longArray0[1] = (long) '7';
      ArrayUtils.swap(longArray0, (-1244), 19);
      assertArrayEquals(new long[] {(-2184L), 55L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1737.9319F;
      floatArray0[1] = 3150.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2274.0F;
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)0);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray((short[]) null, (-2146983999), (-2146984116));
      assertNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-2146983999));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(2, int0);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.indexOf((byte[]) null, (byte) (-71));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2398L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2398L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 1);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2398.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2725);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2725)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2550);
      assertArrayEquals(new short[] {(short) (-2725)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, 1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = '1';
      charArray0[2] = 'n';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'1', 'n', 'n'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((byte[]) null, (byte)3);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-158L));
      assertNotNull(long0);
      assertEquals((-158L), (long)long0);
      
      longArray0[0] = long0;
      long long1 = 0L;
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((-158L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-158L), (long)long3);
      
      longArray0[2] = long3;
      longArray0[3] = (Long) long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-158L), 0L, (-158L), 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      ArrayUtils.shift(byteArray0, 232);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) long1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) (long)longArray0[0];
      floatArray0[4] = (float) (long)longArray0[2];
      floatArray0[5] = (float) 232;
      floatArray0[6] = (float) long1;
      floatArray0[7] = (float) long1;
      ArrayUtils.swap(floatArray0, 232, 1, (-1794));
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 1.0F, (-158.0F), (-158.0F), 232.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      Short[] shortArray0 = ArrayUtils.removeAllOccurrences((Short[]) null, (Short) null);
      assertNull(shortArray0);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)86);
      assertNull(byteArray2);
      
      int int0 = ArrayUtils.indexOf(longArray1, (-178L), (-68));
      assertArrayEquals(new long[] {(-158L), 0L, (-158L), 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2271);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      org.evosuite.runtime.Random.setNextRandom(14);
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 2271);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      boolean[] booleanArray3 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray3.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 546;
      intArray0[1] = 2024;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {546, 2024}, intArray0);
      assertArrayEquals(new int[] {546, 2024, 546, 2024}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 546;
      longArray0[1] = (long) 546;
      longArray0[2] = (long) 2024;
      longArray0[3] = (long) 2024;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 546L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {546L, 546L, 2024L, 2024L}, longArray0);
      assertArrayEquals(new long[] {2024L, 2024L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(2, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 2024);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {546L, 546L, 2024L, 2024L}, longArray0);
      assertArrayEquals(new long[] {2024L, 2024L}, longArray1);
      assertArrayEquals(new long[] {2024L, 2024L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertEquals(4, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences((float[]) null, (float) 2024);
      assertNull(floatArray2);
      
      Float[] floatArray3 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray3.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2024L;
      doubleArray0[1] = (double) 2024L;
      doubleArray0[2] = (double) 2024L;
      doubleArray0[3] = (double) 546;
      doubleArray0[4] = (double) 546L;
      doubleArray0[5] = (double) 546;
      doubleArray0[6] = (double) 2024;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = (double) 546;
      int int0 = ArrayUtils.indexOf(doubleArray0, 303.4362551871067);
      assertArrayEquals(new double[] {2024.0, 2024.0, 2024.0, 546.0, 546.0, 546.0, 2024.0, 1.0, 546.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 546;
      intArray2[1] = (-1);
      intArray2[2] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray2, 120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 546;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {546, 0}, intArray0);
      assertArrayEquals(new int[] {546, 0, 546, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 546;
      longArray0[1] = (long) 546;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 546L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {546L, 546L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(2, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 2024);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {546L, 546L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences((float[]) null, (float) 2024);
      assertNull(floatArray2);
      
      Float[] floatArray3 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray3.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 546;
      doubleArray0[4] = (double) 546L;
      doubleArray0[5] = (double) 546;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 1.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 546.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 546.0, 546.0, 546.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(3, int0);
      
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 546;
      intArray2[1] = 3;
      intArray2[2] = 3;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray2, 120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-2147483648L);
      longArray0[1] = 64L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-695.22F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = ';';
      charArray0[3] = 'z';
      charArray0[4] = 'l';
      charArray0[5] = '6';
      charArray0[6] = '2';
      charArray0[7] = ',';
      ArrayUtils.reverse(charArray0, Integer.MAX_VALUE, (-2252));
      assertArrayEquals(new char[] {'h', 'h', ';', 'z', 'l', '6', '2', ','}, charArray0);
      assertEquals(8, charArray0.length);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-2147483648L);
      longArray0[1] = 64L;
      ArrayUtils.shift(longArray0, (-2), (-2), 658);
      assertArrayEquals(new long[] {(-2147483648L), 64L}, longArray0);
      assertEquals(2, longArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (-2));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-695.22F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = '#';
      charArray0[2] = ';';
      charArray0[3] = 'z';
      charArray0[4] = 'l';
      charArray0[5] = '6';
      charArray0[6] = '2';
      charArray0[7] = ',';
      ArrayUtils.reverse(charArray0, Integer.MAX_VALUE, (-2252));
      assertArrayEquals(new char[] {'h', '#', ';', 'z', 'l', '6', '2', ','}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[9];
      Integer integer0 = new Integer('\u0000');
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      Float float0 = new Float((float) integerArray0[0]);
      assertNotNull(float0);
      assertEquals(1, integerArray0.length);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift(charArray0, (-1273), (-2), (-1273));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) 75, (double) (-1273));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.swap((long[]) null, 2, 2, 16);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)48}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short) (byte)0;
      shortArray0[1] = (short)127;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)127;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)0, 2);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Byte byte0 = new Byte((byte) (-78));
      assertNotNull(byte0);
      assertEquals((byte) (-78), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-78), object0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 67.85;
      doubleArray0[3] = 3262.0;
      doubleArray0[4] = (double) (byte) (-78);
      doubleArray0[5] = 3.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2);
      assertArrayEquals(new double[] {0.0, 67.85, 0.0, 3262.0, (-78.0), 3.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, int0);
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotNull(shortArray2);
      assertSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)127, (short)0, (short)127}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray2.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1277.0);
      assertArrayEquals(new double[] {0.0, 67.85, 0.0, 3262.0, (-78.0), 3.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-2427), 64, 64);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 64;
      longArray0[1] = (long) (-2427);
      longArray0[2] = (long) (-2427);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) (short)605;
      floatArray0[2] = (float) (-2427);
      ArrayUtils.swap(floatArray0, 8, 8, 642);
      assertArrayEquals(new float[] {8.0F, 605.0F, (-2427.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (byte)38);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 642, 8);
      assertArrayEquals(new float[] {8.0F, 605.0F, (-2427.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)38;
      shortArray0[1] = (short)605;
      shortArray0[2] = (short)605;
      shortArray0[3] = (short) (byte)38;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3813));
      assertArrayEquals(new short[] {(short)38, (short)605, (short)605, (short)38}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-242L);
      longArray0[2] = 0L;
      longArray0[3] = (-1832L);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0L;
      longArray0[2] = 0L;
      Object object0 = ArrayUtils.get(objectArray0, 52);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = null;
      ArrayUtils.shift(objectArray0, (-1166));
      assertEquals(3, objectArray0.length);
      
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, (-242L), 0L, (-1832L), 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(12, longArray1.length);
      assertEquals(6, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)43);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1920);
      ArrayUtils.shift(intArray0, (-3555), 2, (-1166));
      assertArrayEquals(new int[] {(-1920)}, intArray0);
      assertEquals(1, intArray0.length);
      
      Short[] shortArray0 = new Short[9];
      Short short0 = new Short((byte)43);
      assertNotNull(short0);
      assertEquals((short)43, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)43);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)43, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals(9, shortArray0.length);
      assertEquals((short)43, (short)short2);
      
      shortArray0[2] = short2;
      try { 
        Short.valueOf("java.lang.String", (-1271));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1271 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1737.9319F;
      floatArray0[1] = 3150.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2289.5403F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-2079.0671F);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) 2289.5403F;
      objectArray0[2] = (Object) 1.0F;
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) long0);
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[3] = (Object) null;
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int0);
      
      org.evosuite.runtime.Random.setNextRandom(0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.shift(intArray0, (-2465), 99, 1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-242L);
      longArray0[2] = 0L;
      longArray0[3] = (-1832L);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0L;
      longArray0[2] = 0L;
      Object object0 = ArrayUtils.get(objectArray0, 52);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = null;
      ArrayUtils.shift(objectArray0, (-1166));
      assertEquals(3, objectArray0.length);
      
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, (-242L), 0L, (-1832L), 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(12, longArray1.length);
      assertEquals(6, longArray0.length);
      
      byte byte0 = (byte)43;
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)43);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1920);
      ArrayUtils.shift(intArray0, (-3555), 2, (-1166));
      assertArrayEquals(new int[] {(-1920)}, intArray0);
      assertEquals(1, intArray0.length);
      
      Short[] shortArray0 = new Short[9];
      Short short0 = new Short((byte)43);
      assertNotNull(short0);
      assertEquals((short)43, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)55);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)55, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals(9, shortArray0.length);
      assertEquals((short)43, (short)short2);
      
      shortArray0[2] = short2;
      try { 
        Short.valueOf("java.lang.String", (-1271));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1271 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-503), (-503));
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      Float float0 = new Float((-422.5085F));
      assertNotNull(float0);
      assertEquals((-422.5085F), (float)float0, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) float0, (-503));
      assertFalse(int1 == int0);
      assertEquals(1, integerArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((char[]) null, 75, 0, int0);
      assertFalse(int0 == int1);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) int0, (double) (-422.5085F));
      assertFalse(int0 == int1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(int0 == int1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(int0 == int1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-37), (byte)18, (byte) (-87), (byte)2, (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[5] = (long) 7;
      longArray0[6] = (long) (byte)43;
      longArray0[7] = (long) (byte)43;
      int[] intArray0 = new int[6];
      intArray0[0] = (-1308);
      intArray0[1] = (int) (byte)43;
      intArray0[2] = 2;
      intArray0[4] = 2077;
      intArray0[5] = (int) (byte)43;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1308), 43, 2, 0, 2077, 43}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)43;
      shortArray0[1] = (short) (byte)43;
      shortArray0[2] = (short) (byte)43;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2463, (int) (short)43);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)43, (short)43, (short)43}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, shortArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1308), 43, 2, 0, 2077, 43}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(12, intArray1.length);
      assertEquals(6, intArray0.length);
      
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (int) (byte)43;
      intArray2[1] = (int) (short)43;
      intArray2[2] = (int) (short)43;
      intArray2[3] = (int) (byte)43;
      intArray2[4] = 7;
      intArray2[5] = 2077;
      intArray2[6] = (int) (byte)43;
      boolean boolean1 = ArrayUtils.isEmpty(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {43, 43, 43, 43, 7, 2077, 43}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(7, intArray2.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-158L));
      assertNotNull(long0);
      assertEquals((-158L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 440);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {440}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) longArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray2 = ArrayUtils.addFirst(intArray0, (-905));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-905)}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray2.length);
      
      int[] intArray3 = ArrayUtils.addAll(intArray0, intArray2);
      assertNotNull(intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-905)}, intArray2);
      assertArrayEquals(new int[] {(-905)}, intArray3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray2.length);
      assertEquals(1, intArray3.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = '!';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'G', '!'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-905);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-905.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-124);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)83;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-124), (short)0, (short)83, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-124), (short)0, (short)83, (short)0, (short) (-124), (short)0, (short)83, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-864.5F);
      floatArray0[1] = (-864.5F);
      floatArray0[2] = (-800.79474F);
      floatArray0[3] = (-2090.829F);
      floatArray0[4] = (-4044.3271F);
      floatArray0[6] = (-3424.8635F);
      floatArray0[7] = 10.0F;
      floatArray0[8] = 1348.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-864.5F), (-864.5F), (-800.79474F), (-2090.829F), (-4044.3271F), 0.0F, (-3424.8635F), 10.0F, 1348.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'O';
      charArray0[2] = 'K';
      charArray0[3] = 'e';
      charArray0[4] = 'p';
      charArray0[5] = 'I';
      charArray0[6] = 'i';
      charArray0[7] = '{';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'N', 'O', 'K', 'e', 'p', 'I', 'i', '{'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      assertEquals(8, charArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)61;
      shortArray0[1] = (short)6135;
      shortArray0[2] = (short)6;
      shortArray0[3] = (short)544;
      shortArray0[4] = (short)2197;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)1629;
      shortArray0[7] = (short) (-1791);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)61, (short)6135, (short)6, (short)544, (short)2197, (short) (-1), (short)1629, (short) (-1791)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(16, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      int int0 = ArrayUtils.indexOf(charArray0, '$');
      assertArrayEquals(new char[] {'$', '$', '$'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[2];
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '$';
      intArray0[2] = (int) '$';
      intArray0[3] = (int) '$';
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = '%';
      charArray0[2] = 'R';
      int int0 = ArrayUtils.indexOf(charArray0, '%');
      assertArrayEquals(new char[] {'$', '%', 'R'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(1, int0);
      
      Object[] objectArray0 = new Object[2];
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'R';
      intArray0[1] = (int) '$';
      intArray0[2] = (int) '%';
      intArray0[3] = (int) '$';
      intArray0[4] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 82, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byte byte0 = (byte)52;
      byteArray0[1] = (byte)9;
      byte byte1 = (byte) (-11);
      byteArray0[2] = (byte) (-11);
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char char0 = '^';
      charArray1[1] = '^';
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) (byte) (-11), (Object) (byte)9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, 0, 0, Integer.MAX_VALUE, 0}, intArray0);
      assertEquals("{4}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)127;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)127, 0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)127, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(4, shortArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      ArrayUtils.swap(intArray0, (-3928), 839, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, Integer.MAX_VALUE, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = Double.valueOf((double) 0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1565.52742));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1565.52742), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1565.52742), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1565.52742), (-1565.52742)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)108;
      ArrayUtils.swap(byteArray0, (-1642), 83);
      assertArrayEquals(new byte[] {(byte) (-40), (byte)2, (byte) (-58), (byte) (-106), (byte)108}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, 82);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 82;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[5] = (double) 82;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (double) 82);
      assertArrayEquals(new double[] {0.0, 82.0, 0.0, 0.0, 0.0, 82.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, int0);
      
      Long long0 = new Long(2147483647L);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
      
      Long[] longArray0 = new Long[1];
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (-4420.0), (int) (byte) (-103));
      assertArrayEquals(new double[] {0.0, 82.0, 0.0, 0.0, 0.0, 82.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 2142501087);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 22552;
      intArray0[2] = (-1);
      intArray0[3] = 452;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), 22552, (-1), 452}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 25.65F;
      floatArray0[3] = (-1438.5513F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 25.65F, (-1438.5513F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Float";
      stringArray0[2] = "Cannot store ";
      stringArray0[3] = "The type must not be null";
      stringArray0[4] = "java.lang.String";
      stringArray0[5] = "V\"vDw,Vv'b";
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[3] = 'a';
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'a';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 25.65F, 50);
      assertArrayEquals(new double[] {97.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 50;
      intArray0[3] = 452;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), 50, 452}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('0');
      assertNotNull(character0);
      assertEquals('0', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('0', (char)character1);
      
      characterArray0[1] = character1;
      char char0 = '?';
      Character character2 = Character.valueOf('?');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('?', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character0);
      assertNotNull(character3);
      assertFalse(character0.equals((Object)char0));
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertEquals('0', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character0);
      assertNotNull(character4);
      assertFalse(character0.equals((Object)char0));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character2));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertEquals('0', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)char0));
      assertEquals('', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('+');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character5));
      assertEquals('+', (char)character6);
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'g');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'0', '0', '?', '0', '0', '', '+'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) character4, (int) character1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(character0.equals((Object)character6));
      assertFalse(character0.equals((Object)char0));
      assertTrue(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)character5));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character2));
      assertTrue(character1.equals((Object)character3));
      assertFalse(character1.equals((Object)character5));
      assertFalse(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)character4));
      assertFalse(character1.equals((Object)character6));
      assertFalse(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character6));
      assertFalse(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character5));
      assertTrue(character4.equals((Object)character1));
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray1 = new long[2];
      longArray1[0] = (long) char0;
      longArray1[1] = 2L;
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {2L, 63L}, longArray1);
      assertEquals(2, longArray1.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1168.88));
      assertNotNull(double0);
      assertEquals((-1168.88), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = Double.valueOf((-164.422618501465));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-164.422618501465), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-35.48531102953));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-35.48531102953), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte) (-37), (byte) (-37), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-35.48531102953);
      doubleArray2[1] = (double) Integer.MAX_VALUE;
      doubleArray2[2] = (double) (byte)2;
      doubleArray2[3] = (double) '-';
      doubleArray2[4] = (double) doubleArray0[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray2);
      assertArrayEquals(new double[] {(-35.48531102953), 2.147483647E9, 2.0, 45.0, (-1168.88)}, doubleArray2, 0.01);
      assertEquals(5, doubleArray2.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-37);
      shortArray0[1] = (short) (byte) (-37);
      shortArray0[2] = (short)1232;
      shortArray0[3] = (short)45;
      shortArray0[4] = (short) (byte) (-37);
      ArrayUtils.reverse(shortArray0, 2437, 84);
      assertArrayEquals(new short[] {(short) (-37), (short) (-37), (short)1232, (short)45, (short) (-37)}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2861), 50, (-2861));
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short) (-699);
      shortArray0[4] = (short)13;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-699), (short)0, (short)13}, shortArray0);
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 1, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)1143;
      shortArray1[2] = (short)13;
      shortArray1[3] = (short)1143;
      shortArray1[4] = (short) (-699);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1143, (short)13, (short)1143, (short) (-699)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray1.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (int) (short) (-699));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -699, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[1] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 2723L;
      longArray0[1] = 312L;
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      char[] charArray1 = new char[4];
      charArray1[0] = 'A';
      charArray1[1] = 'V';
      charArray1[2] = 'l';
      charArray1[3] = 'O';
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'A', 'V', 'l', 'O'}, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, characterArray0.length);
      
      Byte byte0 = new Byte((byte) (-60));
      assertNotNull(byte0);
      assertEquals((byte) (-60), (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) byte0, (int) (byte) (-60));
      assertArrayEquals(new char[] {'A', 'V', 'l', 'O'}, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, characterArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-60);
      shortArray0[1] = (short) (byte) (-60);
      shortArray0[2] = (short)2061;
      shortArray0[3] = (short) (byte) (-60);
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-60), (short) (-60), (short)2061, (short) (-60)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'l';
      intArray0[1] = (int) (short) (-60);
      intArray0[2] = (int) 'l';
      intArray0[3] = (int) 'A';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 108, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[5];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-4886);
      doubleArray0[1] = (double) (-503);
      doubleArray0[3] = (-2384.2);
      doubleArray0[4] = (double) (-503);
      doubleArray0[5] = (double) (-503);
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = ')';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '[');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'[', ')'}, charArray0);
      assertArrayEquals(new char[] {')'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 2189);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2189, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[0];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)24859);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)2, (short)2, (short)2, (short)2, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)2, (short)2, (short)2, (short)2, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      int int0 = ArrayUtils.indexOf(intArray0, 3529, 2437);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 122, (-1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray1, 122, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 122, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte) (-1);
      ArrayUtils.shift(byteArray1, 82);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-103), (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (byte) (-1);
      ArrayUtils.swap(floatArray0, (-615), (int) (byte) (-1), (int) (byte) (-1));
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-1);
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = '6';
      charArray0[2] = 'i';
      charArray0[3] = '&';
      charArray0[4] = '!';
      charArray0[5] = 'e';
      charArray0[6] = 'g';
      charArray0[7] = '2';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'+', '6', 'i', '&', '!', 'e', 'g', '2'}, charArray0);
      assertArrayEquals(new char[] {'+', '6', 'i', '&', '!', 'e', 'g', '2'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-78L);
      longArray0[1] = (long) '6';
      longArray0[2] = (long) 'i';
      longArray0[3] = (long) 'g';
      longArray0[4] = (long) '&';
      longArray0[5] = (long) '!';
      longArray0[6] = (long) '2';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {54L, 105L, 103L, 38L, 33L, 50L, (-78L)}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[4] = '6';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '6';
      floatArray0[1] = (-0.78696525F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '6';
      doubleArray0[1] = (double) (-0.78696525F);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) '\u0000');
      assertArrayEquals(new double[] {54.0, (-0.7869652509689331)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      ArrayUtils.shift(doubleArray0, (int) '\u0000');
      assertArrayEquals(new double[] {54.0, (-0.7869652509689331)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[6];
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-0.7869652509689331);
      doubleArray1[1] = (Double) (-0.7869652509689331);
      doubleArray1[2] = (Double) 54.0;
      doubleArray1[3] = (Double) (-0.7869652509689331);
      doubleArray0[1] = (-0.7869652509689331);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 996.991119592918);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-0.7869652509689331), (-0.7869652509689331), 54.0, (-0.7869652509689331), 996.991119592918}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1569;
      intArray0[1] = (int) '6';
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-113));
      assertArrayEquals(new int[] {1569, 54}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(59, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (-1195);
      shortArray0[1] = (short)549;
      shortArray0[2] = (short) (-1195);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(18, shortArray0.length);
      assertEquals(18, shortArray1.length);
      
      ArrayUtils.shift((byte[]) null, (-2844));
      char[] charArray0 = new char[18];
      charArray0[0] = '8';
      charArray0[1] = '4';
      charArray0[2] = 'T';
      charArray0[3] = 'v';
      charArray0[4] = '#';
      charArray0[5] = '\"';
      charArray0[6] = '!';
      charArray0[7] = 'f';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(18, charArray0.length);
      assertEquals(17, charArray1.length);
      
      float[] floatArray0 = new float[1];
      ArrayUtils.swap(floatArray0, 340, 2146026739, (-1308));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertEquals(18, shortArray0.length);
      assertEquals(18, shortArray2.length);
      assertEquals(18, shortArray1.length);
      
      MutableInt mutableInt0 = new MutableInt(0.0F);
      assertNotNull(mutableInt0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      
      MutableInt[] mutableIntArray0 = ArrayUtils.addFirst((MutableInt[]) null, mutableInt0);
      assertNotNull(mutableIntArray0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(1, mutableIntArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)549;
      longArray0[1] = 56L;
      longArray0[2] = (long) (short)549;
      longArray0[3] = (long) 340;
      longArray0[4] = (long) '!';
      longArray0[5] = (long) '4';
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 'f';
      longArray1[1] = (long) 'v';
      longArray1[2] = (long) '8';
      longArray1[3] = (long) 'v';
      longArray1[4] = (long) (short) (-1195);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(624, longArray0, longArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 624, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1005.0847645881043;
      doubleArray0[1] = (double) 160;
      doubleArray0[2] = (double) (-364);
      doubleArray0[3] = (double) (-807);
      doubleArray0[4] = (-842.8);
      ArrayUtils.shift(doubleArray0, (-807), (-807), 160);
      assertArrayEquals(new double[] {1005.0847645881043, 160.0, (-364.0), (-807.0), (-842.8)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-364);
      longArray0[1] = (long) (-364);
      longArray0[2] = (long) (-807);
      longArray0[3] = (long) (-807);
      longArray0[4] = (long) 160;
      longArray0[5] = (long) (-364);
      longArray0[6] = (long) (-807);
      longArray0[7] = (long) (-807);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(160, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 160, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1307), (-1307));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-106);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-106);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte) (-106);
      objectArray0[3] = (Object) (byte) (-106);
      objectArray0[4] = (Object) (byte) (-106);
      objectArray0[5] = (Object) (byte) (-106);
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, 1046, (int) 1);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(6, objectArray0.length);
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1307), (-1307));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-106);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-106);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte) (-106);
      objectArray0[3] = (Object) (byte) (-106);
      objectArray0[4] = (Object) (byte) (-106);
      objectArray0[5] = (Object) (byte) (-106);
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, (-1752), (-1307));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(6, objectArray0.length);
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      Character character0 = new Character('0');
      assertNotNull(character0);
      assertEquals('0', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('0', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('?');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('?', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character0);
      assertNotNull(character3);
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertEquals('0', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character0);
      assertNotNull(character4);
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertEquals('0', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertEquals('', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('+');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertEquals('+', (char)character6);
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'g');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'0', '0', '?', '0', '0', '', '+', 'g'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) character4, (int) character1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)character6));
      assertFalse(character0.equals((Object)character5));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character4));
      assertFalse(character1.equals((Object)character5));
      assertFalse(character1.equals((Object)character6));
      assertTrue(character1.equals((Object)character3));
      assertFalse(character1.equals((Object)character2));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character6));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character5));
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-128), (int) (byte) (-128));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('l');
      assertNotNull(character0);
      assertEquals('l', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = ']';
      Character character1 = Character.valueOf(']');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals(']', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(']');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertEquals(']', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char0);
      assertNotNull(character3);
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals(']', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(char0);
      assertNotNull(character4);
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertEquals(']', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('l');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertEquals('l', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character((char) character2);
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character0));
      assertTrue(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character4));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character3));
      assertTrue(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character5));
      assertEquals(']', (char)character6);
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'l', ']', ']', ']', ']', 'l', ']'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 724.5F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      long[] longArray0 = new long[3];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1737.9319F;
      floatArray0[1] = 3150.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2274.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-2079.0671F);
      int int0 = ArrayUtils.indexOf(floatArray0, 1737.9319F, 0);
      assertArrayEquals(new float[] {1737.9319F, 3150.0F, 0.0F, 2274.0F, 1.0F, (-2079.0671F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 3150.0F;
      objectArray0[1] = (Object) 2274.0F;
      objectArray0[2] = (Object) 1.0F;
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) long0);
      assertNotNull(object0);
      assertEquals(4, objectArray0.length);
      assertEquals(3150.0F, object0);
      
      objectArray0[3] = object0;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertEquals(4, objectArray0.length);
      assertEquals(3150.0F, object1);
      
      int int1 = ArrayUtils.indexOf(objectArray0, object1);
      assertTrue(int1 == int0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-3674L);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-3674L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[4] = '6';
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-201));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-201)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray((short[]) null, (-2146983999), 90);
      assertNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 121);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1737.9319F;
      floatArray0[1] = 3150.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2274.0F;
      int int0 = ArrayUtils.indexOf((long[]) null, (-1488L), (-2146984116));
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)0);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray((short[]) null, (-2146983999), (-2146984116));
      assertNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-2146983999));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false}, booleanArray0));
      assertFalse(int1 == int0);
      assertEquals(6, booleanArray0.length);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-8);
      shortArray0[1] = (short) (-30309);
      shortArray0[2] = (short)988;
      shortArray0[4] = (short)42;
      shortArray0[5] = (short) (-177);
      shortArray0[6] = (short)256;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-8), (int) (short)42);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-8), (short) (-30309), (short)988, (short)0, (short)42, (short) (-177), (short)256}, shortArray0);
      assertArrayEquals(new short[] {(short) (-8), (short) (-30309), (short)988, (short)0, (short)42, (short) (-177), (short)256}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)42;
      longArray0[1] = (-2147483648L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {42L, (-2147483648L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 217.187450496;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)16, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      ArrayUtils.shift(charArray0, (int) (byte)0);
      assertArrayEquals(new char[] {'I', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)16;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)16;
      byteArray2[5] = (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (byte)16, (long) (byte)16, 2147483647L);
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(byteArray2, (Random) mockRandom0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)0, (byte)16}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(6, byteArray2.length);
      
      byte[] byteArray3 = ArrayUtils.removeElements(byteArray2, byteArray1);
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray3);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)16, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)0, (byte)16}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray3.length);
      assertEquals(4, byteArray1.length);
      assertEquals(6, byteArray2.length);
      
      org.evosuite.runtime.Random.setNextRandom(292);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-864.5F);
      floatArray0[1] = (-864.5F);
      floatArray0[2] = (-800.79474F);
      floatArray0[3] = (-2090.829F);
      floatArray0[4] = (-4044.3271F);
      floatArray0[6] = (-3424.8635F);
      floatArray0[7] = 10.0F;
      floatArray0[8] = 1348.0F;
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '6');
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-126), (byte)byte1);
      
      byteArray0[4] = byte1;
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = '';
      charArray0[2] = 'N';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '', (-2));
      assertArrayEquals(new char[] {'d', '', 'N', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((long[]) null, (-584), (int) (byte) (-126), (int) (byte) (-126));
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.shift((double[]) null, (-2));
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = byte0;
      byteArray1[1] = (byte) (-126);
      byteArray1[2] = (byte) (-126);
      byteArray1[3] = (byte) (-126);
      byteArray1[4] = (byte) (-126);
      byteArray1[2] = byte0;
      byteArray1[6] = (byte) (-126);
      byteArray1[7] = byte0;
      ArrayUtils.shift(byteArray1, 3077, (-1273), 48);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-126), (byte) (-126), (byte) (-126), (byte) (-126), (byte)0, (byte) (-126), (byte) (-126)}, byteArray1);
      assertEquals(8, byteArray1.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-126);
      intArray0[1] = (int) (byte) (-126);
      intArray0[2] = (int) 'd';
      intArray0[3] = (int) 'N';
      intArray0[4] = 3077;
      intArray0[5] = (int) (byte) (-126);
      intArray0[6] = (int) (short)175;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-2254));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2254, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ';', 0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'e';
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      ArrayUtils.shift(longArray0, (-1), (-1), (-1));
      assertArrayEquals(new long[] {(-1L), 0L, 101L, 0L, (-1L), (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)175, (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 'e';
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, (int) (byte)2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 101.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'e');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, false, true, true}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.cardinality());
      assertEquals(9, bitSet0.length());
      assertEquals("{0, 1, 2, 4, 5, 7, 8}", bitSet0.toString());
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-30309);
      shortArray0[2] = (short)988;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)42;
      shortArray0[5] = (short) (-177);
      shortArray0[6] = (short)256;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1), (int) (short)42);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-30309), (short)988, (short)8, (short)42, (short) (-177), (short)256}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-30309), (short)988, (short)8, (short)42, (short) (-177), (short)256}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)42;
      longArray0[1] = (-2147483648L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {42L, (-2147483648L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (short)988);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {42L, (-2147483648L)}, longArray0);
      assertArrayEquals(new long[] {42L, (-2147483648L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-2427), 64, 64);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 64;
      longArray0[1] = (long) (-2427);
      longArray0[2] = (long) (-2427);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) (short)605;
      floatArray0[2] = (float) (-2427);
      ArrayUtils.swap(floatArray0, 8, 8, 642);
      assertArrayEquals(new float[] {8.0F, 605.0F, (-2427.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Double double0 = new Double(2852.0);
      assertNotNull(double0);
      assertEquals(2852.0, (double)double0, 0.01);
      
      Double double1 = new Double(2852.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2852.0, (double)double1, 0.01);
      
      Double double2 = new Double(64);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(64.0, (double)double2, 0.01);
      
      Double double3 = new Double((-1116.32628694));
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((-1116.32628694), (double)double3, 0.01);
      
      Double double4 = new Double(605.0F);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals(605.0, (double)double4, 0.01);
      
      Double double5 = new Double(693.42480104805);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals(693.42480104805, (double)double5, 0.01);
      
      Double double6 = new Double(605.0F);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertEquals(605.0, (double)double6, 0.01);
      
      Double double7 = new Double(8);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertEquals(8.0, (double)double7, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      Double double8 = new Double((-1116.32628694));
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertEquals((-1116.32628694), (double)double8, 0.01);
      
      doubleArray0[0] = double8;
      Double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      long[] longArray1 = ArrayUtils.subarray((long[]) null, 0, 2146373607);
      assertNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-11);
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[1] = '^';
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (-1195);
      shortArray0[1] = (short)549;
      shortArray0[2] = (short) (-1195);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-1195);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1195.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1195);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1195.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1195.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-864.5F);
      floatArray0[1] = (-864.5F);
      floatArray0[2] = (-800.79474F);
      floatArray0[3] = (-2090.829F);
      floatArray0[4] = (-4044.3271F);
      floatArray0[6] = (-3424.8635F);
      floatArray0[7] = 10.0F;
      floatArray0[8] = 1348.0F;
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '6');
      assertNull(charArray0);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-864.5F), (-864.5F), (-800.79474F), (-2090.829F), (-4044.3271F), 0.0F, (-3424.8635F), 10.0F, 1348.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('0');
      assertNotNull(character0);
      assertEquals('0', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('0', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('?');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('?', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character0);
      assertNotNull(character3);
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertEquals('0', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character0);
      assertNotNull(character4);
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertEquals('0', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertEquals('', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('+');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character2));
      assertEquals('+', (char)character6);
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'g');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'0', '0', '?', '0', '0', '', '+'}, charArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) character4, (int) character1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(character0.equals((Object)character5));
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character6));
      assertTrue(character0.equals((Object)character4));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character4));
      assertFalse(character1.equals((Object)character5));
      assertTrue(character1.equals((Object)character3));
      assertFalse(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character6));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character5));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character6));
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('2');
      assertNotNull(character0);
      assertEquals('2', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('B');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('B', (char)character1);
      
      Character character2 = new Character('2');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('2', (char)character2);
      
      Character character3 = new Character((char) character0);
      assertNotNull(character3);
      assertFalse(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertEquals('2', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(',');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertEquals(',', (char)character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '2');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'2', '2', '2', '2', ','}, charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, (-2844));
      short short0 = (short)5;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1198);
      byte byte0 = (byte)75;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short) (-1198);
      objectArray0[1] = (Object) (short) (-1198);
      objectArray0[2] = (Object) (short) (-1198);
      objectArray0[3] = (Object) (short) (-1198);
      objectArray0[4] = (Object) (short) (-1198);
      objectArray0[5] = (Object) (short) (-1198);
      objectArray0[6] = (Object) (short) (-1198);
      objectArray0[7] = (Object) (short) (-1198);
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (byte)75);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, floatArray0.length);
      
      BitSet bitSet1 = bitSet0.get((int) (short)5, (int) (byte)75);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(bitSet0, bitSet1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[6], bitSet1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)127, (-2020));
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)16;
      longArray0[1] = (long) (byte)16;
      Long[] longArray1 = new Long[3];
      longArray1[0] = (Long) 16L;
      longArray1[1] = (Long) 16L;
      longArray1[2] = (Long) 16L;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray0));
      
      longArray3[0] = 281L;
      int int1 = ArrayUtils.lastIndexOf(longArray3, 281L);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {281L}, longArray3);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertEquals(1, longArray3.length);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1537.3754335295516, 72.0);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 72.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray1, (-1.0), (-1.0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int2);
      
      Long long0 = new Long((-2020));
      assertNotNull(long0);
      assertEquals((-2020L), (long)long0);
      
      int int3 = ArrayUtils.indexOf(longArray0, 1077L, (-2240));
      assertNotSame(longArray0, longArray3);
      assertArrayEquals(new long[] {16L, 16L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray3));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int3);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)127);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)127}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Byte byte0 = new Byte((byte)16);
      assertNotNull(byte0);
      assertEquals((byte)16, (byte)byte0);
      
      boolean boolean1 = ArrayUtils.isEquals(longArray1[2], long0);
      assertSame(longArray1, longArray2);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, longArray1.length);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) longArray1[0]);
      assertNotNull(floatArray1);
      assertSame(longArray1, longArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {16.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, longArray1.length);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray1, 2, 0, 78);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Short[] shortArray2 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(0, shortArray2.length);
      
      short[] shortArray3 = ArrayUtils.addFirst(shortArray0, (short) (-1691));
      assertNotNull(shortArray3);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1691)}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray3.length);
      
      Byte byte0 = new Byte((byte)95);
      assertNotNull(byte0);
      assertEquals((byte)95, (byte)byte0);
      
      MutableInt mutableInt0 = new MutableInt((-2146236245));
      assertNotNull(mutableInt0);
      assertEquals("-2146236245", mutableInt0.toString());
      assertEquals((-2146236245), (int)mutableInt0.toInteger());
      assertEquals((-2146236245), (int)mutableInt0.getValue());
      assertEquals((byte) (-85), mutableInt0.byteValue());
      assertEquals((-2.14623629E9F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2146236245L), mutableInt0.longValue());
      assertEquals((short)2219, mutableInt0.shortValue());
      assertEquals((-2.146236245E9), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2146236245), mutableInt0.intValue());
      
      boolean boolean0 = ArrayUtils.isEquals(mutableInt0, byte0);
      assertEquals("-2146236245", mutableInt0.toString());
      assertEquals((-2146236245), (int)mutableInt0.toInteger());
      assertEquals((-2146236245), (int)mutableInt0.getValue());
      assertEquals((byte) (-85), mutableInt0.byteValue());
      assertEquals((-2.14623629E9F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2146236245L), mutableInt0.longValue());
      assertEquals((short)2219, mutableInt0.shortValue());
      assertEquals((-2.146236245E9), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2146236245), mutableInt0.intValue());
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2146236245);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 232;
      floatArray0[3] = (float) (-2146236245);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 78;
      floatArray0[6] = 39.0F;
      floatArray0[7] = 110.0F;
      floatArray0[8] = (float) 232;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-2.14623629E9F), 0.0F, 232.0F, (-2.14623629E9F), 0.0F, 78.0F, 39.0F, 110.0F, 232.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2.14623629E9F), 0.0F, 232.0F, (-2.14623629E9F), 0.0F, 78.0F, 39.0F, 110.0F, 232.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(10, floatArray1.length);
      assertEquals(9, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-956.86647), 0, 69.6781);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2861), 50, (-2861));
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short) (-699);
      shortArray0[2] = (short)0;
      shortArray0[4] = (short)13;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)64);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)13}, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(5, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)16;
      byteArray0[6] = (byte) (-120);
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-120), (int) (byte)16);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte) (-45), (byte)16, (byte) (-120), (byte)16, (byte)0, (byte)0, (byte) (-120)}, byteArray0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(7, byteArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2861), 50, (-2861));
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short) (-699);
      shortArray0[2] = (short)0;
      shortArray0[4] = (short)13;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)64);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)13}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(5, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte) (-120);
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-120), 1);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte) (-45), (byte)16, (byte) (-120), (byte)16, (byte) (-120), (byte)117, (byte) (-120)}, byteArray0);
      assertEquals(3, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{2, 4, 6}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(7, bitSet1.length());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(7, byteArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 25.65F;
      floatArray0[3] = (-1438.5513F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 25.65F, (-1438.5513F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Float";
      stringArray0[2] = "m8(R8B";
      stringArray0[3] = "The type must not be null";
      stringArray0[4] = "j.a.lang.StriD1ng";
      stringArray0[5] = "ER";
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[3] = 'a';
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[0];
      boolean boolean2 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1679.0543359);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-92));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (int) (short) (-92), 4135);
      assertNull(floatArray0);
      
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean2;
      booleanArray0[3] = boolean2;
      booleanArray0[4] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, (Boolean) boolean0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      ArrayUtils.shuffle(charArray0, (Random) null);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) 'Z';
      characterArray0[1] = (Character) 'Z';
      characterArray0[2] = (Character) 'Z';
      characterArray0[3] = (Character) 'Z';
      Character character0 = new Character('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      characterArray0[4] = character0;
      characterArray0[5] = (Character) 'Z';
      characterArray0[6] = (Character) 'Z';
      characterArray0[7] = (Character) 'Z';
      boolean boolean3 = ArrayUtils.isArrayIndexValid(characterArray0, 88);
      assertFalse(boolean3 == boolean0);
      assertEquals(8, characterArray0.length);
      assertFalse(boolean3);
      
      boolean[] booleanArray2 = new boolean[9];
      booleanArray2[0] = boolean0;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = boolean0;
      booleanArray2[4] = false;
      booleanArray2[5] = boolean0;
      booleanArray2[6] = boolean0;
      booleanArray2[7] = true;
      booleanArray2[8] = boolean0;
      ArrayUtils.shift(booleanArray2, 50);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, false, false, true}, booleanArray2));
      assertEquals(9, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = '\\';
      charArray0[2] = '?';
      charArray0[3] = '#';
      charArray0[4] = '4';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'|', '\\', '?', '#', '4'}, charArray0);
      assertArrayEquals(new char[] {'|', '\\', '?', '#', '4', '|', '\\', '?', '#', '4'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '?';
      intArray0[1] = (int) '|';
      intArray0[2] = (int) '\\';
      intArray0[4] = (int) '|';
      ArrayUtils.swap(intArray0, 839, 2820, (-800));
      assertArrayEquals(new int[] {63, 124, 92, 0, 124}, intArray0);
      assertEquals(5, intArray0.length);
      
      Object[] objectArray0 = new Object[0];
      try { 
        Byte.decode("\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"
         // \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-503), (-503));
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      Float float0 = new Float((-422.5085F));
      assertNotNull(float0);
      assertEquals((-422.5085F), (float)float0, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) float0, (-503));
      assertFalse(int1 == int0);
      assertEquals(1, integerArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((char[]) null, 75, 0, int0);
      assertFalse(int0 == int1);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) int0, (double) (-422.5085F));
      assertFalse(int0 == int1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-849));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2002.6659F);
      ArrayUtils.shift(floatArray0, (-1224), (-1), (-503));
      assertArrayEquals(new float[] {(-2002.6659F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 305);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 305}, intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, integerArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(1, intArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, 586.90265305219, (double) (-1224));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertFalse(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-3078);
      shortArray0[1] = (short) (-471);
      shortArray0[2] = (short) (-3078);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray1, (int) (short) (-3078), (int) (short) (-3078), (int) (short) (-471));
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray1.length);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray2.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-3078);
      longArray0[1] = (long) (short) (-3078);
      longArray0[2] = (long) (short) (-3078);
      longArray0[4] = (long) (short) (-3078);
      longArray0[5] = (long) 232;
      longArray0[6] = (-1567L);
      longArray0[7] = (long) (short) (-471);
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 999.88751060458, (double) (short) (-471));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-94);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) (byte) (-94);
      objectArray0[3] = (Object) (byte) (-94);
      objectArray0[4] = (Object) (byte) (-94);
      objectArray0[5] = (Object) (byte) (-94);
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, (int)  (-94), 7);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(6, objectArray0.length);
      assertEquals(6, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[4] = '6';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[2] = (Object) '6';
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, (int) '6', (int) '6');
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(3, objectArray0.length);
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, (-2427), (-2427));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(3, objectArray0.length);
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1307), (-1307));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-106);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-106);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte) (-106);
      objectArray0[3] = (Object) (byte) (-106);
      objectArray0[4] = (Object) (byte) (-106);
      objectArray0[5] = (Object) (byte) (-106);
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, (int)  (-106), 7);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(6, objectArray0.length);
      assertEquals(6, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)37;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)10, (byte)15, (byte)37}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(integerArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Short short0 = new Short((short)36);
      assertNotNull(short0);
      assertEquals((short)36, (short)short0);
      
      Short[] shortArray0 = new Short[4];
      Short short1 = Short.valueOf((short) (-707));
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-707), (short)short1);
      
      shortArray0[3] = short1;
      shortArray0[0] = shortArray0[0];
      shortArray0[2] = short0;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.clone(objectArray0);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray1, "><iw4{M2JTE.");
      assertNotNull(stringArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[2] = '1';
      charArray0[3] = '|';
      charArray0[4] = 'U';
      charArray0[5] = 'r';
      charArray0[6] = ']';
      charArray0[7] = 'Z';
      charArray0[8] = 'k';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '*');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'*', '\u0000', '1', '|', 'U', 'r', ']', 'Z', 'k'}, charArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(9, charArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(1149L);
      assertNotNull(long0);
      assertEquals(1149L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1149L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1149L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(357L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(357L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[0]);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals(7, longArray0.length);
      assertEquals(1149L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[1]);
      assertNotNull(long4);
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long3));
      assertEquals(7, longArray0.length);
      assertEquals(1149L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long(357L);
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertEquals(357L, (long)long5);
      
      longArray0[5] = long5;
      Long long6 = Long.getLong("><iw4{M2JTE.", (long) longArray0[1]);
      assertNotNull(long6);
      assertTrue(long6.equals((Object)long0));
      assertTrue(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long5));
      assertTrue(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long2));
      assertTrue(long6.equals((Object)long1));
      assertEquals(7, longArray0.length);
      assertEquals(1149L, (long)long6);
      
      longArray0[6] = long6;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Short short0 = new Short((short)51);
      assertNotNull(short0);
      assertEquals((short)51, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)51, object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)54;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)10;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)10, (int) (byte)10);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {10}, intArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(1, intArray0.length);
      
      bitSet0.flip(59);
      assertArrayEquals(new int[] {10}, intArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{59}", bitSet0.toString());
      assertEquals(60, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1307), (-1307));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[17];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-213);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)11167;
      shortArray0[4] = (short)57;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(17, shortArray0.length);
      assertEquals(17, shortArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[2] = (long) (short)57;
      longArray0[3] = (long) (short)57;
      longArray0[0] = (long) (short)57;
      longArray0[5] = (long) (short)11167;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new long[] {0L, 57L, 57L, 0L, 11167L}, longArray1);
      assertArrayEquals(new long[] {57L, 0L, 57L, 57L, 0L, 11167L}, longArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
      assertEquals(1, intArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1;
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(17, shortArray0.length);
      assertEquals(17, shortArray1.length);
      assertFalse(boolean0);
      
      Short[] shortArray2 = new Short[0];
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertNotNull(shortArray3);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertArrayEquals(new short[] {}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty((Object[]) shortArray2);
      assertNotNull(objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, shortArray2.length);
      assertEquals(0, objectArray1.length);
      
      ArrayUtils.reverse((Object[]) stringArray0);
      assertEquals(188, stringArray0.length);
      
      ArrayUtils.shift(intArray1, 207);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ArrayUtils.swap((boolean[]) null, 893, 2797, 2797);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Float float0 = new Float((double) 893);
      assertNotNull(float0);
      assertEquals(893.0F, (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameType(float0, float0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)35);
      assertArrayEquals(new byte[] {(byte)35}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte)35);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)35}, byteArray0);
      assertArrayEquals(new byte[] {(byte)35, (byte)35}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int int1 = ArrayUtils.indexOf((char[]) null, '.', (int) (byte)35);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)35;
      floatArray0[1] = (float) '.';
      floatArray0[2] = (float) (byte)35;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {35.0F, 46.0F, 35.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {35.0F, 46.0F, 35.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(3, floatArray2.length);
      
      Integer integer0 = Integer.getInteger("X0y68^il^4nVG`}NVg", 1497);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1497, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      
      ArrayUtils.reverse((boolean[]) null, 2797, (int) (byte)35);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)35;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)35, 2);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)35}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[0];
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, 512, (double) 2797);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int2);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)35}, shortArray0);
      assertArrayEquals(new short[] {(short)35}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray2.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)35;
      longArray0[1] = (long) (short)35;
      longArray0[2] = (long) 512;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) '.';
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (byte)35;
      longArray0[7] = (long) 2797;
      longArray0[8] = (long) 2;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 274L);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {35L, 35L, 512L, 2L, 46L, (-1L), 35L, 2797L, 2L}, longArray1);
      assertArrayEquals(new long[] {35L, 35L, 512L, 2L, 46L, (-1L), 35L, 2797L, 2L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1307), (-1307));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[17];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-213);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)11167;
      shortArray0[4] = (short)57;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(17, shortArray0.length);
      assertEquals(17, shortArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[2] = (long) (short)57;
      longArray0[3] = (long) (short)57;
      longArray0[0] = (long) (short)57;
      longArray0[5] = (long) (short)11167;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new long[] {0L, 57L, 57L, 0L, 11167L}, longArray1);
      assertArrayEquals(new long[] {57L, 0L, 57L, 57L, 0L, 11167L}, longArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
      assertEquals(1, intArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1;
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(17, shortArray0.length);
      assertEquals(17, shortArray1.length);
      assertFalse(boolean0);
      
      Short[] shortArray2 = new Short[0];
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertNotNull(shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertArrayEquals(new short[] {}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty((Object[]) shortArray2);
      assertNotNull(objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, shortArray2.length);
      assertEquals(0, objectArray1.length);
      
      ArrayUtils.reverse((Object[]) stringArray0);
      assertEquals(188, stringArray0.length);
      
      ArrayUtils.reverse(objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, shortArray2.length);
      assertEquals(0, objectArray1.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("t+:Uhz6%1VQ/");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean0;
      Boolean boolean2 = Boolean.valueOf("Threshold must not be negative");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      booleanArray0[3] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 10;
      intArray0[1] = (-329);
      intArray0[2] = (-699);
      intArray0[3] = 2053;
      intArray0[4] = 90;
      intArray0[5] = 91;
      intArray0[6] = 0;
      intArray0[7] = 70;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {(-329), (-699), 2053, 90, 91, 0, 70, 10}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("t+:Uhz6%1VQ/");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("Threshold must not be negative");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("t+:Uhz6%1VQ/");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 10;
      intArray0[1] = (-329);
      intArray0[2] = (-699);
      intArray0[3] = 2053;
      intArray0[4] = 90;
      intArray0[5] = 91;
      intArray0[6] = 0;
      intArray0[7] = 70;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {(-329), (-699), 2053, 90, 91, 0, 70, 10}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-2247);
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2384.2);
      doubleArray0[3] = (-2384.2);
      doubleArray0[4] = (double) (-503);
      doubleArray0[5] = (double) (-503);
      doubleArray0[6] = (double) (short) (-2247);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short) (-1), 4);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2384.2), 0.0, 0.0, (-2384.2), (-503.0), (-503.0), (-2247.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2384.2), 0.0, 0.0, (-2384.2)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2384.2), 0.0, 0.0, (-2384.2), (-503.0), (-503.0), (-2247.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2384.2), 0.0, 0.0, (-2384.2)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = ')';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '\u0000');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {')'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', ')'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 125);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 125;
      doubleArray0[1] = (double) 125;
      doubleArray0[2] = (double) 125;
      doubleArray0[3] = (double) 125;
      doubleArray0[4] = (double) 125;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {125.0, 125.0, 125.0, 125.0, 125.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = '[';
      charArray0[4] = '[';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'm');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'[', ')', ')', '[', '['}, charArray1);
      assertArrayEquals(new char[] {'[', ')', ')', '[', '['}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-4886);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-2247);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2384.2);
      doubleArray0[1] = (double) (-503);
      doubleArray0[2] = (double) (short) (-2247);
      doubleArray0[3] = (-2384.2);
      doubleArray0[4] = (double) (-503);
      doubleArray0[5] = (double) (-503);
      doubleArray0[6] = (double) (short) (-2247);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short) (-1), 4);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2384.2), (-503.0), (-2247.0), (-2384.2)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2384.2), (-503.0), (-2247.0), (-2384.2), (-503.0), (-503.0), (-2247.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2384.2), (-503.0), (-2247.0), (-2384.2)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2384.2), (-503.0), (-2247.0), (-2384.2), (-503.0), (-503.0), (-2247.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = ')';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '[');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'[', ')'}, charArray0);
      assertArrayEquals(new char[] {')'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2861), 50, (-2861));
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)127;
      shortArray0[2] = (short) (-699);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)13;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)79);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short) (-699), (short)0, (short)13}, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2861);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1876.5), 752.0);
      assertArrayEquals(new double[] {(-2861.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'e';
      doubleArray0[1] = (double) 'e';
      doubleArray0[2] = (double) 'e';
      Object[] objectArray0 = new Object[0];
      Character character0 = new Character('[');
      assertNotNull(character0);
      assertEquals('[', (char)character0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) character0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[14];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) '[';
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.shift(floatArray1, 922, (-3208), (-1));
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1737.9319F;
      floatArray0[1] = 3150.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2274.0F;
      floatArray0[4] = 1.0F;
      long[] longArray0 = new long[2];
      longArray0[0] = (-2147483648L);
      longArray0[1] = (long) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2147483648L), 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-2147483648L), 0L}, longArray0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, longArray0.length);
      
      String string0 = null;
      Boolean boolean0 = new Boolean((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(5417);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-2466));
      assertNotNull(integer0);
      assertEquals((-2466), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(8, integerArray0.length);
      assertEquals((-2466), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("9I{", integerArray0[1]);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(8, integerArray0.length);
      assertEquals((-2466), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integer2);
      assertNotNull(integer3);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals(8, integerArray0.length);
      assertEquals((-2466), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertEquals(8, integerArray0.length);
      assertEquals((-2466), (int)integer4);
      
      integerArray0[4] = integer4;
      integerArray0[5] = integer2;
      Integer integer5 = new Integer(920);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals(920, (int)integer5);
      
      integerArray0[7] = integer5;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (int)integer0;
      doubleArray0[1] = (double) (-2466);
      doubleArray0[2] = (-3350.775866502315);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-4139.04));
      assertArrayEquals(new double[] {(-2466.0), (-2466.0), (-3350.775866502315)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9I{";
      boolean boolean1 = ArrayUtils.isArrayIndexValid(stringArray0, (-1035));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)15);
      assertNotNull(byte0);
      assertEquals((byte)15, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)15);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)15, (byte)byte1);
      
      byteArray0[3] = byte1;
      Byte byte2 = new Byte((byte) (-127));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-127), (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-21));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-21), (byte)byte3);
      
      byteArray0[3] = byte3;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1679.0543359);
      short[] shortArray0 = new short[0];
      short short0 = (short) (-92);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-92));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) (short) (-92));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-92);
      longArray0[1] = (long) (short) (-92);
      longArray0[2] = (long) (short) (-92);
      boolean boolean0 = ArrayUtils.contains(longArray0, 1260L);
      assertArrayEquals(new long[] {(-92L), (-92L), (-92L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-695), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -695, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[4] = '6';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '6';
      floatArray0[1] = (float) '6';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '6';
      doubleArray0[1] = (double) '6';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) '\u0000');
      assertArrayEquals(new double[] {54.0, 54.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      ArrayUtils.shift(doubleArray0, (int) '\u0000');
      assertArrayEquals(new double[] {54.0, 54.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)512;
      shortArray0[2] = (short)52;
      shortArray0[3] = (short)414;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)621;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)512, (short)52, (short)414, (short)1, (short)621}, shortArray1);
      assertArrayEquals(new short[] {(short)512, (short)0, (short)52, (short)414, (short)1, (short)621}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.Character";
      Class<String[]> class0 = String[].class;
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0, class0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertNotNull(characterArray0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray1, '#');
      assertNotNull(charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      
      ArrayUtils.swap(doubleArray0, 2, (int) (short)52, 16);
      assertArrayEquals(new double[] {54.0, 54.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 1, 2253);
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (-30309);
      shortArray0[2] = (short)988;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)42;
      shortArray0[5] = (short) (-177);
      shortArray0[6] = (short)256;
      MutableInt[] mutableIntArray0 = new MutableInt[4];
      MutableInt mutableInt0 = new MutableInt((-1310));
      assertNotNull(mutableInt0);
      assertEquals((-1310.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1310", mutableInt0.toString());
      assertEquals((-1310.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1310), (int)mutableInt0.getValue());
      assertEquals((byte) (-30), mutableInt0.byteValue());
      assertEquals((-1310), (int)mutableInt0.toInteger());
      assertEquals((-1310), mutableInt0.intValue());
      assertEquals((short) (-1310), mutableInt0.shortValue());
      assertEquals((-1310L), mutableInt0.longValue());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((Number) (short) (-30309));
      assertNotNull(mutableInt1);
      assertEquals((short) (-30309), mutableInt1.shortValue());
      assertEquals((-30309), (int)mutableInt1.getValue());
      assertEquals((-30309), (int)mutableInt1.toInteger());
      assertEquals((byte) (-101), mutableInt1.byteValue());
      assertEquals((-30309L), mutableInt1.longValue());
      assertEquals((-30309), mutableInt1.intValue());
      assertEquals("-30309", mutableInt1.toString());
      assertEquals((-30309.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-30309.0F), mutableInt1.floatValue(), 0.01F);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt((int) (short) (-177));
      assertNotNull(mutableInt2);
      assertEquals((short) (-177), mutableInt2.shortValue());
      assertEquals((-177.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-177L), mutableInt2.longValue());
      assertEquals((-177), mutableInt2.intValue());
      assertEquals("-177", mutableInt2.toString());
      assertEquals((-177), (int)mutableInt2.getValue());
      assertEquals((-177), (int)mutableInt2.toInteger());
      assertEquals((-177.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((byte)79, mutableInt2.byteValue());
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt((Number) (short)988);
      assertNotNull(mutableInt3);
      assertEquals("988", mutableInt3.toString());
      assertEquals(988, (int)mutableInt3.toInteger());
      assertEquals(988.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals((byte) (-36), mutableInt3.byteValue());
      assertEquals(988, (int)mutableInt3.getValue());
      assertEquals(988.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(988L, mutableInt3.longValue());
      assertEquals(988, mutableInt3.intValue());
      assertEquals((short)988, mutableInt3.shortValue());
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      
      mutableIntArray0[3] = mutableInt3;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(mutableIntArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.clone(objectArray0);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray1, "><iw4{M2JTE.");
      assertNotNull(stringArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '|';
      charArray0[4] = 'U';
      charArray0[5] = 'r';
      charArray0[6] = ']';
      charArray0[8] = 'k';
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.clone(objectArray0);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray1, "><iw4{M2JTE.");
      assertNotNull(stringArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[1] = '7';
      charArray0[2] = '1';
      charArray0[3] = '|';
      charArray0[4] = 'U';
      charArray0[5] = 'r';
      charArray0[6] = ']';
      charArray0[7] = 'Z';
      charArray0[8] = 'k';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '*');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'*', '7', '1', '|', 'U', 'r', ']', 'Z', 'k'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-4725.0));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-4725.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-3301.4066742484733));
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((-3301.4066742484733), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      doubleArray0[4] = double0;
      Double double4 = new Double((double) doubleArray0[1]);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.0, (double)double4, 0.01);
      
      doubleArray0[5] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, (-4725.0), (-3301.4066742484733), 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-4725.0));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-4725.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-3301.4066742484733));
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((-3301.4066742484733), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals(0.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[1]);
      assertNotNull(double5);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.0, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, (-4725.0), (-3301.4066742484733), 0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 1, 2253);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-30309);
      shortArray0[2] = (short)988;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)42;
      shortArray0[5] = (short) (-177);
      Float float0 = new Float((-278.8163574707489));
      assertNotNull(float0);
      assertEquals((-278.81635F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) (short) (-1));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.swap((Object[]) floatArray0, 1, 1186, (-2683));
      assertEquals(0, floatArray0.length);
      
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, (float) (short)42);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)19;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)127, (-2057));
      assertArrayEquals(new byte[] {(byte)16, (byte)19}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)16;
      longArray0[1] = (long) (byte)16;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {16L, 16L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 16L;
      doubleArray0[1] = (double) (byte)127;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 100.0;
      doubleArray0[4] = (double) 16L;
      doubleArray0[5] = 1473.3768017;
      doubleArray0[6] = (double) (byte)16;
      doubleArray0[7] = (double) (-2057);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2034.59908), 100.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {16.0, 127.0, (-1.0), 100.0, 16.0, 1473.3768017, 16.0, (-2057.0)}, doubleArray0, 0.01);
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{7}", bitSet0.toString());
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2057);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 16L;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = 1348.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1348.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-2057.0F), (-1.0F), 16.0F, (-1.0F), 1348.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2057.0F), (-1.0F), 16.0F, (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 2509, 2509, (-1500));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Short short0 = new Short((short)474);
      assertNotNull(short0);
      assertEquals((short)474, (short)short0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(short0, integer0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = '6';
      charArray0[2] = ';';
      charArray0[3] = '6';
      charArray0[4] = '#';
      charArray0[5] = '|';
      charArray0[6] = 'G';
      charArray0[7] = 'C';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'', '6', ';', '6', '#', '|', 'G', 'C'}, charArray0);
      assertArrayEquals(new char[] {'6', ';', '6', '#', '|', 'G', 'C'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) short0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'C';
      floatArray0[1] = (float) '6';
      floatArray0[2] = (float) ';';
      floatArray0[3] = 69.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {67.0F, 54.0F, 59.0F, 69.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {67.0F, 54.0F, 59.0F, 69.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1307), (-1307));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[17];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-213);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)11167;
      shortArray0[4] = (short)57;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(17, shortArray0.length);
      assertEquals(17, shortArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[2] = (long) (short)57;
      longArray0[3] = (long) (short)57;
      longArray0[0] = (long) (short)57;
      longArray0[5] = (long) (short)11167;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new long[] {0L, 57L, 57L, 0L, 11167L}, longArray1);
      assertArrayEquals(new long[] {57L, 0L, 57L, 57L, 0L, 11167L}, longArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
      assertEquals(1, intArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1;
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(17, shortArray0.length);
      assertEquals(17, shortArray1.length);
      assertFalse(boolean0);
      
      ArrayUtils.reverse((Object[]) stringArray0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(5417);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-2466));
      assertNotNull(integer0);
      assertEquals((-2466), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(8, integerArray0.length);
      assertEquals((-2466), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("9I{", integerArray0[1]);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(8, integerArray0.length);
      assertEquals((-2466), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integer2);
      assertNotNull(integer3);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals(8, integerArray0.length);
      assertEquals((-2466), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertEquals(8, integerArray0.length);
      assertEquals((-2466), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(80);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals(80, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-3005));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertEquals((-3005), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(920);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertEquals(920, (int)integer7);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (int)integer0;
      doubleArray0[1] = (double) (-2466);
      doubleArray0[2] = (-3350.775866502315);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-4139.04));
      assertArrayEquals(new double[] {(-2466.0), (-2466.0), (-3350.775866502315)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9I{";
      stringArray0[1] = "9I{";
      boolean boolean1 = ArrayUtils.isArrayIndexValid(stringArray0, (-1035));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)15);
      assertNotNull(byte0);
      assertEquals((byte)15, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)15);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)15, (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-127));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-127), (byte)byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte) (-21));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-21), (byte)byte3);
      
      byteArray0[3] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)15, (byte)15, (byte) (-127), (byte) (-21)}, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1252);
      shortArray0[1] = (short)2194;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)2754;
      shortArray0[4] = (short) (-15117);
      shortArray0[5] = (short)2917;
      shortArray0[6] = (short)15;
      shortArray0[7] = (short)537;
      shortArray0[8] = (short)5187;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1531);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)1531, (short) (-1252), (short)2194, (short)1, (short)2754, (short) (-15117), (short)2917, (short)15, (short)537, (short)5187}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1252), (short)2194, (short)1, (short)2754, (short) (-15117), (short)2917, (short)15, (short)537, (short)5187}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(10, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-27);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-6), (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte)86, (byte) (-1), (byte) (-13), (byte)77, (byte) (-94), (byte) (-115), (byte) (-27)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-242L);
      longArray0[2] = 0L;
      longArray0[3] = (-1832L);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      Object object0 = ArrayUtils.get(objectArray0, 52);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = null;
      ArrayUtils.shift(objectArray0, (-1166));
      assertEquals(3, objectArray0.length);
      
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, (-242L), 0L, (-1832L), 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 2);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray0));
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals(6, booleanArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 52;
      intArray1[1] = 52;
      intArray1[2] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 52, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1679.0543359);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-92));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) (short) (-92));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-92);
      longArray0[1] = (long) (short) (-92);
      longArray0[2] = (long) (short) (-92);
      boolean boolean0 = ArrayUtils.contains(longArray0, 1260L);
      assertArrayEquals(new long[] {(-92L), (-92L), (-92L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap((Object[]) doubleArray1, (int) (short) (-92), (-695), (int) (short) (-92));
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (short) (-92);
      floatArray0[2] = 1499.5232F;
      floatArray0[3] = (float) 1260L;
      ArrayUtils.shift(floatArray0, 0);
      assertArrayEquals(new float[] {0.0F, (-92.0F), 1499.5232F, 1260.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray3 = ArrayUtils.removeElements(doubleArray0, doubleArray2);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1679.0543359), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1679.0543359), 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(4, doubleArray3.length);
      assertEquals(0, doubleArray2.length);
      
      ArrayUtils.swap(floatArray0, (-695), 53);
      assertArrayEquals(new float[] {0.0F, (-92.0F), 1499.5232F, 1260.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'a';
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1195);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)121, (short)0, (short)0, (short)0, (short) (-1195), (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)82;
      ArrayUtils.shift(byteArray0, (-3213));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-106), (byte)46, (byte)49, (byte)38, (byte)82, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (int) (byte) (-1));
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2559;
      shortArray0[1] = (short)732;
      shortArray0[2] = (short)2559;
      shortArray0[3] = (short)2559;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)732, (short)2559, (short)2559, (short)2559}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)2559;
      floatArray0[1] = (float) (short)2559;
      double[] doubleArray0 = ArrayUtils.insert((int) (short)2559, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (short)2559);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 2559}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)123);
      assertNotNull(byte0);
      assertEquals((byte)123, (byte)byte0);
      
      Byte byte1 = new Byte((byte)4);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)4, (byte)byte1);
      
      byteArray0[2] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2559;
      shortArray0[1] = (short)732;
      shortArray0[2] = (short)2559;
      shortArray0[3] = (short)2559;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)732, (short)2559, (short)2559, (short)2559}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)2559;
      floatArray0[1] = (float) (short)2559;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {2559.0F, 2559.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.insert((int) (short)2559, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.add(intArray0, (-4725));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, (-4725)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)123);
      assertNotNull(byte0);
      assertEquals((byte)123, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)123);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)123, (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)4);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)4, (byte)byte2);
      
      byteArray0[2] = byte2;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '123', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      short short0 = (short) (-1195);
      ArrayUtils.shift((byte[]) null, (-2844));
      int int0 = 126;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1195);
      shortArray0[1] = (short) (-1195);
      shortArray0[2] = (short)5;
      shortArray0[3] = (short) (-1195);
      shortArray0[4] = (short)5;
      shortArray0[5] = (short)5;
      shortArray0[6] = (short) (-1195);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), (int) (short) (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1195), (short) (-1195), (short)5, (short) (-1195), (short)5, (short)5, (short) (-1195)}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(7, shortArray0.length);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        BitSet.valueOf((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      Byte byte0 = new Byte((byte) (-113));
      assertNotNull(byte0);
      assertEquals((byte) (-113), (byte)byte0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-113);
      shortArray0[1] = (short)7421;
      shortArray0[2] = (short) (byte) (-113);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)19;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)127, (-2020));
      assertArrayEquals(new byte[] {(byte)16, (byte)19}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)16;
      longArray0[1] = (long) (byte)16;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {16L, 16L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 16L;
      doubleArray0[1] = (double) (byte)127;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 100.0;
      doubleArray0[4] = (double) 16L;
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = '}';
      charArray0[3] = 'm';
      charArray0[4] = '}';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'm');
      assertArrayEquals(new char[] {'m', 'm', '}', 'm', '}'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2271);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (byte) (-1), (int) (byte) (-1));
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)43;
      byteArray0[3] = (byte)6;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)43, (byte)0, (byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)43, (byte)0, (byte)6}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)6;
      longArray0[1] = (long) (byte)43;
      longArray0[2] = (long) (byte)6;
      longArray0[3] = (long) (byte)6;
      longArray0[6] = (long) (byte)21;
      longArray0[5] = (long) 7;
      longArray0[6] = (long) (byte)54;
      longArray0[7] = (long) (byte)54;
      byteArray0[3] = (byte)6;
      ArrayUtils.swap(longArray0, (int) (byte)6, 2945, 2077);
      assertArrayEquals(new long[] {6L, 43L, 6L, 6L, 0L, 7L, 54L, 54L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)6);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)21, (byte)43, (byte)0, (byte)6}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1308);
      intArray0[1] = 2945;
      intArray0[2] = 2;
      intArray0[3] = 3;
      intArray0[4] = 2077;
      intArray0[5] = (int) (byte)54;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1308), 2945, 2, 3, 2077, 54}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)20;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)127, (-2020));
      assertArrayEquals(new byte[] {(byte)16, (byte)20}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)16;
      longArray0[1] = (long) (byte)16;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {16L, 16L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      longArray0[1] = 16L;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 100.0;
      doubleArray0[4] = (double) 16L;
      doubleArray0[5] = 1473.3768017;
      doubleArray0[6] = (double) (byte)16;
      doubleArray0[7] = (double) (-2020);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2034.59908), 100.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 100.0, 16.0, 1473.3768017, 16.0, (-2020.0)}, doubleArray0, 0.01);
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{7}", bitSet0.toString());
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)16;
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte)127);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)127, (byte)127, (byte)16}, byteArray1);
      assertArrayEquals(new byte[] {(byte)127, (byte)127, (byte)16, (byte)127}, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(3, byteArray1.length);
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)16;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (byte)16;
      shortArray0[3] = (short) (byte)16;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)16;
      shortArray0[7] = (short) (byte)16;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)16, (short)2, (short)16, (short)16, (short)0, (short)0, (short)16, (short)16}, shortArray0);
      assertArrayEquals(new short[] {(short)16, (short)2, (short)16, (short)16, (short)16, (short)16}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) (byte)16;
      floatArray0[3] = (float) (byte)16;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (byte)0;
      int int0 = ArrayUtils.indexOf(floatArray0, 985.35126F);
      assertArrayEquals(new float[] {0.0F, 2.0F, 16.0F, 16.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)16;
      intArray0[1] = (-1);
      intArray0[2] = (int) (short)2;
      int int1 = ArrayUtils.indexOf(intArray0, 15, (int) (short)16);
      assertArrayEquals(new int[] {16, (-1), 2}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, 2.0F, 16.0F, 16.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)16;
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (double) (short)16;
      doubleArray0[3] = (double) (short)16;
      doubleArray0[4] = (double) (byte)16;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 15.0, (int) (byte)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {16.0, 15.0, 16.0, 16.0, 16.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, doubleArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) 15, (-2086126971));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)60;
      ArrayUtils.shift(byteArray0, 2673, (int) (byte) (-113), 3449);
      assertArrayEquals(new byte[] {(byte) (-113), (byte) (-75), (byte)110, (byte)34, (byte)77, (byte)77, (byte)6, (byte)60}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Long long0 = new Long((-940L));
      assertNotNull(long0);
      assertEquals((-940L), (long)long0);
      
      String string0 = ArrayUtils.toString((Object) long0);
      assertNotNull(string0);
      assertEquals("-940", string0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)77;
      floatArray0[1] = (float) 3449;
      floatArray0[2] = (float) 3449;
      floatArray0[3] = (float) (byte) (-113);
      floatArray0[4] = (float) (byte)60;
      floatArray0[5] = (float) (byte)34;
      floatArray0[6] = (float) (byte)110;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertArrayEquals(new float[] {77.0F, 3449.0F, 3449.0F, (-113.0F), 60.0F, 34.0F, 110.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-324));
      assertNotNull(short0);
      assertEquals((short) (-324), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals(3, shortArray0.length);
      assertEquals((short) (-324), (short)short1);
      
      short[] shortArray1 = new short[4];
      shortArray1[0] = (short) shortArray0[0];
      shortArray1[1] = (short) shortArray0[0];
      shortArray1[2] = (short) (-324);
      shortArray1[3] = (short) (-16);
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertArrayEquals(new short[] {(short) (-324), (short) (-324), (short) (-324), (short) (-16)}, shortArray1);
      assertEquals(4, shortArray1.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)shortArray0[0];
      longArray0[1] = (long) (short) (-16);
      longArray0[2] = (long) (short) (-16);
      longArray0[3] = (long) (short) (-16);
      longArray0[4] = (-2465L);
      longArray0[5] = (long) (short)shortArray0[0];
      boolean boolean1 = ArrayUtils.contains(longArray0, 52L);
      assertArrayEquals(new long[] {(-324L), (-16L), (-16L), (-16L), (-2465L), (-324L)}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, longArray0.length);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2465L);
      doubleArray0[1] = (double) 52L;
      doubleArray0[2] = (double) (-16L);
      doubleArray0[3] = (double) (short) (-324);
      doubleArray0[4] = (double) (short) (-324);
      doubleArray0[5] = (-842.8);
      doubleArray0[6] = (double) (-16L);
      doubleArray0[7] = (double) (-16L);
      doubleArray0[8] = (double) (short) (-16);
      ArrayUtils.shift(doubleArray0, 160, (-807), (-364));
      assertArrayEquals(new double[] {(-2465.0), 52.0, (-16.0), (-324.0), (-324.0), (-842.8), (-16.0), (-16.0), (-16.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-864.5F);
      floatArray0[1] = (-864.5F);
      floatArray0[2] = (-800.79474F);
      floatArray0[3] = (-2090.829F);
      floatArray0[4] = (-4044.3271F);
      floatArray0[6] = (-3424.8635F);
      floatArray0[7] = 10.0F;
      floatArray0[8] = 1348.0F;
      ArrayUtils.shift(floatArray0, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {1348.0F, (-864.5F), (-864.5F), (-800.79474F), (-2090.829F), (-4044.3271F), 0.0F, (-3424.8635F), 10.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      ArrayUtils.shift((double[]) null, (-167), (-167), Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = 2053;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 2053);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2053, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)16, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      ArrayUtils.shift(charArray0, (int) (byte)0);
      assertArrayEquals(new char[] {'I', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)16;
      byteArray2[1] = (byte)16;
      Double[] doubleArray1 = new Double[3];
      doubleArray1[1] = (Double) 0.0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-242L);
      longArray0[2] = 0L;
      longArray0[3] = (-1832L);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      Object object0 = ArrayUtils.get(objectArray0, 52);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = null;
      ArrayUtils.shift(objectArray0, (-1166));
      assertEquals(3, objectArray0.length);
      
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, (-242L), 0L, (-1832L), 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'G');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (-1195);
      shortArray0[1] = (short)549;
      shortArray0[2] = (short) (-1195);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(18, shortArray0.length);
      assertEquals(18, shortArray1.length);
      
      ArrayUtils.shift((byte[]) null, (-2844));
      char[] charArray0 = new char[18];
      charArray0[0] = '8';
      charArray0[1] = '4';
      charArray0[2] = 'T';
      charArray0[3] = 'v';
      charArray0[4] = '#';
      charArray0[5] = '\"';
      charArray0[6] = '!';
      charArray0[7] = 'f';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(18, charArray0.length);
      assertEquals(17, charArray1.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'v';
      doubleArray0[1] = (double) (short)549;
      doubleArray0[2] = (double) '\"';
      doubleArray0[3] = (double) (short) (-1195);
      doubleArray0[4] = (double) '8';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-2844));
      assertArrayEquals(new double[] {118.0, 549.0, 34.0, (-1195.0), 56.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(5417);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-2466));
      assertNotNull(integer0);
      assertEquals((-2466), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(8, integerArray0.length);
      assertEquals((-2466), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("9I{", integerArray0[1]);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(8, integerArray0.length);
      assertEquals((-2466), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integer2);
      assertNotNull(integer3);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(8, integerArray0.length);
      assertEquals((-2466), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertEquals(8, integerArray0.length);
      assertEquals((-2466), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(90);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals(90, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-3005));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertEquals((-3005), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(920);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertEquals(920, (int)integer7);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (int)integerArray0[4];
      doubleArray0[1] = (double) (-2466);
      doubleArray0[2] = (-3350.775866502315);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-4139.04));
      assertArrayEquals(new double[] {(-2466.0), (-2466.0), (-3350.775866502315)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-126), (byte)byte1);
      
      byteArray0[4] = byte1;
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = '';
      charArray0[2] = 'N';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '', (-2));
      assertArrayEquals(new char[] {'U', '', 'N', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((long[]) null, (-594), (int) (byte) (-126), (int) (byte) (-126));
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)175, (-1273));
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int1);
      
      ArrayUtils.shift((double[]) null, (-2));
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = byte0;
      byteArray1[1] = (byte) (-126);
      byteArray1[2] = (byte) (-126);
      byteArray1[3] = (byte) (-126);
      byteArray1[4] = (byte) (-126);
      byteArray1[5] = byte0;
      byteArray1[6] = (byte) (-126);
      byteArray1[7] = byte0;
      ArrayUtils.shift(byteArray1, 3077, (-1273), 48);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-126), (byte) (-126), (byte) (-126), (byte) (-126), (byte) (-126), (byte) (-126), (byte) (-126)}, byteArray1);
      assertEquals(8, byteArray1.length);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((byte) (-126));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-126), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(90);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(90, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(48);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(48, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int1));
      assertEquals(4, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-503), (-503));
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      Float float0 = new Float((-422.5085F));
      assertNotNull(float0);
      assertEquals((-422.5085F), (float)float0, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) float0, (-503));
      assertFalse(int1 == int0);
      assertEquals(1, integerArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((char[]) null, 75, 0, int0);
      assertFalse(int0 == int1);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-849));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2002.6659F);
      ArrayUtils.shift(floatArray0, (-1224), (-1), (-503));
      assertArrayEquals(new float[] {(-2002.6659F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[1] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 2723L;
      longArray0[1] = 312L;
      boolean boolean2 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {2723L, 312L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean2);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      char[] charArray1 = new char[4];
      charArray1[0] = 'A';
      charArray1[1] = 'V';
      charArray1[2] = 'l';
      charArray1[3] = 'V';
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'A', 'V', 'l', 'V'}, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, characterArray0.length);
      
      Byte byte0 = new Byte((byte) (-60));
      assertNotNull(byte0);
      assertEquals((byte) (-60), (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) byte0, (int) (byte) (-60));
      assertArrayEquals(new char[] {'A', 'V', 'l', 'V'}, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, characterArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, (int) (byte) (-60), 247, 2);
      assertArrayEquals(new long[] {2723L, 312L}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, (int) (byte) (-60), (-1));
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray2);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {'A', 'V', 'l', 'V'}, charArray1);
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(0, charArray2.length);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'E';
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 'E';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 25.65F);
      assertArrayEquals(new float[] {69.0F, 0.0F, 69.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 25.65F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1));
      assertArrayEquals(new double[] {0.0, 25.649999618530273}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf(" 'A=IceMGu");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5);
      
      booleanArray0[4] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray1));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'E'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int int1 = 804;
      char[] charArray1 = ArrayUtils.subarray((char[]) null, (-1), 804);
      assertNull(charArray1);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {69.0F, 0.0F, 69.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {69.0F, 0.0F, 69.0F, 69.0F, 0.0F, 69.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-1084));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1084, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-503), (-503));
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'E', (-503));
      assertEquals((-1), int0);
      
      Integer integer0 = Integer.getInteger("qv'$m\"QJ4Anyk(u_pX", 0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-503));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-503), (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(0, (int)integer2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-919);
      intArray0[2] = 98;
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-919), (-1));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-919), 0, 98, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-919);
      doubleArray0[1] = 0.7;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 98;
      doubleArray0[5] = (double) (-919);
      doubleArray0[6] = (double) (-919);
      doubleArray0[7] = (double) 'E';
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.7, 0.0, 0.0, 98.0, (-919.0), (-919.0), 69.0, (-919.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 217.187450496;
      doubleArray0[1] = (-3340.4304546973785);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Byte byte0 = new Byte((byte) (-60));
      assertNotNull(byte0);
      assertEquals((byte) (-60), (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) ", Length: 0", 1489);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((char[]) null, (int) (byte) (-60), 2146764463);
      float[] floatArray0 = new float[3];
      doubleArray0[0] = (double) (-1);
      floatArray0[1] = (float) (byte) (-60);
      floatArray0[2] = (float) 2146764463;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1139.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-60.0F), 2.14676442E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1139.0F, 0.0F, (-60.0F), 2.14676442E9F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) ", Length: 0", 2145648783);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 2146764463, (-17));
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)16;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)16;
      shortArray0[7] = (short) (byte)16;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)16, (short)0, (short)0, (short)0, (short)16, (short)16}, shortArray0);
      assertArrayEquals(new short[] {(short)16, (short)16, (short)16}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (short)0, (int) (short)0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-28), 26);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)0;
      ArrayUtils.swap(byteArray0, (-123), (-2217), 979);
      assertArrayEquals(new byte[] {(byte)0, (byte)16, (byte)16, (byte)16, (byte)16, (byte)16, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      ArrayUtils.swap(intArray0, 1405, 979, 0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (byte)16;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)16;
      shortArray0[7] = (short) (byte)16;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)16, (short)0, (short)0, (short)0, (short)16, (short)16}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)16, (short)16, (short)16}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) (byte)16;
      floatArray0[3] = (float) (byte)16;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (byte)0;
      int int0 = ArrayUtils.indexOf(floatArray0, 985.35126F);
      assertArrayEquals(new float[] {0.0F, 2.0F, 16.0F, 16.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-1);
      int int1 = ArrayUtils.indexOf(intArray0, 15, (int) (short)0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, 2.0F, 16.0F, 16.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 122, 1472);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1307), (-1307));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[17];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-213);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)11167;
      shortArray0[4] = (short)57;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(17, shortArray0.length);
      assertEquals(17, shortArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-213);
      longArray0[2] = (long) (short)57;
      longArray0[3] = (long) (short)57;
      longArray0[0] = (long) (short)57;
      longArray0[5] = (long) (short)11167;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray1);
      assertNotNull(longArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new long[] {(-213L), 57L, 57L, 0L, 11167L}, longArray1);
      assertArrayEquals(new long[] {57L, (-213L), 57L, 57L, 0L, 11167L}, longArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, intArray1.length);
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1;
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(17, shortArray0.length);
      assertEquals(17, shortArray1.length);
      assertFalse(boolean0);
      
      Short[] shortArray2 = new Short[0];
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertNotNull(shortArray3);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertArrayEquals(new short[] {}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1679.0543359);
      float[] floatArray0 = new float[0];
      short[] shortArray0 = ArrayUtils.insert(1840, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1840);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 217.187450496;
      doubleArray0[1] = (-3340.4304546973785);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {217.187450496, (-3340.4304546973785), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = 'z';
      charArray0[2] = 'k';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'k');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\\', 'z', 'k'}, charArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)88;
      shortArray0[1] = (short)5972;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)111;
      shortArray0[4] = (short)96;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)88, (short)5972, (short) (-1), (short)111, (short)96}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)88, (short)5972, (short) (-1), (short)111, (short)96}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[1] = 3207L;
      longArray0[2] = (long) (-503);
      longArray0[3] = (long) (-503);
      longArray0[4] = (long) (byte)56;
      longArray0[5] = (-28L);
      longArray0[6] = 3207L;
      int int0 = ArrayUtils.indexOf(longArray0, 771L, (-503));
      assertArrayEquals(new long[] {0L, 3207L, (-503L), (-503L), 56L, (-28L), 3207L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)56;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-337));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)56}, shortArray0);
      assertArrayEquals(new short[] {(short) (-337), (short)56}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Byte byte0 = new Byte((byte)56);
      assertNotNull(byte0);
      assertEquals((byte)56, (byte)byte0);
      
      boolean boolean0 = ArrayUtils.isEquals(byte0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayUtils.swap((float[]) null, 8, (-103), 2410);
      Double double0 = new Double(642);
      assertNotNull(double0);
      assertEquals(642.0, (double)double0, 0.01);
      
      Double double1 = new Double(644.39641);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(644.39641, (double)double1, 0.01);
      
      Double double2 = new Double(644.39641);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(644.39641, (double)double2, 0.01);
      
      Double double3 = new Double(642);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(642.0, (double)double3, 0.01);
      
      Double double4 = new Double((-1.0));
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((-1.0), (double)double4, 0.01);
      
      Double double5 = new Double(0.0);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals(0.0, (double)double5, 0.01);
      
      Double double6 = new Double(693.42480104805);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals(693.42480104805, (double)double6, 0.01);
      
      Double double7 = new Double(2410);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertEquals(2410.0, (double)double7, 0.01);
      
      Double double8 = new Double((-2726.0));
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertEquals((-2726.0), (double)double8, 0.01);
      
      Double[] doubleArray1 = new Double[0];
      Double[] doubleArray2 = ArrayUtils.insert(0, doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 121, 0);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-242L);
      longArray0[2] = 0L;
      longArray0[4] = (-1L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, (-242L), 0L, 0L, (-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-128);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)99);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)45, (byte)35, (byte) (-13), (byte) (-128)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)45, (byte)35, (byte) (-13), (byte) (-128)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-242L);
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) (byte) (-53);
      doubleArray0[3] = (double) (-242L);
      doubleArray0[4] = (double) (byte)99;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-242.0), 2.147483647E9, (-53.0), (-242.0), 99.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-242.0), 2.147483647E9, (-53.0), (-242.0), 99.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)45, (byte)35, (byte) (-13), (byte) (-128)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)45, (byte)35, (byte) (-13), (byte) (-128)}, byteArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayUtils.swap(objectArray0, (-1), (-1));
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-83);
      byteArray0[8] = (byte)23;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)7);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-1), (byte) (-106), (byte)8, (byte)85, (byte) (-1), (byte)1, (byte) (-83), (byte)23}, byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-1), (byte) (-106), (byte)8, (byte)85, (byte) (-1), (byte)1, (byte) (-83), (byte)23}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-11);
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'd';
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)52;
      longArray0[1] = (long) (byte)43;
      longArray0[2] = (long) (short) (-2247);
      longArray0[3] = (long) (byte)43;
      longArray0[4] = (long) (byte) (-11);
      longArray0[5] = (long) (byte)52;
      longArray0[6] = (long) (short) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {52L, 43L, (-2247L), 43L, (-11L), 52L, (-1L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (byte)52;
      doubleArray0[2] = (double) (byte) (-11);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte)43, (int) (byte) (-11));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 52.0, (-11.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) '\u0000';
      longArray0[3] = (long) '\u0000';
      longArray0[4] = (long) 0;
      Integer integer0 = Integer.getInteger("{#yAV%(;", 0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-1648));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-1648), (int)integer1);
      
      Integer integer2 = new Integer((-919));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-919), (int)integer2);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1679.0543359);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-92));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (int) (short) (-92), 4135);
      assertNull(floatArray0);
      
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean2;
      booleanArray0[3] = boolean2;
      booleanArray0[4] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, (Boolean) boolean0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      ArrayUtils.shuffle(charArray0, (Random) null);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) 'Z';
      characterArray0[1] = (Character) 'Z';
      characterArray0[2] = (Character) 'Z';
      characterArray0[3] = (Character) 'Z';
      Character character0 = new Character('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      characterArray0[4] = character0;
      characterArray0[5] = (Character) 'Z';
      characterArray0[6] = (Character) 'Z';
      characterArray0[7] = (Character) 'Z';
      boolean boolean3 = ArrayUtils.isArrayIndexValid(characterArray0, 88);
      assertFalse(boolean3 == boolean0);
      assertEquals(8, characterArray0.length);
      assertFalse(boolean3);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (char)characterArray0[0];
      longArray0[1] = (long) (char)characterArray0[1];
      int int0 = ArrayUtils.indexOf(longArray0, 403L);
      assertArrayEquals(new long[] {90L, 90L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "bu[D-veQGNnGb";
      // Undeclared exception!
      try { 
        ArrayUtils.remove(stringArray0, (-2344));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2344, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      Float float0 = new Float((-422.5085F));
      assertNotNull(float0);
      assertEquals((-422.5085F), (float)float0, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) float0, (-503));
      assertFalse(int1 == int0);
      assertEquals(1, integerArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((char[]) null, 75, 0, int0);
      assertFalse(int0 == int1);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) int0, (double) (-422.5085F));
      assertFalse(int0 == int1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(int0 == int1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int int2 = ArrayUtils.lastIndexOf(intArray0, 3, (-2));
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int2);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray0, object0, 498);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      String string0 = ArrayUtils.toString(object0, "java.lang.String");
      assertNotNull(string0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-15117);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)642;
      shortArray0[6] = (short) (-1374);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)642);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)1, (short) (-15117), (short)1, (short)2, (short) (-1), (short)642, (short) (-1374)}, shortArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, shortArray0.length);
      
      boolean[] booleanArray2 = new boolean[2];
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      boolean[] booleanArray3 = ArrayUtils.removeElements(booleanArray2, booleanArray2);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray2, booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertEquals(0, booleanArray3.length);
      assertEquals(2, booleanArray2.length);
      
      Byte byte0 = new Byte((byte)42);
      assertNotNull(byte0);
      assertEquals((byte)42, (byte)byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 1, 2253);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short) (-2136);
      shortArray0[0] = (short) (-2136);
      short short1 = (short)0;
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2136), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2136), (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-158L));
      assertNotNull(long0);
      assertEquals((-158L), (long)long0);
      
      longArray0[0] = long0;
      long long1 = 0L;
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((-158L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertEquals((-158L), (long)long3);
      
      longArray0[3] = (Long) long1;
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift((Object[]) longArray0, 3453);
      assertEquals(4, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean1);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(529.4569939862782);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(529.457F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      boolean boolean2 = ArrayUtils.isSameType(long1, float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 2333);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 906);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 100.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2478);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2478, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(2146849667);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2146849667, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals(8, integerArray0.length);
      assertEquals(2146849667, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf((int) integerArray0[1]);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(8, integerArray0.length);
      assertEquals(2478, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-672));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertEquals((-672), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-109));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals((-109), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1499);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertEquals(1499, (int)integer7);
      
      integerArray0[7] = integer7;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {2, 2478, 2146849667, 2146849667, 2478, (-672), (-109), 1499}, intArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)7;
      longArray0[1] = (long) (byte)7;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)7, (int) (byte)7);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {7L, 7L}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte)7);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {7L, 7L}, longArray0);
      assertArrayEquals(new long[] {7L, 7L, 7L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0, (int) (byte)7, 295);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 7L;
      doubleArray0[1] = (double) (byte)7;
      doubleArray0[2] = (double) (byte)7;
      doubleArray0[4] = (double) 7L;
      doubleArray0[6] = (double) 7L;
      ArrayUtils.swap(doubleArray0, (-1178), (-83), (-115));
      assertArrayEquals(new double[] {7.0, 7.0, 7.0, 0.0, 7.0, 0.0, 7.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1276));
      assertNotNull(integer0);
      assertEquals((-1276), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("8", 56);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(56, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1098);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1098, (int)integer2);
      
      integerArray0[2] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1276), 56, 56}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)7;
      longArray0[1] = (long) (byte)7;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)7, (int) (byte)7);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {7L, 7L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte)7);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {7L, 7L}, longArray0);
      assertArrayEquals(new long[] {7L, 7L, 7L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0, (int) (byte)7, 295);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 7L;
      doubleArray0[1] = (double) (byte)7;
      doubleArray0[2] = (double) (byte)7;
      doubleArray0[3] = (double) (byte)7;
      doubleArray0[4] = (double) 7L;
      doubleArray0[5] = (double) (byte)7;
      doubleArray0[6] = (double) 7L;
      ArrayUtils.swap(doubleArray0, (-1178), (-83), (-115));
      assertArrayEquals(new double[] {7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1276));
      assertNotNull(integer0);
      assertEquals((-1276), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("8", 56);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(56, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1098);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1098, (int)integer2);
      
      integerArray0[2] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1276), 56, 1098}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2359L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2359L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 1);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2359.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, 1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = '1';
      charArray0[2] = 'n';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'1', 'n', 'n'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2398L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2398L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 1);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2398.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2725);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2725)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2550);
      assertArrayEquals(new short[] {(short) (-2725)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, 1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = '1';
      charArray0[2] = 'n';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'1', 'n', 'n'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2398L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2398L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 1);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2398.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2725);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2725)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2550);
      assertArrayEquals(new short[] {(short) (-2725)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, 1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = '1';
      charArray0[2] = '-';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'1', '-', 'n'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1307), (-1307));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[17];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-213);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)11167;
      shortArray0[4] = (short)57;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(17, shortArray0.length);
      assertEquals(17, shortArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-213);
      longArray0[2] = (long) (short)57;
      longArray0[3] = (long) (short)57;
      longArray0[0] = (long) (short)57;
      longArray0[5] = (long) (short)11167;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray1);
      assertNotNull(longArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new long[] {(-213L), 57L, 57L, 0L, 11167L}, longArray1);
      assertArrayEquals(new long[] {57L, (-213L), 57L, 57L, 0L, 11167L}, longArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, intArray1.length);
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1;
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(17, shortArray0.length);
      assertEquals(17, shortArray1.length);
      assertFalse(boolean0);
      
      Short[] shortArray2 = new Short[0];
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertNotNull(shortArray3);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertArrayEquals(new short[] {}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (double) 1384;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 430.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1384.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1384.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-11361);
      shortArray0[1] = (short) (-1594);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)2;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-11361), (short) (-1594), (short)1, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-11361), (short) (-1594), (short)1, (short)2, (short)2}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      Short[] shortArray2 = new Short[1];
      shortArray2[0] = (Short) (short)2;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertNotNull(shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertArrayEquals(new short[] {(short)2}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertEquals(1, shortArray2.length);
      assertEquals(1, shortArray3.length);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1737.9319F;
      floatArray0[1] = 3150.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2274.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-2079.0671F);
      int int0 = ArrayUtils.indexOf(floatArray0, 1737.9319F, 0);
      assertArrayEquals(new float[] {1737.9319F, 3150.0F, 0.0F, 2274.0F, 1.0F, (-2079.0671F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 3150.0F;
      objectArray0[1] = (Object) 2274.0F;
      objectArray0[2] = (Object) 1.0F;
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) long0);
      assertNotNull(object0);
      assertEquals(4, objectArray0.length);
      assertEquals(3150.0F, object0);
      
      objectArray0[3] = object0;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertEquals(4, objectArray0.length);
      assertEquals(3150.0F, object1);
      
      int int1 = ArrayUtils.indexOf(objectArray0, object1);
      assertTrue(int1 == int0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'I';
      charArray0[2] = 'b';
      charArray0[3] = '[';
      charArray0[4] = 'M';
      charArray0[5] = 'i';
      charArray0[6] = 'Q';
      ArrayUtils.swap(charArray0, 0, 1076, 2);
      assertArrayEquals(new char[] {'0', 'I', 'b', '[', 'M', 'i', 'Q'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean0);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean2);
      assertNotNull(boolean3);
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Character[] characterArray0 = new Character[1];
      char char0 = '\"';
      Character character0 = Character.valueOf('\"');
      assertNotNull(character0);
      assertEquals('\"', (char)character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-94);
      byteArray0[7] = (byte) (-96);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-94);
      floatArray0[1] = (float) (byte) (-96);
      floatArray0[2] = (float) (byte)117;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte) (-64), 365);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-94.0F), (-96.0F), 117.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-94.0F), (-96.0F), 117.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)117;
      longArray0[1] = (long) (byte) (-96);
      longArray0[2] = (long) (byte)3;
      longArray0[3] = 1L;
      longArray0[4] = (long) 365;
      longArray0[5] = 1007L;
      longArray0[6] = (long) char0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 3669L);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {3669L, 117L, (-96L), 3L, 1L, 365L, 1007L, 34L}, longArray1);
      assertArrayEquals(new long[] {117L, (-96L), 3L, 1L, 365L, 1007L, 34L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short) (byte)0;
      shortArray0[1] = (short)127;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)127;
      ArrayUtils.swap(shortArray0, (int) (short)0, 2);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Byte byte0 = new Byte((byte) (-78));
      assertNotNull(byte0);
      assertEquals((byte) (-78), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-78), object0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) (byte)0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, int0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)127, (short)0, (short)127}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray1.length);
      assertEquals(4, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)127, (short)0, (short)127}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)127, (short)0, (short)127}, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertEquals(4, shortArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-48));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)127;
      intArray0[1] = (int) (byte) (-78);
      intArray0[2] = (int) (short)127;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte) (-78);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '=';
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-3078);
      shortArray0[1] = (short) (-471);
      shortArray0[2] = (short) (-3078);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray1, (int) (short) (-3078), (int) (short) (-3078), (int) (short) (-471));
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-471);
      floatArray0[1] = (float) (short) (-3078);
      floatArray0[2] = (float) '=';
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-127), (int) (byte) (-127));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = (Character) '=';
      characterArray0[1] = (Character) '=';
      characterArray0[2] = (Character) '=';
      characterArray0[3] = (Character) '=';
      characterArray0[4] = (Character) '=';
      characterArray0[5] = (Character) '=';
      Character character0 = Character.valueOf('l');
      assertNotNull(character0);
      assertEquals('l', (char)character0);
      
      characterArray0[6] = character0;
      characterArray0[7] = (Character) '=';
      characterArray0[8] = (Character) '=';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'=', '=', '=', '=', '=', '=', 'l', '=', '='}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray1.length);
      assertEquals(9, characterArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)55);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-127)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-127)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1005.0847645881043;
      doubleArray0[1] = (double) 160;
      doubleArray0[2] = (double) (-364);
      doubleArray0[3] = (double) (-807);
      doubleArray0[4] = (-842.8);
      ArrayUtils.shift(doubleArray0, (-807), (-807), 160);
      assertArrayEquals(new double[] {1005.0847645881043, 160.0, (-364.0), (-807.0), (-842.8)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-364);
      intArray0[1] = 160;
      intArray0[2] = (-364);
      intArray0[3] = (-364);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-364), 160, (-364), (-364)}, intArray0);
      assertArrayEquals(new int[] {(-364), 160, (-364), (-364)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 160;
      floatArray0[1] = (float) 160;
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F, (-103));
      assertArrayEquals(new float[] {160.0F, 160.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-364);
      objectArray0[1] = (Object) 160;
      objectArray0[2] = (Object) (-807.0);
      ArrayUtils.swap(objectArray0, (-1), (-1597));
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Short short0 = new Short((short)51);
      assertNotNull(short0);
      assertEquals((short)51, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)51, object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      long[] longArray0 = new long[4];
      byteArray0[4] = (byte)57;
      longArray0[0] = (long) (short)51;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      int int0 = ArrayUtils.indexOf(floatArray0, 43.0F, (int) (byte) (-1));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int0);
      
      Byte[] byteArray1 = new Byte[6];
      byteArray1[0] = (Byte) (byte) (-1);
      byteArray1[1] = (Byte) (byte)57;
      byteArray1[2] = (Byte) (byte)0;
      Byte byte0 = Byte.valueOf((byte)57);
      assertNotNull(byte0);
      assertEquals((byte)57, (byte)byte0);
      
      byteArray1[3] = byte0;
      byteArray1[4] = (Byte) (byte)57;
      byteArray1[5] = (Byte) (byte) (-1);
      Byte byte1 = ArrayUtils.get(byteArray1, 296);
      assertNull(byte1);
      assertEquals(6, byteArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '!';
      ArrayUtils.swap(charArray0, 82, Integer.MAX_VALUE, (-665));
      assertArrayEquals(new char[] {'&', '!'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)21;
      byteArray0[3] = (byte)6;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)6;
      longArray0[1] = (long) (byte)21;
      longArray0[2] = (long) (byte)6;
      longArray0[3] = (long) (byte)6;
      longArray0[6] = (long) (byte)0;
      longArray0[6] = (long) (byte)54;
      longArray0[7] = (long) (byte)54;
      byteArray0[3] = (byte)6;
      ArrayUtils.swap(longArray0, (int) (byte)6, 2945, 2136);
      assertArrayEquals(new long[] {6L, 21L, 6L, 6L, 0L, 0L, 54L, 54L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2559;
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift((byte[]) null, 217);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-193);
      floatArray0[1] = (float) (short)2559;
      ArrayUtils.swap(floatArray0, 1, 217, (-193));
      assertArrayEquals(new float[] {(-193.0F), 2559.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Short short0 = new Short((short)2559);
      assertNotNull(short0);
      assertEquals((short)2559, (short)short0);
      
      Short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray1, short0);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)127);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte)116}, byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte)116}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-193.0F), 2559.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'a';
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1195);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)121, (short)0, (short)0, (short)0, (short) (-1195), (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)82;
      ArrayUtils.shift(byteArray0, (-3213));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-106), (byte)46, (byte)49, (byte)38, (byte)82, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short) (-1195);
      floatArray0[2] = (float) 'e';
      floatArray0[3] = (float) (byte) (-106);
      floatArray0[4] = (float) (short)121;
      floatArray0[5] = (float) (byte)82;
      floatArray0[6] = (float) 'e';
      ArrayUtils.swap(floatArray0, (int) (short)0, 1498, (int) (byte) (-106));
      assertArrayEquals(new float[] {0.0F, (-1195.0F), 101.0F, (-106.0F), 121.0F, 82.0F, 101.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3340.4304546973785);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      Float float0 = new Float(1176.5289F);
      assertNotNull(float0);
      assertEquals(1176.5289F, (float)float0, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) float0);
      assertNotNull(string0);
      assertEquals("1176.5289", string0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3340.4304546973785), (-1201), 2491.0);
      assertArrayEquals(new double[] {0.0, (-3340.4304546973785), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)78);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)78}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)7;
      longArray0[1] = (long) (byte)7;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)7, (int) (byte)7);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {7L, 7L}, longArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte)7);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {7L, 7L}, longArray0);
      assertArrayEquals(new long[] {7L, 7L, 7L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double((byte)7);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(7.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double1;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double1;
      Double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean3 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean3);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)7;
      intArray0[1] = (int) (byte)7;
      intArray0[2] = (int) (byte)7;
      intArray0[3] = (int) (byte)7;
      intArray0[4] = (int) (byte)7;
      intArray0[5] = (int) (byte)7;
      intArray0[6] = (int) (byte)7;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 160, 7);
      assertArrayEquals(new int[] {7, 7, 7, 7, 7, 7, 7}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 920.5897F;
      floatArray0[1] = 0.0F;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {0.0F, 920.5897F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1679.0543359));
      assertNotNull(double0);
      assertEquals((-1679.0543359), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Double double1 = new Double(1188.958272507735);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1188.958272507735, (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      Double double2 = new Double(0.0F);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[3] = double2;
      Class<Double[]> class0 = Double[].class;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0, class0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1991));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = 'B';
      charArray0[2] = '%';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-1991), 'J');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1991, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-126), (byte)byte1);
      
      byteArray0[0] = byte1;
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = '';
      charArray0[2] = 'U';
      charArray0[3] = '}';
      ArrayUtils.swap(charArray0, (-2), (-2), (-2));
      assertArrayEquals(new char[] {'U', '', 'U', '}'}, charArray0);
      assertEquals(4, charArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray1 = new byte[5];
      byte byte2 = (byte) (-1);
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-126);
      byteArray1[2] = (byte) (-126);
      byteArray1[3] = (byte) (-126);
      byteArray1[4] = byte0;
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray1, (byte)1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-126), (byte) (-126), (byte) (-126), (byte) (-126)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-126), (byte) (-126), (byte) (-126), (byte) (-126)}, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(5, byteArray2.length);
      assertEquals(5, byteArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 1754, '}');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1754, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 330, (int) (short) (-1195));
      assertNull(floatArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1195);
      ArrayUtils.reverse(intArray0, 366, (-1195));
      assertArrayEquals(new int[] {(-1195)}, intArray0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)1;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-74), (byte)125, (byte)2, (byte)102, (byte) (-1), (byte)76}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1307), (-1307));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-213);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)11158;
      shortArray0[4] = (short)57;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-213), (short)1, (short)11158, (short)57}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-213), (short)1, (short)11158, (short)57}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-213);
      longArray0[2] = (long) (short)57;
      longArray0[3] = (long) (short)1;
      longArray0[4] = (long) (short)57;
      longArray0[5] = (long) (short)11158;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray1);
      assertNotNull(longArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new long[] {(-213L), 57L, 1L, 57L, 11158L}, longArray1);
      assertArrayEquals(new long[] {0L, (-213L), 57L, 1L, 57L, 11158L}, longArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, intArray1.length);
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Short[] shortArray2 = new Short[8];
      shortArray2[0] = (Short) (short)11158;
      shortArray2[1] = (Short) (short)57;
      shortArray2[2] = (Short) (short)11158;
      shortArray2[3] = short0;
      shortArray2[4] = short0;
      shortArray2[5] = (Short) (short)1;
      shortArray2[6] = (Short) (short)57;
      shortArray2[7] = (Short) (short)1;
      Short[] shortArray3 = ArrayUtils.removeAll(shortArray2, intArray1);
      assertNotNull(shortArray3);
      assertNotSame(intArray1, intArray0);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertEquals(1, intArray1.length);
      assertEquals(8, shortArray2.length);
      assertEquals(7, shortArray3.length);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = ArrayUtils.get(objectArray0, 1569);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      Short short0 = Short.valueOf((short)1143);
      assertNotNull(short0);
      assertEquals((short)1143, (short)short0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object1);
      assertEquals((short)1143, object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)1143;
      intArray0[1] = 1569;
      intArray0[2] = 41;
      intArray0[3] = 1569;
      intArray0[4] = (int) (short)1143;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {1143, 1569, 41, 1569, 1143}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1072;
      shortArray0[1] = (short)10;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)10);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1072, (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)1072}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)1072, (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)1072}, shortArray1);
      assertArrayEquals(new short[] {(short)1072}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = byte0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray2, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(3, byteArray2.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[6] = (double) byte0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray1);
      assertNotNull(objectArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, objectArray0);
      assertSame(byteArray1, objectArray0);
      assertSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(1, byteArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 3;
      intArray0[4] = (int) (short)10;
      intArray0[5] = (int) (short)10;
      intArray0[6] = (int) byte0;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 10);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 3, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 3, 10, 10, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray1.length);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      ArrayUtils.reverse((char[]) null, 508, 508);
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("#EL*NK 4^s~r");
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("MI`F,$ FOU{R:");
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf(false);
      assertNotNull(boolean6);
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7);
      
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, boolean7);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 508;
      longArray0[1] = (long) 508;
      longArray0[2] = (long) 508;
      longArray0[3] = 52L;
      longArray0[4] = (long) 508;
      longArray0[5] = (long) 508;
      longArray0[6] = (long) 508;
      longArray0[7] = (long) 508;
      ArrayUtils.swap(longArray0, 88, 508);
      assertArrayEquals(new long[] {508L, 508L, 508L, 52L, 508L, 508L, 508L, 508L}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(737);
      assertNotNull(integer0);
      assertEquals(737, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(9, integerArray0.length);
      assertEquals(737, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(737);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(737, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(18);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(18, (int)integer3);
      
      integerArray0[3] = integer3;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (int)integerArray0[0];
      longArray0[1] = (long) (int)integerArray0[2];
      longArray0[2] = (long) (int)integerArray0[2];
      longArray0[3] = (-3258L);
      ArrayUtils.swap(longArray0, 161, (int) integerArray0[0]);
      assertArrayEquals(new long[] {737L, 737L, 737L, (-3258L)}, longArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(4, longArray0.length);
      
      Float float0 = new Float(1025.8844823163072);
      assertNotNull(float0);
      assertEquals(1025.8845F, (float)float0, 0.01F);
      
      try { 
        Byte.valueOf((String) null, 2550);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 906);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 100.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('|');
      assertNotNull(character0);
      assertEquals('|', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = 'P';
      Character character1 = new Character('P');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('P', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertNotNull(character2);
      assertTrue(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('P', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('%');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('%', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(char0);
      assertNotNull(character4);
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertEquals('P', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('%');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char0));
      assertEquals('%', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('R');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertEquals('R', (char)character6);
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.insert(2, characterArray0, characterArray0);
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(14, characterArray1.length);
      assertEquals(7, characterArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 64;
      longArray0[1] = (long) (-2427);
      longArray0[2] = (long) (-2427);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) (short)605;
      floatArray0[2] = (float) (-2427);
      ArrayUtils.swap(floatArray0, 8, 8, 642);
      assertArrayEquals(new float[] {8.0F, 605.0F, (-2427.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Double double0 = new Double(2852.0);
      assertNotNull(double0);
      assertEquals(2852.0, (double)double0, 0.01);
      
      Double double1 = new Double(2852.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2852.0, (double)double1, 0.01);
      
      Double double2 = new Double((-1116.32628694));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-1116.32628694), (double)double2, 0.01);
      
      Double double3 = new Double(605.0F);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(605.0, (double)double3, 0.01);
      
      Double double4 = new Double(693.42480104805);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals(693.42480104805, (double)double4, 0.01);
      
      Double double5 = new Double(605.0F);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals(605.0, (double)double5, 0.01);
      
      Double double6 = new Double(8);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals(8.0, (double)double6, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      Double double7 = new Double((-1116.32628694));
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertEquals((-1116.32628694), (double)double7, 0.01);
      
      doubleArray0[0] = double7;
      Double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      long[] longArray1 = ArrayUtils.subarray((long[]) null, 0, 2146373607);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[7];
      Byte byte0 = new Byte((byte) (-126));
      assertNotNull(byte0);
      assertEquals((byte) (-126), (byte)byte0);
      
      byteArray0[0] = byte0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = '';
      charArray0[2] = 'N';
      charArray0[3] = '}';
      ArrayUtils.swap(charArray0, (-2), (-2), (-2));
      assertArrayEquals(new char[] {'U', '', 'N', '}'}, charArray0);
      assertEquals(4, charArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) 'N';
      ArrayUtils.shift(objectArray0, (int) (byte) (-126));
      assertEquals(2, objectArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "~7?\u0000hF4$";
      stringArray0[1] = "org.apache.commons.lang3.StringUtils";
      stringArray0[2] = "jdp2o+TqJLq,:K9";
      stringArray0[3] = "XcQT66+'c/t$<VSd";
      stringArray0[4] = ", '";
      stringArray0[5] = "java.lang.Boolean";
      String[] stringArray1 = ArrayUtils.addFirst(stringArray0, "h`cP=m4J.VAO?");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 271L;
      longArray0[1] = 2147483647L;
      longArray0[2] = (-1L);
      longArray0[3] = 1L;
      longArray0[4] = (-1L);
      longArray0[5] = (-389L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 271L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {271L, 2147483647L, (-1L), 1L, (-1L), (-389L)}, longArray0);
      assertArrayEquals(new long[] {2147483647L, (-1L), 1L, (-1L), (-389L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (-756.506);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 2147483647L;
      doubleArray0[8] = (double) (-389L);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-756.506), (-2729));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0), (-756.506), 1.0, 1.0, 1.0, (-1.0), 1.0, 2.147483647E9, (-389.0)}, doubleArray0, 0.01);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1417);
      shortArray0[2] = (short)1153;
      shortArray0[3] = (short) (-2184);
      shortArray0[4] = (short)272;
      shortArray0[5] = (short)99;
      shortArray0[6] = (short)2902;
      shortArray0[7] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2902);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-1417), (short)1153, (short) (-2184), (short)272, (short)99, (short)2902, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-1417), (short)1153, (short) (-2184), (short)272, (short)99, (short) (-1)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(7, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 3150.0F;
      floatArray0[2] = 3150.0F;
      floatArray0[3] = 3150.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 0);
      assertArrayEquals(new float[] {0.0F, 3150.0F, 3150.0F, 3150.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 3150.0F;
      objectArray0[1] = (Object) 3150.0F;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1244);
      shortArray0[1] = (short)3299;
      shortArray0[2] = (short) (-1244);
      shortArray0[3] = (short) (-1244);
      shortArray0[4] = (short) (-1244);
      shortArray0[5] = (short) (-1244);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)45);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1244), (short)3299, (short) (-1244), (short) (-1244), (short) (-1244), (short) (-1244)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1244), (short)3299, (short) (-1244), (short) (-1244), (short) (-1244), (short) (-1244)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (-1195);
      shortArray0[1] = (short)549;
      shortArray0[2] = (short) (-1195);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-1195);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Byte byte0 = new Byte((byte) (-60));
      assertNotNull(byte0);
      assertEquals((byte) (-60), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-119));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-119), (byte)byte1);
      
      ArrayUtils.reverse((char[]) null, (int) (short) (-1195), 2);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1139.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1195.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1139.0F, (-1195.0F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '\"');
      assertNull(charArray0);
      
      ArrayUtils.swap(floatArray1, (-1308), (int) (short)549, (-2808));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1195.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1139.0F, (-1195.0F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      MutableInt mutableInt0 = new MutableInt((Number) byte1);
      assertNotNull(mutableInt0);
      assertEquals((-119), mutableInt0.intValue());
      assertEquals("-119", mutableInt0.toString());
      assertEquals((-119.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-119L), mutableInt0.longValue());
      assertEquals((-119), (int)mutableInt0.getValue());
      assertEquals((short) (-119), mutableInt0.shortValue());
      assertEquals((-119.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-119), (int)mutableInt0.toInteger());
      assertEquals((byte) (-119), mutableInt0.byteValue());
      assertFalse(byte1.equals((Object)byte0));
      
      mutableInt0.setValue((Number) (short)549);
      assertEquals(549, (int)mutableInt0.toInteger());
      assertEquals(549.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)37, mutableInt0.byteValue());
      assertEquals(549, (int)mutableInt0.getValue());
      assertEquals(549.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(549L, mutableInt0.longValue());
      assertEquals("549", mutableInt0.toString());
      assertEquals(549, mutableInt0.intValue());
      assertEquals((short)549, mutableInt0.shortValue());
      assertFalse(byte1.equals((Object)byte0));
      
      MutableInt[] mutableIntArray0 = ArrayUtils.addFirst((MutableInt[]) null, mutableInt0);
      assertNotNull(mutableIntArray0);
      assertEquals(549, (int)mutableInt0.toInteger());
      assertEquals(549.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)37, mutableInt0.byteValue());
      assertEquals(549, (int)mutableInt0.getValue());
      assertEquals(549.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(549L, mutableInt0.longValue());
      assertEquals("549", mutableInt0.toString());
      assertEquals(549, mutableInt0.intValue());
      assertEquals((short)549, mutableInt0.shortValue());
      assertFalse(byte1.equals((Object)byte0));
      assertEquals(1, mutableIntArray0.length);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (-1195);
      shortArray0[1] = (short)549;
      shortArray0[2] = (short) (-1195);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(18, shortArray0.length);
      assertEquals(18, shortArray1.length);
      
      ArrayUtils.shift((byte[]) null, (-2844));
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = '4';
      charArray0[2] = 'T';
      charArray0[3] = 'v';
      charArray0[4] = '#';
      charArray0[5] = '\"';
      charArray0[6] = '!';
      charArray0[7] = 'f';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'8', '4', 'T', 'v', '#', '\"', '!', 'f'}, charArray0);
      assertArrayEquals(new char[] {'8', 'T', 'v', '#', '\"', '!', 'f'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1195);
      ArrayUtils.swap(floatArray0, 340, 2146026739, (-1308));
      assertArrayEquals(new float[] {(-1195.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertEquals(18, shortArray0.length);
      assertEquals(18, shortArray2.length);
      assertEquals(18, shortArray1.length);
      
      MutableInt mutableInt0 = new MutableInt((-1195.0F));
      assertNotNull(mutableInt0);
      assertEquals((-1195), mutableInt0.intValue());
      assertEquals((byte)85, mutableInt0.byteValue());
      assertEquals((-1195.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1195), (int)mutableInt0.getValue());
      assertEquals("-1195", mutableInt0.toString());
      assertEquals((short) (-1195), mutableInt0.shortValue());
      assertEquals((-1195L), mutableInt0.longValue());
      assertEquals((-1195), (int)mutableInt0.toInteger());
      assertEquals((-1195.0F), mutableInt0.floatValue(), 0.01F);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.addFirst((MutableInt[]) null, mutableInt0);
      assertNotNull(mutableIntArray0);
      assertEquals((-1195), mutableInt0.intValue());
      assertEquals((byte)85, mutableInt0.byteValue());
      assertEquals((-1195.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1195), (int)mutableInt0.getValue());
      assertEquals("-1195", mutableInt0.toString());
      assertEquals((short) (-1195), mutableInt0.shortValue());
      assertEquals((-1195L), mutableInt0.longValue());
      assertEquals((-1195), (int)mutableInt0.toInteger());
      assertEquals((-1195.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals(1, mutableIntArray0.length);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ArrayUtils.swap((boolean[]) null, 893, 2797, 2797);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Float float0 = new Float((double) 893);
      assertNotNull(float0);
      assertEquals(893.0F, (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameType(float0, float0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)35);
      assertArrayEquals(new byte[] {(byte)35}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, '.', (int) (byte)35);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) '.';
      floatArray0[2] = (float) (byte)35;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 46.0F, 35.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 46.0F, 35.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(3, floatArray2.length);
      
      Integer integer0 = Integer.getInteger("X0y68^il^4nVG`}NVg", 1497);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(1497, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      
      ArrayUtils.reverse((boolean[]) null, 2797, (int) (byte)35);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)35;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)35}, shortArray0);
      assertArrayEquals(new short[] {(short)35}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2271);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      AbstractMap.SimpleEntry<Boolean, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Boolean, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 7);
      Boolean boolean1 = Boolean.valueOf("java.lang.Double");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      AbstractMap.SimpleEntry<Boolean, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Boolean, String>(boolean1, "fcj[0,R{Z]aklT");
      assertNotNull(abstractMap_SimpleEntry0);
      assertTrue(boolean1.equals((Object)boolean0));
      
      AbstractMap.SimpleImmutableEntry<Boolean, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Boolean, String>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(boolean1.equals((Object)boolean0));
      
      AbstractMap.SimpleEntry<Boolean, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Boolean, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry1;
      AbstractMap.SimpleEntry<Boolean, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Boolean, String>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry2);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry2;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      AbstractMap.SimpleEntry<Boolean, String> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Boolean, String>(boolean2, "java.lang.Double");
      assertNotNull(abstractMap_SimpleEntry3);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry3;
      AbstractMap.SimpleEntry<Boolean, String> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Boolean, String>((Boolean) false, "fcj[0,R{Z]aklT");
      assertNotNull(abstractMap_SimpleEntry4);
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry4;
      AbstractMap.SimpleEntry<Boolean, String> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Boolean, String>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry5);
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean0));
      
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry5;
      AbstractMap.SimpleEntry<Boolean, String> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<Boolean, String>(abstractMap_SimpleEntry2);
      assertNotNull(abstractMap_SimpleEntry6);
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry4));
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry4));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry5));
      
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry6;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      AbstractMap.SimpleEntry<Boolean, String> abstractMap_SimpleEntry7 = new AbstractMap.SimpleEntry<Boolean, String>(boolean3, "java.lang.Double");
      assertNotNull(abstractMap_SimpleEntry7);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry5));
      assertTrue(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry6));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry1));
      
      abstractMap_SimpleEntryArray0[6] = abstractMap_SimpleEntry7;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1239), abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1239, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, (-2844));
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1195);
      ArrayUtils.swap(floatArray0, (int) (short)549, 8, (int) (short) (-1195));
      assertArrayEquals(new float[] {(-1195.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(693.42480104805);
      assertNotNull(double0);
      assertEquals(693.42480104805, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((short)549);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(549.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2844));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-2844.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      doubleArray0[3] = doubleArray0[0];
      Double double3 = new Double(97.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(97.0, (double)double3, 0.01);
      
      doubleArray0[4] = double3;
      Double double4 = new Double(1493.106);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals(1493.106, (double)double4, 0.01);
      
      doubleArray0[5] = double4;
      Double double5 = new Double(97.0);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals(97.0, (double)double5, 0.01);
      
      doubleArray0[6] = double5;
      Double double6 = new Double(1803.14586910429);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals(1803.14586910429, (double)double6, 0.01);
      
      doubleArray0[7] = double6;
      Double double7 = new Double((-1195.0F));
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertEquals((-1195.0), (double)double7, 0.01);
      
      doubleArray0[8] = double7;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) 549, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 549, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[4] = '6';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '6';
      floatArray0[1] = (-0.78696525F);
      floatArray0[2] = (float) '6';
      ArrayUtils.swap(floatArray0, 8, (-68), (-68));
      assertArrayEquals(new float[] {54.0F, (-0.78696525F), 54.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Double double0 = new Double(2814.0);
      assertNotNull(double0);
      assertEquals(2814.0, (double)double0, 0.01);
      
      Double double1 = new Double((-0.78696525F));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-0.7869652509689331), (double)double1, 0.01);
      
      Double double2 = new Double((-3631.51));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-3631.51), (double)double2, 0.01);
      
      Double double3 = new Double(100.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(100.0, (double)double3, 0.01);
      
      Double double4 = new Double(1493.106);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals(1493.106, (double)double4, 0.01);
      
      Double double5 = new Double((-44.9376));
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((-44.9376), (double)double5, 0.01);
      
      Double double6 = new Double((-389.0));
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((-389.0), (double)double6, 0.01);
      
      Double double7 = new Double(1493.106);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertEquals(1493.106, (double)double7, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.insert(8, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      
      Double double8 = ArrayUtils.get(doubleArray0, (-1024));
      assertNull(double8);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Character character0 = new Character('8');
      assertNotNull(character0);
      assertEquals('8', (char)character0);
      
      Character character1 = Character.valueOf('a');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('a', (char)character1);
      
      Character character2 = Character.valueOf('a');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertEquals('a', (char)character2);
      
      int int0 = (-279);
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character1;
      Character character3 = new Character('2');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertEquals('2', (char)character3);
      
      characterArray0[1] = character3;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-279), characterArray0, characterArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -279, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, (-2844));
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = '4';
      charArray0[2] = 'T';
      charArray0[3] = 'v';
      charArray0[4] = '#';
      charArray0[5] = '\"';
      charArray0[6] = 'T';
      charArray0[7] = 'f';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'8', '4', 'T', 'v', '#', '\"', 'T', 'f'}, charArray0);
      assertArrayEquals(new char[] {'8', 'T', 'v', '#', '\"', 'T', 'f'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1195);
      char[] charArray2 = ArrayUtils.removeElement(charArray0, 'f');
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'8', '4', 'T', 'v', '#', '\"', 'T', 'f'}, charArray0);
      assertArrayEquals(new char[] {'8', '4', 'T', 'v', '#', '\"', 'T'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray2.length);
      
      ArrayUtils.swap(floatArray0, (int) (short)549, 8, (int) (short) (-1195));
      assertArrayEquals(new float[] {(-1195.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(694.02529124326);
      assertNotNull(double0);
      assertEquals(694.02529124326, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((short)549);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(549.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2844));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-2844.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = Double.valueOf((double) (-1195.0F));
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((-1195.0), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(97.0);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals(97.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(1493.106);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals(1493.106, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(97.0);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertEquals(97.0, (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(1803.14586910429);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertEquals(1803.14586910429, (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      Double double8 = new Double((-1195.0F));
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertEquals((double)double8, (double)double3, 0.01);
      assertEquals((-1195.0), (double)double8, 0.01);
      
      doubleArray0[8] = double8;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) 549, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 549, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-158L));
      assertNotNull(long0);
      assertEquals((-158L), (long)long0);
      
      longArray0[0] = long0;
      long long1 = 0L;
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((-158L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertEquals((-158L), (long)long3);
      
      longArray0[2] = long3;
      longArray0[3] = (Long) long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-158L), 0L, (-158L), 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = 'J';
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray0, (byte)0);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 773, (int) (byte)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Short short0 = new Short((short) (-1104));
      assertNotNull(short0);
      assertEquals((short) (-1104), (short)short0);
      
      ArrayUtils.swap(byteArray0, (int) (short)0, (int) (short)0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 773;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) 'J';
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) 'J';
      doubleArray0[7] = (double) long1;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 74.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 773.0, 0.0, 0.0, 0.0, 74.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 773.0, 0.0, 0.0, 74.0, 0.0, 74.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[2] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean1);
      assertNotNull(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[3] = boolean2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2559;
      shortArray0[1] = (short)732;
      shortArray0[2] = (short)2559;
      shortArray0[3] = (short)2559;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)2559;
      floatArray0[1] = (float) (short)2559;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {2559.0F, 2559.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.insert((-1430), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)2559;
      int[] intArray1 = ArrayUtils.add(intArray0, (-4725));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2559}, intArray0);
      assertArrayEquals(new int[] {2559, (-4725)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 2559;
      doubleArray1[1] = (double) (short)732;
      doubleArray1[2] = (double) (-4725);
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) (short)2559);
      assertArrayEquals(new double[] {2559.0, 732.0, (-4725.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)75;
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) (byte)65;
      objectArray0[1] = (Object) (byte)65;
      objectArray0[2] = (Object) (byte)65;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(12, objectArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)75;
      longArray0[1] = (long) (byte)80;
      ArrayUtils.shift(longArray0, 512);
      assertArrayEquals(new long[] {75L, 80L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)75;
      ArrayUtils.swap(shortArray0, (int) (short)1606, (-3224), (-1));
      assertArrayEquals(new short[] {(short)75}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Long long0 = new Long(1803L);
      assertNotNull(long0);
      assertEquals(1803L, (long)long0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) long0);
      assertEquals(12, objectArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)65;
      intArray0[1] = (int) (byte)75;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-1);
      intArray0[4] = (int) (byte)75;
      intArray0[5] = (int) (short)1606;
      intArray0[6] = 512;
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)0);
      assertArrayEquals(new int[] {65, 75, 0, (-1), 75, 1606, 512}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(7, intArray0.length);
      assertEquals(2, int1);
      
      int int2 = ArrayUtils.indexOf(shortArray0, (short)91);
      assertArrayEquals(new short[] {(short)75}, shortArray0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 217.187450496;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 217.187450496}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) (byte)16;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) (byte)16;
      objectArray0[5] = (Object) (byte)16;
      objectArray0[6] = (Object) 0.0;
      Short short0 = new Short((short)9);
      assertNotNull(short0);
      assertEquals((short)9, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)9, object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0, (int) (byte)16);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(7, objectArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 171.181611808299;
      doubleArray0[1] = 988.2239999999999;
      doubleArray0[2] = 67.85;
      doubleArray0[3] = 2942.41807331088;
      ArrayUtils.reverse(doubleArray0, 418, (-13));
      assertArrayEquals(new double[] {171.181611808299, 988.2239999999999, 67.85, 2942.41807331088}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-1374));
      assertNotNull(short0);
      assertEquals((short) (-1374), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-21319));
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-21319), (short)short1);
      
      shortArray0[1] = short1;
      short short2 = (short) (-13);
      Short short3 = new Short((short) (-13));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertEquals((short) (-13), (short)short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short(short2);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short3));
      assertEquals((short) (-13), (short)short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)1338);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertEquals((short)1338, (short)short5);
      
      shortArray0[4] = short5;
      Short short6 = new Short((short) (-13));
      assertNotNull(short6);
      assertTrue(short6.equals((Object)short4));
      assertTrue(short6.equals((Object)short2));
      assertTrue(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertEquals((short) (-13), (short)short6);
      
      shortArray0[5] = short6;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 418);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 418, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Short short0 = new Short((short)323);
      assertNotNull(short0);
      assertEquals((short)323, (short)short0);
      
      Short short1 = new Short((short) (-29));
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-29), (short)short1);
      
      Short short2 = new Short((short)1);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)1, (short)short2);
      
      Short[] shortArray0 = new Short[9];
      Short short3 = new Short((short) (-11361));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-11361), (short)short3);
      
      shortArray0[0] = short3;
      shortArray0[1] = short0;
      shortArray0[2] = short2;
      shortArray0[3] = short1;
      shortArray0[4] = short0;
      shortArray0[5] = short2;
      shortArray0[6] = short1;
      shortArray0[7] = short2;
      shortArray0[8] = short2;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 1339);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1339, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 171.181611808299;
      doubleArray0[1] = 988.2239999999999;
      doubleArray0[2] = 67.85;
      doubleArray0[3] = 2942.41807331088;
      ArrayUtils.reverse(doubleArray0, 418, (-3191));
      assertArrayEquals(new double[] {171.181611808299, 988.2239999999999, 67.85, 2942.41807331088}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-1374));
      assertNotNull(short0);
      assertEquals((short) (-1374), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-21319));
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-21319), (short)short1);
      
      shortArray0[1] = short1;
      short short2 = (short) (-13);
      Short short3 = new Short((short) (-13));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertEquals((short) (-13), (short)short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short(short2);
      assertNotNull(short4);
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertEquals((short) (-13), (short)short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)1338);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      assertEquals((short)1338, (short)short5);
      
      shortArray0[4] = short5;
      Short short6 = new Short((short) (-13));
      assertNotNull(short6);
      assertTrue(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short0));
      assertTrue(short6.equals((Object)short3));
      assertTrue(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertEquals((short) (-13), (short)short6);
      
      shortArray0[5] = short6;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 418);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 418, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '=';
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-3078);
      shortArray0[1] = (short) (-471);
      shortArray0[2] = (short) (-3078);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray1, (int) (short) (-3078), (int) (short) (-3078), (int) (short) (-471));
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-471);
      floatArray0[1] = (float) (short) (-3078);
      floatArray0[2] = (float) '=';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 6, (-551));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-471.0F), (-3078.0F), 61.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray1, 2, 0, 78);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Short[] shortArray2 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(0, shortArray2.length);
      
      float[] floatArray0 = new float[1];
      try { 
        Short.valueOf("java.lang.Boolean", 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray0, object0, 498);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      String string0 = ArrayUtils.toString(object0, "java.lang.String");
      assertNotNull(string0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-15117);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)642;
      shortArray0[6] = (short) (-1374);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)642);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)1, (short) (-15117), (short)1, (short)2, (short) (-1), (short)642, (short) (-1374)}, shortArray0);
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, shortArray0.length);
      
      String string1 = ArrayUtils.toString((Object) "java.lang.Object@257c208f", "E*,{6IH`@6)!_D");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-2147483648L);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2147483648L);
      floatArray0[1] = (float) (-2147483648L);
      floatArray0[2] = (float) 64L;
      floatArray0[3] = (float) (-2147483648L);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-2.14748365E9F), (-2.14748365E9F), 64.0F, (-2.14748365E9F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1724, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1724, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-30309);
      shortArray0[2] = (short)988;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)42;
      shortArray0[5] = (short) (-177);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)8;
      floatArray0[1] = (float) (short)988;
      floatArray0[2] = (float) (short)42;
      floatArray0[3] = (float) (short)42;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short) (-177));
      assertArrayEquals(new float[] {8.0F, 988.0F, 42.0F, 42.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((int[]) null, (-1944), (int) (short)988);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {8.0F, 988.0F, 42.0F, 42.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (byte)16;
      shortArray0[3] = (short) (byte)16;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)16;
      shortArray0[7] = (short) (byte)16;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)16, (short)16, (short)0, (short)0, (short)16, (short)16}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)16, (short)16, (short)16, (short)16}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) (byte)16;
      floatArray0[3] = (float) (byte)16;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (byte)0;
      int int0 = ArrayUtils.indexOf(floatArray0, 985.35126F);
      assertArrayEquals(new float[] {0.0F, 2.0F, 16.0F, 16.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-1);
      intArray0[2] = (int) (short)2;
      int int1 = ArrayUtils.indexOf(intArray0, 15, (int) (short)0);
      assertArrayEquals(new int[] {0, (-1), 2}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, 2.0F, 16.0F, 16.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      Float float0 = new Float((-422.5085F));
      assertNotNull(float0);
      assertEquals((-422.5085F), (float)float0, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) float0, (-503));
      assertFalse(int1 == int0);
      assertEquals(1, integerArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift((byte[]) null, (-503));
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 1927, 95, 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1);
      
      float[] floatArray1 = ArrayUtils.insert(95, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-1), (short)117);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      char[] charArray0 = new char[6];
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-3078);
      shortArray0[1] = (short) (-471);
      shortArray0[2] = (short) (-3078);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray1, (int) (short) (-3078), (int) (short) (-3078), (int) (short) (-471));
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray1.length);
      
      float[] floatArray0 = new float[3];
      Short[] shortArray2 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray2.length);
      
      ArrayUtils.shift((byte[]) null, 232);
      ArrayUtils.swap(floatArray0, 1, (-1), 95);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-126), (byte)byte1);
      
      byteArray0[0] = byte1;
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = '';
      charArray0[2] = 'N';
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) byte0;
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'U', '', 'N', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'U', 'N', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-126);
      floatArray1[1] = (float) '';
      floatArray1[2] = (float) 'N';
      floatArray1[3] = (-2049.149F);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray0);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertArrayEquals(new float[] {127.0F, 78.0F, (-2049.149F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-126.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-126.0F), 127.0F, 78.0F, (-2049.149F)}, floatArray1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray2.length);
      assertEquals(9, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 1085, 12);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean0);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean2);
      assertNotNull(boolean3);
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('\"');
      assertNotNull(character0);
      assertEquals('\"', (char)character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-94);
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte)16;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)117, 2146026739);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-13), (byte) (-128), (byte) (-64), (byte)3, (byte)117, (byte) (-94), (byte)0, (byte) (-96), (byte)16}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(9, byteArray0.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray1);
      assertNotNull(charArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-64);
      shortArray0[1] = (short) (byte) (-94);
      shortArray0[2] = (short) (byte) (-128);
      shortArray0[3] = (short) (byte) (-96);
      shortArray0[4] = (short) (byte) (-64);
      shortArray0[5] = (short) (byte)3;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-64);
      intArray0[1] = (int) (short) (-96);
      intArray0[2] = (-1942);
      intArray0[3] = (int) (short) (-64);
      intArray0[4] = (int) (byte)16;
      intArray0[5] = (int) (byte)16;
      intArray0[6] = 2146026739;
      intArray0[7] = (int) (byte)16;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146026739, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 100.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-55);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)74;
      shortArray0[3] = (short)14;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-22551);
      shortArray0[7] = (short)1;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-22551);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, (-13));
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[0] = null;
      Character character0 = new Character('[');
      assertNotNull(character0);
      assertEquals('[', (char)character0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '[';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-4725.0), 64);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {91.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2861), 50, (-2861));
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)127;
      shortArray0[2] = (short)127;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)13;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)64);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)127, (short)0, (short)13}, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) (-2861));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'S';
      Integer integer0 = new Integer(1314);
      assertNotNull(integer0);
      assertEquals(1314, (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1314);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1314}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte) (-13), (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte) (-13), (byte)1, (byte)1, (byte)1, (byte)1, (byte) (-13), (byte)1, (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray2 = ArrayUtils.remove(intArray0, 0);
      assertNotNull(intArray2);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray2.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L, (-1L), 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      ArrayUtils.shift(intArray2, 50);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray2.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-41);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-41), (byte) (-66), (byte) (-41)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-41)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray1.length);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[5] = 1569;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1569);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1569, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(5, int0);
      
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1569, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 5);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[4] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte)23;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)18);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-14), (byte) (-64), (byte)2, (byte)0, (byte)1, (byte) (-106), (byte)23}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-14), (byte) (-64), (byte)2, (byte)0, (byte)1, (byte) (-106), (byte)23}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 8);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      Class<String> class6 = String.class;
      classArray0[6] = class6;
      Class<String> class7 = String.class;
      classArray0[7] = class7;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(8, classArray0.length);
      assertEquals(8, classArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'V';
      charArray0[2] = 'Q';
      charArray0[3] = 'r';
      charArray0[4] = 'j';
      charArray0[5] = '\'';
      charArray0[6] = '.';
      charArray0[7] = '*';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'n', 'V', 'Q', 'r', 'j', '\'', '.', '*'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = '`';
      charArray0[2] = 'v';
      charArray0[3] = 'O';
      charArray0[4] = '*';
      charArray0[5] = 'j';
      charArray0[6] = ':';
      charArray0[7] = 'x';
      charArray0[8] = 'H';
      char[] charArray1 = ArrayUtils.add(charArray0, '*');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'V', '`', 'v', 'O', '*', 'j', ':', 'x', 'H'}, charArray0);
      assertArrayEquals(new char[] {'V', '`', 'v', 'O', '*', 'j', ':', 'x', 'H', '*'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(10, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 25.65F;
      floatArray0[3] = (-1438.5513F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 25.65F, (-1438.5513F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Float";
      stringArray0[2] = "m8(R8B";
      stringArray0[3] = "The type must not be null";
      stringArray0[4] = "java.lang.String";
      stringArray0[5] = "V\"vDw,Vv'b";
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = '=';
      charArray0[3] = 'a';
      charArray0[4] = '=';
      charArray0[5] = '=';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '=', 125);
      assertArrayEquals(new char[] {'a', 'a', '=', 'a', '=', '='}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(5, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-697));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'e';
      charArray0[2] = 'H';
      charArray0[3] = 'a';
      charArray0[4] = 'T';
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 126, 126);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)59;
      byteArray1[1] = (byte)86;
      byteArray1[2] = (byte)90;
      byteArray1[3] = (byte)64;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)99;
      byteArray1[6] = (byte) (-80);
      byteArray1[7] = (byte)44;
      byteArray1[8] = (byte) (-8);
      byte[] byteArray2 = ArrayUtils.insert((-1), byteArray1, byteArray0);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)86, (byte)90, (byte)64, (byte)0, (byte)99, (byte) (-80), (byte)44, (byte) (-8)}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)86, (byte)90, (byte)64, (byte)0, (byte)99, (byte) (-80), (byte)44, (byte) (-8)}, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(9, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 127.0;
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, ')');
      assertNull(charArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1222);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte)45);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)45}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-2474), 64, 64);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 64;
      longArray0[1] = (long) (-2474);
      longArray0[2] = (long) (-2474);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)605;
      shortArray0[1] = (short)605;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)5, 126);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)605, (short)605}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = false;
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, '*');
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      bitSet0.xor(bitSet1);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new short[] {(short)605, (short)605}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(2, shortArray0.length);
      
      // Undeclared exception!
      try { 
        BitSet.valueOf((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1190.3;
      doubleArray0[1] = 1303.9;
      doubleArray0[2] = (-1116.32628694);
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 125;
      intArray0[1] = 125;
      intArray0[2] = 125;
      intArray0[3] = 120;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 125);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {125, 125, 125, 120}, intArray0);
      assertArrayEquals(new int[] {125, 125, 120}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 125;
      objectArray0[1] = (Object) 125;
      objectArray0[2] = (Object) 1303.9;
      objectArray0[3] = (Object) (-1116.32628694);
      objectArray0[4] = (Object) 120;
      objectArray0[5] = (Object) (-1116.32628694);
      objectArray0[6] = (Object) 1190.3;
      objectArray0[7] = (Object) 125;
      objectArray0[8] = (Object) 1303.9;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '125', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'a';
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1195);
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)121, (short)0, (short)0, (short)0, (short) (-1195), (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, (int) (short)0, 1536);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (short)0);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2861), 50, (-2861));
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)127;
      shortArray0[2] = (short) (-699);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)13;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)64);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short) (-699), (short)0, (short)13}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, shortArray0.length);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-2861));
      assertNotNull(double0);
      assertEquals((-2861.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((short)0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((short)127);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(127.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(booleanArray0, (-716), (-2145681009));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Short short0 = new Short((short) (-699));
      assertNotNull(short0);
      assertEquals((short) (-699), (short)short0);
      
      Double double3 = new Double((short)13);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(13.0, (double)double3, 0.01);
      
      Object object0 = ArrayUtils.get((Object[]) doubleArray1, 50, (Object) double3);
      assertNotNull(object0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertFalse(object0.equals((Object)double2));
      assertFalse(object0.equals((Object)double1));
      assertFalse(object0.equals((Object)double0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(13.0, object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1072;
      shortArray0[1] = (short)10;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)10;
      intArray0[1] = 91;
      intArray0[2] = (int) (short)1072;
      intArray0[3] = (int) (short)10;
      intArray0[4] = 68;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {68, 10, 1072, 91, 10}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      intArray0[1] = 91;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.1, (-335));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-110);
      Byte byte1 = new Byte((byte) (-110));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-110), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-110));
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-110), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte) (-110), (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertEquals((byte) (-110), (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)121);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertEquals((byte)121, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-22));
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertEquals((byte) (-22), (byte)byte6);
      
      byteArray0[5] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-110), (byte) (-110), (byte) (-110), (byte)121, (byte) (-22)}, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (short)10, 51);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int1);
      
      Character character0 = new Character('7');
      assertNotNull(character0);
      assertEquals('7', (char)character0);
      
      String string0 = ArrayUtils.toString((Object) character0, "*0 y^|");
      assertNotNull(string0);
      assertEquals("7", string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Character character0 = new Character('3');
      assertNotNull(character0);
      assertEquals('3', (char)character0);
      
      boolean boolean1 = ArrayUtils.isSameType(boolean0, character0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '3';
      intArray0[1] = (int) '3';
      intArray0[2] = (int) '3';
      intArray0[1] = (int) '3';
      intArray0[2] = (int) '3';
      intArray0[5] = (int) '3';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 51, (-4706));
      assertArrayEquals(new int[] {51, 51, 51, 0, 0, 51}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 51;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) '3';
      doubleArray0[5] = (double) '3';
      doubleArray0[6] = 2352.439;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, 0.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 51.0, 0.0, (-1.0), 51.0, 51.0, 2352.439}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 51.0, 0.0, (-1.0), 51.0, 51.0, 2352.439}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-375L);
      longArray0[1] = 1L;
      longArray0[2] = (-1L);
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-375L), 1L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-375L), 1L, (-1L), 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-104);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)91, (int) (byte) (-126));
      assertArrayEquals(new byte[] {(byte) (-126), (byte)19, (byte) (-104)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-126);
      floatArray0[1] = (float) (byte) (-104);
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (byte)19;
      floatArray0[4] = (float) 1L;
      floatArray0[5] = (float) (byte)91;
      floatArray0[6] = (float) (-375L);
      ArrayUtils.reverse(floatArray0, (int) (byte)19, (-1578));
      assertArrayEquals(new float[] {(-126.0F), (-104.0F), (-1.0F), 19.0F, 1.0F, 91.0F, (-375.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-104), 122, (int) (byte) (-104));
      assertArrayEquals(new byte[] {(byte) (-104), (byte) (-126), (byte)19}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'a';
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1195);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)121, (short)0, (short)0, (short)0, (short) (-1195), (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)1;
      ArrayUtils.shift(byteArray0, (-3213));
      assertEquals(25, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 128);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1072;
      intArray0[1] = 1496;
      intArray0[2] = 128;
      intArray0[3] = 1072;
      intArray0[4] = 1072;
      intArray0[5] = 1496;
      intArray0[6] = 128;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1072, (-181));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1072, 1496, 128, 1072, 1072, 1496, 128}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 128;
      doubleArray0[2] = (double) 128;
      doubleArray0[3] = (double) 1072;
      doubleArray0[4] = (double) 1072;
      doubleArray0[5] = (double) 1496;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {128.0, 128.0, 1072.0, 1072.0, 1496.0, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)16;
      ArrayUtils.reverse(longArray0, Integer.MAX_VALUE, 3542);
      assertArrayEquals(new long[] {16L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(4, booleanArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)16;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)16;
      intArray0[5] = 1072;
      intArray0[6] = 3542;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1496, 1072);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {16, 0, 0, 0, 16, 1072, 3542}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2271);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = ArrayUtils.subarray(intArray0, (int) (byte) (-1), 2271);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.reverse((Object[]) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 207;
      intArray0[1] = 1458;
      intArray0[2] = 207;
      intArray0[3] = 207;
      intArray0[5] = 207;
      intArray0[6] = 207;
      intArray0[7] = 207;
      intArray0[8] = 207;
      ArrayUtils.shift(intArray0, 1458);
      assertArrayEquals(new int[] {207, 1458, 207, 207, 0, 207, 207, 207, 207}, intArray0);
      assertEquals(9, intArray0.length);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-1728.73F));
      assertNotNull(float0);
      assertEquals((-1728.73F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(109.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(109.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1920.2F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1920.2F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 1572);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1572, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      ArrayUtils.shift(intArray0, 50);
      assertSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)7;
      longArray0[1] = (long) (byte)7;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)7, (int) (byte)7);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {7L, 7L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte)7);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {7L, 7L}, longArray0);
      assertArrayEquals(new long[] {7L, 7L, 7L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double((byte)7);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(7.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double1;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double1;
      Double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean3 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean3);
      
      int[] intArray0 = new int[7];
      intArray0[1] = (int) (byte)7;
      intArray0[2] = (int) (byte)7;
      intArray0[3] = (int) (byte)7;
      intArray0[4] = (int) (byte)7;
      intArray0[5] = (int) (byte)7;
      intArray0[6] = (int) (byte)7;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 160, 0);
      assertArrayEquals(new int[] {0, 7, 7, 7, 7, 7, 7}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-2146984232));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146984232, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Character character0 = new Character('3');
      assertNotNull(character0);
      assertEquals('3', (char)character0);
      
      boolean boolean1 = ArrayUtils.isSameType(boolean0, character0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '3';
      intArray0[1] = (int) '3';
      intArray0[2] = (int) '3';
      intArray0[3] = (int) '3';
      intArray0[4] = (int) '3';
      intArray0[5] = (int) '3';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 51, (-4706));
      assertArrayEquals(new int[] {51, 51, 51, 51, 51, 51}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 51;
      doubleArray0[1] = (double) 51;
      doubleArray0[2] = (double) 51;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) '3';
      doubleArray0[5] = (double) '3';
      doubleArray0[6] = 2352.439;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 51, 51.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Character character0 = new Character('3');
      assertNotNull(character0);
      assertEquals('3', (char)character0);
      
      boolean boolean1 = ArrayUtils.isSameType(boolean0, character0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '3';
      intArray0[2] = (int) '3';
      intArray0[3] = (int) '3';
      intArray0[4] = (int) '3';
      intArray0[5] = (int) '3';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, (-4706));
      assertArrayEquals(new int[] {51, 0, 51, 51, 51, 51}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 51;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) '3';
      doubleArray0[5] = (double) '3';
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 51, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2452;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) 2452;
      doubleArray0[3] = (double) 2452;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 2452;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 2452;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2452);
      assertArrayEquals(new double[] {0.0, 1.5, 2452.0, 2452.0, 0.0, 0.0, 2452.0, 0.0, 2452.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 317.63434671482);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.5, 2452.0, 2452.0, 0.0, 0.0, 2452.0, 0.0, 2452.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.5, 2452.0, 2452.0, 0.0, 0.0, 2452.0, 0.0, 2452.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 3046);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3046, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (-1195);
      shortArray0[1] = (short)549;
      shortArray0[2] = (short) (-1195);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-1195);
      floatArray0[1] = (float) (short) (-1195);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(59, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = '3';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '#';
      charArray0[5] = '>';
      charArray0[6] = 'D';
      charArray0[7] = '_';
      charArray0[8] = '>';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'>', '_', 'D', '>', '#', '8', '8', '3', ','}, charArray0);
      assertEquals(9, charArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'D';
      intArray0[1] = (int) '>';
      intArray0[2] = (int) '#';
      intArray0[3] = (int) '#';
      intArray0[4] = (int) '$';
      intArray0[5] = (int) '8';
      intArray0[6] = (int) '>';
      intArray0[7] = (int) '3';
      intArray0[8] = (int) '8';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 831);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {831, 68, 62, 35, 35, 36, 56, 62, 51, 56}, intArray1);
      assertArrayEquals(new int[] {68, 62, 35, 35, 36, 56, 62, 51, 56}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(10, intArray1.length);
      assertEquals(9, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '$';
      floatArray0[1] = (float) '#';
      floatArray0[2] = (float) 51;
      floatArray0[3] = (float) '3';
      floatArray0[4] = (float) 'D';
      floatArray0[5] = (float) (-1677);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1677), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1677, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-4886);
      shortArray0[1] = (short) (-1);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-4886);
      floatArray0[1] = (float) (short) (-4886);
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (short) (-1);
      floatArray1[1] = (float) (short) (-4886);
      floatArray1[2] = (float) (short) (-4886);
      floatArray1[3] = (float) (short) (-4886);
      floatArray1[4] = (float) (short) (-4886);
      floatArray1[5] = (float) (short) (-1);
      floatArray1[6] = 2452.0F;
      floatArray1[7] = (float) (short) (-1);
      floatArray1[8] = 1.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-4886), floatArray0, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4886, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 0);
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '}';
      charArray0[6] = '}';
      ArrayUtils.swap(charArray0, 0, 0, 17);
      assertArrayEquals(new char[] {'}', '}', '}', '}', '}', '}', '}'}, charArray0);
      assertEquals(7, charArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, false}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean1);
      
      ArrayUtils.shift((Object[]) null, 17);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-126), (byte)byte1);
      
      byteArray0[0] = byte1;
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = '';
      Double double0 = new Double(100.0);
      assertNotNull(double0);
      assertEquals(100.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {100.0, 100.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'U';
      intArray0[1] = (int) '';
      intArray0[2] = (int) '';
      intArray0[3] = (int) byte0;
      intArray0[4] = (int) 'N';
      intArray0[5] = (int) 'U';
      intArray0[6] = (int) 'U';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 177);
      assertArrayEquals(new int[] {85, 127, 127, (-126), 78, 85, 85}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(127, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte) (-124);
      Byte byte1 = new Byte((byte) (-124));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-124), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-124));
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-124), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-1));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte3);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-124);
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) byte0;
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (byte) (-124);
      floatArray0[6] = 551.0F;
      floatArray0[7] = (float) (byte) (-1);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-124.0F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-124.0F), (-124.0F), (-124.0F), (-124.0F), (-1.0F), (-124.0F), 551.0F, (-1.0F), (-124.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-124.0F), (-124.0F), (-124.0F), (-124.0F), (-1.0F), (-124.0F), 551.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray1.length);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = '3';
      charArray0[2] = '8';
      charArray0[3] = '$';
      charArray0[4] = '#';
      charArray0[5] = '>';
      charArray0[6] = 'D';
      charArray0[7] = '_';
      charArray0[8] = '>';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'>', '_', 'D', '>', '#', '$', '8', '3', ','}, charArray0);
      assertEquals(9, charArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'D';
      intArray0[1] = (int) '>';
      intArray0[2] = (int) '#';
      intArray0[3] = (int) '#';
      intArray0[4] = (int) '$';
      intArray0[5] = (int) '8';
      intArray0[6] = (int) '>';
      intArray0[7] = (int) '3';
      intArray0[8] = (int) '$';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 831);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {831, 68, 62, 35, 35, 36, 56, 62, 51, 36}, intArray1);
      assertArrayEquals(new int[] {68, 62, 35, 35, 36, 56, 62, 51, 36}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(10, intArray1.length);
      assertEquals(9, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '#';
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1975.7F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {35.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {35.0F, (-1975.7F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean1);
      assertNotNull(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 2723L;
      longArray0[1] = 312L;
      boolean boolean3 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {2723L, 312L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean3);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short)321;
      shortArray0[1] = (short) (-1396);
      shortArray0[2] = (short)1933;
      shortArray0[3] = (short)1198;
      shortArray0[4] = (short)93;
      shortArray0[5] = (short)100;
      shortArray0[6] = (short)94;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)94;
      intArray0[1] = (int) (short)321;
      intArray0[2] = (int) (short)93;
      intArray0[3] = (-1006);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (short)100);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {94, 321, 93, (-1006)}, intArray0);
      assertArrayEquals(new int[] {100, 94, 321, 93, (-1006)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      
      AbstractMap.SimpleImmutableEntry<MutableInt, Float>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<MutableInt, Float>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      MutableInt mutableInt0 = new MutableInt((Number) (short)94);
      assertNotNull(mutableInt0);
      assertEquals(94, mutableInt0.intValue());
      assertEquals(94.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(94L, mutableInt0.longValue());
      assertEquals("94", mutableInt0.toString());
      assertEquals((short)94, mutableInt0.shortValue());
      assertEquals(94, (int)mutableInt0.getValue());
      assertEquals((byte)94, mutableInt0.byteValue());
      assertEquals(94, (int)mutableInt0.toInteger());
      assertEquals(94.0, mutableInt0.doubleValue(), 0.01);
      
      Float float0 = new Float(1789.1);
      assertNotNull(float0);
      assertEquals(1789.1F, (float)float0, 0.01F);
      
      AbstractMap.SimpleImmutableEntry<MutableInt, Float> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<MutableInt, Float>(mutableInt0, float0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertEquals(94, mutableInt0.intValue());
      assertEquals(94.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(94L, mutableInt0.longValue());
      assertEquals("94", mutableInt0.toString());
      assertEquals((short)94, mutableInt0.shortValue());
      assertEquals(94, (int)mutableInt0.getValue());
      assertEquals((byte)94, mutableInt0.byteValue());
      assertEquals(94, (int)mutableInt0.toInteger());
      assertEquals(94.0, mutableInt0.doubleValue(), 0.01);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<MutableInt, Float> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<MutableInt, Float>(mutableInt0, float0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertEquals(94, mutableInt0.intValue());
      assertEquals(94.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(94L, mutableInt0.longValue());
      assertEquals("94", mutableInt0.toString());
      assertEquals((short)94, mutableInt0.shortValue());
      assertEquals(94, (int)mutableInt0.getValue());
      assertEquals((byte)94, mutableInt0.byteValue());
      assertEquals(94, (int)mutableInt0.toInteger());
      assertEquals(94.0, mutableInt0.doubleValue(), 0.01);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<MutableInt, Float>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 3);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2189;
      floatArray0[1] = (float) 2189;
      Byte byte0 = new Byte((byte)112);
      assertNotNull(byte0);
      assertEquals((byte)112, (byte)byte0);
      
      Byte byte1 = new Byte((byte)112);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)112, (byte)byte1);
      
      Byte byte2 = new Byte((byte)112);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)112, (byte)byte2);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte2;
      Byte byte3 = new Byte((byte)1);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)1, (byte)byte3);
      
      byteArray0[1] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)112, (byte)1}, byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1072;
      shortArray0[1] = (short)10;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)10;
      intArray0[1] = 91;
      intArray0[2] = (int) (short)1072;
      intArray0[3] = (int) (short)10;
      intArray0[4] = 68;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {68, 10, 1072, 91, 10}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 91;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.1, (-335));
      assertArrayEquals(new double[] {91.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-110);
      Byte byte1 = new Byte((byte) (-110));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-110), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-110));
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-110), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte) (-110), (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertEquals((byte) (-110), (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)121);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte)121, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-22));
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertEquals((byte) (-22), (byte)byte6);
      
      byteArray0[5] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-110), (byte) (-110), (byte) (-110), (byte)121, (byte) (-22)}, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte) (-1);
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (byte) (-1);
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = 'a';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'a', (-4387));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'+', 'a'}, charArray0);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals(2, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-5314.68152);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(0, 101);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {(-5314.68152), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-5314.68152);
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[1] = "The type must not be null";
      stringArray1[2] = "=";
      stringArray1[3] = "%<";
      stringArray1[4] = "";
      stringArray1[6] = "6=Jq;b4G)im";
      String[] stringArray2 = ArrayUtils.nullToEmpty(stringArray1);
      assertNotNull(stringArray2);
      assertSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray2.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-73);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-73);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -73, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1493L);
      longArray0[1] = (-772L);
      longArray0[4] = (-1493L);
      longArray0[5] = 1L;
      ArrayUtils.shift(longArray0, (-2375));
      assertArrayEquals(new long[] {1L, (-1493L), (-772L), 0L, 0L, (-1493L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'Y';
      ArrayUtils.reverse(charArray0, (-2375), 4);
      assertArrayEquals(new char[] {'Y', 'N'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '>';
      charArray0[6] = ',';
      charArray0[7] = '_';
      charArray0[7] = '>';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '>', ',', '>', '8', '8', '8', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) ',';
      floatArray0[1] = (float) '3';
      floatArray0[2] = (float) '>';
      floatArray0[3] = (float) '3';
      floatArray0[4] = (float) ',';
      floatArray0[5] = (float) '8';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1677), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1677, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-236.29999999999995);
      doubleArray0[1] = 303.5996875992135;
      doubleArray0[2] = (-1242.557);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-1242.557), 303.5996875992135, (-236.29999999999995)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 1, 1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-625);
      shortArray0[1] = (short)128;
      shortArray0[2] = (short)839;
      shortArray0[3] = (short) (-3795);
      shortArray0[4] = (short)352;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)3982;
      shortArray0[7] = (short)52;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)45);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-625), (short)128, (short)839, (short) (-3795), (short)352, (short) (-1), (short)3982, (short)52}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(8, shortArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short)352;
      objectArray0[1] = (Object) (short) (-625);
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) (short) (-1);
      BitSet bitSet1 = (BitSet)ArrayUtils.toPrimitive(objectArray0[2]);
      assertNotNull(bitSet1);
      assertSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(5, objectArray0.length);
      
      objectArray0[4] = (Object) bitSet1;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)839;
      longArray0[1] = (-305L);
      longArray0[2] = (long) (short)839;
      longArray0[3] = (long) (short)52;
      longArray0[4] = (long) (short)839;
      longArray0[5] = (long) (short)128;
      BitSet bitSet2 = ArrayUtils.indexesOf(longArray0, (-2147483648L), 0);
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertArrayEquals(new long[] {839L, (-305L), 839L, 52L, 839L, 128L}, longArray0);
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.length());
      assertEquals("{}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertEquals(6, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[2], bitSet2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)55;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      ArrayUtils.reverse((int[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-2146463567), (int) (byte) (-1));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = '^';
      charArray0[2] = 'W';
      charArray0[3] = '<';
      charArray0[4] = 's';
      charArray0[5] = 'x';
      charArray0[6] = '\'';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'n');
      assertArrayEquals(new char[] {'d', '^', 'W', '<', 's', 'x', '\''}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Short short0 = new Short((short)51);
      assertNotNull(short0);
      assertEquals((short)51, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)51, object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)57;
      longArray0[0] = (long) (short)51;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte) (-1);
      ArrayUtils.swap(longArray0, 7, (int) (byte)0, (-1));
      assertArrayEquals(new long[] {51L, 0L, 0L, (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      Object[] objectArray0 = new Object[2];
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object1);
      assertEquals(false, object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) (byte)57;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, objectArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)20;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (short)51;
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = 7;
      intArray0[5] = (int) (byte)57;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {57, 7, (-1), 51, 0, 20}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2559;
      shortArray0[1] = (short)732;
      shortArray0[2] = (short)2559;
      shortArray0[3] = (short)2559;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)732, (short)2559, (short)2559, (short)2559}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)2559;
      floatArray0[1] = (float) (short)2559;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {2559.0F, 2559.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.insert((-1430), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)2559;
      int[] intArray1 = ArrayUtils.add(intArray0, (-4725));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2559}, intArray0);
      assertArrayEquals(new int[] {2559, (-4725)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (short)2559);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)321;
      shortArray0[1] = (short) (-1396);
      shortArray0[2] = (short)1933;
      shortArray0[3] = (short)1198;
      shortArray0[4] = (short)93;
      shortArray0[5] = (short)76;
      shortArray0[6] = (short)94;
      ArrayUtils.swap(shortArray0, 0, 0, (int) (short)94);
      assertArrayEquals(new short[] {(short)321, (short) (-1396), (short)1933, (short)1198, (short)93, (short)76, (short)94}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short) (-1396);
      objectArray0[1] = (Object) (short) (-1396);
      objectArray0[2] = (Object) (short)1933;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(3, objectArray0.length);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (short)1198, (int) (short)321);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 0);
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1569;
      intArray0[6] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1569);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1569, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(5, int0);
      
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1569, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      
      Short[] shortArray0 = new Short[5];
      short short0 = (short)10;
      Short short1 = new Short((short)10);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)10, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)10, (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) (-4551));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short) (-4551), (short)short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short(short0);
      assertNotNull(short4);
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertEquals((short)10, (short)short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short) (-4551));
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertEquals((short) (-4551), (short)short5);
      
      shortArray0[4] = short5;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      ArrayUtils.reverse(intArray0, 5, 4152);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1569}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(7, intArray0.length);
      
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, intArray2.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences((long[]) null, (long) 4152);
      assertNull(longArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertNotNull(stringArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, stringArray0.length);
      assertEquals(5, shortArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)shortArray0[4];
      floatArray0[1] = (float) (short)10;
      floatArray0[2] = (float) 1569;
      floatArray0[3] = (float) 0;
      ArrayUtils.shift(floatArray0, 512);
      assertArrayEquals(new float[] {(-4551.0F), 10.0F, 1569.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 217.187450496;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)16, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)16;
      ArrayUtils.reverse(longArray0, Integer.MAX_VALUE, 3542);
      assertArrayEquals(new long[] {16L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 43.0F;
      floatArray0[2] = (-2421.01F);
      floatArray0[3] = 724.5F;
      floatArray0[4] = (-2086.8037F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 724.5F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F, 43.0F, (-2421.01F), 724.5F, (-2086.8037F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {724.5F, 1.0F, 43.0F, (-2421.01F), 724.5F, (-2086.8037F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 724.5F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) (-2086.8037F);
      doubleArray0[3] = (double) 724.5F;
      doubleArray0[4] = (double) 43.0F;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {724.5, 1.0, (-2086.8037109375), 724.5, 43.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      
      Float[] floatArray2 = new Float[8];
      floatArray2[0] = (Float) 1.0F;
      floatArray2[1] = (Float) 724.5F;
      floatArray2[2] = (Float) (-2086.8037F);
      Float float0 = new Float(43.0F);
      assertNotNull(float0);
      assertEquals(43.0F, (float)float0, 0.01F);
      
      floatArray2[3] = float0;
      Float float1 = new Float(724.5);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(724.5F, (float)float1, 0.01F);
      
      floatArray2[4] = float1;
      floatArray2[5] = (Float) 724.5F;
      floatArray2[6] = (Float) (-2086.8037F);
      floatArray2[7] = (Float) 1.0F;
      Class<Float[]> class0 = Float[].class;
      Float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray2, class0);
      assertNotNull(floatArray3);
      assertSame(floatArray3, floatArray2);
      assertSame(floatArray2, floatArray3);
      assertEquals(8, floatArray3.length);
      assertEquals(8, floatArray2.length);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '+';
      longArray0[1] = (long) '+';
      longArray0[2] = (long) '+';
      longArray0[3] = 3404L;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1737.9319F;
      floatArray0[1] = 3150.0F;
      floatArray0[2] = 3150.0F;
      floatArray0[3] = 3150.0F;
      floatArray0[4] = 1737.9319F;
      int int0 = ArrayUtils.indexOf(floatArray0, 1737.9319F, 0);
      assertArrayEquals(new float[] {1737.9319F, 3150.0F, 3150.0F, 3150.0F, 1737.9319F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 3150.0F;
      objectArray0[1] = (Object) 3150.0F;
      objectArray0[2] = (Object) 1737.9319F;
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Float float0 = new Float(1737.9319F);
      assertNotNull(float0);
      assertEquals(1737.9319F, (float)float0, 0.01F);
      
      objectArray0[3] = (Object) float0;
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object0);
      assertEquals(1737.9319F, object0);
      
      int int1 = ArrayUtils.indexOf(objectArray0, object0);
      assertFalse(int1 == int0);
      assertEquals(4, objectArray0.length);
      assertEquals(2, int1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3150.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 1970.3203202;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 3150.0F;
      int int2 = ArrayUtils.indexOf(doubleArray0, 477.0, 713.3);
      assertArrayEquals(new double[] {3150.0, 0.0, 0.0, 1970.3203202, 2.0, 2.0, 3150.0}, doubleArray0, 0.01);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, int2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-87);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)28}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      Long long1 = new Long((-1L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      
      longArray0[1] = long1;
      longArray0[2] = long0;
      longArray0[3] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L}, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      ArrayUtils.swap((boolean[]) null, 893, 2797, 2797);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Float float0 = new Float((double) 893);
      assertNotNull(float0);
      assertEquals(893.0F, (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameType(float0, float0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)35);
      assertArrayEquals(new byte[] {(byte)35}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte)35);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)35}, byteArray0);
      assertArrayEquals(new byte[] {(byte)35, (byte)35}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int int1 = ArrayUtils.indexOf((char[]) null, '.', (int) (byte)35);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)35;
      floatArray0[1] = (float) '.';
      floatArray0[2] = (float) (byte)35;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {35.0F, 46.0F, 35.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {35.0F, 46.0F, 35.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(3, floatArray2.length);
      
      int int2 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1), (-1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '.';
      doubleArray0[1] = (double) 2797;
      doubleArray0[2] = (double) 35.0F;
      doubleArray0[3] = (double) 2797;
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (byte)2;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) 46.0F;
      ArrayUtils.shift(doubleArray0, 4622);
      assertArrayEquals(new double[] {35.0, 2797.0, (-1.0), 2.0, (-1.0), 46.0, 46.0, 2797.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1072;
      floatArray0[1] = (float) 1072;
      floatArray0[2] = (float) 1072;
      floatArray0[3] = (float) 1072;
      floatArray0[4] = (float) 1072;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1072;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1072, floatArray0, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1072, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 1, 2253);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-30309);
      shortArray0[2] = (short)988;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)42;
      shortArray0[5] = (short) (-177);
      shortArray0[6] = (short)256;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1), (int) (short)42);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-30309), (short)988, (short)8, (short)42, (short) (-177), (short)256}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-30309), (short)988, (short)8, (short)42, (short) (-177), (short)256}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2398L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2398L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 1);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2398.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray0 = new short[1];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)625, 1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(floatArray0, 4167, 1, 100);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {2398.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(1, floatArray0.length);
      
      Short[] shortArray1 = new Short[0];
      Short short0 = new Short((short)625);
      assertNotNull(short0);
      assertEquals((short)625, (short)short0);
      
      Short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray1, short0);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      ArrayUtils.swap(longArray0, 1, (int) (short)625);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)19;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)127, (-2020));
      assertArrayEquals(new byte[] {(byte)16, (byte)19}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)16;
      longArray0[1] = (long) (byte)16;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {16L, 16L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1);
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {16L, 16L}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 1;
      Integer integer0 = Integer.getInteger("", 1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer1);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(2, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)98;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)4, int0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)112, (byte)17, (byte)85, (byte)98}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)112;
      shortArray0[1] = (short) (byte)4;
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short)4, (int) (byte)112);
      assertArrayEquals(new short[] {(short)112, (short)4}, shortArray0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, shortArray0.length);
      assertEquals(1, int2);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (byte)112;
      longArray1[1] = (-915L);
      longArray1[2] = (long) int0;
      longArray1[3] = (long) (byte)112;
      longArray1[4] = (long) (byte)112;
      longArray1[5] = (long) (byte)4;
      longArray1[6] = (long) (byte)17;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {112L, (-915L), 1L, 112L, 112L, 4L, 17L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-164.422618501465);
      doubleArray0[1] = (double) 1007;
      doubleArray0[2] = 67.85;
      doubleArray0[3] = 359.3747238585139;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-164.422618501465);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1007);
      assertArrayEquals(new double[] {(-164.422618501465), 1007.0, 67.85, 359.3747238585139, 0.0, (-164.422618501465)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte)33;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-115), (-2146019163));
      assertArrayEquals(new byte[] {(byte)77, (byte)0, (byte) (-14), (byte) (-115), (byte)1, (byte)120, (byte) (-91), (byte) (-106), (byte)33}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(9, byteArray0.length);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1168.88));
      assertNotNull(double0);
      assertEquals((-1168.88), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = Double.valueOf((-164.422618501465));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-164.422618501465), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-35.48531102953));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-35.48531102953), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-37);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte) (-37), (byte) (-37), (byte) (-37)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-35.48531102953);
      doubleArray2[1] = (double) (byte) (-37);
      doubleArray2[2] = (double) '-';
      doubleArray2[3] = (double) '-';
      doubleArray2[4] = (double) (byte) (-37);
      doubleArray2[5] = (-1473.0);
      int int1 = ArrayUtils.indexOf(doubleArray2, (-37.0));
      assertArrayEquals(new double[] {(-35.48531102953), (-37.0), 45.0, 45.0, (-37.0), (-1473.0)}, doubleArray2, 0.01);
      assertFalse(int1 == int0);
      assertEquals(6, doubleArray2.length);
      assertEquals(1, int1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) '-';
      longArray0[1] = (long) 1;
      longArray0[2] = (-2583L);
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) '-';
      longArray0[6] = (long) '-';
      longArray0[7] = (long) (byte) (-37);
      longArray0[8] = (long) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2861), 50, (-2861));
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) 50);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2861), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2861, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3349.7182520336974);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Byte byte0 = new Byte((byte) (-60));
      assertNotNull(byte0);
      assertEquals((byte) (-60), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-60));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-60), (byte)byte1);
      
      ArrayUtils.reverse((char[]) null, (int) (byte) (-60), 2146764463);
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) (byte) (-60);
      floatArray0[2] = (float) 2146764463;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1139.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-60.0F), 2.14676442E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1139.0F, 0.0F, (-60.0F), 2.14676442E9F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(110, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 110, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1569;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1569);
      assertArrayEquals(new int[] {1569, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1569, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1446), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1446, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2271);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      org.evosuite.runtime.Random.setNextRandom(14);
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-164.422618501465);
      doubleArray0[1] = (double) 1007;
      doubleArray0[2] = 31.517281891424552;
      doubleArray0[3] = 359.3747238585139;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-164.422618501465);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1007);
      assertArrayEquals(new double[] {(-164.422618501465), 1007.0, 31.517281891424552, 359.3747238585139, 0.0, (-164.422618501465)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(1, booleanArray0.length);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 1007.0;
      doubleArray1[1] = (Double) 31.517281891424552;
      doubleArray1[2] = (Double) (-164.422618501465);
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) (-164.422618501465);
      doubleArray1[5] = (Double) 359.3747238585139;
      doubleArray1[6] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) doubleArray1[3]);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1007.0, 31.517281891424552, (-164.422618501465), 0.0, (-164.422618501465), 359.3747238585139, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1007;
      longArray0[1] = (long) 4;
      longArray0[2] = (long) 1007;
      longArray0[3] = (long) 4;
      longArray0[4] = (long) 1007;
      longArray0[5] = (long) 1007;
      longArray0[6] = (long) 1007;
      longArray0[7] = (long) 1007;
      longArray0[8] = (long) 1007;
      boolean boolean0 = ArrayUtils.contains(longArray0, 4L);
      assertArrayEquals(new long[] {1007L, 4L, 1007L, 4L, 1007L, 1007L, 1007L, 1007L, 1007L}, longArray0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(417, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 417, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short) (-324);
      longArray0[1] = 312L;
      longArray0[2] = 2723L;
      longArray0[3] = (long) (short) (-324);
      longArray0[4] = 312L;
      longArray0[5] = 2723L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-324L), 312L, 2723L, (-324L), 312L, 2723L}, longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean1 = Boolean.valueOf("java.lang.Boolean");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean("java.lang.Boolean");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-324);
      intArray0[1] = (int) (short) (-324);
      boolean boolean3 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-324), (-324)}, intArray0);
      assertTrue(boolean3 == boolean0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)127, (-2020));
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)16;
      longArray0[1] = (long) (byte)16;
      Long[] longArray1 = new Long[3];
      longArray1[0] = (Long) 16L;
      longArray1[1] = (Long) 16L;
      longArray1[2] = (Long) 16L;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray0));
      
      longArray3[0] = 281L;
      int int1 = ArrayUtils.lastIndexOf(longArray3, 281L);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {281L}, longArray3);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertEquals(1, longArray3.length);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1530.224, 72.0);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 72.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int2 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, int2);
      
      int int3 = ArrayUtils.lastIndexOf(doubleArray1, (-1.0), (-1.0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int3);
      
      Long long0 = new Long((-2020));
      assertNotNull(long0);
      assertEquals((-2020L), (long)long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object0);
      assertEquals((-2020L), object0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2020);
      intArray0[1] = 0;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-2020), 0}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte)60;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)96, (byte)0, (byte)80, (byte)75, (byte)112, (byte) (-95), (byte) (-122), (byte)60}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)112;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)112;
      objectArray0[3] = (Object) (byte)112;
      objectArray0[4] = (Object) (byte) (-122);
      objectArray0[5] = (Object) (byte) (-122);
      objectArray0[6] = (Object) (byte)96;
      objectArray0[7] = (Object) (byte) (-122);
      objectArray0[8] = (Object) (byte) (-95);
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) "java.lang.Float");
      assertEquals(9, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (-1));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      ArrayUtils.swap((boolean[]) null, 893, 2797, 2797);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Float float0 = new Float((double) 893);
      assertNotNull(float0);
      assertEquals(893.0F, (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2797;
      intArray0[1] = 2797;
      intArray0[2] = (int) (byte)46;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {2797, 2797, 46}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean1);
      
      try { 
        Double.valueOf("java.lang.String");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (-2034.59908);
      doubleArray0[2] = (-2075.8);
      doubleArray0[3] = (-2034.59908);
      doubleArray0[4] = (-2034.59908);
      doubleArray0[5] = (-2034.59908);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-262.0));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {100.0, (-2034.59908), (-2075.8), (-2034.59908), (-2034.59908), (-2034.59908)}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)19;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)127, (-2020));
      assertArrayEquals(new byte[] {(byte)16, (byte)19}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)16;
      longArray0[1] = (long) (byte)16;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {16L, 16L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 16L;
      doubleArray0[1] = (double) (byte)127;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 100.0;
      doubleArray0[4] = (double) 16L;
      doubleArray0[5] = 1473.3768017;
      doubleArray0[6] = (double) (byte)16;
      doubleArray0[7] = (double) (-2020);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2034.59908), 100.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {16.0, 127.0, (-1.0), 100.0, 16.0, 1473.3768017, 16.0, (-2020.0)}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{7}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-96), (int) (byte) (-96));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      Character[] characterArray0 = new Character[7];
      Character character0 = Character.valueOf('v');
      assertNotNull(character0);
      assertEquals('v', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('e');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('e', (char)character1);
      
      characterArray0[1] = character1;
      char char0 = '$';
      Character character2 = Character.valueOf('$');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('$', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character1);
      assertNotNull(character3);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)char0));
      assertFalse(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('e', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('H');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertEquals('H', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('\"');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)char0));
      assertEquals('\"', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('H');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character0));
      assertTrue(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertEquals('H', (char)character6);
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'v', 'e', '$', 'e', 'H', '\"', 'H'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (char)character4;
      intArray0[1] = (int) char0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {72, 36}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 217.187450496;
      doubleArray0[1] = (-3340.4304546973785);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {217.187450496, (-3340.4304546973785), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)64;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-101));
      assertArrayEquals(new byte[] {(byte)127, (byte)14, (byte)54, (byte)85, (byte)64}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1168.88));
      assertNotNull(double0);
      assertEquals((-1168.88), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1168.88), (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = '!';
      charArray0[2] = '@';
      charArray0[3] = '!';
      charArray0[4] = 'y';
      charArray0[5] = '&';
      charArray0[6] = 'H';
      char[] charArray1 = ArrayUtils.remove(charArray0, 2);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'-', '!', '@', '!', 'y', '&', 'H'}, charArray0);
      assertArrayEquals(new char[] {'-', '!', '!', 'y', '&', 'H'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray0.length);
      assertEquals(6, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = '8';
      charArray0[2] = 'f';
      charArray0[4] = 'f';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(0, 111);
      assertNotNull(intStream0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-2);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)15, (byte) (-2)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1190.3;
      doubleArray0[1] = 1303.9;
      doubleArray0[2] = (-1116.32628694);
      doubleArray0[3] = 0.1;
      doubleArray0[4] = 1458.224;
      doubleArray0[5] = 1.5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5);
      assertArrayEquals(new double[] {1190.3, 1303.9, (-1116.32628694), 0.1, 1458.224, 1.5}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, int0);
      
      ArrayUtils.shift((byte[]) null, 5, (-517), 5);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)56;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte)45, (byte) (-44), (byte) (-92), (byte)56}, byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      ArrayUtils.shift(longArray0, 1867);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte)45, (byte) (-44), (byte) (-92), (byte)56}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(longArray1, (long) (byte)0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 217.187450496;
      doubleArray0[1] = (-3340.4304546973785);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {217.187450496, (-3340.4304546973785), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(3, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = 'i';
      charArray0[2] = '4';
      charArray0[3] = 'U';
      charArray0[4] = '';
      charArray0[5] = 'm';
      charArray0[6] = 'D';
      charArray0[7] = ')';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '2');
      assertArrayEquals(new char[] {'<', 'i', '4', 'U', '', 'm', 'D', ')'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2452;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) 2452;
      doubleArray0[3] = (double) 2452;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 2452;
      doubleArray0[7] = (double) 2452;
      doubleArray0[8] = (double) 2452;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2452);
      assertArrayEquals(new double[] {0.0, 1.5, 2452.0, 2452.0, 0.0, 0.0, 2452.0, 2452.0, 2452.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 317.63434671482);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.5, 2452.0, 2452.0, 0.0, 0.0, 2452.0, 2452.0, 2452.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.5, 2452.0, 2452.0, 0.0, 0.0, 2452.0, 2452.0, 2452.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (double) 2452);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.5, 2452.0, 2452.0, 0.0, 0.0, 2452.0, 2452.0, 2452.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.5, 2452.0, 2452.0, 0.0, 0.0, 2452.0, 2452.0, 2452.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2452.0, 0.0, 1.5, 2452.0, 2452.0, 0.0, 0.0, 2452.0, 2452.0, 2452.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 2452;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 2452;
      floatArray1[2] = (float) 0;
      floatArray1[3] = Float.NaN;
      floatArray1[4] = (float) 5;
      floatArray1[5] = (float) 0;
      floatArray1[6] = (float) 5;
      floatArray1[7] = (float) 0;
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2452.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2452.0F, 0.0F, Float.NaN, 5.0F, 0.0F, 5.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertEquals(11, floatArray2.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, (-2947));
      assertArrayEquals(new int[] {2452, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(6, intArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)127, (-2020));
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)16;
      longArray0[1] = (long) (byte)16;
      Long[] longArray1 = new Long[3];
      longArray1[0] = (Long) 16L;
      longArray1[1] = (Long) 16L;
      longArray1[2] = (Long) 16L;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray0));
      
      longArray3[0] = 274L;
      int int1 = ArrayUtils.lastIndexOf(longArray3, 274L);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {274L}, longArray3);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertEquals(1, longArray3.length);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1530.224, 72.0);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 72.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int2 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, int2);
      
      int int3 = ArrayUtils.lastIndexOf(doubleArray1, (-1.0), (-1.0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int3);
      
      Long long0 = new Long((-2020));
      assertNotNull(long0);
      assertEquals((-2020L), (long)long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object0);
      assertEquals((-2020L), object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (byte)127);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 25.65F;
      floatArray0[3] = (-1438.5513F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 25.65F, (-1438.5513F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Float";
      stringArray0[1] = "lm+MpJ0)<XgWJt)";
      stringArray0[2] = "m8(R8B";
      stringArray0[3] = "The type must not be null";
      stringArray0[4] = "java.lang.String";
      stringArray0[5] = "V\"vDw,Vv'b";
      stringArray0[6] = "=";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 48.0, 126);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)59;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)2, (byte)65, (byte)59}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)54;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte)0, (byte)10, (byte)0, (byte) (-1), (byte)0, (byte)54}, byteArray0);
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertEquals(8, byteArray0.length);
      
      bitSet0.flip((int) (byte)0, (int) (byte)57);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte)0, (byte)10, (byte)0, (byte) (-1), (byte)0, (byte)54}, byteArray0);
      assertEquals(57, bitSet0.length());
      assertEquals("{1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(55, bitSet0.cardinality());
      assertEquals(8, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      bitSet0.flip(59);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte)0, (byte)10, (byte)0, (byte) (-1), (byte)0, (byte)54}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(60, bitSet0.length());
      assertEquals("{1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59}", bitSet0.toString());
      assertEquals(56, bitSet0.cardinality());
      assertEquals(8, byteArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) (byte)57, 34);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      Byte byte0 = new Byte((byte) (-113));
      assertNotNull(byte0);
      assertEquals((byte) (-113), (byte)byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(objectArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)7;
      byteArray0[0] = (byte)7;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)7;
      longArray0[1] = (long) (byte)7;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)7, (int) (byte)7);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {7L, 7L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte)7);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {7L, 7L}, longArray0);
      assertArrayEquals(new long[] {7L, 7L, 7L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double((byte)7);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(7.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double1;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double1;
      Double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean3 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean3);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 7L;
      floatArray0[1] = (float) (byte)7;
      floatArray0[2] = (float) (byte)7;
      floatArray0[3] = (float) (byte)7;
      int int0 = 1867;
      ArrayUtils.reverse(booleanArray0, 1867, 1867);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      Short short0 = new Short((byte)7);
      assertNotNull(short0);
      assertEquals((short)7, (short)short0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'a';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ';', 0);
      assertArrayEquals(new char[] {'e', 'a'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'e';
      longArray0[3] = (long) ';';
      longArray0[4] = (long) (-1);
      Integer integer0 = Integer.getInteger("{#yAV%(;", 0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-1648));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1648), (int)integer1);
      
      Integer integer2 = new Integer((-919));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals((-919), (int)integer2);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'a';
      doubleArray0[1] = (double) 'a';
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {97.0, 97.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      MutableInt mutableInt0 = new MutableInt(97.0);
      assertNotNull(mutableInt0);
      assertEquals(97, (int)mutableInt0.getValue());
      assertEquals((byte)97, mutableInt0.byteValue());
      assertEquals(97.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("97", mutableInt0.toString());
      assertEquals(97.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)97, mutableInt0.shortValue());
      assertEquals(97, mutableInt0.intValue());
      assertEquals(97L, mutableInt0.longValue());
      assertEquals(97, (int)mutableInt0.toInteger());
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1L), 0L, 101L, 59L, (-1L), 0L}, longArray0);
      assertEquals("{0, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      int int0 = (-503);
      ArrayUtils.swap((char[]) null, (-503), (-503));
      Integer[] integerArray0 = new Integer[1];
      int int1 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int1);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      Float float0 = new Float((-422.5085F));
      assertNotNull(float0);
      assertEquals((-422.5085F), (float)float0, 0.01F);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) float0, (-503));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, integerArray0.length);
      assertEquals((-1), int2);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((char[]) null, 75, 0, int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) int1, (double) (-422.5085F));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-2048), (-2), (-2));
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2);
      longArray0[1] = (long) (-2048);
      longArray0[2] = (long) (-2048);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2L), (-2048L), (-2048L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift((Object[]) null, 2657);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-57);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte) (-57));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -57, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-324));
      assertNotNull(short0);
      assertEquals((short) (-324), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals(3, shortArray0.length);
      assertEquals((short) (-324), (short)short1);
      
      shortArray0[1] = short1;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift((Object[]) shortArray0, (-281));
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-219);
      shortArray0[1] = (short) (-1140);
      shortArray0[2] = (short) (-1575);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-1575), (short) (-1140), (short) (-219)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1140);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 5, (-3389));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) true;
      DoubleStream doubleStream0 = mockRandom0.doubles((-4652.0), 988.2239999999999);
      assertNotNull(doubleStream0);
      
      objectArray0[1] = (Object) true;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)90;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) mockRandom0;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(4, objectArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      ArrayUtils.shift(longArray0, 1078);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-37), (int) (byte)28);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'U';
      charArray0[4] = '';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'I', 'I', 'U', ''}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.swap(charArray0, (-22), (int) 'I');
      assertArrayEquals(new char[] {'\u0000', 'I', 'I', 'U', ''}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-864.5F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-800.79474F);
      floatArray0[3] = (-2090.829F);
      floatArray0[4] = (-4050.0F);
      floatArray0[5] = 598.7F;
      floatArray0[6] = (-3424.8635F);
      floatArray0[7] = 10.0F;
      floatArray0[8] = 1348.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-864.5F), 0.0F, (-800.79474F), (-2090.829F), (-4050.0F), 598.7F, (-3424.8635F), 10.0F, 1348.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 1156, (-18), 98);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = 'J';
      charArray0[2] = 'u';
      charArray0[3] = '<';
      charArray0[4] = 'H';
      charArray0[5] = '&';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 98);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-219);
      shortArray0[2] = (short) (-1575);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-1575), (short)0, (short) (-219)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short) (-1575);
      ArrayUtils.swap(objectArray0, 2139617407, 0, (-1480));
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 1, 2253);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-30309);
      shortArray0[2] = (short)988;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)42;
      shortArray0[5] = (short) (-177);
      Float float0 = new Float((-278.8163574707489));
      assertNotNull(float0);
      assertEquals((-278.81635F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) (short) (-1));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      ArrayUtils.swap((Object[]) floatArray0, 1, 1186, (-2683));
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)7;
      longArray0[1] = (long) (byte)7;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)7, (int) (byte)7);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {7L, 7L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte)7);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {7L, 7L}, longArray0);
      assertArrayEquals(new long[] {7L, 7L, 7L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double((byte)7);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(7.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double1;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double1;
      Double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean3 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean3);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 7L;
      floatArray0[1] = (float) (byte)7;
      floatArray0[2] = (float) (byte)7;
      floatArray0[3] = (float) (byte)7;
      floatArray0[4] = 598.7F;
      floatArray0[5] = (float) 7L;
      floatArray0[6] = (float) (byte)7;
      floatArray0[7] = (float) (byte)7;
      floatArray0[8] = 1348.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 598.7F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {7.0F, 7.0F, 7.0F, 7.0F, 7.0F, 7.0F, 7.0F, 1348.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {7.0F, 7.0F, 7.0F, 7.0F, 598.7F, 7.0F, 7.0F, 7.0F, 1348.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(8, floatArray1.length);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[11] = 'e';
      charArray0[1] = 'a';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ';', 0);
      assertEquals(17, charArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) '\u0000';
      longArray0[3] = (long) ';';
      longArray0[4] = (long) (-1);
      Integer integer0 = Integer.getInteger("{#yAV%(;", 0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-1648));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1648), (int)integer1);
      
      Integer integer2 = new Integer((-919));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-919), (int)integer2);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "5X^.TWg!IoFXMa$oe";
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-164.422618501465);
      doubleArray0[2] = (-3120.799907336907);
      doubleArray0[3] = (-2596.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1719.3637302083569);
      doubleArray0[6] = 0.1;
      doubleArray0[7] = (-1791.8216);
      doubleArray0[8] = (-1957.47559);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 127);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-30309);
      shortArray0[2] = (short)988;
      shortArray0[4] = (short)42;
      shortArray0[5] = (short) (-177);
      shortArray0[6] = (short)256;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1), (int) (short)42);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-30309), (short)988, (short)0, (short)42, (short) (-177), (short)256}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-30309), (short)988, (short)0, (short)42, (short) (-177), (short)256}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)42;
      longArray0[1] = (-2147483648L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {42L, (-2147483648L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (short)988);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {42L, (-2147483648L)}, longArray0);
      assertArrayEquals(new long[] {42L, (-2147483648L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 217.187450496;
      doubleArray0[1] = (-3340.4304546973785);
      doubleArray0[2] = (-3340.4304546973785);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {217.187450496, (-3340.4304546973785), (-3340.4304546973785)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '@', 1536);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, charArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1536;
      floatArray0[1] = (float) '@';
      floatArray0[2] = (float) 'R';
      floatArray0[3] = (float) 'R';
      floatArray0[4] = (float) '@';
      floatArray0[5] = (float) '@';
      floatArray0[7] = (float) 1536;
      floatArray0[8] = (float) 'R';
      ArrayUtils.shift(floatArray0, 1536);
      assertArrayEquals(new float[] {82.0F, 64.0F, 64.0F, 0.0F, 1536.0F, 82.0F, 1536.0F, 64.0F, 82.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '@');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'R'}, charArray1);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '@';
      longArray0[1] = (long) 'R';
      longArray0[2] = (long) '@';
      longArray0[3] = 920L;
      longArray0[4] = (long) 1536;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {64L, 82L, 64L, 920L, 1536L}, longArray0);
      assertArrayEquals(new long[] {64L, 82L, 64L, 920L, 1536L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)12398;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1764;
      shortArray0[4] = (short)2061;
      shortArray0[5] = (short)13195;
      shortArray0[6] = (short)2681;
      ArrayUtils.shift(shortArray0, (int) (short)1, (int) (short)2061, (-3259));
      assertArrayEquals(new short[] {(short) (-1), (short)1, (short)1764, (short)2061, (short)13195, (short)2681, (short)12398}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 3150.0F;
      floatArray0[2] = 3150.0F;
      floatArray0[3] = 3150.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 0);
      assertArrayEquals(new float[] {0.0F, 3150.0F, 3150.0F, 3150.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 3150.0F;
      objectArray0[1] = (Object) 3150.0F;
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      objectArray0[3] = (Object) float0;
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object0);
      assertEquals(0.0F, object0);
      
      int int1 = ArrayUtils.indexOf(objectArray0, object0);
      assertFalse(int1 == int0);
      assertEquals(4, objectArray0.length);
      assertEquals(3, int1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3150.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 1970.3203202;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3150.0F;
      int int2 = ArrayUtils.indexOf(doubleArray0, 477.0, 713.3);
      assertArrayEquals(new double[] {3150.0, 0.0, 0.0, 1970.3203202, 3.0, 3.0, 3150.0}, doubleArray0, 0.01);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, int2);
      
      Long[] longArray0 = new Long[4];
      floatArray0[1] = (float) (long)long0;
      Long long1 = new Long((-1L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      
      longArray0[1] = long1;
      longArray0[2] = long0;
      longArray0[3] = long0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "5X^.TWg!IoFXMa$oe";
      stringArray0[2] = "C=X~HRQ\"Uw";
      stringArray0[3] = "short";
      stringArray0[4] = "";
      stringArray0[5] = "java.lang.String";
      boolean boolean0 = ArrayUtils.isArrayIndexValid(stringArray0, 288);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 288;
      floatArray0[1] = (float) 288;
      floatArray0[2] = (float) 288;
      floatArray0[3] = (float) 288;
      floatArray0[4] = (float) 288;
      floatArray0[5] = (float) 288;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (float) 288;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 10.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {288.0F, 288.0F, 288.0F, 288.0F, 288.0F, 288.0F, 1.0F, 288.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {288.0F, 288.0F, 288.0F, 288.0F, 288.0F, 288.0F, 1.0F, 288.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(288.0F);
      assertNotNull(double0);
      assertEquals(288.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2139786572);
      intArray0[1] = 288;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 288);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2139786572), 288}, intArray0);
      assertArrayEquals(new int[] {(-2139786572)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)48}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short) (byte)0;
      shortArray0[1] = (short)127;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)127;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)0, 2);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Byte byte0 = new Byte((byte) (-78));
      assertNotNull(byte0);
      assertEquals((byte) (-78), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-78), object0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'H', 'H'}, charArray1);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 67.85;
      doubleArray0[2] = (double) 'H';
      doubleArray0[3] = 3262.0;
      doubleArray0[4] = (double) (byte) (-78);
      doubleArray0[5] = 3.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2);
      assertArrayEquals(new double[] {0.0, 67.85, 72.0, 3262.0, (-78.0), 3.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, int0);
      
      ArrayUtils.reverse(byteArray0, (int) (byte) (-78), (int) (short)127);
      assertArrayEquals(new byte[] {(byte)48, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)127, (-2020));
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)16;
      longArray0[1] = (long) (byte)16;
      Long[] longArray1 = new Long[3];
      longArray1[0] = (Long) 16L;
      longArray1[1] = (Long) 16L;
      longArray1[2] = (Long) 16L;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray0));
      
      longArray3[0] = 281L;
      int int1 = ArrayUtils.lastIndexOf(longArray3, 281L);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {281L}, longArray3);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertEquals(1, longArray3.length);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1537.3754335295516, 72.0);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 72.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray1, (-1.0), (-1.0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int2);
      
      Long long0 = new Long((-2020));
      assertNotNull(long0);
      assertEquals((-2020L), (long)long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object0);
      assertEquals((-2020L), object0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-324));
      assertNotNull(short0);
      assertEquals((short) (-324), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals(3, shortArray0.length);
      assertEquals((short) (-324), (short)short1);
      
      short[] shortArray1 = new short[4];
      shortArray1[0] = (short) shortArray0[0];
      shortArray1[1] = (short) shortArray0[0];
      shortArray1[3] = (short) (-16);
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertArrayEquals(new short[] {(short) (-324), (short) (-324), (short)0, (short) (-16)}, shortArray1);
      assertEquals(4, shortArray1.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-324);
      doubleArray0[1] = (double) 52L;
      doubleArray0[2] = (double) (short) (-324);
      doubleArray0[3] = (double) (short) (-324);
      doubleArray0[4] = (double) (short) (-324);
      doubleArray0[5] = (-842.8);
      doubleArray0[6] = (double) (short) (-16);
      doubleArray0[7] = (double) (short) (-324);
      shortArray1[1] = (short) (-16);
      ArrayUtils.shift(doubleArray0, 160, (-807), (-364));
      assertArrayEquals(new double[] {(-324.0), 52.0, (-324.0), (-324.0), (-324.0), (-842.8), (-16.0), (-324.0), 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4139.04), 0.0);
      assertArrayEquals(new double[] {(-324.0), 52.0, (-324.0), (-324.0), (-324.0), (-842.8), (-16.0), (-324.0), 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true);
      assertNotNull(bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 196.3901576;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 196.3901576, 1120.140565);
      assertArrayEquals(new double[] {196.3901576}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)54;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte)0, (byte)10, (byte)0, (byte) (-1), (byte)0, (byte)54}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals("{0, 5}", bitSet0.toString());
      assertEquals(8, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      bitSet0.flip(59);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte)0, (byte)10, (byte)0, (byte) (-1), (byte)0, (byte)54}, byteArray0);
      assertEquals(60, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 5, 59}", bitSet0.toString());
      assertEquals(8, byteArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) (byte)57, 34);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 917, 917, 1384);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 917;
      doubleArray0[1] = 430.0;
      doubleArray0[2] = (double) 917;
      doubleArray0[3] = (double) 1384;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 430.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {917.0, 430.0, 917.0, 1384.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {917.0, 917.0, 1384.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-11361);
      shortArray0[1] = (short) (-1594);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)19;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-11361), (short) (-1594), (short)1, (short)2, (short)19}, shortArray0);
      assertArrayEquals(new short[] {(short) (-11361), (short) (-1594), (short)1, (short)2, (short)19}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      Short[] shortArray2 = new Short[1];
      shortArray2[0] = (Short) (short)2;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertNotNull(shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertArrayEquals(new short[] {(short)2}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertEquals(1, shortArray3.length);
      assertEquals(1, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-158L));
      assertNotNull(long0);
      assertEquals((-158L), (long)long0);
      
      longArray0[0] = long0;
      long long1 = 0L;
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((-158L));
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-158L), (long)long3);
      
      longArray0[2] = long3;
      longArray0[3] = (Long) long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-158L), 0L, (-158L), 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = 'J';
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray0, (byte)0);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 773, (int) (byte)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Object[] objectArray0 = new Object[9];
      Short short0 = new Short((short) (-1104));
      assertNotNull(short0);
      assertEquals((short) (-1104), (short)short0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (-553.043243765851);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) 773;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-553.043243765851));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, (-553.043243765851), (-1.0), 0.0, 0.0, 773.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) short0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-503), (-503));
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      Float float0 = new Float((-422.5085F));
      assertNotNull(float0);
      assertEquals((-422.5085F), (float)float0, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) float0, (-503));
      assertFalse(int1 == int0);
      assertEquals(1, integerArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((char[]) null, 75, 0, int0);
      assertFalse(int0 == int1);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) int0, (double) (-422.5085F));
      assertFalse(int0 == int1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(int0 == int1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean2 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[1] = 'J';
      charArray0[2] = 'B';
      charArray0[3] = '-';
      charArray0[4] = 't';
      charArray0[5] = 'Y';
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'u', 'J', 'B', '-', 't', 'Y'}, charArray0);
      assertArrayEquals(new char[] {'u', 'J', 'B', '-', 't', 'Y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean3 = Boolean.valueOf(false);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[0] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4);
      
      booleanArray0[1] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5);
      
      booleanArray0[2] = boolean5;
      Boolean boolean6 = new Boolean(false);
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6);
      
      booleanArray0[3] = boolean6;
      Boolean boolean7 = new Boolean("java.lang.String");
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7);
      
      booleanArray0[4] = boolean7;
      Boolean boolean8 = new Boolean("java.lang.String");
      assertNotNull(boolean8);
      assertTrue(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean3));
      assertFalse(boolean8);
      
      booleanArray0[5] = boolean8;
      Boolean boolean9 = Boolean.TRUE;
      assertNotNull(boolean9);
      assertFalse(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean7));
      assertTrue(boolean9.equals((Object)boolean0));
      assertFalse(boolean9.equals((Object)boolean1));
      assertTrue(boolean9.equals((Object)boolean2));
      assertFalse(boolean9.equals((Object)boolean3));
      assertFalse(boolean9.equals((Object)boolean5));
      assertFalse(boolean9.equals((Object)boolean6));
      assertTrue(boolean9);
      
      booleanArray0[6] = boolean9;
      Boolean boolean10 = Boolean.FALSE;
      assertNotNull(boolean10);
      assertFalse(boolean10.equals((Object)boolean2));
      assertFalse(boolean10.equals((Object)boolean4));
      assertTrue(boolean10.equals((Object)boolean8));
      assertTrue(boolean10.equals((Object)boolean1));
      assertTrue(boolean10.equals((Object)boolean7));
      assertFalse(boolean10.equals((Object)boolean9));
      assertFalse(boolean10.equals((Object)boolean0));
      assertTrue(boolean10.equals((Object)boolean6));
      assertFalse(boolean10);
      
      booleanArray0[7] = boolean10;
      Boolean boolean11 = Boolean.FALSE;
      assertNotNull(boolean11);
      assertFalse(boolean11.equals((Object)boolean4));
      assertTrue(boolean11.equals((Object)boolean7));
      assertFalse(boolean11.equals((Object)boolean2));
      assertTrue(boolean11.equals((Object)boolean1));
      assertTrue(boolean11.equals((Object)boolean8));
      assertFalse(boolean11.equals((Object)boolean9));
      assertTrue(boolean11.equals((Object)boolean6));
      assertFalse(boolean11.equals((Object)boolean0));
      assertFalse(boolean11);
      
      booleanArray0[8] = boolean11;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean7);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true, false, false}, booleanArray1));
      assertFalse(boolean7.equals((Object)boolean9));
      assertFalse(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean11));
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean8));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean10));
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean1));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      ArrayUtils.reverse((char[]) null, 508, 508);
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[3] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("MI`F,$ FOU{R:");
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf(false);
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7);
      
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, boolean7);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      
      boolean boolean8 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean8);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 25.65F;
      floatArray0[3] = (-1438.5513F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 25.65F, (-1438.5513F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Float";
      stringArray0[2] = "m8(R8B";
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      charArray0[4] = '|';
      charArray0[6] = '|';
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 25.65F;
      floatArray0[3] = (-1438.5513F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 25.65F, (-1438.5513F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Float";
      stringArray0[1] = "lm+MpJ0)<XgWJt)";
      stringArray0[2] = "m8(R8B";
      stringArray0[3] = "The type must not be null";
      stringArray0[4] = "java.lang.String";
      stringArray0[5] = "V\"vDw,Vv'b";
      stringArray0[6] = "=";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 48.0, 126);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)59;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)2, (byte) (-69), (byte)59}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "5X^.TWg!IoFXMa$oe";
      stringArray0[1] = ">47/l2v;Ri";
      stringArray0[2] = "C=X~HRQ\"Uw";
      stringArray0[3] = "short";
      stringArray0[4] = "";
      stringArray0[5] = "java.lang.String";
      boolean boolean0 = ArrayUtils.isArrayIndexValid(stringArray0, 288);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 288;
      floatArray0[1] = (float) 288;
      floatArray0[2] = (float) 288;
      floatArray0[3] = (float) 288;
      floatArray0[4] = (float) 288;
      floatArray0[5] = (float) 288;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (float) 288;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 10.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {288.0F, 288.0F, 288.0F, 288.0F, 288.0F, 288.0F, 1.0F, 288.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {288.0F, 288.0F, 288.0F, 288.0F, 288.0F, 288.0F, 1.0F, 288.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-4886);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-2247);
      shortArray0[4] = (short) (-1349);
      shortArray0[5] = (short)605;
      shortArray0[6] = (short)2318;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), 2006);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-4886), (short) (-1), (short) (-1), (short) (-2247), (short) (-1349), (short)605, (short)2318}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(7, shortArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) (short) (-1);
      objectArray0[2] = (Object) (short) (-1349);
      // Undeclared exception!
      try { 
        bitSet0.set((-384), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -384
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-4886);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-4715);
      short short0 = (short) (-2247);
      shortArray0[3] = (short) (-2247);
      shortArray0[4] = (short) (-1349);
      shortArray0[5] = (short)605;
      shortArray0[6] = (short)2318;
      int int0 = 2006;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), 2006);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-4886), (short) (-1), (short) (-4715), (short) (-2247), (short) (-1349), (short)605, (short)2318}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(7, shortArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) (short) (-4715);
      objectArray0[2] = (Object) (short) (-1349);
      // Undeclared exception!
      try { 
        bitSet0.set((-384), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -384
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2452;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.5;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 1.5;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) 2452;
      objectArray0[3] = (Object) 1.5;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(4, objectArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[3] = 0L;
      longArray0[4] = (long) 2452;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 2452;
      longArray0[7] = (long) 0;
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 2452L, 0L, 2452L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)305;
      shortArray0[1] = (short) (-2685);
      shortArray0[2] = (short) (-634);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)1606;
      ArrayUtils.swap(shortArray0, (-2059), (-1), 0);
      assertArrayEquals(new short[] {(short)305, (short) (-2685), (short) (-634), (short)2, (short)1606}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      char[] charArray0 = new char[2];
      long[] longArray0 = new long[8];
      longArray0[0] = 920L;
      longArray0[1] = 2147483647L;
      longArray0[2] = 431L;
      longArray0[3] = (-28L);
      longArray0[4] = 1233L;
      longArray0[5] = 771L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-3136), 2147483647L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3136, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      ArrayUtils.swap((boolean[]) null, 893, 2797, 2797);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Float float0 = new Float((double) 893);
      assertNotNull(float0);
      assertEquals(893.0F, (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameType(float0, float0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)46);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte)46);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)46}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int int1 = ArrayUtils.indexOf((char[]) null, '.', (int) (byte)46);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 2797;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 17, (-4126L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2861), 50, (-2861));
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short) (-699);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)13;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)64);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-699), (short)0, (short)13}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(5, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, (-1549));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, bitSet1.length());
      assertEquals(2, bitSet1.cardinality());
      assertEquals("{0, 2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(3, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)13);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-699), (short)0, (short)13}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(4, int0);
      
      ArrayUtils.shift(shortArray0, (-77), 126, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-699), (short)0, (short)13}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isEquals(bitSet0, bitSet1);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-699), (short)0, (short)13}, shortArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, bitSet1.length());
      assertEquals(2, bitSet1.cardinality());
      assertEquals("{0, 2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(5, shortArray0.length);
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = '6';
      charArray0[2] = 'G';
      charArray0[3] = '9';
      charArray0[4] = '';
      charArray0[5] = 'B';
      charArray0[6] = 'C';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '#');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'i', '6', 'G', '9', '', 'B', 'C'}, charArray1);
      assertArrayEquals(new char[] {'i', '6', 'G', '9', '', 'B', 'C'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1072;
      shortArray0[1] = (short)10;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)10);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1072, (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)1072}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)1072, (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)1072}, shortArray1);
      assertArrayEquals(new short[] {(short)1072}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      
      float[] floatArray0 = new float[12];
      floatArray0[0] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[2] = (float) (short)10;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2119.1746F);
      floatArray0[5] = 54.0F;
      floatArray0[6] = (float) (short)10;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)1072, (int) (short)10);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(12, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)1072;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      
      String[] stringArray0 = new String[9];
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) (short)1072, (double) (short)10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1072, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2398L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[1];
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      Character character0 = new Character('H');
      assertNotNull(character0);
      assertEquals('H', (char)character0);
      
      Character character1 = Character.valueOf('S');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('S', (char)character1);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      Character character2 = Character.valueOf('L');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('L', (char)character2);
      
      characterArray0[1] = character2;
      characterArray0[2] = character0;
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (char)character0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 72}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean0;
      Boolean boolean2 = new Boolean((boolean) boolean0);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean2);
      assertNotNull(boolean3);
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Character[] characterArray0 = new Character[1];
      char char0 = '\"';
      Character character0 = Character.valueOf('\"');
      assertNotNull(character0);
      assertEquals('\"', (char)character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte)16;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)117, 2146026739);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-13), (byte) (-128), (byte) (-64), (byte)3, (byte)117, (byte)3, (byte)101, (byte) (-96), (byte)16}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(9, byteArray0.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray1);
      assertNotNull(charArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) char0;
      intArray0[1] = (int) (byte)3;
      intArray0[2] = (int) (byte) (-94);
      intArray0[3] = (int) (byte) (-94);
      intArray0[4] = (int) (byte) (-64);
      intArray0[5] = (int) (byte)101;
      intArray0[6] = (int) (byte) (-13);
      intArray0[7] = (int) (byte) (-64);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {34, 3, (-94), (-94), (-64), 101, (-13), (-64)}, intArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      ArrayUtils.swap((boolean[]) null, 893, 2797, 2797);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Float float0 = new Float((double) 893);
      assertNotNull(float0);
      assertEquals(893.0F, (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameType(float0, float0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)46);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte)46);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)46}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int int1 = ArrayUtils.indexOf((char[]) null, '.', (int) (byte)46);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)46;
      floatArray0[1] = (float) '.';
      floatArray0[2] = (float) (byte)46;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {46.0F, 46.0F, 46.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {46.0F, 46.0F, 46.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(3, floatArray2.length);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = Integer.getInteger("X0y68^il^4nVG`}NVg", 1497);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(1497, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1768);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(1768, (int)integer3);
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 512);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1497, 0, Integer.MAX_VALUE, 1768}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'E';
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 'E';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 25.65F);
      assertArrayEquals(new float[] {69.0F, 0.0F, 69.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 25.65F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1));
      assertArrayEquals(new double[] {0.0, 25.649999618530273}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf(" 'A=IceMGu");
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5);
      
      booleanArray0[4] = boolean5;
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'E'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int int1 = 804;
      char[] charArray1 = ArrayUtils.subarray((char[]) null, (-1), 804);
      assertNull(charArray1);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {69.0F, 0.0F, 69.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {69.0F, 0.0F, 69.0F, 69.0F, 0.0F, 69.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-1084));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1084, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'E';
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 'E';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 25.65F);
      assertArrayEquals(new float[] {69.0F, 0.0F, 69.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 69.0F;
      doubleArray0[1] = (double) 25.65F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1));
      assertArrayEquals(new double[] {69.0, 25.649999618530273}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf(" 'A=IceMGu");
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5);
      
      booleanArray0[4] = boolean5;
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte)28, 36);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1737.9319F;
      floatArray0[1] = 3150.0F;
      floatArray0[2] = 3150.0F;
      floatArray0[3] = 2274.0F;
      floatArray0[4] = 1737.9319F;
      int int0 = ArrayUtils.indexOf(floatArray0, 1737.9319F, 0);
      assertArrayEquals(new float[] {1737.9319F, 3150.0F, 3150.0F, 2274.0F, 1737.9319F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 3150.0F;
      objectArray0[1] = (Object) 2274.0F;
      objectArray0[2] = (Object) 1737.9319F;
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) long0);
      assertNotNull(object0);
      assertEquals(4, objectArray0.length);
      assertEquals(3150.0F, object0);
      
      objectArray0[3] = object0;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertEquals(4, objectArray0.length);
      assertEquals(3150.0F, object1);
      
      int int1 = ArrayUtils.indexOf(objectArray0, object1);
      assertTrue(int1 == int0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3150.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 1970.3203202;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 3150.0F;
      int int2 = ArrayUtils.indexOf(doubleArray0, 477.0, 713.3);
      assertArrayEquals(new double[] {3150.0, 0.0, 0.0, 1970.3203202, 0.0, 0.0, 3150.0}, doubleArray0, 0.01);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, int2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-87);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)28}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      Long long1 = new Long((-1L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      
      longArray0[1] = long1;
      longArray0[2] = long0;
      longArray0[3] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L}, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)25;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-2707), (byte)25);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2707, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1195);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)121, (short)0, (short)0, (short)0, (short) (-1195), (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)1;
      ArrayUtils.shift(byteArray0, (-3213));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-106), (byte)46, (byte)49, (byte)38, (byte)82, (byte)1}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1072;
      shortArray0[1] = (short)1072;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1072);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1072, (short)1072}, shortArray0);
      assertArrayEquals(new short[] {(short)1072}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)1072, (short)1072}, shortArray0);
      assertArrayEquals(new short[] {(short)1072}, shortArray1);
      assertArrayEquals(new short[] {(short)1072}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      
      float[] floatArray0 = new float[12];
      floatArray0[0] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[2] = (float) (short)1072;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2119.1746F);
      floatArray0[3] = (-1.0F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)1072, (int) (short)1072);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(12, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray3 = ArrayUtils.subarray(shortArray0, 2983, (-907));
      assertNotNull(shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertArrayEquals(new short[] {(short)1072, (short)1072}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray3);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray3.length);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (byte)16;
      shortArray0[3] = (short) (byte)16;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)16;
      shortArray0[7] = (short) (byte)16;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)16, (short)16, (short)0, (short)0, (short)16, (short)16}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)16, (short)16, (short)16, (short)16}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, 0, 969);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)16, (short)16, (short)0, (short)0, (short)16, (short)16}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)16, (short)16, (short)0, (short)0, (short)16, (short)16}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = 3207L;
      longArray0[3] = (long) (-503);
      longArray0[4] = (long) (byte)56;
      longArray0[6] = 3207L;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)56;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (-159), 3024);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)56}, shortArray0);
      assertArrayEquals(new short[] {(short)56}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-236.29999999999995);
      doubleArray0[2] = 3150.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2452.0;
      doubleArray0[5] = 1120.140565;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-756.506);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-236.29999999999995), 3150.0, 1.0, 2452.0, 1120.140565, 0.0, (-756.506)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-236.29999999999995), 3150.0, 1.0, 2452.0, 1120.140565, 0.0, (-756.506)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)127, (-2020));
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 281L;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 281L);
      assertArrayEquals(new long[] {281L}, longArray0);
      assertFalse(int1 == int0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1530.224, 72.0);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 72.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int2 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2452;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) 2452;
      doubleArray0[3] = (double) 2452;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 2452;
      doubleArray0[7] = (double) 2452;
      doubleArray0[8] = (double) 2452;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2452);
      assertArrayEquals(new double[] {0.0, 1.5, 2452.0, 2452.0, 0.0, 0.0, 2452.0, 2452.0, 2452.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 317.63434671482);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.5, 2452.0, 2452.0, 0.0, 0.0, 2452.0, 2452.0, 2452.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.5, 2452.0, 2452.0, 0.0, 0.0, 2452.0, 2452.0, 2452.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      int int1 = ArrayUtils.indexOf(doubleArray1, (-1.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.5, 2452.0, 2452.0, 0.0, 0.0, 2452.0, 2452.0, 2452.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.5, 2452.0, 2452.0, 0.0, 0.0, 2452.0, 2452.0, 2452.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-11);
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[1] = '^';
      charArray1[2] = '^';
      charArray1[3] = '|';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray1, (int) (byte)52);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 52, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) (byte)43);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 3207L;
      longArray0[1] = 3207L;
      longArray0[2] = (long) (-503);
      longArray0[3] = (long) (-503);
      longArray0[4] = (long) (byte)56;
      longArray0[5] = (-28L);
      longArray0[6] = 3207L;
      int int0 = ArrayUtils.indexOf(longArray0, 771L, (-503));
      assertArrayEquals(new long[] {3207L, 3207L, (-503L), (-503L), 56L, (-28L), 3207L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 1.5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5);
      assertArrayEquals(new double[] {0.0, 1.5, 1.5}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      
      ArrayUtils.shift((byte[]) null, (-517), (-288), (-288));
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (-517);
      longArray0[3] = (long) (-517);
      longArray0[4] = (long) (-288);
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 2;
      longArray0[7] = (long) (-288);
      longArray0[8] = (long) 2;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2L, 2L, (-517L), (-517L), (-288L), 2L, 2L, (-288L), 2L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray1.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      int int1 = ArrayUtils.indexOf(longArray1, (-517L), 2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2L, 2L, (-517L), (-517L), (-288L), 2L, 2L, (-288L), 2L}, longArray0);
      assertTrue(int1 == int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray1.length);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      ArrayUtils.shift((Object[]) doubleArray0, (-2076));
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)39}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-250L);
      doubleArray0[1] = (double) (-250L);
      doubleArray0[2] = (double) (-250L);
      doubleArray0[3] = (double) (-250L);
      doubleArray0[4] = (double) (-250L);
      doubleArray0[5] = (double) (-250L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-250L));
      assertArrayEquals(new double[] {(-250.0), (-250.0), (-250.0), (-250.0), (-250.0), (-250.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, int0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, 0, 0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray1 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[5] = 'e';
      charArray0[1] = '@';
      charArray0[2] = '`';
      charArray0[3] = '@';
      charArray0[4] = '/';
      charArray0[2] = 'N';
      charArray0[6] = '@';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertArrayEquals(new char[] {'\u0000', '@', 'N', '@', '/', 'e', '@'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      charArray0[1] = '@';
      charArray0[2] = '`';
      charArray0[3] = '7';
      charArray0[4] = '/';
      charArray0[5] = 'N';
      charArray0[6] = '-';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertArrayEquals(new char[] {'e', '@', '`', '7', '/', 'N', '-'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2861), 50, (-2861));
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short) (-699);
      shortArray0[4] = (short)13;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-699), (short)0, (short)13}, shortArray0);
      assertEquals(3, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)1143;
      shortArray1[2] = (short)13;
      shortArray1[3] = (short)1143;
      shortArray1[4] = (short) (-699);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1143, (short)13, (short)1143, (short) (-699)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray1.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift((Object[]) null, (int) (short)1143);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2092;
      shortArray0[2] = (short) (-3572);
      shortArray0[3] = (short)5;
      shortArray0[4] = (short) (-805);
      shortArray0[5] = (short)1453;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-3572);
      shortArray0[8] = (short)889;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)2092, (short) (-3572), (short)5, (short) (-805), (short)1453, (short) (-1), (short) (-3572), (short)889, (short) (-1)}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = 'H';
      charArray0[2] = 'q';
      charArray0[3] = '6';
      charArray0[4] = 'r';
      charArray0[5] = 'c';
      charArray0[6] = '';
      charArray0[7] = '.';
      charArray0[8] = '_';
      ArrayUtils.swap(charArray0, 2048, (int) (short) (-1), (-55));
      assertArrayEquals(new char[] {',', 'H', 'q', '6', 'r', 'c', '', '.', '_'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1239.444415026);
      doubleArray0[1] = (-3340.4304546973785);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1239.444415026), (-3340.4304546973785), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'a';
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1195);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)121, (short)0, (short)0, (short)0, (short) (-1195), (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)1;
      ArrayUtils.shift(byteArray0, (-3213));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-106), (byte)46, (byte)49, (byte)38, (byte)82, (byte)1}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3281.53259672);
      doubleArray0[1] = 2713.7;
      doubleArray0[2] = 831.673144736;
      doubleArray0[3] = 74.0;
      doubleArray0[4] = (-104.164994526);
      doubleArray0[5] = (-961.5643855762835);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1651.627);
      doubleArray0[8] = 3.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3281.53259672), 2713.7, 831.673144736, 74.0, (-104.164994526), (-961.5643855762835), 0.0, (-1651.627), 3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-3281.53259672), 2713.7, 831.673144736, 74.0, (-104.164994526), (-961.5643855762835), 0.0, (-1651.627), 3.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1168.88));
      assertNotNull(double0);
      assertEquals((-1168.88), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = Double.valueOf((-164.422618501465));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-164.422618501465), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-35.48531102953));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-35.48531102953), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '@';
      charArray0[2] = '!';
      charArray0[3] = 'y';
      charArray0[4] = '!';
      charArray0[5] = 'O';
      charArray0[6] = 'Z';
      charArray0[7] = 'R';
      charArray0[8] = '\'';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'O');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'-', '@', '!', 'y', '!', 'O', 'Z', 'R', '\''}, charArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(9, charArray0.length);
      
      double[] doubleArray2 = new double[0];
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray2, 3.0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3.0}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(0, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)16;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)16;
      shortArray0[7] = (short) (byte)16;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)16, (short)0, (short)0, (short)0, (short)16, (short)16}, shortArray0);
      assertArrayEquals(new short[] {(short)16, (short)16, (short)16}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      int int0 = ArrayUtils.indexOf(intArray0, 15, (int) (short)0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 122, 1472);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)0;
      ArrayUtils.swap(byteArray0, (-123), (-2217), 979);
      assertArrayEquals(new byte[] {(byte)16, (byte)16, (byte)16, (byte)16, (byte) (-64), (byte)16, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      ArrayUtils.swap(intArray0, 1405, 979, 0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift(byteArray1, 82);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 82;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[5] = (double) 82;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (double) 82);
      assertArrayEquals(new double[] {0.0, 82.0, 0.0, 0.0, 0.0, 82.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, int0);
      
      Long long0 = new Long(2147483647L);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2147483647L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1737.9319F;
      floatArray0[1] = 3150.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2274.0F;
      floatArray0[4] = 1737.9319F;
      int int0 = ArrayUtils.indexOf(floatArray0, 1737.9319F, 0);
      assertArrayEquals(new float[] {1737.9319F, 3150.0F, 0.0F, 2274.0F, 1737.9319F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 3150.0F;
      objectArray0[1] = (Object) 2274.0F;
      objectArray0[2] = (Object) 1737.9319F;
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) long0);
      assertNotNull(object0);
      assertEquals(4, objectArray0.length);
      assertEquals(3150.0F, object0);
      
      objectArray0[3] = object0;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertEquals(4, objectArray0.length);
      assertEquals(3150.0F, object1);
      
      int int1 = ArrayUtils.indexOf(objectArray0, object1);
      assertTrue(int1 == int0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3150.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 1970.3203202;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 3150.0F;
      int int2 = ArrayUtils.indexOf(doubleArray0, 477.0, 713.3);
      assertArrayEquals(new double[] {3150.0, 0.0, 0.0, 1970.3203202, 0.0, 0.0, 3150.0}, doubleArray0, 0.01);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, int2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-87);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)28}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.clone(objectArray0);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 903;
      floatArray0[1] = (float) 903;
      floatArray0[2] = (float) 903;
      floatArray0[3] = (float) 903;
      floatArray0[4] = 587.6F;
      floatArray0[5] = (float) 903;
      ArrayUtils.shift(floatArray0, 903);
      assertArrayEquals(new float[] {903.0F, 587.6F, 903.0F, 903.0F, 903.0F, 903.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 903.0F;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 903.0F;
      doubleArray0[3] = (double) 903.0F;
      doubleArray0[4] = (double) 587.6F;
      doubleArray0[5] = (double) 587.6F;
      doubleArray0[6] = (double) 587.6F;
      doubleArray0[7] = (double) 903.0F;
      doubleArray0[8] = (double) 903.0F;
      ArrayUtils.shift(doubleArray0, 903);
      assertArrayEquals(new double[] {587.5999755859375, 903.0, 903.0, 903.0, 0.0, 903.0, 903.0, 587.5999755859375, 587.5999755859375}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      Float[] floatArray1 = new Float[0];
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ';', 0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'e';
      longArray0[3] = (long) ';';
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      ArrayUtils.shift(longArray0, (-1), (-1), (-1));
      assertArrayEquals(new long[] {(-1L), 0L, 101L, 59L, (-1L), (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)175, (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 'e';
      doubleArray0[3] = (double) 59L;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, (int) (byte)2);
      assertArrayEquals(new double[] {59.0, 0.0, 0.0, (-1.0), 101.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '6';
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) '6';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 25.65F);
      assertArrayEquals(new float[] {54.0F, 0.0F, 54.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 54.0F;
      doubleArray0[1] = (double) 25.65F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1));
      assertArrayEquals(new double[] {54.0, 25.649999618530273}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      ArrayUtils.shift(doubleArray0, (-1));
      assertArrayEquals(new double[] {25.649999618530273, 54.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)512;
      shortArray0[1] = (short)1072;
      shortArray0[2] = (short)52;
      shortArray0[3] = (short)414;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)621;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)512, (short)52, (short)414, (short)1, (short)621}, shortArray1);
      assertArrayEquals(new short[] {(short)512, (short)1072, (short)52, (short)414, (short)1, (short)621}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2559;
      shortArray0[1] = (short)732;
      shortArray0[2] = (short)2559;
      shortArray0[3] = (short)2559;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)732, (short)2559, (short)2559, (short)2559}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)2559;
      floatArray0[1] = (float) (short)2559;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {2559.0F, 2559.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.insert((-1430), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)2559;
      int[] intArray1 = ArrayUtils.add(intArray0, (-4725));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2559}, intArray0);
      assertArrayEquals(new int[] {2559, (-4725)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2559;
      shortArray0[1] = (short)732;
      shortArray0[2] = (short)2559;
      shortArray0[3] = (short)2559;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)732, (short)2559, (short)2559, (short)2559}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)2559;
      floatArray0[1] = (float) (short)2559;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {2559.0F, 2559.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.insert((-1430), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)2559;
      int[] intArray1 = ArrayUtils.add(intArray0, (-4725));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2559}, intArray0);
      assertArrayEquals(new int[] {2559, (-4725)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short) (-1);
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2092;
      shortArray0[2] = (short) (-3572);
      shortArray0[3] = (short)5;
      shortArray0[4] = (short) (-805);
      shortArray0[5] = (short)1453;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-3572);
      shortArray0[8] = (short)889;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 127.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 4, 4);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 1.0, 127.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 1.0, 127.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, ')');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)65;
      doubleArray0[1] = 2368.9742;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2), Integer.MAX_VALUE);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {65.0, 2368.9742}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {65.0, 2368.9742}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-2474), 64, 64);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 64;
      longArray0[1] = (long) (-2474);
      longArray0[2] = (long) (-2474);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {64L, (-2474L), (-2474L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2384.2);
      doubleArray0[1] = (double) (-2474);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-503), (-2474));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2384.2), (-2474.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-158L));
      assertNotNull(long0);
      assertEquals((-158L), (long)long0);
      
      longArray0[0] = long0;
      long long1 = 0L;
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((-158L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-158L), (long)long3);
      
      longArray0[2] = long3;
      longArray0[3] = (Long) long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-158L), 0L, (-158L), 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = 'J';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-158L);
      doubleArray0[1] = (double) 'J';
      doubleArray0[2] = (double) (long)longArray0[0];
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {(-158.0), 74.0, (-158.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short) (-30309);
      Byte byte0 = new Byte((byte)68);
      assertNotNull(byte0);
      assertEquals((byte)68, (byte)byte0);
      
      boolean boolean0 = ArrayUtils.isEquals("int", byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-113));
      assertNotNull(byte0);
      assertEquals((byte) (-113), (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-324));
      assertNotNull(short0);
      assertEquals((short) (-324), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals(3, shortArray0.length);
      assertEquals((short) (-324), (short)short1);
      
      short[] shortArray1 = new short[4];
      shortArray1[0] = (short) shortArray0[0];
      shortArray1[1] = (short) shortArray0[0];
      shortArray1[2] = (short) (-324);
      shortArray1[3] = (short) (-16);
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertArrayEquals(new short[] {(short) (-324), (short) (-324), (short) (-324), (short) (-16)}, shortArray1);
      assertEquals(4, shortArray1.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-16);
      intArray0[1] = (-1031);
      intArray0[2] = (int) (short) (-16);
      intArray0[3] = (int) (short) (-324);
      intArray0[4] = (int) (short) (-324);
      intArray0[5] = (int) (short) (-324);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (short) (-16));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1031), (-324), (-324), (-324)}, intArray1);
      assertArrayEquals(new int[] {(-16), (-1031), (-16), (-324), (-324), (-324)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray1.length);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)10);
      assertArrayEquals(new byte[] {(byte)43, (byte)52, (byte) (-11), (byte)10, (byte)16, (byte) (-118), (byte)57, (byte)2}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(3, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (-1866);
      intArray0[3] = (int) (byte) (-118);
      intArray0[4] = (int) (byte)10;
      intArray0[5] = (int) (byte)10;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1866));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2, 2, (-118), 10, 10}, intArray1);
      assertArrayEquals(new int[] {2, 2, (-1866), (-118), 10, 10}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray1.length);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2861), 50, (-2861));
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)127;
      shortArray0[2] = (short) (-699);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)13;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)64);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short) (-699), (short)0, (short)13}, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, (-1549));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 2}", bitSet1.toString());
      assertEquals(2, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(3, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)13);
      assertArrayEquals(new short[] {(short)0, (short)127, (short) (-699), (short)0, (short)13}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(4, int0);
      
      ArrayUtils.shift(shortArray0, (-77), 126, (int) (short)13);
      assertArrayEquals(new short[] {(short) (-699), (short)0, (short)13, (short)0, (short)127}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isEquals(bitSet0, bitSet1);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new short[] {(short) (-699), (short)0, (short)13, (short)0, (short)127}, shortArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 2}", bitSet1.toString());
      assertEquals(2, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(5, shortArray0.length);
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2861), 50, (-2861));
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)13;
      shortArray0[4] = (short)13;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)64);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)13, (short)0, (short)13}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(5, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[1] = false;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, (-1549));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.cardinality());
      assertEquals(3, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(3, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)13);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)13, (short)0, (short)13}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(4, int0);
      
      ArrayUtils.shift(shortArray0, (-85), 126, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)13, (short)0, (short)13}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isEquals(bitSet0, bitSet1);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)13, (short)0, (short)13}, shortArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.cardinality());
      assertEquals(3, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(5, shortArray0.length);
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 1, 1);
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (-30309);
      shortArray0[2] = (short)988;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)42;
      shortArray0[5] = (short) (-177);
      ArrayUtils.shift(shortArray0, (int) (short) (-177), (int) (short) (-177), (-1));
      assertArrayEquals(new short[] {(short)0, (short) (-30309), (short)988, (short)8, (short)42, (short) (-177), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      ArrayUtils.swap((boolean[]) null, 893, 2797, 2797);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Float float0 = new Float((double) 893);
      assertNotNull(float0);
      assertEquals(893.0F, (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameType(float0, float0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)46);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte)46);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)46}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int int1 = ArrayUtils.indexOf((char[]) null, '.', (int) (byte)46);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = ArrayUtils.lastIndexOf(byteArray1, (byte)46);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)46}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 2509, 2509, (-1500));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Short short0 = new Short((short)474);
      assertNotNull(short0);
      assertEquals((short)474, (short)short0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) "java.lang.String", ",a*Ka");
      assertNotNull(string0);
      assertEquals("java.lang.String", string0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-324));
      assertNotNull(short0);
      assertEquals((short) (-324), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals(3, shortArray0.length);
      assertEquals((short) (-324), (short)short1);
      
      short[] shortArray1 = new short[4];
      shortArray1[0] = (short) shortArray0[0];
      shortArray1[1] = (short) shortArray0[0];
      shortArray1[2] = (short) (-324);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)55;
      byteArray0[0] = (byte) (-1);
      ArrayUtils.shift(byteArray0, (int) (byte)0, (int) (byte) (-1), (int) (byte)15);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)15, (byte)121, (byte)0, (byte)55, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      byteArray0[7] = (byte) (-103);
      shortArray0[1] = (short) (byte)0;
      shortArray0[3] = (short) (byte)15;
      shortArray0[4] = (short) (byte)0;
      byteArray0[0] = (byte)121;
      shortArray0[8] = (short)1119;
      ArrayUtils.shift(shortArray0, (-1062));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)15, (short)0, (short)0, (short)0, (short)0, (short)1119}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)96;
      byteArray0[0] = (byte)34;
      ArrayUtils.shift(byteArray0, 0, (int) (byte) (-1), (int) (byte)15);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-1), (byte) (-103), (byte)15, (byte)121, (byte) (-53), (byte)55, (byte)96, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-103);
      shortArray0[1] = (short) (byte) (-103);
      shortArray0[2] = (short) (byte)34;
      shortArray0[3] = (short) (byte) (-103);
      shortArray0[4] = (short) (byte) (-53);
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte)121;
      shortArray0[7] = (short)2756;
      shortArray0[8] = (short)1119;
      ArrayUtils.shift(shortArray0, (-1062));
      assertArrayEquals(new short[] {(short) (-103), (short) (-103), (short)34, (short) (-103), (short) (-53), (short) (-1), (short)121, (short)2756, (short)1119}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'U';
      charArray0[4] = '';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'I', 'I', 'U', ''}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, 2204.579F);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(charArray0, (-22), (-1));
      assertArrayEquals(new char[] {'\u0000', 'I', 'I', 'U', ''}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2092;
      shortArray0[2] = (short) (-3572);
      shortArray0[3] = (short)5;
      shortArray0[4] = (short) (-805);
      shortArray0[5] = (short)1453;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-3572);
      shortArray0[8] = (short)889;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)2092, (short) (-3572), (short)5, (short) (-805), (short)1453, (short) (-1), (short) (-3572), (short)889, (short) (-1)}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = 'H';
      charArray0[2] = 'q';
      charArray0[3] = '6';
      charArray0[4] = 'r';
      charArray0[5] = 'c';
      charArray0[6] = '';
      charArray0[7] = '.';
      charArray0[8] = '_';
      ArrayUtils.swap(charArray0, 1, (int) (short) (-1), 1);
      assertArrayEquals(new char[] {'H', '.', 'q', '6', 'r', 'c', '', '.', '_'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1473.3768017;
      doubleArray0[1] = (-2043.215880507642);
      doubleArray0[2] = (-2043.215880507642);
      doubleArray0[3] = (-2043.215880507642);
      doubleArray0[4] = (-2043.215880507642);
      doubleArray0[5] = (-2043.215880507642);
      doubleArray0[6] = (-2043.215880507642);
      doubleArray0[7] = (-2043.215880507642);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1557.878895691807), 2656.3548497);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1473.3768017, (-2043.215880507642), (-2043.215880507642), (-2043.215880507642), (-2043.215880507642), (-2043.215880507642), (-2043.215880507642), (-2043.215880507642)}, doubleArray0, 0.01);
      assertEquals(7, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = new long[8];
      longArray2[0] = (-1206L);
      longArray2[1] = (-4298L);
      longArray2[2] = (-1L);
      longArray2[3] = 0L;
      longArray2[4] = (-1473L);
      longArray2[5] = (-1L);
      longArray2[6] = 1L;
      longArray2[7] = 271L;
      int int0 = ArrayUtils.lastIndexOf(longArray2, 0L);
      assertArrayEquals(new long[] {(-1206L), (-4298L), (-1L), 0L, (-1473L), (-1L), 1L, 271L}, longArray2);
      assertEquals(8, longArray2.length);
      assertEquals(3, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 271L;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) (-4298L);
      doubleArray0[3] = (double) (-1473L);
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = 3179.27261;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 3;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1259.224, 271.0);
      assertArrayEquals(new double[] {271.0, 3.0, (-4298.0), (-1473.0), 1.0, 3179.27261, 0.0, 3.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (-2034.59908);
      doubleArray0[2] = (-2075.8);
      doubleArray0[3] = (-2034.59908);
      doubleArray0[5] = (-2034.59908);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-262.0));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {100.0, (-2034.59908), (-2075.8), (-2034.59908), 0.0, (-2034.59908)}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '1';
      intArray0[1] = (int) '1';
      intArray0[2] = (int) '*';
      intArray0[3] = (int) '*';
      intArray0[4] = (int) '*';
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {42, 42, 42, 49, 49}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 0);
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1569;
      intArray0[6] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1569);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1569, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(5, int0);
      
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1569, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(14, intArray1.length);
      assertEquals(7, intArray0.length);
      
      Short[] shortArray0 = new Short[5];
      short short0 = (short)10;
      Short short1 = new Short((short)10);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)10, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)10, (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) (-4551));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short) (-4551), (short)short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short(short0);
      assertNotNull(short4);
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertEquals((short)10, (short)short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short) (-4551));
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertEquals((short) (-4551), (short)short5);
      
      shortArray0[4] = short5;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      ArrayUtils.reverse(intArray0, 5, 4152);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1569}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(7, intArray0.length);
      
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertNotNull(intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1569}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(14, intArray1.length);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[1] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 2731L;
      longArray0[1] = 312L;
      boolean boolean2 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {2731L, 312L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean2);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      char[] charArray1 = new char[4];
      charArray1[0] = 'A';
      charArray1[1] = 'V';
      charArray1[2] = 'l';
      charArray1[3] = 'V';
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'A', 'V', 'l', 'V'}, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, characterArray0.length);
      
      Byte byte0 = new Byte((byte) (-60));
      assertNotNull(byte0);
      assertEquals((byte) (-60), (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) byte0, (int) (byte) (-60));
      assertArrayEquals(new char[] {'A', 'V', 'l', 'V'}, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, characterArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, (int) (byte) (-60), 247, 2);
      assertArrayEquals(new long[] {2731L, 312L}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, (int) (byte) (-60), (-1));
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray2);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {'A', 'V', 'l', 'V'}, charArray1);
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(0, charArray2.length);
      assertEquals(4, charArray1.length);
      
      Character[] characterArray1 = ArrayUtils.removeElements(characterArray0, characterArray0);
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(characterArray0, characterArray1);
      assertArrayEquals(new char[] {'A', 'V', 'l', 'V'}, charArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertEquals(0, characterArray1.length);
      assertEquals(4, charArray1.length);
      assertEquals(4, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2861), 50, (-2861));
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)127;
      shortArray0[2] = (short) (-699);
      shortArray0[3] = (short)0;
      Double[] doubleArray0 = ArrayUtils.removeElements((Double[]) null, (Double[]) null);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 64L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[9];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 64L}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {64L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(9, intArray0.length);
      assertEquals(1, longArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2008, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 1443);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1443}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (-1195);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-1195);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1195.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte) (-66));
      assertArrayEquals(new byte[] {(byte)10, (byte) (-66), (byte) (-81), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = '=';
      charArray0[2] = 'i';
      charArray0[3] = 'H';
      charArray0[4] = '?';
      charArray0[5] = '5';
      int int0 = ArrayUtils.indexOf(charArray0, 'i', 784);
      assertArrayEquals(new char[] {'+', '=', 'i', 'H', '?', '5'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '+';
      longArray0[1] = (long) '+';
      longArray0[2] = (long) '?';
      longArray0[3] = (long) '+';
      longArray0[4] = (long) 'i';
      longArray0[5] = (long) '=';
      ArrayUtils.swap(longArray0, 784, 0, 1244);
      assertArrayEquals(new long[] {43L, 43L, 63L, 43L, 105L, 61L}, longArray0);
      assertEquals(6, longArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)28;
      byteArray0[8] = (byte) (-13);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-37), (-1));
      assertArrayEquals(new byte[] {(byte)2, (byte) (-7), (byte) (-107), (byte)83, (byte)3, (byte)114, (byte)118, (byte)28, (byte) (-13)}, byteArray0);
      assertTrue(int1 == int0);
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'H';
      charArray0[2] = 'W';
      charArray0[3] = '7';
      ArrayUtils.shift(charArray0, 15, 15, 618);
      assertArrayEquals(new char[] {'l', 'H', 'W', '7'}, charArray0);
      assertEquals(4, charArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 618;
      longArray0[1] = (long) 'l';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'H';
      floatArray0[1] = (float) 'W';
      floatArray0[2] = (float) 'H';
      floatArray0[3] = (float) 108L;
      floatArray0[4] = (float) 'H';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 108L, 167);
      assertArrayEquals(new float[] {72.0F, 87.0F, 72.0F, 108.0F, 72.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(3, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)8;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)75);
      assertArrayEquals(new byte[] {(byte)81, (byte)43, (byte)1, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'E';
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 'E';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 25.65F);
      assertArrayEquals(new float[] {69.0F, 0.0F, 69.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 69.0F;
      doubleArray0[1] = (double) 25.65F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1));
      assertArrayEquals(new double[] {69.0, 25.649999618530273}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf(" 'A=IceMGu");
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5);
      
      booleanArray0[4] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray1));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      char[] charArray1 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = '=';
      charArray0[2] = 'i';
      charArray0[3] = 'H';
      charArray0[4] = '?';
      charArray0[5] = '5';
      int int0 = ArrayUtils.indexOf(charArray0, 'i', 784);
      assertArrayEquals(new char[] {'+', '=', 'i', 'H', '?', '5'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '+';
      longArray0[1] = (long) '+';
      longArray0[2] = (long) '?';
      longArray0[3] = (long) '+';
      longArray0[4] = (long) 'i';
      longArray0[5] = (long) '=';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0, 0, 784);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 122);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = '\\';
      charArray0[2] = 'P';
      charArray0[3] = 'Z';
      charArray0[4] = 'O';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'P';
      intArray0[1] = (int) '\\';
      intArray0[2] = (int) 'O';
      intArray0[3] = 122;
      intArray0[4] = (int) 'Z';
      intArray0[5] = (int) 'Z';
      intArray0[6] = 122;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 122, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-1863);
      intArray0[4] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, (-1863), Integer.MAX_VALUE}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      Double[] doubleArray0 = new Double[1];
      try { 
        Double.valueOf("java.lang.String");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-183L);
      longArray0[1] = (-242L);
      longArray0[2] = 0L;
      longArray0[3] = (-1832L);
      longArray0[4] = (-1L);
      longArray0[5] = (-1L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-183L), (-242L), 0L, (-1832L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-242L);
      longArray0[2] = 0L;
      longArray0[3] = (-1832L);
      longArray0[4] = 15L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, (-242L), 0L, (-1832L), 15L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1307), (-1307));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-213);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)11158;
      shortArray0[4] = (short)57;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-213), (short)1, (short)11158, (short)57}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-213), (short)1, (short)11158, (short)57}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-213);
      longArray0[2] = (long) (short)57;
      longArray0[3] = (long) (short)1;
      longArray0[4] = (long) (short)57;
      longArray0[5] = (long) (short)11158;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray1);
      assertNotNull(longArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new long[] {0L, (-213L), 57L, 1L, 57L, 11158L}, longArray1);
      assertArrayEquals(new long[] {0L, (-213L), 57L, 1L, 57L, 11158L}, longArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, intArray1.length);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean0);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean2);
      assertNotNull(boolean3);
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('\"');
      assertNotNull(character0);
      assertEquals('\"', (char)character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte)16;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)117, 2146026739);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-13), (byte) (-128), (byte) (-64), (byte)3, (byte)117, (byte) (-94), (byte)101, (byte) (-96), (byte)16}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2104;
      shortArray0[2] = (short) (-3572);
      shortArray0[3] = (short)5;
      shortArray0[4] = (short) (-805);
      shortArray0[5] = (short)1453;
      shortArray0[6] = (short)2559;
      shortArray0[7] = (short)732;
      shortArray0[8] = (short)889;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)2104, (short) (-3572), (short)5, (short) (-805), (short)1453, (short)2559, (short)732, (short)889, (short) (-1)}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2452;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 744;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 477;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {2452, 0, 0, 744, Integer.MAX_VALUE, 477}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1668;
      shortArray0[2] = (short)127;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1668, (short)127, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1668, (short)127, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)127, 0);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)1668, (short)127, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'H';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'b', 'H'}, charArray0);
      assertArrayEquals(new char[] {'b', 'H', 'b', 'H'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 889);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 889, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 217.187450496;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      int int0 = 2189;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 2189);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2189, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = Long.valueOf((-158L));
      assertNotNull(long0);
      assertEquals((-158L), (long)long0);
      
      long long1 = 0L;
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((-158L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertEquals((-158L), (long)long3);
      
      longArray0[2] = long3;
      longArray0[3] = (Long) long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-158L), 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = 'J';
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray0, (byte)0);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte)0, 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      long[] longArray2 = ArrayUtils.add(longArray1, (int) (byte)0, long1);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-158L), 0L}, longArray2);
      assertArrayEquals(new long[] {0L, 0L, (-158L), 0L}, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertEquals(5, longArray2.length);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      byte[] byteArray3 = ArrayUtils.subarray(byteArray2, 2731, (int) (byte)0);
      assertNotNull(byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 64, 64);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)16, (byte)16, (byte)16, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1679.0543359);
      doubleArray0[1] = 1.0;
      long[] longArray0 = new long[9];
      longArray0[0] = 870L;
      longArray0[1] = (long) 0;
      longArray0[2] = 870L;
      longArray0[3] = 870L;
      longArray0[4] = 870L;
      longArray0[5] = 870L;
      longArray0[6] = (-2495L);
      longArray0[7] = 0L;
      longArray0[8] = (long) 0;
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {870L, 0L, 870L, 870L, 870L, 870L, (-2495L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 870L, 870L, 870L, 870L, (-2495L), 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(9, longArray0.length);
      assertEquals(8, longArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf("4wm$");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Character character0 = new Character('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      Boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, (Object) character0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-83);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-106), (int) (byte) (-83));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-106), (byte) (-44), (byte) (-83)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-4840L);
      longArray0[1] = 577L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2289.864184279;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = (double) 1007;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (-1232));
      assertArrayEquals(new double[] {2289.864184279, 0.0, (-1.0), 0.0, (-1.0), 0.0, (-1.0), 1007.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((int[]) null, 1);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2452;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 744;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 477;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {2452, 0, 0, 744, Integer.MAX_VALUE, 477}, intArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals("{4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 477;
      doubleArray0[2] = (double) 744;
      doubleArray0[3] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, (-2146987118));
      assertArrayEquals(new double[] {0.0, 477.0, 744.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 744);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 477.0, 744.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 477.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)48}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)127;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)127;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)0, 2);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Byte byte0 = new Byte((byte) (-78));
      assertNotNull(byte0);
      assertEquals((byte) (-78), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-78), object0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'H', 'H'}, charArray1);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 67.85;
      doubleArray0[2] = (double) 'H';
      doubleArray0[3] = 3262.0;
      doubleArray0[4] = (double) (byte) (-78);
      doubleArray0[5] = 3.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2);
      assertArrayEquals(new double[] {0.0, 67.85, 72.0, 3262.0, (-78.0), 3.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-126), (byte)byte1);
      
      byteArray0[0] = byte1;
      int int0 = (-2);
      char[] charArray0 = new char[4];
      charArray0[1] = '';
      charArray0[2] = '\u0000';
      charArray0[3] = '}';
      ArrayUtils.swap(charArray0, (-2), (-2), (-2));
      assertArrayEquals(new char[] {'\u0000', '', '\u0000', '}'}, charArray0);
      assertEquals(4, charArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int int1 = 0;
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) (byte) (-126);
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) '\u0000';
      floatArray0[4] = (float) '}';
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, (-126.0F), (-126.0F), 0.0F, 125.0F, 0.0F, (-126.0F), (-126.0F), 0.0F, 125.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-126.0F), (-126.0F), 0.0F, 125.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(10, floatArray1.length);
      assertEquals(5, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-4298L);
      longArray0[2] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 1L, (-1886));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {(-4298L), 0L, 0L}, longArray0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(3, longArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 4518L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-4298L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {4518L, (-4298L), 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Character[] characterArray0 = new Character[1];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-64);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-120);
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte)16;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)117, 2146026739);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-13), (byte) (-128), (byte) (-64), (byte)0, (byte)117, (byte) (-120), (byte)0, (byte) (-96), (byte)16}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1794;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1794}, shortArray0);
      assertArrayEquals(new short[] {(short)1794}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      MutableInt mutableInt0 = new MutableInt((Number) (short)1794);
      assertNotNull(mutableInt0);
      assertEquals("1794", mutableInt0.toString());
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794, mutableInt0.intValue());
      assertEquals((short)1794, mutableInt0.shortValue());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertNotNull(mutableInt1);
      assertEquals("1794", mutableInt0.toString());
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794, mutableInt0.intValue());
      assertEquals((short)1794, mutableInt0.shortValue());
      assertEquals(1794, (int)mutableInt1.toInteger());
      assertEquals(1794, mutableInt1.intValue());
      assertEquals(1794, (int)mutableInt1.getValue());
      assertEquals(1794L, mutableInt1.longValue());
      assertEquals((short)1794, mutableInt1.shortValue());
      assertEquals("1794", mutableInt1.toString());
      assertEquals(1794.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals(1794.0, mutableInt1.doubleValue(), 0.01);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt();
      assertNotNull(mutableInt2);
      assertEquals(0.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt2.shortValue());
      assertEquals(0, (int)mutableInt2.toInteger());
      assertEquals("0", mutableInt2.toString());
      assertEquals(0, (int)mutableInt2.getValue());
      assertEquals((byte)0, mutableInt2.byteValue());
      assertEquals(0, mutableInt2.intValue());
      assertEquals(0L, mutableInt2.longValue());
      assertEquals(0.0, mutableInt2.doubleValue(), 0.01);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(mutableInt0);
      assertNotNull(mutableInt3);
      assertEquals("1794", mutableInt0.toString());
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794, mutableInt0.intValue());
      assertEquals((short)1794, mutableInt0.shortValue());
      assertEquals(1794, (int)mutableInt3.getValue());
      assertEquals((byte)2, mutableInt3.byteValue());
      assertEquals("1794", mutableInt3.toString());
      assertEquals(1794, (int)mutableInt3.toInteger());
      assertEquals(1794L, mutableInt3.longValue());
      assertEquals(1794.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(1794.0, mutableInt3.doubleValue(), 0.01);
      assertEquals((short)1794, mutableInt3.shortValue());
      assertEquals(1794, mutableInt3.intValue());
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(mutableInt1);
      assertNotNull(mutableInt4);
      assertEquals("1794", mutableInt0.toString());
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794, mutableInt0.intValue());
      assertEquals((short)1794, mutableInt0.shortValue());
      assertEquals(1794, (int)mutableInt1.toInteger());
      assertEquals(1794, mutableInt1.intValue());
      assertEquals(1794, (int)mutableInt1.getValue());
      assertEquals(1794L, mutableInt1.longValue());
      assertEquals((short)1794, mutableInt1.shortValue());
      assertEquals("1794", mutableInt1.toString());
      assertEquals(1794.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals(1794.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt4.getValue());
      assertEquals((byte)2, mutableInt4.byteValue());
      assertEquals("1794", mutableInt4.toString());
      assertEquals(1794, (int)mutableInt4.toInteger());
      assertEquals(1794L, mutableInt4.longValue());
      assertEquals(1794.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(1794.0, mutableInt4.doubleValue(), 0.01);
      assertEquals(1794, mutableInt4.intValue());
      assertEquals((short)1794, mutableInt4.shortValue());
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt3));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt4.equals((Object)mutableInt0));
      assertTrue(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      
      mutableInt3.decrement();
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt3);
      assertNotSame(mutableInt0, mutableInt4);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt3, mutableInt4);
      assertNotSame(mutableInt3, mutableInt0);
      assertNotSame(mutableInt3, mutableInt1);
      assertNotSame(mutableInt3, mutableInt2);
      assertEquals("1794", mutableInt0.toString());
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794, mutableInt0.intValue());
      assertEquals((short)1794, mutableInt0.shortValue());
      assertEquals("1793", mutableInt3.toString());
      assertEquals(1793, (int)mutableInt3.getValue());
      assertEquals((short)1793, mutableInt3.shortValue());
      assertEquals((byte)1, mutableInt3.byteValue());
      assertEquals(1793, (int)mutableInt3.toInteger());
      assertEquals(1793L, mutableInt3.longValue());
      assertEquals(1793.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(1793, mutableInt3.intValue());
      assertEquals(1793.0F, mutableInt3.floatValue(), 0.01F);
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt0.equals((Object)mutableInt4));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt4));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      
      mutableInt4.decrement();
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt3);
      assertNotSame(mutableInt0, mutableInt4);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableInt1, mutableInt3);
      assertNotSame(mutableInt1, mutableInt4);
      assertNotSame(mutableInt1, mutableInt2);
      assertNotSame(mutableInt4, mutableInt3);
      assertNotSame(mutableInt4, mutableInt0);
      assertNotSame(mutableInt4, mutableInt1);
      assertNotSame(mutableInt4, mutableInt2);
      assertEquals("1794", mutableInt0.toString());
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794, mutableInt0.intValue());
      assertEquals((short)1794, mutableInt0.shortValue());
      assertEquals(1794, (int)mutableInt1.toInteger());
      assertEquals(1794, mutableInt1.intValue());
      assertEquals(1794, (int)mutableInt1.getValue());
      assertEquals(1794L, mutableInt1.longValue());
      assertEquals((short)1794, mutableInt1.shortValue());
      assertEquals("1794", mutableInt1.toString());
      assertEquals(1794.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals(1794.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("1793", mutableInt4.toString());
      assertEquals(1793, (int)mutableInt4.getValue());
      assertEquals((short)1793, mutableInt4.shortValue());
      assertEquals((byte)1, mutableInt4.byteValue());
      assertEquals(1793, (int)mutableInt4.toInteger());
      assertEquals(1793L, mutableInt4.longValue());
      assertEquals(1793.0, mutableInt4.doubleValue(), 0.01);
      assertEquals(1793, mutableInt4.intValue());
      assertEquals(1793.0F, mutableInt4.floatValue(), 0.01F);
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt0.equals((Object)mutableInt4));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt1.equals((Object)mutableInt4));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertTrue(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt[] mutableIntArray1 = ArrayUtils.addAll(mutableIntArray0, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertEquals(10, mutableIntArray1.length);
      assertEquals(5, mutableIntArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = 'K';
      charArray0[2] = '@';
      charArray0[3] = 'a';
      charArray0[4] = 'R';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'J', (-1311));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'J', 'K', '@', 'a', 'R'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, charArray0.length);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) 'R';
      characterArray0[1] = (Character) 'J';
      characterArray0[2] = (Character) '@';
      characterArray0[3] = (Character) 'R';
      characterArray0[4] = (Character) '@';
      Character character0 = new Character('S');
      assertNotNull(character0);
      assertEquals('S', (char)character0);
      
      characterArray0[5] = character0;
      characterArray0[6] = (Character) 'a';
      characterArray0[7] = (Character) 'a';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertEquals(8, characterArray1.length);
      assertEquals(8, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1201);
      shortArray0[6] = (short)0;
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, (int) (short)0, 1536);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 51);
      assertArrayEquals(new short[] {(short)121, (short)0, (short)0, (short)0, (short) (-1201), (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(6, int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'e');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-503), (-503));
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Float float0 = new Float((-422.5085F));
      assertNotNull(float0);
      assertEquals((-422.5085F), (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-849));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2002.6659F);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 67);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'S';
      doubleArray0[2] = (double) 'S';
      doubleArray0[3] = (double) '\u0000';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameType("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)65);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (int) (byte)46, (byte) (-3));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-4840L);
      longArray0[1] = 577L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = (-2495L);
      longArray0[6] = (-2495L);
      longArray0[7] = 870L;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 2797, 2797, 2797);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = null;
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Float float0 = new Float((-1890.0));
      assertNotNull(float0);
      assertEquals((-1890.0F), (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameType(float0, "");
      assertFalse(boolean0);
      
      byte byte0 = (byte)46;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-52));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (int) (byte)46, (byte)46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 893;
      longArray0[1] = (-5006L);
      longArray0[2] = (long) 893;
      longArray0[3] = (long) 893;
      longArray0[4] = (long) 893;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 893);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 893, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3340.4304546973785);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      Float float0 = new Float(1176.5289F);
      assertNotNull(float0);
      assertEquals(1176.5289F, (float)float0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3340.4304546973785), (-1201), 2491.0);
      assertArrayEquals(new double[] {0.0, (-3340.4304546973785), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-1201));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1201, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1072;
      shortArray0[1] = (short)1072;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1072);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1072, (short)1072}, shortArray0);
      assertArrayEquals(new short[] {(short)1072}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)1072, (short)1072}, shortArray0);
      assertArrayEquals(new short[] {(short)1072}, shortArray1);
      assertArrayEquals(new short[] {(short)1072}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      
      float[] floatArray0 = new float[12];
      floatArray0[0] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[2] = (float) (short)1072;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2119.1746F);
      floatArray0[3] = (-1.0F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)1072, (int) (short)1072);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(12, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      String[] stringArray0 = new String[9];
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'e';
      floatArray0[1] = (float) 'e';
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 'e';
      floatArray0[4] = (float) 'e';
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-2215.17F);
      floatArray0[7] = (float) 'e';
      floatArray0[8] = (float) 'e';
      ArrayUtils.shift(floatArray0, 255);
      assertArrayEquals(new float[] {(-2215.17F), 101.0F, 101.0F, 101.0F, 101.0F, 1.0F, 101.0F, 101.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1679.0543359);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-92));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (int) (short) (-92), (int) (short) (-92));
      assertNull(floatArray0);
      
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean2;
      booleanArray0[3] = boolean2;
      booleanArray0[4] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, (Boolean) boolean0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      ArrayUtils.shift((float[]) null, 2146523062);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = ':';
      charArray0[2] = ' ';
      charArray0[3] = 'c';
      charArray0[4] = 'r';
      charArray0[5] = 'R';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '|', 25);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'^', ':', ' ', 'c', 'r', 'R'}, charArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-800.79474F);
      floatArray0[3] = (-2090.829F);
      floatArray0[4] = (-4044.3271F);
      floatArray0[6] = (-3424.8635F);
      floatArray0[7] = 10.0F;
      floatArray0[8] = 1348.0F;
      ArrayUtils.shift(floatArray0, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {1348.0F, 0.0F, 0.0F, (-800.79474F), (-2090.829F), (-4044.3271F), 0.0F, (-3424.8635F), 10.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 0);
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[0] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1569;
      intArray0[6] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1569);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1569, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(5, int0);
      
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1569, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      
      Short[] shortArray0 = new Short[5];
      short short0 = (short)10;
      Short short1 = new Short((short)10);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)10, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)10, (short)short2);
      
      Short short3 = new Short((short) (-4551));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-4551), (short)short3);
      
      shortArray0[2] = (Short) short0;
      Short short4 = new Short(short0);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short2));
      assertEquals((short)10, (short)short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short) (-4551));
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short3));
      assertEquals((short) (-4551), (short)short5);
      
      shortArray0[4] = short5;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      ArrayUtils.reverse(intArray0, 5, 4152);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1569}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(7, intArray0.length);
      
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 893;
      intArray0[1] = 893;
      intArray0[2] = 893;
      intArray0[3] = 893;
      intArray0[4] = 893;
      intArray0[5] = 893;
      ArrayUtils.swap(intArray0, 893, 42);
      assertArrayEquals(new int[] {893, 893, 893, 893, 893, 893}, intArray0);
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 2210, 2321);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2452;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 744;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {2452, 0, 0, 744, Integer.MAX_VALUE, 0}, intArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1668;
      shortArray0[2] = (short)127;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1668, (short)127, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1668, (short)127, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)127, 0);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)1668, (short)127, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'H';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'b', 'H'}, charArray0);
      assertArrayEquals(new char[] {'b', 'H', 'b', 'H'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      
      ArrayUtils.swap(intArray0, (-3928), 839, 0);
      assertArrayEquals(new int[] {2452, 0, 0, 744, Integer.MAX_VALUE, 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)53;
      ArrayUtils.swap(byteArray0, 1, (int) (byte)52, (int) (byte) (-13));
      assertArrayEquals(new byte[] {(byte)52, (byte)23, (byte) (-13), (byte) (-30), (byte)53}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 979, (-2146236245), 2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1679.0543359);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-92));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Double double0 = new Double((-1679.0543359));
      assertNotNull(double0);
      assertEquals((-1679.0543359), (double)double0, 0.01);
      
      Double double1 = new Double((-1679.0543359));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1679.0543359), (double)double1, 0.01);
      
      Double double2 = new Double(3587.21);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(3587.21, (double)double2, 0.01);
      
      Double double3 = new Double((-1679.0543359));
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((-1679.0543359), (double)double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1794;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1794}, shortArray0);
      assertArrayEquals(new short[] {(short)1794}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      MutableInt mutableInt0 = new MutableInt((Number) (short)1794);
      assertNotNull(mutableInt0);
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals("1794", mutableInt0.toString());
      assertEquals(1794, mutableInt0.intValue());
      assertEquals((short)1794, mutableInt0.shortValue());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertNotNull(mutableInt1);
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals("1794", mutableInt0.toString());
      assertEquals(1794, mutableInt0.intValue());
      assertEquals((short)1794, mutableInt0.shortValue());
      assertEquals(1794, (int)mutableInt1.getValue());
      assertEquals(1794, (int)mutableInt1.toInteger());
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals("1794", mutableInt1.toString());
      assertEquals(1794L, mutableInt1.longValue());
      assertEquals(1794.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(1794.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(1794, mutableInt1.intValue());
      assertEquals((short)1794, mutableInt1.shortValue());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt();
      assertNotNull(mutableInt2);
      assertEquals(0L, mutableInt2.longValue());
      assertEquals(0, (int)mutableInt2.toInteger());
      assertEquals(0.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt2.getValue());
      assertEquals("0", mutableInt2.toString());
      assertEquals((byte)0, mutableInt2.byteValue());
      assertEquals(0.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt2.shortValue());
      assertEquals(0, mutableInt2.intValue());
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(mutableInt0);
      assertNotNull(mutableInt3);
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals("1794", mutableInt0.toString());
      assertEquals(1794, mutableInt0.intValue());
      assertEquals((short)1794, mutableInt0.shortValue());
      assertEquals("1794", mutableInt3.toString());
      assertEquals(1794, (int)mutableInt3.getValue());
      assertEquals((short)1794, mutableInt3.shortValue());
      assertEquals(1794L, mutableInt3.longValue());
      assertEquals(1794.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(1794, mutableInt3.intValue());
      assertEquals((byte)2, mutableInt3.byteValue());
      assertEquals(1794, (int)mutableInt3.toInteger());
      assertEquals(1794.0, mutableInt3.doubleValue(), 0.01);
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(mutableInt1);
      assertNotNull(mutableInt4);
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals("1794", mutableInt0.toString());
      assertEquals(1794, mutableInt0.intValue());
      assertEquals((short)1794, mutableInt0.shortValue());
      assertEquals(1794, (int)mutableInt1.getValue());
      assertEquals(1794, (int)mutableInt1.toInteger());
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals("1794", mutableInt1.toString());
      assertEquals(1794L, mutableInt1.longValue());
      assertEquals(1794.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(1794.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(1794, mutableInt1.intValue());
      assertEquals((short)1794, mutableInt1.shortValue());
      assertEquals((byte)2, mutableInt4.byteValue());
      assertEquals(1794, (int)mutableInt4.getValue());
      assertEquals(1794L, mutableInt4.longValue());
      assertEquals(1794, (int)mutableInt4.toInteger());
      assertEquals("1794", mutableInt4.toString());
      assertEquals(1794.0, mutableInt4.doubleValue(), 0.01);
      assertEquals(1794.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(1794, mutableInt4.intValue());
      assertEquals((short)1794, mutableInt4.shortValue());
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt0.equals((Object)mutableInt3));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertTrue(mutableInt4.equals((Object)mutableInt0));
      assertTrue(mutableInt4.equals((Object)mutableInt3));
      
      int int0 = mutableInt3.addAndGet(Integer.MAX_VALUE);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt3);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt0, mutableInt4);
      assertNotSame(mutableInt3, mutableInt2);
      assertNotSame(mutableInt3, mutableInt4);
      assertNotSame(mutableInt3, mutableInt0);
      assertNotSame(mutableInt3, mutableInt1);
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals("1794", mutableInt0.toString());
      assertEquals(1794, mutableInt0.intValue());
      assertEquals((short)1794, mutableInt0.shortValue());
      assertEquals((-2.147481855E9), mutableInt3.doubleValue(), 0.01);
      assertEquals((-2147481855), (int)mutableInt3.getValue());
      assertEquals((short)1793, mutableInt3.shortValue());
      assertEquals((-2147481855L), mutableInt3.longValue());
      assertEquals("-2147481855", mutableInt3.toString());
      assertEquals((-2147481855), mutableInt3.intValue());
      assertEquals((-2147481855), (int)mutableInt3.toInteger());
      assertEquals((-2.14748186E9F), mutableInt3.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt3.byteValue());
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt4));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt4));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertEquals((-2147481855), int0);
      
      mutableInt3.decrement();
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt3);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt0, mutableInt4);
      assertNotSame(mutableInt3, mutableInt2);
      assertNotSame(mutableInt3, mutableInt4);
      assertNotSame(mutableInt3, mutableInt0);
      assertNotSame(mutableInt3, mutableInt1);
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals("1794", mutableInt0.toString());
      assertEquals(1794, mutableInt0.intValue());
      assertEquals((short)1794, mutableInt0.shortValue());
      assertEquals((-2.147481856E9), mutableInt3.doubleValue(), 0.01);
      assertEquals((short)1792, mutableInt3.shortValue());
      assertEquals((-2147481856), (int)mutableInt3.getValue());
      assertEquals((-2147481856L), mutableInt3.longValue());
      assertEquals((-2147481856), mutableInt3.intValue());
      assertEquals("-2147481856", mutableInt3.toString());
      assertEquals((byte)0, mutableInt3.byteValue());
      assertEquals((-2147481856), (int)mutableInt3.toInteger());
      assertEquals((-2.14748186E9F), mutableInt3.floatValue(), 0.01F);
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt4));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt4));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt[] mutableIntArray1 = ArrayUtils.addAll(mutableIntArray0, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertEquals(10, mutableIntArray1.length);
      assertEquals(5, mutableIntArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(int1 == int0);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '=';
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-3078);
      shortArray0[1] = (short) (-471);
      shortArray0[2] = (short) (-3078);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray1, (int) (short) (-3078), (int) (short) (-3078), (int) (short) (-471));
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray1.length);
      
      float[] floatArray0 = new float[3];
      Short[] shortArray2 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(19, shortArray0.length);
      assertEquals(19, shortArray2.length);
      
      ArrayUtils.shift((byte[]) null, 232);
      ArrayUtils.swap(floatArray0, 1, (-1), 95);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.swap(objectArray0, 1072, 1072, 1072);
      assertEquals(1, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'm', 1072);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, 0.7, 1072);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3759.8F);
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'm');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 920.5897F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 920.5897F;
      floatArray0[4] = 0.0F;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {920.5897F, 0.0F, 920.5897F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      Double double0 = new Double((-2134.59908));
      assertNotNull(double0);
      assertEquals((-2134.59908), (double)double0, 0.01);
      
      Double double1 = new Double(1.5);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.5, (double)double1, 0.01);
      
      Double double2 = new Double((double) double1);
      assertNotNull(double2);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(1.5, (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)2559;
      floatArray0[1] = (float) (short)2559;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {2559.0F, 2559.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)2559;
      int[] intArray1 = ArrayUtils.add(intArray0, (-4725));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2559}, intArray0);
      assertArrayEquals(new int[] {2559, (-4725)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 920.5897F;
      floatArray0[1] = 0.0F;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {0.0F, 920.5897F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1679.0543359));
      assertNotNull(double0);
      assertEquals((-1679.0543359), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-3186.8512323));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-3186.8512323), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1188.958272507735);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(1188.958272507735, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0F);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Class<Double[]> class0 = Double[].class;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0, class0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 217.187450496;
      doubleArray0[1] = (-3340.4304546973785);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {217.187450496, (-3340.4304546973785), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '@', 1536);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, charArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1536;
      floatArray0[1] = (float) '@';
      floatArray0[2] = (float) 'R';
      floatArray0[3] = (float) 'R';
      floatArray0[4] = (float) '@';
      floatArray0[5] = (float) '@';
      floatArray0[6] = (float) 1536;
      floatArray0[7] = (float) 1536;
      floatArray0[8] = (float) 'R';
      ArrayUtils.shift(floatArray0, 1536);
      assertArrayEquals(new float[] {82.0F, 64.0F, 64.0F, 1536.0F, 1536.0F, 82.0F, 1536.0F, 64.0F, 82.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '@');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'R'}, charArray1);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-242L);
      longArray0[2] = 0L;
      longArray0[3] = (-1832L);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean0);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) (-1832L);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray2);
      assertArrayEquals(new double[] {(-1832.0)}, doubleArray2, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray2.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1794;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1794}, shortArray0);
      assertArrayEquals(new short[] {(short)1794}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      MutableInt mutableInt0 = new MutableInt((Number) (short)1794);
      assertNotNull(mutableInt0);
      assertEquals((short)1794, mutableInt0.shortValue());
      assertEquals("1794", mutableInt0.toString());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794, mutableInt0.intValue());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertNotNull(mutableInt1);
      assertEquals((short)1794, mutableInt0.shortValue());
      assertEquals("1794", mutableInt0.toString());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794, mutableInt0.intValue());
      assertEquals("1794", mutableInt1.toString());
      assertEquals((short)1794, mutableInt1.shortValue());
      assertEquals(1794.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(1794, mutableInt1.intValue());
      assertEquals(1794L, mutableInt1.longValue());
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals(1794.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt1.getValue());
      assertEquals(1794, (int)mutableInt1.toInteger());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt();
      assertNotNull(mutableInt2);
      assertEquals(0, (int)mutableInt2.getValue());
      assertEquals(0, (int)mutableInt2.toInteger());
      assertEquals((byte)0, mutableInt2.byteValue());
      assertEquals((short)0, mutableInt2.shortValue());
      assertEquals(0, mutableInt2.intValue());
      assertEquals(0L, mutableInt2.longValue());
      assertEquals("0", mutableInt2.toString());
      assertEquals(0.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt2.floatValue(), 0.01F);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(mutableInt0);
      assertNotNull(mutableInt3);
      assertEquals((short)1794, mutableInt0.shortValue());
      assertEquals("1794", mutableInt0.toString());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794, mutableInt0.intValue());
      assertEquals(1794, mutableInt3.intValue());
      assertEquals(1794L, mutableInt3.longValue());
      assertEquals(1794.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals("1794", mutableInt3.toString());
      assertEquals((short)1794, mutableInt3.shortValue());
      assertEquals((byte)2, mutableInt3.byteValue());
      assertEquals(1794.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt3.getValue());
      assertEquals(1794, (int)mutableInt3.toInteger());
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(mutableInt1);
      assertNotNull(mutableInt4);
      assertEquals((short)1794, mutableInt0.shortValue());
      assertEquals("1794", mutableInt0.toString());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794, mutableInt0.intValue());
      assertEquals("1794", mutableInt1.toString());
      assertEquals((short)1794, mutableInt1.shortValue());
      assertEquals(1794.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(1794, mutableInt1.intValue());
      assertEquals(1794L, mutableInt1.longValue());
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals(1794.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt1.getValue());
      assertEquals(1794, (int)mutableInt1.toInteger());
      assertEquals(1794L, mutableInt4.longValue());
      assertEquals(1794.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(1794, mutableInt4.intValue());
      assertEquals(1794.0, mutableInt4.doubleValue(), 0.01);
      assertEquals((short)1794, mutableInt4.shortValue());
      assertEquals("1794", mutableInt4.toString());
      assertEquals(1794, (int)mutableInt4.getValue());
      assertEquals((byte)2, mutableInt4.byteValue());
      assertEquals(1794, (int)mutableInt4.toInteger());
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt3));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertTrue(mutableInt4.equals((Object)mutableInt0));
      assertTrue(mutableInt4.equals((Object)mutableInt3));
      
      mutableInt3.decrement();
      assertNotSame(mutableInt0, mutableInt3);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt0, mutableInt4);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt3, mutableInt0);
      assertNotSame(mutableInt3, mutableInt4);
      assertNotSame(mutableInt3, mutableInt2);
      assertNotSame(mutableInt3, mutableInt1);
      assertEquals((short)1794, mutableInt0.shortValue());
      assertEquals("1794", mutableInt0.toString());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(1794.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1794, (int)mutableInt0.toInteger());
      assertEquals(1794, (int)mutableInt0.getValue());
      assertEquals(1794L, mutableInt0.longValue());
      assertEquals(1794.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1794, mutableInt0.intValue());
      assertEquals(1793, mutableInt3.intValue());
      assertEquals(1793L, mutableInt3.longValue());
      assertEquals((short)1793, mutableInt3.shortValue());
      assertEquals(1793.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt3.byteValue());
      assertEquals(1793, (int)mutableInt3.toInteger());
      assertEquals(1793, (int)mutableInt3.getValue());
      assertEquals(1793.0, mutableInt3.doubleValue(), 0.01);
      assertEquals("1793", mutableInt3.toString());
      assertTrue(mutableInt0.equals((Object)mutableInt4));
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt4));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt[] mutableIntArray1 = ArrayUtils.addAll(mutableIntArray0, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertEquals(5, mutableIntArray0.length);
      assertEquals(10, mutableIntArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = 'K';
      charArray0[2] = '@';
      charArray0[3] = 'a';
      charArray0[4] = 'R';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'J', (-1311));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'J', 'K', '@', 'a', 'R'}, charArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(72.0);
      assertNotNull(double0);
      assertEquals(72.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(72.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(72.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-250L));
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((-250.0), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)2, (int) (byte)2);
      assertEquals((-1), int0);
      
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) doubleArray0[0];
      doubleArray2[1] = (double) doubleArray0[3];
      doubleArray2[2] = (double) doubleArray0[0];
      doubleArray2[3] = (double) doubleArray0[3];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray2);
      assertArrayEquals(new double[] {72.0, (-250.0), 72.0, (-250.0)}, doubleArray2, 0.01);
      assertEquals(4, doubleArray2.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Short short0 = new Short((short)51);
      assertNotNull(short0);
      assertEquals((short)51, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)51, object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)54;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte)0, (byte)10, (byte)0, (byte) (-1), (byte)0, (byte)54}, byteArray0);
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 5}", bitSet0.toString());
      assertEquals(8, byteArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (int) (byte)10, (int) (byte)0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(1, intArray0.length);
      
      bitSet0.or(bitSet1);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte)0, (byte)10, (byte)0, (byte) (-1), (byte)0, (byte)54}, byteArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 5}", bitSet0.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(8, byteArray0.length);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      bitSet0.flip(59);
      assertNotSame(bitSet0, bitSet1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte)0, (byte)10, (byte)0, (byte) (-1), (byte)0, (byte)54}, byteArray0);
      assertEquals("{0, 5, 59}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(60, bitSet0.length());
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1679.0543359);
      doubleArray0[1] = 1.0;
      long[] longArray0 = new long[9];
      longArray0[0] = 870L;
      longArray0[1] = (long) 0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      ArrayUtils.shift(byteArray0, (int) (byte)96, (int) (byte)74, 5);
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1307), (-1307));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-106);
      ArrayUtils.shift(byteArray0, (int) (byte) (-106));
      assertArrayEquals(new byte[] {(byte)1, (byte) (-106), (byte)38}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)96;
      byteArray0[8] = (byte)34;
      ArrayUtils.shift(byteArray0, 0, (int) (byte) (-1), (int) (byte)15);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-1), (byte) (-103), (byte)15, (byte)121, (byte)74, (byte)55, (byte)96, (byte)34}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = (-3096L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      byte byte0 = (byte) (-113);
      Byte byte1 = new Byte((byte) (-113));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-113), (byte)byte1);
      
      float float0 = (-4988.0F);
      ArrayUtils.reverse((float[]) null, 0, Integer.MAX_VALUE);
      double double0 = 0.0;
      Double double1 = Double.valueOf(0.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      try { 
        Double.valueOf("p~7s(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      float[] floatArray0 = new float[2];
      float float0 = (-4988.0F);
      floatArray0[0] = (-4988.0F);
      float float1 = (-1.0F);
      floatArray0[1] = (-1.0F);
      ArrayUtils.reverse(floatArray0, 0, 15);
      assertArrayEquals(new float[] {(-1.0F), (-4988.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = Double.valueOf((double) (-1.0F));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      try { 
        Double.valueOf("p~7s(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3078);
      shortArray0[2] = (short) (-471);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3078), (short)0, (short) (-471)}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-396.0F);
      floatArray0[1] = (float) '=';
      floatArray0[2] = (float) '=';
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-396.0F), 61.0F, 61.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(floatArray0, (int) (short) (-471), (int) (short) (-471));
      assertArrayEquals(new float[] {(-396.0F), 61.0F, 61.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      long[] longArray0 = new long[3];
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      float[] floatArray0 = new float[2];
      float float0 = (-4988.0F);
      floatArray0[0] = (-4988.0F);
      float float1 = (-1.0F);
      floatArray0[1] = (-1.0F);
      ArrayUtils.reverse(floatArray0, 0, 15);
      assertArrayEquals(new float[] {(-1.0F), (-4988.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = Double.valueOf((double) (-1.0F));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      try { 
        Double.valueOf("p~7s(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      Long long0 = new Long((byte)16);
      assertNotNull(long0);
      assertEquals(16L, (long)long0);
      
      Long[] longArray0 = new Long[7];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      longArray0[6] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[3]);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {16L, 16L, 16L, 16L, 16L, 16L, 16L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)18);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte)16, 3260);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray1, 670, (long) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 670, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Long[] longArray0 = new Long[7];
      Long long0 = new Long((-3963L));
      assertNotNull(long0);
      assertEquals((-3963L), (long)long0);
      
      longArray0[0] = long0;
      long long1 = (-62L);
      Long long2 = new Long((-62L));
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-62L), (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((-1L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertEquals((-1L), (long)long3);
      
      longArray0[2] = long3;
      Long long4 = new Long((-3963L));
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertEquals((-3963L), (long)long4);
      
      longArray0[3] = long4;
      Long long5 = new Long(long1);
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long2));
      assertEquals((-62L), (long)long5);
      
      longArray0[4] = long5;
      Long long6 = new Long((-568L));
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertEquals((-568L), (long)long6);
      
      longArray0[5] = long6;
      Long long7 = new Long(904L);
      assertNotNull(long7);
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long0));
      assertEquals(904L, (long)long7);
      
      longArray0[6] = long7;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      
      long[] longArray2 = new long[5];
      longArray2[0] = (long) longArray0[3];
      longArray2[1] = (long) longArray0[0];
      longArray2[2] = (long) longArray0[3];
      longArray2[3] = (-3380L);
      longArray2[4] = long1;
      int int0 = ArrayUtils.lastIndexOf(longArray2, 271L);
      assertArrayEquals(new long[] {(-3963L), (-3963L), (-3963L), (-3380L), (-62L)}, longArray2);
      assertEquals(5, longArray2.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 0.0);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      Character[] characterArray0 = new Character[8];
      Character character0 = Character.valueOf('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('*');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('*', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character1);
      assertNotNull(character2);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertEquals('*', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('V');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertEquals('V', (char)character3);
      
      characterArray0[3] = character3;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'H';
      charArray0[2] = 'W';
      charArray0[3] = '7';
      ArrayUtils.shift(charArray0, 15, 15, 618);
      assertArrayEquals(new char[] {'l', 'H', 'W', '7'}, charArray0);
      assertEquals(4, charArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 618;
      longArray0[1] = (long) 'l';
      longArray0[2] = (long) 15;
      longArray0[3] = (long) 'H';
      longArray0[4] = (long) 'H';
      longArray0[5] = (long) 'H';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {618L, 108L, 15L, 72L, 72L, 72L}, longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 15L;
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (double) 108L;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {15.0, 15.0, 108.0, 15.0, 15.0, 108.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {15.0, 15.0, 108.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) 72L);
      assertNotNull(float0);
      assertEquals(72.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 618L);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(618.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1.0);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {72.0F, 618.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      ArrayUtils.reverse(doubleArray0, 1536, 5862);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {15.0, 15.0, 108.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      long[] longArray0 = new long[1];
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '=');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ';', 0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'e';
      longArray0[3] = (long) ';';
      longArray0[4] = (long) (-1);
      Integer integer0 = Integer.getInteger("{#yAV%(;", 0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-1648));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1648), (int)integer1);
      
      Integer integer2 = new Integer((-919));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals((-919), (int)integer2);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)21;
      byteArray0[0] = (byte)21;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)21;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '21', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-79);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-2707), (byte) (-79));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2707, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (int) (short) (-26528), 90);
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-26528), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -26528, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)7;
      byteArray0[0] = (byte)7;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      byte byte1 = (byte)16;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)16, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)78);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)78}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1737.9319F;
      floatArray0[1] = 3150.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2274.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-2079.0671F);
      int int0 = ArrayUtils.indexOf(floatArray0, 1737.9319F, 0);
      assertArrayEquals(new float[] {1737.9319F, 3150.0F, 0.0F, 2274.0F, 1.0F, (-2079.0671F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, int0);
      
      Float float0 = new Float((-3392.35));
      assertNotNull(float0);
      assertEquals((-3392.35F), (float)float0, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) float0);
      assertNotNull(string0);
      assertEquals("-3392.35", string0);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      long[] longArray0 = new long[1];
      Object[] objectArray0 = new Object[2];
      longArray0[0] = 0L;
      objectArray0[1] = (Object) 0L;
      int int0 = ArrayUtils.getLength(objectArray0[0]);
      assertEquals(2, objectArray0.length);
      assertEquals(0, int0);
      
      String string0 = ArrayUtils.toString(objectArray0[1], "java.lang.String");
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)54;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte)0, (byte)10, (byte)0, (byte) (-1), (byte) (-11), (byte)54}, byteArray0);
      assertEquals("{0, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      bitSet0.flip(59);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte)0, (byte)10, (byte)0, (byte) (-1), (byte) (-11), (byte)54}, byteArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(60, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{0, 5, 59}", bitSet0.toString());
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Short short0 = new Short((short)51);
      assertNotNull(short0);
      assertEquals((short)51, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)51, object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)54;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte)0, (byte)10, (byte)0, (byte) (-1), (byte)0, (byte)54}, byteArray0);
      assertEquals("{0, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(8, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      bitSet0.flip(59);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte)0, (byte)10, (byte)0, (byte) (-1), (byte)0, (byte)54}, byteArray0);
      assertEquals(60, bitSet0.length());
      assertEquals("{0, 5, 59}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-2427), 64, 64);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 64;
      longArray0[1] = (long) (-2427);
      longArray0[2] = (long) (-2427);
      Long[] longArray1 = new Long[6];
      longArray1[0] = (Long) 64L;
      longArray1[1] = (Long) 64L;
      longArray1[2] = (Long) (-2427L);
      longArray1[3] = (Long) 64L;
      longArray1[4] = (Long) (-2427L);
      longArray1[5] = (Long) (-2427L);
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 3L);
      assertArrayEquals(new long[] {64L, (-2427L), (-2427L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = new long[8];
      longArray2[0] = (-1206L);
      longArray2[1] = (-4298L);
      longArray2[2] = (-1L);
      longArray2[3] = 0L;
      longArray2[4] = (-1473L);
      longArray2[5] = (-1L);
      longArray2[6] = 1L;
      longArray2[7] = 271L;
      int int0 = ArrayUtils.lastIndexOf(longArray2, (-4298L));
      assertArrayEquals(new long[] {(-1206L), (-4298L), (-1L), 0L, (-1473L), (-1L), 1L, 271L}, longArray2);
      assertEquals(8, longArray2.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(3, longArray0.length);
      assertEquals((-1L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[1]);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals(3, longArray0.length);
      assertEquals((-1L), (long)long2);
      
      longArray0[2] = long2;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '{';
      doubleArray0[1] = (-3340.4304546973785);
      doubleArray0[2] = (-3340.4304546973785);
      doubleArray0[3] = (-3340.4304546973785);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (long)longArray0[1];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {123.0, (-3340.4304546973785), (-3340.4304546973785), (-3340.4304546973785), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertFalse(int1 == int0);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte) (-75));
      assertNotNull(byte0);
      assertEquals((byte) (-75), (byte)byte0);
      
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      assertNotNull(mutableInt0);
      assertEquals((-75), mutableInt0.intValue());
      assertEquals((-75L), mutableInt0.longValue());
      assertEquals((-75.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-75), (int)mutableInt0.toInteger());
      assertEquals((-75), (int)mutableInt0.getValue());
      assertEquals((-75.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-75), mutableInt0.shortValue());
      assertEquals("-75", mutableInt0.toString());
      assertEquals((byte) (-75), mutableInt0.byteValue());
      
      int int0 = mutableInt0.addAndGet((Number) byte0);
      assertEquals((-150.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-150), mutableInt0.intValue());
      assertEquals((-150L), mutableInt0.longValue());
      assertEquals((short) (-150), mutableInt0.shortValue());
      assertEquals((-150.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-150", mutableInt0.toString());
      assertEquals((-150), (int)mutableInt0.getValue());
      assertEquals((byte)106, mutableInt0.byteValue());
      assertEquals((-150), (int)mutableInt0.toInteger());
      assertEquals((-150), int0);
      
      int int1 = mutableInt0.addAndGet((Number) byte0);
      assertEquals("-225", mutableInt0.toString());
      assertEquals((byte)31, mutableInt0.byteValue());
      assertEquals((-225), (int)mutableInt0.toInteger());
      assertEquals((short) (-225), mutableInt0.shortValue());
      assertEquals((-225), (int)mutableInt0.getValue());
      assertEquals((-225.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-225.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-225L), mutableInt0.longValue());
      assertEquals((-225), mutableInt0.intValue());
      assertFalse(int1 == int0);
      assertEquals((-225), int1);
      
      int int2 = mutableInt0.incrementAndGet();
      assertEquals((-224), (int)mutableInt0.getValue());
      assertEquals((byte)32, mutableInt0.byteValue());
      assertEquals((-224), (int)mutableInt0.toInteger());
      assertEquals("-224", mutableInt0.toString());
      assertEquals((short) (-224), mutableInt0.shortValue());
      assertEquals((-224.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-224.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-224), mutableInt0.intValue());
      assertEquals((-224L), mutableInt0.longValue());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-224), int2);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) mutableInt0);
      assertEquals((-224), (int)mutableInt0.getValue());
      assertEquals((byte)32, mutableInt0.byteValue());
      assertEquals((-224), (int)mutableInt0.toInteger());
      assertEquals("-224", mutableInt0.toString());
      assertEquals((short) (-224), mutableInt0.shortValue());
      assertEquals((-224.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-224.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-224), mutableInt0.intValue());
      assertEquals((-224L), mutableInt0.longValue());
      assertEquals(0, objectArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      mutableInt0.add((-225));
      assertEquals((byte)63, mutableInt0.byteValue());
      assertEquals((-449), (int)mutableInt0.getValue());
      assertEquals((-449), (int)mutableInt0.toInteger());
      assertEquals((short) (-449), mutableInt0.shortValue());
      assertEquals((-449.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-449.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-449L), mutableInt0.longValue());
      assertEquals((-449), mutableInt0.intValue());
      assertEquals("-449", mutableInt0.toString());
      
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-225), (-150));
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-150);
      doubleArray0[1] = (double) 2;
      int int3 = mutableInt0.getAndAdd((-224));
      assertEquals((byte)95, mutableInt0.byteValue());
      assertEquals("-673", mutableInt0.toString());
      assertEquals((-673.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-673), (int)mutableInt0.getValue());
      assertEquals((-673), (int)mutableInt0.toInteger());
      assertEquals((short) (-673), mutableInt0.shortValue());
      assertEquals((-673.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-673L), mutableInt0.longValue());
      assertEquals((-673), mutableInt0.intValue());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-449), int3);
      
      doubleArray0[2] = (double) (-150);
      ArrayUtils.reverse(doubleArray0, (-225), 102);
      assertArrayEquals(new double[] {(-150.0), 2.0, (-150.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 102;
      longArray0[1] = (long) (-150);
      longArray0[2] = (long) 102;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {102L, (-150L), 102L}, longArray0);
      assertArrayEquals(new long[] {102L, (-150L), 102L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      Float[] floatArray1 = new Float[5];
      Float float0 = new Float((-584.56F));
      assertNotNull(float0);
      assertEquals((-584.56F), (float)float0, 0.01F);
      
      floatArray1[0] = float0;
      Float float1 = new Float((-1.0));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray1[1] = float1;
      Float float2 = new Float((float) 102L);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(102.0F, (float)float2, 0.01F);
      
      floatArray1[2] = float2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2861), 50, (-2861));
      short[] shortArray0 = new short[5];
      shortArray0[4] = (short)13;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)13}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2861), 50, (-2861));
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)127;
      shortArray0[2] = (short) (-699);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)13;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)64);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short) (-699), (short)0, (short)13}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = (Double) 0.0;
      doubleArray0[1] = (Double) 0.0;
      doubleArray0[2] = (Double) (double)1007;
      doubleArray0[3] = (Double) (double)1007;
      doubleArray0[5] = (Double) (double)1007;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1007;
      longArray0[2] = (long) 1007;
      longArray0[4] = (long) 1007;
      longArray0[5] = (long) 1007;
      longArray0[6] = (long) 1007;
      longArray0[7] = (long) 1007;
      longArray0[8] = (long) 1007;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertArrayEquals(new long[] {1007L, 0L, 1007L, 0L, 1007L, 1007L, 1007L, 1007L, 1007L}, longArray0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (-379L));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 160;
      doubleArray0[1] = (double) (-2465L);
      doubleArray0[2] = (double) (-379L);
      doubleArray0[3] = (double) (-364);
      ArrayUtils.shift(doubleArray0, 1232, (-542), 1031);
      assertArrayEquals(new double[] {160.0, (-2465.0), (-379.0), (-364.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[9];
      intArray0[0] = (-2579);
      intArray0[1] = (-237);
      intArray0[2] = 74;
      intArray0[3] = 57;
      intArray0[4] = (-1935);
      intArray0[5] = 0;
      intArray0[6] = 1404;
      intArray0[7] = 3251;
      intArray0[8] = 57;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3251, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '1';
      intArray0[1] = (int) '1';
      intArray0[2] = (int) '*';
      intArray0[3] = (int) '*';
      intArray0[4] = (int) '*';
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {42, 42, 42, 49, 49}, intArray0);
      assertEquals(5, intArray0.length);
      
      float[] floatArray0 = new float[0];
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) '1';
      intArray1[1] = (int) '*';
      intArray1[2] = (int) '*';
      intArray1[3] = (int) '*';
      intArray1[4] = (int) '*';
      intArray1[5] = (int) '*';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2861), 50, (-2861));
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)127;
      shortArray0[2] = (short) (-699);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)13;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)64);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)127, (short) (-699), (short)0, (short)13}, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)43;
      byteArray0[3] = (byte)6;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)43, (byte)0, (byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)43, (byte)0, (byte)6}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)6;
      longArray0[1] = (long) (byte)43;
      longArray0[2] = (long) (byte)6;
      longArray0[3] = (long) (byte)6;
      longArray0[6] = (long) (byte)21;
      longArray0[5] = (long) 7;
      longArray0[6] = (long) (byte)54;
      longArray0[7] = (long) (byte)54;
      byteArray0[3] = (byte)6;
      ArrayUtils.swap(longArray0, (int) (byte)6, 2945, 2077);
      assertArrayEquals(new long[] {6L, 43L, 6L, 6L, 0L, 7L, 54L, 54L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)7;
      longArray0[1] = (long) (byte)7;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)7, (int) (byte)7);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {7L, 7L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte)7);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {7L, 7L}, longArray0);
      assertArrayEquals(new long[] {7L, 7L, 7L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.swap(longArray1, 12, 1244, 4200);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {7L, 7L}, longArray0);
      assertArrayEquals(new long[] {7L, 7L, 7L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2092.687616127509);
      doubleArray0[1] = (-5314.68152);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 5019.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)48}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)48;
      doubleArray0[5] = (double) (byte)48;
      doubleArray0[6] = (double) (byte)48;
      doubleArray0[7] = (double) (byte)48;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 48.0, 48.0, 48.0, 48.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 48.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 48.0, 48.0, 48.0, 48.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 48.0, 48.0, 48.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte) (-124));
      assertNotNull(byte0);
      assertEquals((byte) (-124), (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-124));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-124), (byte)byte1);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      Byte byte3 = new Byte((byte) (-1));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-103));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte) (-103), (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)0);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte)0, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-124));
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertEquals((byte) (-124), (byte)byte6);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) byte2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '6';
      floatArray0[1] = (-0.78696525F);
      floatArray0[2] = (float) '6';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 54.0F;
      doubleArray0[1] = (double) 60.101227F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) '6');
      assertArrayEquals(new double[] {54.0, 60.101226806640625}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      ArrayUtils.shift(doubleArray0, (int) '6');
      assertArrayEquals(new double[] {54.0, 60.101226806640625}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)512;
      shortArray0[2] = (short)52;
      shortArray0[3] = (short)414;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)621;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)512, (short)52, (short)414, (short)1, (short)621}, shortArray1);
      assertArrayEquals(new short[] {(short)512, (short)0, (short)52, (short)414, (short)1, (short)621}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'E';
      floatArray0[2] = (float) 'E';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 25.65F);
      assertArrayEquals(new float[] {69.0F, 0.0F, 69.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 25.65F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1));
      assertArrayEquals(new double[] {0.0, 25.649999618530273}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {25.649999618530273, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = new Boolean(" in an array of ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean1);
      assertNotNull(boolean3);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((String) null);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean[] booleanArray1 = ArrayUtils.toArray(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = 'r';
      charArray0[3] = '!';
      charArray0[4] = '(';
      charArray0[5] = 'J';
      charArray0[6] = 'C';
      charArray0[7] = 'Z';
      int int0 = ArrayUtils.indexOf(charArray0, '!', (-2116292890));
      assertArrayEquals(new char[] {'(', '(', 'r', '!', '(', 'J', 'C', 'Z'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = new Boolean(" in an array of ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean1);
      assertNotNull(boolean3);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((String) null);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean[] booleanArray1 = ArrayUtils.toArray(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      boolean boolean6 = ArrayUtils.contains(doubleArray0, (double) 0.0F);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean6);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray2.length);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Short short0 = new Short((short)51);
      assertNotNull(short0);
      assertEquals((short)51, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)51, object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)0;
      byte byte1 = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byte byte2 = (byte)54;
      byteArray0[7] = (byte)54;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte)0, (byte)10, (byte)0, (byte) (-1), (byte)0, (byte)54}, byteArray0);
      assertEquals(2, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 5}", bitSet0.toString());
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1168.88));
      assertNotNull(double0);
      assertEquals((-1168.88), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = Double.valueOf((-164.422618501465));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-164.422618501465), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-35.48531102953));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-35.48531102953), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte) (-37), (byte) (-37), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-35.48531102953);
      doubleArray2[1] = (double) Integer.MAX_VALUE;
      doubleArray2[2] = (double) (byte)2;
      doubleArray2[3] = (double) '-';
      doubleArray2[4] = (double) doubleArray0[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray2);
      assertArrayEquals(new double[] {(-35.48531102953), 2.147483647E9, 2.0, 45.0, (-1168.88)}, doubleArray2, 0.01);
      assertEquals(5, doubleArray2.length);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2147483648L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Double double0 = new Double(798.1536);
      assertNotNull(double0);
      assertEquals(798.1536, (double)double0, 0.01);
      
      Double double1 = new Double(798.1536);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(798.1536, (double)double1, 0.01);
      
      Double double2 = new Double(798.1536);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(798.1536, (double)double2, 0.01);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-2147483648L));
      assertNotNull(long0);
      assertEquals((-2147483648L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-564L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-564L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-328L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertEquals((-328L), (long)long3);
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2147483648L), (-564L), 0L, (-328L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(798.1536);
      assertNotNull(double0);
      assertEquals(798.1536, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(798.1536, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(798.1536);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(798.1536, (double)double2, 0.01);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2147483648L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'E'}, charArray0);
      assertEquals(7, charArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-2159L);
      longArray0[2] = (long) '8';
      longArray0[3] = (long) '\u0000';
      longArray0[4] = (long) 'E';
      longArray0[5] = (long) '\u0000';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-2159L), 0L, 56L, 0L, 69L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((-158L));
      assertNotNull(long0);
      assertEquals((-158L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-158L));
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-158L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[0]);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertEquals(6, longArray0.length);
      assertEquals((-158L), (long)long3);
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[3]);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-158L), 0L, (-158L), (-158L), (-158L), (-158L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = 'J';
      charArray0[3] = '|';
      charArray0[4] = '\\';
      charArray0[5] = 'Q';
      charArray0[6] = 'j';
      charArray0[7] = 'f';
      charArray0[8] = '^';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'J', '\u0000', '|', '\\', 'Q', 'j', 'f', '^', '='}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Long[] longArray0 = new Long[4];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      longArray0[3] = (Long) long0;
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-158L));
      assertNotNull(long0);
      assertEquals((-158L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-158L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertEquals((-158L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[0]);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertEquals(4, longArray0.length);
      assertEquals((-158L), (long)long3);
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[3]);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-158L), 0L, (-158L), (-158L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = 'J';
      charArray0[2] = 'N';
      charArray0[3] = '|';
      charArray0[4] = 'd';
      charArray0[5] = 'Q';
      charArray0[6] = 'j';
      charArray0[7] = 'f';
      charArray0[8] = '^';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'J', 'N', '|', 'd', 'Q', 'j', 'f', '^', '='}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Short short0 = new Short((short)56);
      assertNotNull(short0);
      assertEquals((short)56, (short)short0);
      
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)9, (-2347));
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[7];
      Byte byte0 = new Byte((byte) (-126));
      assertNotNull(byte0);
      assertEquals((byte) (-126), (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)55);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)55, (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-7));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-7), (byte)byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte) (-79));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-79), (byte)byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte)113);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte)113, (byte)byte4);
      
      byteArray0[4] = byte4;
      Byte byte5 = new Byte((byte)17);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte)17, (byte)byte5);
      
      byteArray0[5] = byte5;
      try { 
        Byte.decode("O)&dh");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"O)&dh\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'e';
      doubleArray0[1] = (double) 'e';
      doubleArray0[2] = (double) 'e';
      Object[] objectArray0 = new Object[0];
      Character character0 = new Character('[');
      assertNotNull(character0);
      assertEquals('[', (char)character0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) character0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (int) (byte)75);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)80;
      shortArray0[1] = (short) (byte)80;
      shortArray0[2] = (short) (byte)80;
      shortArray0[3] = (short) (byte)75;
      shortArray0[4] = (short)1606;
      shortArray0[5] = (short) (byte)80;
      ArrayUtils.swap(shortArray0, (-1), 3536, (-1));
      assertArrayEquals(new short[] {(short)80, (short)80, (short)80, (short)75, (short)1606, (short)80}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Long long0 = new Long((short)80);
      assertNotNull(long0);
      assertEquals(80L, (long)long0);
      
      Character character1 = Character.valueOf('[');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('[', (char)character1);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(int1 == int0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert((-553), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, 2667, 2667);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-553);
      intArray0[1] = 2667;
      intArray0[2] = (-553);
      intArray0[3] = 2667;
      intArray0[4] = 2667;
      intArray0[5] = 2667;
      intArray0[6] = (-553);
      intArray0[7] = 2667;
      intArray0[8] = (-553);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-553));
      assertArrayEquals(new int[] {(-553), 2667, (-553), 2667, 2667, 2667, (-553), 2667, (-553)}, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)127;
      shortArray0[3] = (short)127;
      ArrayUtils.swap(shortArray0, (int) (short)0, 2);
      assertArrayEquals(new short[] {(short)0, (short)127, (short)0, (short)127}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Byte byte0 = new Byte((byte) (-78));
      assertNotNull(byte0);
      assertEquals((byte) (-78), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-78), object0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[3] = (short)2559;
      shortArray0[1] = (short)732;
      shortArray0[2] = (short)2559;
      shortArray0[3] = (short)2559;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)732, (short)2559, (short)2559, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3340.4304546973785);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      Float float0 = new Float(1176.5289F);
      assertNotNull(float0);
      assertEquals(1176.5289F, (float)float0, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) float0);
      assertNotNull(string0);
      assertEquals("1176.5289", string0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3340.4304546973785), 4253, 2491.0);
      assertArrayEquals(new double[] {0.0, (-3340.4304546973785), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, int0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)78);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)78}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 920.5897F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 920.5897F;
      floatArray0[4] = 0.0F;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {920.5897F, 0.0F, 920.5897F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-3928);
      intArray0[1] = (-177);
      ArrayUtils.swap(intArray0, (-829), 117, (-829));
      assertArrayEquals(new int[] {(-3928), (-177)}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1201);
      shortArray0[6] = (short)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)121;
      intArray0[1] = (int) (short)121;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 121);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {121, 121}, intArray0);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert((-553), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, 2667, 2667);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-553);
      intArray0[1] = 2667;
      intArray0[2] = (-553);
      intArray0[3] = 2667;
      intArray0[4] = 2667;
      intArray0[5] = 2667;
      intArray0[6] = (-553);
      intArray0[7] = (-553);
      intArray0[8] = (-553);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-553));
      assertArrayEquals(new int[] {(-553), 2667, (-553), 2667, 2667, 2667, (-553), (-553), (-553)}, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1148));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-553), 2667, (-553), 2667, 2667, 2667, (-553), (-553), (-553)}, intArray0);
      assertArrayEquals(new int[] {(-553), 2667, (-553), 2667, 2667, 2667, (-553), (-553), (-553)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)55;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)55);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)99, (byte)55}, byteArray0);
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, byteArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-15117);
      intArray0[1] = (int) (byte)55;
      intArray0[2] = (int) (byte)99;
      intArray0[3] = 59;
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (-15117), (-3078));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new int[] {(-15117), 55, 99, 59}, intArray0);
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(1, bitSet1.length());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(4, intArray0.length);
      
      bitSet0.or(bitSet1);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte)99, (byte)55}, byteArray0);
      assertArrayEquals(new int[] {(-15117), 55, 99, 59}, intArray0);
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(1, bitSet1.length());
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(2, byteArray0.length);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        bitSet1.flip((-15117));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -15117
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1862);
      shortArray0[1] = (short) (-4036);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-1862);
      intArray0[1] = (int) (short) (-4036);
      intArray0[2] = (int) (short) (-1862);
      intArray0[3] = (int) (short) (-4036);
      intArray0[4] = (int) (short) (-24639);
      intArray0[5] = (int) (short) (-1862);
      intArray0[6] = (int) (short) (-1862);
      boolean boolean0 = ArrayUtils.contains(intArray0, 11);
      assertArrayEquals(new int[] {(-1862), (-4036), (-1862), (-4036), (-24639), (-1862), (-1862)}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1307), (-1307));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-106);
      ArrayUtils.shift(byteArray0, (int) (byte) (-106));
      assertArrayEquals(new byte[] {(byte)5, (byte) (-106), (byte)38}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-106), (byte)5}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-3096L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {(-3096L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-3096L);
      objectArray0[1] = (Object) (-3096L);
      Byte byte0 = new Byte((byte) (-113));
      assertNotNull(byte0);
      assertEquals((byte) (-113), (byte)byte0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) byte0, (int) (byte) (-113));
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
      
      String string0 = ArrayUtils.toString(objectArray0[1], "java.lang.String");
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      assertEquals("-3096", string0);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = ArrayUtils.toString(objectArray0[1], "javf.lKngsString");
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      assertEquals("javf.lKngsString", string0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 21, 21, (-2254));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Byte byte0 = new Byte((byte) (-113));
      assertNotNull(byte0);
      assertEquals((byte) (-113), (byte)byte0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) byte0, (int) (byte) (-113));
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
      
      String string0 = ArrayUtils.toString(objectArray0[1], "java.lang.String");
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      assertEquals("java.lang.String", string0);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Character character0 = new Character('[');
      assertNotNull(character0);
      assertEquals('[', (char)character0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) character0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) '[';
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(737);
      assertNotNull(integer0);
      assertEquals(737, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(9, integerArray0.length);
      assertEquals(737, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(737);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(737, (int)integer2);
      
      integerArray0[2] = integer2;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, (int) integerArray0[1]);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false}, booleanArray0));
      assertEquals(9, integerArray0.length);
      assertEquals(6, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      
      ArrayUtils.swap((Object[]) integerArray0, (int) integerArray0[2], 737);
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2700L);
      longArray0[1] = 351L;
      longArray0[2] = (-1224L);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2700L), 351L, (-1224L)}, longArray0);
      assertArrayEquals(new long[] {(-2700L), 351L, (-1224L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[0];
      Character character0 = Character.valueOf('G');
      assertNotNull(character0);
      assertEquals('G', (char)character0);
      
      Character[] characterArray1 = ArrayUtils.add(characterArray0, character0);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(1, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte) (-75));
      assertNotNull(byte0);
      assertEquals((byte) (-75), (byte)byte0);
      
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      assertNotNull(mutableInt0);
      assertEquals((-75L), mutableInt0.longValue());
      assertEquals((byte) (-75), mutableInt0.byteValue());
      assertEquals((-75.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-75), (int)mutableInt0.toInteger());
      assertEquals((-75), (int)mutableInt0.getValue());
      assertEquals("-75", mutableInt0.toString());
      assertEquals((-75.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-75), mutableInt0.intValue());
      assertEquals((short) (-75), mutableInt0.shortValue());
      
      int int0 = mutableInt0.addAndGet((Number) byte0);
      assertEquals((-150), mutableInt0.intValue());
      assertEquals((-150.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-150), (int)mutableInt0.getValue());
      assertEquals((byte)106, mutableInt0.byteValue());
      assertEquals((-150), (int)mutableInt0.toInteger());
      assertEquals((-150.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-150), mutableInt0.shortValue());
      assertEquals((-150L), mutableInt0.longValue());
      assertEquals("-150", mutableInt0.toString());
      assertEquals((-150), int0);
      
      int int1 = mutableInt0.addAndGet((Number) byte0);
      assertEquals((-225.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-225), mutableInt0.shortValue());
      assertEquals((byte)31, mutableInt0.byteValue());
      assertEquals("-225", mutableInt0.toString());
      assertEquals((-225L), mutableInt0.longValue());
      assertEquals((-225), mutableInt0.intValue());
      assertEquals((-225.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-225), (int)mutableInt0.toInteger());
      assertEquals((-225), (int)mutableInt0.getValue());
      assertFalse(int1 == int0);
      assertEquals((-225), int1);
      
      int int2 = mutableInt0.incrementAndGet();
      assertEquals((short) (-224), mutableInt0.shortValue());
      assertEquals((-224), (int)mutableInt0.getValue());
      assertEquals((byte)32, mutableInt0.byteValue());
      assertEquals((-224), (int)mutableInt0.toInteger());
      assertEquals((-224.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-224", mutableInt0.toString());
      assertEquals((-224.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-224), mutableInt0.intValue());
      assertEquals((-224L), mutableInt0.longValue());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-224), int2);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) mutableInt0);
      assertEquals((short) (-224), mutableInt0.shortValue());
      assertEquals((-224), (int)mutableInt0.getValue());
      assertEquals((byte)32, mutableInt0.byteValue());
      assertEquals((-224), (int)mutableInt0.toInteger());
      assertEquals((-224.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-224", mutableInt0.toString());
      assertEquals((-224.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-224), mutableInt0.intValue());
      assertEquals((-224L), mutableInt0.longValue());
      assertEquals(0, objectArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      mutableInt0.add((-225));
      assertEquals((short) (-449), mutableInt0.shortValue());
      assertEquals((byte)63, mutableInt0.byteValue());
      assertEquals("-449", mutableInt0.toString());
      assertEquals((-449.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-449L), mutableInt0.longValue());
      assertEquals((-449.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-449), mutableInt0.intValue());
      assertEquals((-449), (int)mutableInt0.toInteger());
      assertEquals((-449), (int)mutableInt0.getValue());
      
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-225), (-150));
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-150);
      doubleArray0[1] = (double) 2;
      int int3 = mutableInt0.getAndAdd((-224));
      assertEquals((short) (-673), mutableInt0.shortValue());
      assertEquals((byte)95, mutableInt0.byteValue());
      assertEquals("-673", mutableInt0.toString());
      assertEquals((-673.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-673L), mutableInt0.longValue());
      assertEquals((-673), mutableInt0.intValue());
      assertEquals((-673), (int)mutableInt0.toInteger());
      assertEquals((-673), (int)mutableInt0.getValue());
      assertEquals((-673.0), mutableInt0.doubleValue(), 0.01);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-449), int3);
      
      doubleArray0[2] = (double) (-150);
      ArrayUtils.reverse(doubleArray0, (-225), 102);
      assertArrayEquals(new double[] {(-150.0), 2.0, (-150.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 102;
      longArray0[1] = (long) (-150);
      longArray0[2] = (long) 102;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {102L, (-150L), 102L}, longArray0);
      assertArrayEquals(new long[] {102L, (-150L), 102L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      Float[] floatArray1 = new Float[3];
      Float float0 = new Float((-584.56F));
      assertNotNull(float0);
      assertEquals((-584.56F), (float)float0, 0.01F);
      
      floatArray1[0] = float0;
      Float float1 = new Float((-1.0));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray1[1] = float1;
      Float float2 = new Float((float) 102L);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(102.0F, (float)float2, 0.01F);
      
      floatArray1[2] = float2;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-584.56F), (-1.0F), 102.0F}, floatArray2, 0.01F);
      assertEquals(3, floatArray2.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-164.422618501465);
      doubleArray0[1] = (double) 1007;
      doubleArray0[2] = 67.85;
      doubleArray0[3] = 359.3747238585139;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-164.422618501465);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1007);
      assertArrayEquals(new double[] {(-164.422618501465), 1007.0, 67.85, 359.3747238585139, 0.0, (-164.422618501465)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, int0);
      
      boolean[] booleanArray0 = new boolean[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true);
      assertNotNull(bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }
}
