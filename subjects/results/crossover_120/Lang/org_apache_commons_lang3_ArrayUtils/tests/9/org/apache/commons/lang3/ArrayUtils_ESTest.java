/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:38:42 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-112);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)66;
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 1026, 550);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1026;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte) (-112);
      doubleArray0[3] = (double) 550;
      ArrayUtils.shift(shortArray0, (int) (short)66);
      assertArrayEquals(new short[] {(short) (-112), (short)0, (short)66, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, (-112.0), 550.0, 0.0, 0.0, 0.0, 0.0, 1026.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-777), (-116));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'L';
      charArray0[2] = 'D';
      charArray0[3] = '$';
      charArray0[4] = ':';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'L');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'K', 'L', 'D', '$', ':'}, charArray0);
      assertArrayEquals(new char[] {'L', 'K', 'L', 'D', '$', ':'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(7);
      assertNotNull(integer1);
      assertEquals(7, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3313));
      assertNotNull(integer2);
      assertEquals((-3313), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      try { 
        Integer.valueOf(">V`E+#DJ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \">V`E+#DJ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "R!ekUFe{CKQ:j~s{c");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1L;
      floatArray0[8] = 1.0F;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (float) 1L;
      floatArray0[5] = (float) 1L;
      floatArray0[6] = (float) 1L;
      floatArray0[7] = (float) 1L;
      floatArray0[5] = (float) 1L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 13, 13);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F, 0.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) stringArray0, (Object) "R!ekUFe{CKQ:j~s{c", 1010);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(bitSet0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (-1), 84);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, intArray0.length);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameType(double0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(boolean0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = 'S';
      charArray0[4] = 'S';
      charArray0[5] = 'S';
      charArray0[6] = 'S';
      charArray0[7] = 'S';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'S');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'S', 'S', 'S', 'S', 'S', 'S', 'S', 'S'}, charArray0);
      assertArrayEquals(new char[] {'S', 'S', 'S', 'S', 'S', 'S', 'S'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-118);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-100), (byte)33, (byte) (-118)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-100), (byte)33, (byte) (-118)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-100), (int) (byte)1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-100), (byte)33, (byte) (-118)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-100), (byte)33, (byte) (-118)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) (byte) (-118);
      longArray0[2] = (long) (byte)1;
      longArray0[3] = (long) (-885);
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (byte)33;
      longArray0[8] = (long) (short)0;
      ArrayUtils.shift(longArray0, 36);
      assertArrayEquals(new long[] {1L, (-118L), 1L, (-885L), 0L, 1L, 0L, 33L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) (byte)1;
      floatArray0[2] = (float) 48;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 48.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 48.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte) (-100));
      assertNotNull(short1);
      assertEquals((short) (-100), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)21845;
      shortArray0[1] = (short)21845;
      shortArray0[2] = (short)34;
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      Character character0 = new Character('l');
      assertNotNull(character0);
      assertEquals('l', (char)character0);
      
      Character character1 = new Character('=');
      assertNotNull(character1);
      assertEquals('=', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = new Character('}');
      assertNotNull(character2);
      assertEquals('}', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'l', 'l', 'l'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)21845);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)21845, (short)21845, (short)34}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (short)21845);
      assertNull(intArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, " W```~1m1jQ");
      assertNotNull(string0);
      assertEquals("-1", string0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(3, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (int) character0);
      assertNotNull(bitSet0);
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertTrue(boolean0);
      assertEquals(0, characterArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)6;
      shortArray0[0] = (short)6;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)6, (short)6, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)6, (short)6, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0, (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = '3';
      charArray0[2] = '7';
      charArray0[3] = 'A';
      charArray0[4] = 'D';
      charArray0[5] = '6';
      charArray0[6] = '}';
      charArray0[7] = 'b';
      Character[] characterArray1 = ArrayUtils.toObject(charArray0);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertArrayEquals(new char[] {'_', '3', '7', 'A', 'D', '6', '}', 'b'}, charArray0);
      assertEquals(8, characterArray1.length);
      assertEquals(8, charArray0.length);
      
      Float float0 = new Float(245.7317F);
      assertNotNull(float0);
      assertEquals(245.7317F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_INT_ARRAY, (-101), 1101);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), 2);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_CHAR_ARRAY, (-1469), 34, (-3710));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2282;
      shortArray0[1] = (short)4922;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2282, (short)4922}, shortArray0);
      assertArrayEquals(new short[] {(short)2282, (short)4922}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1469));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-2315.0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-2315.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = (-1);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.insert((-1), booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      ArrayUtils.shift((char[]) null, (-776), 76, 3774);
      boolean boolean1 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) (-776);
      floatArray1[3] = (float) (-1);
      floatArray1[4] = (float) (-1);
      floatArray1[5] = (float) 3774;
      floatArray1[6] = (float) 0;
      floatArray1[7] = (float) (-776);
      int int1 = (-2751);
      ArrayUtils.swap(floatArray1, (-2751), (-2708), 0);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, (-776.0F), (-1.0F), (-1.0F), 3774.0F, 0.0F, (-776.0F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray2, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)78);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)78;
      intArray0[1] = (int) (byte)78;
      intArray0[2] = (int) (byte)78;
      intArray0[3] = (int) (byte)78;
      intArray0[4] = (int) (byte)78;
      intArray0[5] = (int) (byte)78;
      intArray0[6] = (int) (byte)78;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {78, 78, 78, 78, 78, 78, 78}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)66;
      shortArray0[2] = (short)99;
      ArrayUtils.swap(shortArray0, 1393, (int) (short)66, (int) (short)99);
      assertArrayEquals(new short[] {(short)0, (short)66, (short)99}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(2979L);
      assertNotNull(long0);
      assertEquals(2979L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)66);
      assertNotNull(long1);
      assertEquals(66L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2979L;
      floatArray0[1] = (float) 2979L;
      floatArray0[2] = (float) (short)99;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) 1393;
      floatArray0[5] = (float) (short)99;
      floatArray0[6] = (float) 1393;
      floatArray0[7] = (float) 2979L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1629.0F), 348);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {2979.0F, 2979.0F, 99.0F, 0.0F, 1393.0F, 99.0F, 1393.0F, 2979.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)66;
      intArray0[1] = (int) (short)99;
      intArray0[2] = 2146514435;
      intArray0[3] = (int) (short)99;
      intArray0[4] = 348;
      ArrayUtils.reverse(intArray0, (-345), 2146514435);
      assertArrayEquals(new int[] {348, 99, 2146514435, 99, 66}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-802.2F);
      floatArray0[1] = 509.31F;
      floatArray0[2] = 4340.527F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 2130.2886F;
      floatArray0[5] = 2509.0F;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {509.31F, 4340.527F, 1.0F, 2130.2886F, 2509.0F, (-802.2F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-3852L);
      longArray0[2] = 0L;
      longArray0[3] = 1500L;
      longArray0[4] = 3410L;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.shift(booleanArray0, 2090023843);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 2888L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = Float.NaN;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 2888.0F, 0.0F, Float.NaN}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, (-3852L), 0L, 1500L, 3410L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      short[] shortArray0 = new short[1];
      short short0 = (short)857;
      shortArray0[0] = (short)857;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)857}, shortArray0);
      assertArrayEquals(new short[] {(short)857}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object[]) floatArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-101);
      intArray0[1] = (int) (short)0;
      intArray0[2] = 3622;
      intArray0[3] = (-1466);
      ArrayUtils.shift(intArray0, 0);
      assertArrayEquals(new int[] {(-101), 0, 3622, (-1466)}, intArray0);
      assertEquals(4, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 1819, 1819, (-101));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3622;
      doubleArray0[1] = (-1830.08101);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (-101);
      doubleArray0[5] = (double) (-101);
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (-1466);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.5, (int) (short)0, (-1846.564092351));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {3622.0, (-1830.08101), 0.0, 0.0, (-101.0), (-101.0), 0.0, (-1466.0)}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-1), (int) (short) (-1));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-1);
      floatArray0[3] = 35.1F;
      floatArray0[4] = (-2559.416F);
      floatArray0[5] = 35.1F;
      floatArray0[6] = 35.1F;
      floatArray0[7] = 35.1F;
      int int0 = ArrayUtils.indexOf(floatArray0, 1393.0F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 35.1F, (-2559.416F), 35.1F, 35.1F, 35.1F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 35.1F, (-2559.416F), 35.1F, 35.1F, 35.1F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('x');
      assertNotNull(character0);
      assertEquals('x', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertNotNull(character1);
      assertEquals('x', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) character1);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      assertTrue(character1.equals((Object)character0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertTrue(character0.equals((Object)character1));
      assertEquals(0, characterArray1.length);
      assertEquals(1, characterArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = new Boolean("java.lang.Long");
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      
      booleanArray0[1] = boolean3;
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      
      booleanArray0[2] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 35.1F, (-2559.416F), 35.1F, 35.1F, 35.1F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 35.1F, (-2559.416F), 35.1F, 35.1F, 35.1F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(8, floatArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = (char) character0;
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = (char) character0;
      char[] charArray1 = ArrayUtils.add(charArray0, 'x');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'x', 'x', 'x', 'x', 'x', 'x', 'x'}, charArray1);
      assertArrayEquals(new char[] {'x', 'x', 'x', 'x', 'x', 'x'}, charArray0);
      assertEquals(7, charArray1.length);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 9, 166);
      assertEquals(0, objectArray0.length);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 9);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 9);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 343);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 343, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[2] = 'e';
      charArray0[4] = 'c';
      charArray0[4] = 'N';
      charArray0[5] = 'H';
      charArray0[6] = '\"';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'e', '\u0000', 'N', 'H', '\"'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'N';
      intArray0[1] = (int) '\u0000';
      ArrayUtils.shift((Object[]) characterArray0, (int) (short)0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'e', '\u0000', 'N', 'H', '\"'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Character character0 = new Character('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'L';
      ArrayUtils.swap(longArray0, 1, 1568, 1);
      assertArrayEquals(new long[] {76L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4391;
      intArray0[1] = 4391;
      intArray0[2] = (int) 'L';
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1568;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1735), (-13));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {4391, 4391, 76, 1, 1, 1568}, intArray0);
      assertEquals(6, intArray0.length);
      
      ArrayUtils.swap(charArray0, 1568, 1, 1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = 1;
      intArray1[2] = (-1735);
      intArray1[3] = (-1735);
      intArray1[4] = 4391;
      intArray1[5] = (int) 'L';
      intArray1[6] = 1568;
      int[] intArray2 = ArrayUtils.removeElement(intArray1, 1494);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), 1, (-1735), (-1735), 4391, 76, 1568}, intArray2);
      assertArrayEquals(new int[] {(-1), 1, (-1735), (-1735), 4391, 76, 1568}, intArray1);
      assertEquals(7, intArray2.length);
      assertEquals(7, intArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (byte)39);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte) (-117), (byte)119, (byte)15, (byte) (-1), (byte)39, (byte)0, (byte) (-1)}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean[] booleanArray0 = new boolean[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(7, booleanArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1958);
      shortArray0[1] = (short) (-262);
      shortArray0[2] = (short) (-4356);
      shortArray0[3] = (short)1229;
      shortArray0[4] = (short) (-3151);
      shortArray0[5] = (short) (-1510);
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1958), (short) (-262), (short) (-4356), (short)1229, (short) (-3151), (short) (-1510)}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)38;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)119, (byte)0, (byte) (-66), (byte)38}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, 4372, 56);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      floatArray0[1] = float1;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-86);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-86)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'm';
      charArray0[2] = 'R';
      ArrayUtils.shift(charArray0, (int) (byte) (-12), (int) (byte) (-86), (int) (byte) (-12));
      assertArrayEquals(new char[] {'R', 'm', 'R'}, charArray0);
      assertEquals(3, charArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-12);
      longArray0[1] = (long) 'm';
      longArray0[2] = (long) 'R';
      longArray0[3] = (long) (byte) (-86);
      longArray0[4] = (long) 'm';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-12L), 109L, 82L, (-86L), 109L}, longArray0);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-1767), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1767, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[2] = ',';
      ArrayUtils.shift(charArray0, (-1779), 42, 102);
      assertArrayEquals(new char[] {'c', '\u0000', ','}, charArray0);
      assertEquals(3, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1779);
      doubleArray0[1] = (double) 102;
      doubleArray0[2] = (double) 'c';
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 42;
      doubleArray0[5] = (-5820.6656);
      doubleArray0[6] = (double) 102;
      doubleArray0[7] = (-1656.78458723);
      doubleArray0[8] = (double) (-1.0F);
      ArrayUtils.shift(doubleArray0, (-1779), 42, (-1424));
      assertArrayEquals(new double[] {99.0, (-1.0), 42.0, (-5820.6656), 102.0, (-1656.78458723), (-1.0), (-1779.0), 102.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)34;
      short short0 = (short) (-93);
      shortArray0[1] = (short) (-93);
      shortArray0[2] = (short) (-387);
      short short1 = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (-1527);
      shortArray0[5] = (short) (-1803);
      shortArray0[6] = (short) (-404);
      ArrayUtils.swap(shortArray0, (int) (short)1, (int) (short) (-93), (int) (short) (-1527));
      assertArrayEquals(new short[] {(short)34, (short) (-93), (short) (-387), (short)1, (short) (-1527), (short) (-1803), (short) (-404)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-3121));
      assertNotNull(short0);
      assertEquals((short) (-3121), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1267);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3121)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int int0 = (-404);
      int int1 = 77;
      ArrayUtils.shift((Object[]) shortArray0, (-404), 77, (-404));
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-404);
      long long0 = 1L;
      longArray0[1] = 1L;
      longArray0[2] = (long) (-404);
      longArray0[3] = (long) (short) (-3121);
      longArray0[4] = (long) (-404);
      longArray0[5] = (long) (-404);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-404L), 1L, (-404L), (-3121L), (-404L), (-404L)}, longArray0);
      assertArrayEquals(new long[] {(-404L), (-404L), (-3121L), (-404L), (-404L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) short0, (int) (short) (-3121));
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted((Object[]) shortArray0, (Comparator<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 100);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) 100;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      objectArray0[0] = (Object) (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.swap(byteArray0, 1267, 122, (-1978));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 120;
      intArray0[1] = (int) (byte) (-119);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1234));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {120, (-119), 0}, intArray1);
      assertArrayEquals(new int[] {120, (-119), 0}, intArray0);
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 100);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) 100;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      floatArray0[8] = (float) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-119));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, 1267, 122, (-1978));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 120;
      intArray0[1] = (int) (byte) (-119);
      intArray0[2] = 100;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1234));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {120, (-119), 100}, intArray1);
      assertArrayEquals(new int[] {120, (-119), 100}, intArray0);
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "java.lang.Integer";
      stringArray0[4] = "GC";
      stringArray0[4] = "5cX";
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) (byte) (-5);
      floatArray0[2] = (float) (byte) (-5);
      floatArray0[3] = (float) (byte) (-5);
      ArrayUtils.shift(floatArray0, 12);
      assertArrayEquals(new float[] {2.0F, (-5.0F), (-5.0F), (-5.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertTrue(boolean0);
      assertEquals(0, characterArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 0);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals(6, booleanArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray1, 2147483647L, 0);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2147483647L;
      floatArray0[1] = (float) 2147483647L;
      floatArray0[2] = 572.743F;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 2460.46F;
      ArrayUtils.shift(floatArray0, (-775), 528, (-775));
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 572.743F, 0.0F, 2460.46F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray1, (-4493));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4493, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1362.0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_CHAR_ARRAY, '[', (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      byte[] byteArray1 = ArrayUtils.clone(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      short[] shortArray1 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_FLOAT_ARRAY, 166, (-2029), 0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (-1), 0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3078.50002143528;
      ArrayUtils.shift((boolean[]) null, 1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-87);
      ArrayUtils.shift(byteArray0, (int) (byte) (-104), (-2423), (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)104, (byte)66, (byte) (-66), (byte) (-60), (byte)0, (byte) (-104), (byte) (-87)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (-3409.7);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, (-3409.7)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      MutableInt mutableInt0 = new MutableInt(2);
      assertNotNull(mutableInt0);
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2L, mutableInt0.longValue());
      
      mutableInt0.subtract(2);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      
      Integer integer0 = mutableInt0.toInteger();
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      
      Integer[] integerArray0 = new Integer[16];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      mutableInt0.add((Number) integer0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (-1469));
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-473.735486);
      doubleArray0[1] = (double) (int)integer0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) (short) (-1469);
      ArrayUtils.swap(doubleArray0, (int) (short) (-1469), 940, (int) integer0);
      assertArrayEquals(new double[] {(-473.735486), 0.0, 2.0, (-1469.0)}, doubleArray0, 0.01);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      short[] shortArray1 = new short[9];
      shortArray1[0] = (short)8192;
      shortArray1[1] = (short)0;
      shortArray1[2] = (short) (-1469);
      shortArray1[3] = (short) (-1469);
      shortArray1[4] = (short) (-1469);
      shortArray1[5] = (short) (-1469);
      shortArray1[6] = (short)2364;
      shortArray1[7] = (short) (-1469);
      shortArray1[8] = (short) (-1469);
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)8192, (short)0, (short) (-1469), (short) (-1469), (short) (-1469), (short) (-1469), (short)2364, (short) (-1469), (short) (-1469)}, shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 940);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, true, false, true}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(9, booleanArray0.length);
      
      ArrayUtils.shift((long[]) null, 940, 2791, (-1469));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2791;
      doubleArray0[1] = (double) 940;
      doubleArray0[2] = (double) (-1469);
      doubleArray0[3] = (double) 2791;
      doubleArray0[4] = (double) 940;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2791.0, 940.0, (-1469.0), 2791.0, 940.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[12];
      longArray0[0] = (-3915L);
      longArray0[1] = 13L;
      longArray0[2] = 977L;
      longArray0[1] = 2914L;
      long[] longArray1 = ArrayUtils.add(longArray0, (-2092L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(12, longArray0.length);
      assertEquals(13, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-78);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-28), (byte) (-99), (byte) (-78)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 597L;
      longArray0[1] = (-1L);
      longArray0[2] = (-2951L);
      longArray0[3] = (-7L);
      longArray0[4] = (-173L);
      longArray0[5] = 2653L;
      longArray0[6] = 133L;
      longArray0[7] = (-2191L);
      longArray0[8] = 3202L;
      ArrayUtils.swap(longArray0, 1568, 1568, 1568);
      assertArrayEquals(new long[] {597L, (-1L), (-2951L), (-7L), (-173L), 2653L, 133L, (-2191L), 3202L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1568;
      intArray0[1] = 1568;
      intArray0[2] = 1568;
      intArray0[3] = 1568;
      intArray0[4] = 1568;
      intArray0[5] = 1568;
      intArray0[6] = 1568;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1, 4391);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {1568, 1568, 1568, 1568, 1568, 1568, 1568}, intArray0);
      assertEquals(7, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = '';
      ArrayUtils.swap(charArray0, (-1469), (-1037), 4391);
      assertArrayEquals(new char[] {'I', ''}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Character character0 = new Character('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      float[] floatArray0 = new float[2];
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), (int) (short)1196);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1196);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = '1';
      charArray0[2] = '1';
      boolean boolean2 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {'?', '1', '1'}, charArray0);
      assertEquals(3, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'c');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'?', '1', '1'}, charArray0);
      assertArrayEquals(new char[] {'?', '1', '1'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      short[] shortArray0 = new short[9];
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      
      Short short0 = new Short((short)120);
      assertNotNull(short0);
      assertEquals((short)120, (short)short0);
      
      Short short1 = new Short((short) (-1));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-1462));
      assertNotNull(short2);
      assertEquals((short) (-1462), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      Short short3 = new Short((short)613);
      assertNotNull(short3);
      assertEquals((short)613, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      
      Short short4 = new Short((short) (-1));
      assertNotNull(short4);
      assertEquals((short) (-1), (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short1));
      
      Short short5 = new Short((short) short3);
      assertNotNull(short5);
      assertEquals((short)613, (short)short5);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short4));
      assertTrue(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      
      ArrayUtils.shift(shortArray0, (-1037), (int) (short) (-1), 8);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray0, 1L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, 0L}, longArray2);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray2.length);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-1), (-436), 8);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'b';
      charArray0[2] = 'R';
      charArray0[3] = '\"';
      charArray0[4] = 'h';
      charArray0[5] = 'v';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'3', 'b', 'R', '\"', 'h', 'v'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double((-1206.0));
      assertNotNull(double1);
      assertEquals((-1206.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(41.3321042);
      assertNotNull(double2);
      assertEquals(41.3321042, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(1024.0);
      assertNotNull(double3);
      assertEquals(1024.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      Double[] doubleArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, double3);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(0, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1), (int) (short) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (-571.675F));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 35.1F;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (-571.675F);
      floatArray0[4] = (-1953.3F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 35.1F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {35.1F, (-1.0F), (-571.675F), 0.0F, (-1953.3F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Character[] characterArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, (Object) double1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(characterArray0);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotEquals((double)double1, (double)double3, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0, characterArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {35.1F, (-1.0F), (-571.675F), 0.0F, (-1953.3F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {35.1F, (-1.0F), (-571.675F), 0.0F, (-1953.3F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long[] longArray0 = new long[2];
      longArray0[0] = (-1263L);
      longArray0[1] = (-1263L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1263L), (-1263L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.swap(doubleArray0, (-1261), (-1261));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1263L);
      floatArray0[1] = (float) (-1261);
      floatArray0[2] = (float) 2264;
      floatArray0[3] = (float) (-66);
      floatArray0[4] = (float) (-1261);
      floatArray0[5] = (float) (-66);
      floatArray0[6] = (float) (-66);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1263.0F), (-1261.0F), 2264.0F, (-66.0F), (-1261.0F), (-66.0F), (-66.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1263L);
      objectArray0[1] = (Object) 2264.0F;
      objectArray0[2] = (Object) (-66.0F);
      objectArray0[3] = (Object) (-1263L);
      boolean boolean0 = ArrayUtils.isSameType((-1261.0F), (-66.0F));
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2);
      shortArray0[1] = (short)121;
      shortArray0[2] = (short)121;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)77);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-2), (short)121, (short)121}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2), (short)121, (short)121}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      ArrayUtils.swap((int[]) null, (int) (short)121, 2438);
      boolean boolean1 = ArrayUtils.isSorted(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertTrue(boolean1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-2), (short)121, (short)121}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2), (short)121, (short)121}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (-66.0F), 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals((-1), int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1263.0F), (-1261.0F), 2264.0F, (-66.0F), (-1261.0F), (-66.0F), (-66.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)18;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-1);
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)3;
      longArray0[1] = (long) (byte)105;
      longArray0[2] = (long) (byte)3;
      longArray0[3] = (long) (byte)18;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {3L, 105L, 3L, 18L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 77;
      char[] charArray0 = new char[1];
      char char0 = 'k';
      charArray0[0] = 'k';
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'k';
      charArray1[1] = 'k';
      charArray1[2] = 'k';
      charArray1[3] = 'k';
      charArray1[4] = 'k';
      charArray1[5] = 'k';
      charArray1[6] = 'k';
      charArray1[7] = 'k';
      charArray1[8] = 'k';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(77, charArray0, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 77, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertNotNull(mutableInt0);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), mutableInt0.intValue());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((-1));
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals("-1", mutableInt1.toString());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      
      mutableIntArray0[1] = mutableInt1;
      Comparator<MutableInt> comparator0 = (Comparator<MutableInt>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparator0).compare(any(org.apache.commons.lang3.mutable.MutableInt.class) , any(org.apache.commons.lang3.mutable.MutableInt.class));
      boolean boolean0 = ArrayUtils.isSorted(mutableIntArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(2, mutableIntArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int int0 = ArrayUtils.indexOf(longArray1, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      MutableInt mutableInt0 = new MutableInt((Number) 0);
      assertNotNull(mutableInt0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      
      MutableInt mutableInt1 = new MutableInt(0);
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0L, mutableInt1.longValue());
      
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      mutableIntArray0[0] = mutableInt1;
      mutableIntArray0[1] = mutableInt0;
      MutableInt mutableInt2 = new MutableInt(mutableInt0);
      assertNotNull(mutableInt2);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(0L, mutableInt2.longValue());
      assertEquals((byte)0, mutableInt2.byteValue());
      assertEquals(0.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt2.toInteger());
      assertEquals("0", mutableInt2.toString());
      assertEquals(0, (int)mutableInt2.getValue());
      assertEquals((short)0, mutableInt2.shortValue());
      assertEquals(0, mutableInt2.intValue());
      
      mutableIntArray0[2] = mutableInt2;
      mutableIntArray0[3] = mutableInt0;
      mutableIntArray0[4] = mutableInt0;
      Comparator<MutableInt> comparator0 = (Comparator<MutableInt>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any(org.apache.commons.lang3.mutable.MutableInt.class) , any(org.apache.commons.lang3.mutable.MutableInt.class));
      boolean boolean0 = ArrayUtils.isSorted(mutableIntArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(5, mutableIntArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray0, 121L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      
      int int1 = ArrayUtils.indexOf(floatArray1, (float) 121L, 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals((-1), int1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)112;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 112.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-2145784688));
      assertNotNull(integer0);
      assertEquals((-2145784688), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2145784688));
      assertNotNull(integer1);
      assertEquals((-2145784688), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2921.7157), 2242);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 112.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-20), 8192);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)66;
      shortArray0[2] = (short)99;
      ArrayUtils.swap(shortArray0, 1393, (int) (short)66, (int) (short)99);
      assertArrayEquals(new short[] {(short)0, (short)66, (short)99}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)6;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)6, (byte)0, (byte)6}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)0, (byte)6, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)6;
      ArrayUtils.swap(byteArray1, (-200), 0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)6}, byteArray1);
      assertEquals(1, byteArray1.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)66, (short)99}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (short)99;
      doubleArray0[2] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)0, (int) (short)0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 99.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (byte)6;
      objectArray0[2] = (Object) 0.0;
      boolean boolean1 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, objectArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (short)1692, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(objectArray0[0], (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double((-1206.0));
      assertNotNull(double1);
      assertEquals((-1206.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(41.3321042);
      assertNotNull(double2);
      assertEquals(41.3321042, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(1024.0);
      assertNotNull(double3);
      assertEquals(1024.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Double[] doubleArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, double3);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1), (int) (short) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (-571.675F));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 35.1F;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (-571.675F);
      floatArray0[4] = (-1953.3F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 35.1F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {35.1F, (-1.0F), (-571.675F), 0.0F, (-1953.3F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Character[] characterArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, (Object) double1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(characterArray0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double3, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertEquals(0, characterArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.shift(longArray1, (-3500), (-3500), (-2145796699));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, false, (-1223));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(bitSet0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-78);
      shortArray0[1] = (short) (byte) (-78);
      shortArray0[2] = (short) (byte) (-78);
      shortArray0[3] = (short) (byte) (-78);
      shortArray0[4] = (short) (byte) (-78);
      shortArray0[5] = (short) (byte) (-78);
      shortArray0[6] = (short) (byte) (-78);
      shortArray0[7] = (short) (byte) (-78);
      shortArray0[8] = (short) (byte) (-78);
      ArrayUtils.swap(shortArray0, (-2145796699), (int) (short) (-78));
      assertArrayEquals(new short[] {(short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78)}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-78), (-1));
      assertArrayEquals(new short[] {(short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78)}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3078.50002143528;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-459.79199177);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1648.5481861);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {3078.50002143528, 0.0, (-459.79199177), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)84;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)99;
      ArrayUtils.swap(doubleArray0, 52, (-1));
      assertArrayEquals(new double[] {3078.50002143528, 0.0, (-459.79199177), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-2128), floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3078.50002143528, 0.0, (-459.79199177), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf(doubleArray1, (-1255.91), (int) (byte)99, (-459.79199177));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int1 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3078.50002143528, 0.0, (-459.79199177), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      int int2 = ArrayUtils.indexOf(byteArray0, (byte)98);
      assertEquals(2, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-52), (byte)98, (byte)84, (byte)0, (byte)0, (byte)84, (byte)99}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1), 2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-52)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-52), (byte)98, (byte)84, (byte)0, (byte)0, (byte)84, (byte)99}, byteArray0);
      assertEquals(2, byteArray1.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)95);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Double double0 = new Double(2862.4117683);
      assertNotNull(double0);
      assertEquals(2862.4117683, (double)double0, 0.01);
      
      Double double1 = new Double(3202.0);
      assertNotNull(double1);
      assertEquals(3202.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((byte)95);
      assertNotNull(double2);
      assertEquals(95.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      byte[] byteArray1 = ArrayUtils.insert(1771, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'r';
      charArray1[1] = 'r';
      charArray1[2] = 'r';
      charArray1[3] = 'r';
      charArray1[4] = 'r';
      charArray1[5] = 'r';
      charArray1[6] = 'r';
      charArray1[7] = 'r';
      charArray1[8] = 'r';
      ArrayUtils.shift(charArray1, (-150), 0, 1442);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r'}, charArray1);
      assertEquals(9, charArray1.length);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, 0L);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.insert((-2922), arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-74);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1829), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1829, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1629);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1629)}, shortArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1629)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(3, shortArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 102, (int) (short) (-1629));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (short)0, 844);
      assertNotSame(longArray0, longArray1);
      assertNotNull(bitSet0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1629);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1629)}, shortArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1629)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(3, shortArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-1629);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 102, (int) (short) (-1629));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1629L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (short)0, 844);
      assertNotSame(longArray0, longArray1);
      assertNotNull(bitSet0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-1629L), 0L, 0L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1629L);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, (-1629.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, (-1629.0)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.Long";
      stringArray0[2] = "java.lang.Integer";
      stringArray0[3] = "tC";
      stringArray0[4] = "&5cX^";
      stringArray0[5] = ">[k%x9iD";
      String[] stringArray1 = ArrayUtils.insert((int) 2, stringArray0, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(12, stringArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[2] = (long) (short)2;
      longArray0[5] = (long) (short)2;
      longArray0[7] = 0L;
      longArray0[8] = (long) (short)2;
      ArrayUtils.shift(longArray0, (-3243), Integer.MAX_VALUE, (-1018));
      assertArrayEquals(new long[] {0L, 2L, 0L, 0L, 2L, 0L, 0L, 2L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 2}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int0 = ArrayUtils.indexOf(intArray0, (int) (short)2);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 2}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-37.37366793792878);
      doubleArray0[3] = (-37.37366793792878);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-37.37366793792878), (-37.37366793792878), (-1.0), (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      char[] charArray0 = new char[3];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-24), (byte)36, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte) (-24));
      assertNotNull(short0);
      assertEquals((short) (-24), (short)short0);
      
      shortArray0[0] = short0;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1087.83F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)36;
      intArray0[1] = (int) (byte) (-24);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-24), 36}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 121;
      intArray0[2] = (-2524);
      ArrayUtils.swap(intArray0, (-356), (-356), 121);
      assertArrayEquals(new int[] {0, 121, (-2524)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, 32);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'B';
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-5);
      intArray0[1] = (int) (byte)56;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-5)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-5)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Character character0 = Character.valueOf('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      Character character1 = ArrayUtils.get((Character[]) null, 1755, character0);
      assertNotNull(character1);
      assertEquals('I', (char)character1);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 'B';
      longArray0[2] = (long) 'B';
      longArray0[3] = (long) 56;
      boolean[] booleanArray1 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 2788.600573564995;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (-1857.4);
      doubleArray0[4] = (double) (byte) (-5);
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) (-2524), 2185.8019828);
      assertEquals(3, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new double[] {0.0, 2788.600573564995, (-1.0), (-1857.4), (-5.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-68));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('x');
      assertNotNull(character0);
      assertEquals('x', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = '+';
      Character character1 = Character.valueOf('+');
      assertNotNull(character1);
      assertEquals('+', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertFalse(boolean0);
      assertEquals(2, characterArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(longArray0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'x';
      intArray0[1] = (int) (byte) (-68);
      intArray0[2] = (int) char0;
      int int0 = ArrayUtils.indexOf(intArray0, 729);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {120, (-68), 43}, intArray0);
      assertEquals(3, intArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-68);
      shortArray0[1] = (short) (byte) (-68);
      shortArray0[2] = (short)1611;
      shortArray0[3] = (short) (byte) (-68);
      shortArray0[4] = (short) (byte) (-68);
      shortArray0[5] = (short) (byte) (-68);
      shortArray0[6] = (short) (byte) (-68);
      shortArray0[7] = (short) (byte) (-68);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), (int) (short) (-68));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short) (-68), (short) (-68), (short)1611, (short) (-68), (short) (-68), (short) (-68), (short) (-68), (short) (-68), (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      ArrayUtils.swap(longArray1, (-1), 2373);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray2.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[3] = (float) 1351;
      floatArray0[4] = (-4261.7F);
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) 1351;
      floatArray0[4] = (float) (short)0;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 48;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = 2;
      MockRandom mockRandom0 = new MockRandom(4928L);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      IntStream intStream0 = mockRandom0.ints(1632L);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {0, 0, 0, 2, 48}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'w';
      charArray0[1] = 'c';
      charArray0[2] = ';';
      charArray0[3] = ':';
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'w';
      floatArray0[1] = (float) ';';
      floatArray0[2] = (float) ';';
      floatArray0[3] = (-615.0F);
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 'c';
      floatArray0[7] = 746.49F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-1018), (-1018), 234);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Float[] floatArray1 = new Float[6];
      floatArray1[0] = (Float) 0.0F;
      floatArray1[2] = (Float) 59.0F;
      floatArray1[3] = (Float) 59.0F;
      floatArray1[4] = (Float) 59.0F;
      floatArray1[5] = (Float) 119.0F;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 59.0F;
      doubleArray0[1] = (double) (float)floatArray1[4];
      doubleArray0[2] = (double) 234;
      doubleArray0[3] = (double) ':';
      doubleArray0[4] = (double) (float)floatArray1[3];
      doubleArray0[5] = (double) (float)floatArray1[2];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {59.0, 59.0, 234.0, 58.0, 59.0, 59.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[5];
      ArrayUtils.shift((boolean[]) null, 1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-87);
      ArrayUtils.shift(byteArray0, (int) (byte) (-104), (-2423), (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)104, (byte)66, (byte) (-66), (byte) (-60), (byte)0, (byte) (-104), (byte) (-87)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (-3409.7);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, (-3409.7)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      Float float0 = new Float((-328.0F));
      assertNotNull(float0);
      assertEquals((-328.0F), (float)float0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (Object) float0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, (-96), 0, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertEquals(2, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Character character0 = new Character('}');
      assertNotNull(character0);
      assertEquals('}', (char)character0);
      
      Character character1 = new Character('}');
      assertNotNull(character1);
      assertEquals('}', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = new Character('}');
      assertNotNull(character2);
      assertEquals('}', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      
      char[] charArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertNotSame(charArray1, charArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      
      boolean boolean2 = ArrayUtils.contains(arrayUtils0.EMPTY_SHORT_ARRAY, (short)7);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3078.50002143528;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-448.9114710917399);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1648.5481861);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {3078.50002143528, 0.0, (-448.9114710917399), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)84;
      byteArray0[6] = (byte)84;
      byte byte0 = (byte)99;
      byteArray0[7] = (byte)99;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)11, (int) (byte) (-52));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-52), (byte) (-52), (byte)84, (byte)0, (byte)0, (byte)84, (byte)99}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Byte byte1 = new Byte((byte)11);
      assertNotNull(byte1);
      assertEquals((byte)11, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, (int)  (-52), byte1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -52, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = Float.NaN;
      floatArray0[1] = 785.139F;
      floatArray0[2] = 1570.0F;
      floatArray0[3] = (-656.104F);
      floatArray0[5] = 35.1F;
      floatArray0[6] = 35.1F;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F, 785.139F, 1570.0F, (-656.104F), 0.0F, 35.1F, 35.1F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(map0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)18;
      shortArray0[1] = (short) (-405);
      shortArray0[3] = (short) (-2333);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-1610);
      longArray0[1] = (long) (short)18;
      longArray0[2] = 35L;
      longArray0[3] = (long) (short) (-2333);
      longArray0[4] = (long) (short)18;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (short) (-1610), 90);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {(-1610L), 18L, 35L, (-2333L), 18L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Map<Object, Object> map1 = ArrayUtils.toMap(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(map1, map0);
      assertNotNull(map1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(map1.equals((Object)map0));
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)18, (short) (-405), (short)0, (short) (-2333)}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 10;
      MutableInt mutableInt0 = new MutableInt(10);
      assertNotNull(mutableInt0);
      assertEquals("10", mutableInt0.toString());
      assertEquals(10, (int)mutableInt0.toInteger());
      assertEquals((byte)10, mutableInt0.byteValue());
      assertEquals(10, mutableInt0.intValue());
      assertEquals(10.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)10, mutableInt0.shortValue());
      assertEquals(10.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(10L, mutableInt0.longValue());
      assertEquals(10, (int)mutableInt0.getValue());
      
      Integer integer0 = mutableInt0.getValue();
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      assertEquals("10", mutableInt0.toString());
      assertEquals(10, (int)mutableInt0.toInteger());
      assertEquals((byte)10, mutableInt0.byteValue());
      assertEquals(10, mutableInt0.intValue());
      assertEquals(10.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)10, mutableInt0.shortValue());
      assertEquals(10.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(10L, mutableInt0.longValue());
      assertEquals(10, (int)mutableInt0.getValue());
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertNotNull(integer1);
      assertEquals(10, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertNotNull(integer2);
      assertEquals(10, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      
      integerArray0[3] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {10, 10, 10, 10}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)92;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)45, (-1250));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)18, (byte)94, (byte)2, (byte)55, (byte)74, (byte) (-43), (byte)45, (byte)2, (byte)92}, byteArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, byteArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf(false);
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean("");
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      
      booleanArray0[5] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray1));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 2447);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'X';
      charArray0[2] = 'B';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ';');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'p', 'X', 'B'}, charArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, charArray0.length);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Double double0 = new Double(2447);
      assertNotNull(double0);
      assertEquals(2447.0, (double)double0, 0.01);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) stringArray0, (Object) double0, 2447);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[1] = 939;
      intArray0[2] = (int) 'X';
      intArray0[3] = (int) 'X';
      BitSet bitSet2 = ArrayUtils.indexesOf(intArray0, 4582, 2447);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertNotNull(bitSet2);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertArrayEquals(new int[] {0, 939, 88, 88}, intArray0);
      assertEquals(0, bitSet2.cardinality());
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertEquals(4, intArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, (-1), 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 939, 88, 88}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 939, 15);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'p', 'X', 'B'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2447;
      floatArray0[2] = 157.5383F;
      ArrayUtils.shift(floatArray0, 88);
      assertArrayEquals(new float[] {157.5383F, 0.0F, 2447.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = (Character) 'B';
      characterArray0[1] = (Character) 'X';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 88;
      doubleArray0[1] = (double) 157.5383F;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {88.0, 157.53829956054688}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 392.0632F;
      floatArray0[1] = (-2469.3F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-2469.3F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-952.8F);
      floatArray0[8] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {392.0632F, (-2469.3F), (-1.0F), (-2469.3F), 0.0F, (-1.0F), (-1.0F), (-952.8F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)32, (int) (byte)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte) (-1), (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-2469.3F));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[0];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) doubleArray2, (Object[]) doubleArray2);
      assertNotSame(doubleArray2, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {392.0632F, (-2469.3F), (-1.0F), (-2469.3F), 0.0F, (-1.0F), (-1.0F), (-952.8F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(17, floatArray2.length);
      assertEquals(18, floatArray1.length);
      
      Byte[] byteArray2 = new Byte[2];
      byteArray2[0] = (Byte) (byte) (-1);
      byteArray2[1] = (Byte) (byte) (-1);
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray3.length);
      
      Character[] characterArray0 = new Character[8];
      Character character0 = new Character('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('.');
      assertNotNull(character1);
      assertEquals('.', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('[');
      assertNotNull(character2);
      assertEquals('[', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('>');
      assertNotNull(character3);
      assertEquals('>', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('@');
      assertNotNull(character4);
      assertEquals('@', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('[');
      assertNotNull(character5);
      assertEquals('[', (char)character5);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      
      characterArray0[5] = character5;
      Character character6 = new Character('@');
      assertNotNull(character6);
      assertEquals('@', (char)character6);
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)character4));
      
      characterArray0[6] = character6;
      Character character7 = new Character((char) character0);
      assertNotNull(character7);
      assertEquals('B', (char)character7);
      assertFalse(character7.equals((Object)character3));
      assertTrue(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character0.equals((Object)character5));
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character6));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)character2));
      
      characterArray0[7] = character7;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(8, characterArray0.length);
      assertEquals(8, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)66;
      shortArray0[2] = (short)99;
      ArrayUtils.swap(shortArray0, 1393, (int) (short)66, (int) (short)99);
      assertArrayEquals(new short[] {(short)0, (short)66, (short)99}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)6;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)6, (byte)0, (byte)6}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)0, (byte)6, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)6;
      ArrayUtils.swap(byteArray1, (-200), 0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)6}, byteArray1);
      assertEquals(1, byteArray1.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)66, (short)99}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (short)99;
      doubleArray0[2] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)0, (int) (short)0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 99.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (byte)6;
      objectArray0[2] = (Object) 0.0;
      boolean boolean1 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, objectArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (short)1692, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = new boolean[5];
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurrences(booleanArray2, true);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray2));
      assertEquals(0, booleanArray3.length);
      assertEquals(5, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 100);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) 100;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      floatArray0[8] = (float) (byte)0;
      ArrayUtils.swap(floatArray0, 6230, 6230, 1262);
      assertArrayEquals(new float[] {0.0F, 100.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1262;
      longArray0[1] = (long) 6230;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 1262);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1262L, 6230L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Character character0 = new Character('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '?');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.insert((-1), booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      ArrayUtils.swap(floatArray0, (-1), (-1), (-1));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[1] = 'L';
      charArray0[2] = 'J';
      charArray0[3] = 'L';
      charArray0[4] = 'L';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', 'L', 'J', 'L', 'L'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'L', 'J', 'L', 'L'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'J';
      intArray0[2] = (int) 'L';
      intArray0[3] = (int) 'L';
      intArray0[4] = (int) 'L';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-2449.0723F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2449.0723F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray1, 'E');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', 'L', 'J', 'L', 'L'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'L', 'J', 'L', 'L'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert((-3540), doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-849.632));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-52);
      intArray0[1] = (int) (byte)98;
      intArray0[2] = (int) (byte) (-52);
      intArray0[3] = (-1);
      intArray0[4] = (int) (byte)84;
      intArray0[5] = (-1);
      intArray0[6] = (int) (byte) (-52);
      intArray0[7] = (int) (byte)98;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 1, 1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {(-52), 98, (-52), (-1), 84, (-1), (-52), 98}, intArray0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (double) (-52);
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) 84;
      doubleArray1[4] = (double) (byte)98;
      doubleArray1[5] = (double) (-1);
      int int2 = ArrayUtils.lastIndexOf(doubleArray1, (-2243.05881210943), 573);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-52.0), (-1.0), 84.0, 98.0, (-1.0)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-52);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) 84;
      integerArray0[4] = (Integer) 98;
      integerArray0[5] = (Integer) (-52);
      integerArray0[6] = (Integer) (-1);
      integerArray0[7] = (Integer) (-52);
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(573);
      assertNotNull(long0);
      assertEquals(573L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((byte)98);
      assertNotNull(long1);
      assertEquals(98L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((long) integerArray0[0]);
      assertNotNull(long2);
      assertEquals((-52L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(8, integerArray0.length);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[0]);
      assertNotNull(long3);
      assertEquals(573L, (long)long3);
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals(7, longArray0.length);
      
      longArray0[3] = long3;
      Long long4 = new Long((byte) (-52));
      assertNotNull(long4);
      assertEquals((-52L), (long)long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      
      longArray0[4] = long4;
      Long long5 = new Long((-1));
      assertNotNull(long5);
      assertEquals((-1L), (long)long5);
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      
      longArray0[5] = long5;
      Long long6 = new Long((-1));
      assertNotNull(long6);
      assertEquals((-1L), (long)long6);
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long0));
      assertTrue(long6.equals((Object)long5));
      
      longArray0[6] = long6;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, (int) integerArray0[4], (-5010));
      assertSame(integerArray0, integerArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(8, integerArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      Character character0 = new Character('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '?');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (double) '?';
      doubleArray0[2] = (double) '?';
      doubleArray0[3] = (double) '?';
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) '?';
      doubleArray0[6] = (double) 1.0F;
      doubleArray0[7] = (double) 1.0F;
      doubleArray0[8] = (double) '?';
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.7, 63.0, 63.0, 63.0, 1.0, 63.0, 1.0, 1.0, 63.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-57), 2407);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[15];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)87, 5);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(15, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2407;
      longArray0[1] = (long) (byte)87;
      longArray0[2] = (long) 2407;
      longArray0[3] = (long) (byte)87;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {2407L, 87L, 2407L, 87L}, longArray0);
      assertEquals(4, longArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2407;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-66);
      floatArray0[3] = (float) 87L;
      floatArray0[4] = (float) 156;
      floatArray0[5] = (float) (byte)87;
      floatArray0[6] = (float) 2407;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {2407.0F, (-1.0F), (-66.0F), 87.0F, 156.0F, 87.0F, 2407.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)87;
      shortArray0[1] = (short) (byte)47;
      shortArray0[1] = (short)48;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)87, (short)48, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)87, (short)48}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      boolean boolean2 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new float[] {2407.0F, (-1.0F), (-66.0F), 87.0F, 156.0F, 87.0F, 2407.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      boolean boolean3 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new long[] {2407L, 87L, 2407L, 87L}, longArray0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'O';
      charArray0[2] = '?';
      charArray0[3] = 'w';
      charArray0[4] = 'r';
      charArray0[5] = '^';
      charArray0[6] = '~';
      charArray0[7] = '|';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-590), (-590));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'Y', 'O', '?', 'w', 'r', '^', '~', '|'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      charArray0[6] = 'k';
      charArray0[7] = 'k';
      charArray0[8] = 'k';
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'k';
      longArray0[1] = (long) 'k';
      longArray0[2] = (long) 'k';
      longArray0[3] = (long) 'k';
      longArray0[4] = (long) 'k';
      longArray0[5] = (long) 'k';
      longArray0[6] = (long) 'k';
      ArrayUtils.swap(longArray0, 77, 77, 77);
      assertArrayEquals(new long[] {107L, 107L, 107L, 107L, 107L, 107L, 107L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-775);
      intArray0[1] = 1763;
      intArray0[3] = (-3135);
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      byte[] byteArray0 = new byte[8];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)7, (-1653));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Float float0 = new Float((-2355.3412085));
      assertNotNull(float0);
      assertEquals((-2355.3413F), (float)float0, 0.01F);
      
      int int1 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      doubleArray0[1] = double1;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)3;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)3;
      shortArray0[5] = (short)3;
      shortArray0[6] = (short)3;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1512));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3, (short)3, (short)3, (short)1, (short)3, (short)3, (short)3}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1512), (short)3, (short)3, (short)3, (short)1, (short)3, (short)3, (short)3}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '.';
      int int0 = 2321;
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 2321, 'r');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2321, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '\u0000';
      charArray0[2] = '-';
      charArray0[3] = 'd';
      charArray0[4] = '-';
      charArray0[5] = '[';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) '[';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 91}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 91, 'd');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BYTE_ARRAY, (-2993));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Float float0 = ArrayUtils.get(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (-634));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNull(float0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-101);
      intArray0[1] = (-101);
      intArray0[2] = (-101);
      intArray0[4] = (int) (short)1196;
      intArray0[5] = (-101);
      ArrayUtils.swap(intArray0, (-101), (-101));
      assertArrayEquals(new int[] {(-101), (-101), (-101), 0, 1196, (-101)}, intArray0);
      assertEquals(6, intArray0.length);
      
      intArray0[1] = (-101);
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (-4502L), (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      
      short[] shortArray0 = new short[21];
      shortArray0[0] = (short)1196;
      shortArray0[1] = (short)1196;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-101), 69);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(21, shortArray1.length);
      assertEquals(21, shortArray0.length);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-101);
      intArray0[1] = (-101);
      intArray0[2] = (-101);
      intArray0[4] = (int) (short)1196;
      intArray0[5] = (-101);
      ArrayUtils.swap(intArray0, (-101), (-101));
      assertArrayEquals(new int[] {(-101), (-101), (-101), 0, 1196, (-101)}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      intArray0[1] = (-101);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (-4502L), (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1196;
      shortArray0[1] = (short)1196;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-101), 69);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1196, (short)1196}, shortArray0);
      assertArrayEquals(new short[] {(short)1196, (short)1196}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      doubleArray0[1] = double1;
      Long long0 = new Long((-1267L));
      assertNotNull(long0);
      assertEquals((-1267L), (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)21;
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (byte)1);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.subarray(intArray0, Integer.MAX_VALUE, 57);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, 156);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(bitSet0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = 'p';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {';', 'p'}, charArray0);
      assertArrayEquals(new char[] {';', 'p'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[3] = (short)120;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-516);
      shortArray0[7] = (short) (-15941);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, (-3583));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)0, (short)120, (short) (-1), (short) (-1), (short) (-516), (short) (-15941)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)120, (int) (short)120);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = ArrayUtils.indexOf((double[]) null, 615.23175122);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.subarray(intArray0, Integer.MAX_VALUE, 57);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 57;
      floatArray0[1] = (float) 57;
      floatArray0[2] = (float) 57;
      floatArray0[3] = (float) Integer.MAX_VALUE;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (float) Integer.MAX_VALUE;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {57.0F, 57.0F, 2.14748365E9F, Float.NaN, 2.14748365E9F, 57.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-64)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) (-3493.0F);
      doubleArray0[3] = (double) (byte) (-64);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-64), (int) (byte) (-64), 0.0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {Double.NaN, 2.147483647E9, (-3493.0), (-64.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Boolean boolean0 = Boolean.valueOf("A`=M~iH!");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) boolean0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 2490);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float[] floatArray0 = new float[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 4);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-104);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) 4);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, 1645.631F);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(2, floatArray0.length);
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertEquals(5, booleanArray2.length);
      assertEquals(1, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      ArrayUtils.shift(doubleArray0, (int) (byte) (-16));
      assertArrayEquals(new double[] {4.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 4);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-104);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) 4);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, 1645.631F);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals(2, floatArray0.length);
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[3] = true;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertEquals(5, booleanArray2.length);
      assertEquals(1, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      ArrayUtils.shift(doubleArray0, (int) (byte) (-16));
      assertArrayEquals(new double[] {4.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = 800.8597F;
      floatArray0[2] = 1570.0F;
      floatArray0[3] = (-656.104F);
      floatArray0[4] = 1326.018F;
      floatArray0[5] = 1570.0F;
      floatArray0[6] = (-976.943F);
      int[] intArray0 = new int[8];
      intArray0[4] = (int) (short) (-405);
      intArray0[6] = (-1);
      ArrayUtils.swap(intArray0, (int) (short) (-1610), (int) (short) (-2340));
      assertArrayEquals(new int[] {0, 0, 0, 0, (-405), 0, (-1), 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '$');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-32);
      ArrayUtils.shift(byteArray0, (int) (byte) (-32));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-32)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2214.7F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 800.8597F, 1570.0F, (-656.104F), 1326.018F, 1570.0F, (-976.943F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 1821L;
      longArray0[2] = 1821L;
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1629.0F);
      floatArray0[1] = (float) 1821L;
      floatArray0[2] = (float) 348;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, Float.NaN, 348);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1629.0F), 1821.0F, 348.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3261;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)258;
      shortArray0[3] = (short)2;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.Long";
      stringArray0[1] = "java.lang.Integer";
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(shortArray0, (int) (short)3, (-738), 18688);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)3261, (short)2, (short)258, (short)2, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ArrayUtils.swap((char[]) null, 1136, 2256, 1136);
      Short short0 = new Short((short) (-1073));
      assertNotNull(short0);
      assertEquals((short) (-1073), (short)short0);
      
      Short short1 = new Short((short)2792);
      assertNotNull(short1);
      assertEquals((short)2792, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-1111));
      assertNotNull(short2);
      assertEquals((short) (-1111), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-29));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2256;
      doubleArray0[1] = (double) (short) (-1111);
      doubleArray0[2] = (double) (short) (-1073);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (short)2792;
      ArrayUtils.shift(doubleArray0, (int) (short) (-1073), 2256, (-1727));
      assertArrayEquals(new double[] {2792.0, 2256.0, (-1111.0), (-1073.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      ArrayUtils.reverse((Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert((-1), (double[]) null, doubleArray0);
      assertNull(doubleArray1);
      assertArrayEquals(new double[] {2792.0, 2256.0, (-1111.0), (-1073.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3078.50002143528;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-459.79199177);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1648.5481861);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {3078.50002143528, 0.0, (-459.79199177), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)84;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)99;
      int[] intArray0 = new int[0];
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)98, (int) (byte)99);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, (-1));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new double[] {3078.50002143528, 0.0, (-459.79199177), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      int[] intArray0 = new int[1];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, 4939);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)11, (byte)11}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      Long long0 = new Long((byte)11);
      assertNotNull(long0);
      assertEquals(11L, (long)long0);
      
      Long[] longArray1 = ArrayUtils.removeAllOccurences((Long[]) null, long0);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      AbstractMap.SimpleEntry<Float, String>[] abstractMap_SimpleEntryArray0 = ArrayUtils.addAll((AbstractMap.SimpleEntry<Float, String>[]) null, (AbstractMap.SimpleEntry<Float, String>[]) null);
      assertNull(abstractMap_SimpleEntryArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 492.166083;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 848.062271;
      doubleArray0[4] = 63.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 88, 3.0);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {492.166083, 1.0, 1.0, 848.062271, 63.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 88;
      intArray0[1] = 88;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 88);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {88, 88}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = 'A';
      charArray0[2] = '6';
      charArray0[3] = 'F';
      charArray0[4] = 'E';
      charArray0[5] = 'K';
      charArray0[6] = '+';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'&', 'A', '6', 'F', 'E', 'K', '+'}, charArray1);
      assertArrayEquals(new char[] {'&', 'A', '6', 'F', 'E', 'K', '+'}, charArray0);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'A';
      longArray0[1] = (long) 'F';
      longArray0[2] = (long) 'E';
      long[] longArray1 = ArrayUtils.add(longArray0, (long) 2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {65L, 70L, 69L}, longArray0);
      assertArrayEquals(new long[] {65L, 70L, 69L, 2L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-1924L);
      longArray0[1] = 426L;
      longArray0[2] = 1L;
      longArray0[3] = 2147483647L;
      longArray0[4] = (-561L);
      longArray0[5] = 2294L;
      longArray0[6] = 9L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1924L), 426L, 1L, 2147483647L, (-561L), 2294L, 9L}, longArray0);
      assertArrayEquals(new long[] {(-1924L), 426L, 2147483647L, (-561L), 2294L, 9L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(6, longArray1.length);
      
      ArrayUtils.reverse(longArray0, (-2873), (-2873));
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-1924L), 426L, 1L, 2147483647L, (-561L), 2294L, 9L}, longArray0);
      assertEquals(7, longArray0.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = Short.valueOf((short) (-1120));
      assertNotNull(short0);
      assertEquals((short) (-1120), (short)short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.addFirst(shortArray0, shortArray0[0]);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-57);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-57), 2407);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[15];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)87, 5);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(15, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2407;
      longArray0[1] = (long) (byte)87;
      longArray0[2] = (long) 2407;
      longArray0[3] = (long) (byte)87;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {2407L, 87L, 2407L, 87L}, longArray0);
      assertEquals(4, longArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2407;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-66);
      floatArray0[3] = (float) 87L;
      floatArray0[4] = (float) 156;
      floatArray0[5] = (float) (byte)87;
      floatArray0[6] = (float) 2407;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {2407.0F, (-1.0F), (-66.0F), 87.0F, 156.0F, 87.0F, 2407.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)87;
      shortArray0[1] = (short) (byte)47;
      shortArray0[1] = (short)48;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)87, (short)48, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)87, (short)48}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      boolean boolean2 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {2407.0F, (-1.0F), (-66.0F), 87.0F, 156.0F, 87.0F, 2407.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2719), shortArray0, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2719, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-775);
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(597L);
      assertNotNull(long0);
      assertEquals(597L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-508L));
      assertNotNull(long1);
      assertEquals((-508L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = Long.getLong(",86^K*g8/*H", (long) longArray0[1]);
      assertNotNull(long2);
      assertEquals((-508L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals(3, longArray0.length);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {597L, (-508L), (-508L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      char char0 = 'O';
      Character character0 = Character.valueOf('O');
      assertNotNull(character0);
      assertEquals('O', (char)character0);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertTrue(boolean0);
      assertEquals(5, characterArray0.length);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-775), 18);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      charArray0[5] = char0;
      charArray0[6] = char0;
      charArray0[7] = 'u';
      charArray0[8] = char0;
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'*', 'O', 'O', 'O', 'O', 'O', 'O', 'u', 'O'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 1, 1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = true;
      booleanArray1[5] = false;
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray2));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertNotSame(shortArray1, shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(2);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 1351);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, 3315L);
      assertNull(longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-2274);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)3;
      shortArray0[4] = (short)18;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)1, (short) (-2274), (short) (-1), (short)3, (short)18}, shortArray0);
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(5, shortArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)18;
      floatArray0[1] = (float) (short) (-2274);
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) (short)18;
      floatArray0[4] = (float) (short) (-2274);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-2274.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {18.0F, (-2274.0F), (-1.0F), 18.0F, (-2274.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2274.0F), 18.0F, (-2274.0F), (-1.0F), 18.0F, (-2274.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)15;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)95, (-4109));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)64, (byte)95, (byte) (-56), (byte) (-1), (byte)3, (byte)15}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((double) (byte)6);
      assertNotNull(float0);
      assertEquals(6.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-1));
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[1]);
      assertNotNull(float2);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      floatArray0[2] = float2;
      Float float3 = new Float(33.4616F);
      assertNotNull(float3);
      assertEquals(33.4616F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      floatArray0[3] = float3;
      Float[] floatArray1 = ArrayUtils.insert(825, floatArray0, arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)6, (-1450));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1450));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1450)}, intArray0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), (int) (byte) (-108), (-12));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_SHORT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.insert(2478, arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertNotNull(mutableInt0);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals("-1", mutableInt1.toString());
      
      mutableIntArray0[1] = mutableInt1;
      Comparator<MutableInt> comparator0 = (Comparator<MutableInt>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_STRING_ARRAY, arrayUtils0.EMPTY_STRING_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_LONG_ARRAY, (-1), (-1), Integer.MAX_VALUE);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-101);
      intArray0[1] = (-101);
      intArray0[2] = (-101);
      intArray0[4] = (int) (short) (-4452);
      intArray0[5] = (-101);
      ArrayUtils.swap(intArray0, (-101), (-101));
      assertArrayEquals(new int[] {(-101), (-101), (-101), 0, (-4452), (-101)}, intArray0);
      assertEquals(6, intArray0.length);
      
      intArray0[1] = (-101);
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (-4502L), (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4452);
      shortArray0[1] = (short) (-4452);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-101), 69);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-4452), (short) (-4452)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-4452), (short) (-4452)}, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null, (-101));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Character character0 = new Character('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-101);
      intArray0[1] = (-101);
      intArray0[2] = (-101);
      intArray0[3] = (int) '?';
      intArray0[4] = (int) (short)1196;
      intArray0[5] = (-101);
      ArrayUtils.swap(intArray0, (-101), (-101));
      assertArrayEquals(new int[] {(-101), (-101), (-101), 63, 1196, (-101)}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-101);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) (-101));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-101.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-101.0), (-101.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (-4502L), (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'?', '?', '?', '?'}, charArray0);
      assertArrayEquals(new char[] {'?', '?', '?', '?', '?', '?', '?', '?'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-68));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('x');
      assertNotNull(character0);
      assertEquals('x', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = '+';
      Character character1 = Character.valueOf('+');
      assertNotNull(character1);
      assertEquals('+', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertFalse(boolean0);
      assertEquals(2, characterArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(longArray0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'x';
      intArray0[1] = (int) (byte) (-68);
      intArray0[2] = (int) char0;
      int int0 = ArrayUtils.indexOf(intArray0, 729);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {120, (-68), 43}, intArray0);
      assertEquals(3, intArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-68);
      shortArray0[1] = (short) (byte) (-68);
      shortArray0[2] = (short)1611;
      shortArray0[3] = (short) (byte) (-68);
      shortArray0[4] = (short) (byte) (-68);
      shortArray0[5] = (short) (byte) (-68);
      shortArray0[6] = (short) (byte) (-68);
      shortArray0[7] = (short) (byte) (-68);
      shortArray0[8] = (short) (byte) (-68);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), (int) (short) (-68));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short) (-68), (short) (-68), (short)1611, (short) (-68), (short) (-68), (short) (-68), (short) (-68), (short) (-68), (short) (-68)}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3014.295F);
      floatArray0[1] = 3898.0F;
      floatArray0[2] = (-1189.0F);
      floatArray0[3] = 4994.1F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 2130.2886F;
      int int0 = ArrayUtils.indexOf(floatArray0, 2130.2886F, 4);
      assertEquals(6, int0);
      assertArrayEquals(new float[] {(-3014.295F), 3898.0F, (-1189.0F), 4994.1F, 0.0F, 1.0F, 2130.2886F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      ArrayUtils.shift((long[]) null, 6);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)100;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1415);
      shortArray0[3] = (short)5044;
      shortArray0[4] = (short)4259;
      shortArray0[5] = (short)2881;
      shortArray0[6] = (short)10;
      shortArray0[7] = (short)49;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)100, (short) (-1), (short) (-1415), (short)5044, (short)4259, (short)2881, (short)10, (short)49}, shortArray1);
      assertArrayEquals(new short[] {(short)100, (short) (-1), (short) (-1415), (short)5044, (short)4259, (short)2881, (short)10, (short)49}, shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_SHORT_ARRAY, (short)1261);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      long[] longArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (-1738L));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, 2, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) doubleArray0, (-2146526683), (-1955846720), (-1955846720));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = 2338L;
      longArray0[2] = (-356L);
      longArray0[3] = 251L;
      longArray0[4] = 1731L;
      longArray0[5] = 0L;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 1731L, 251L, (-356L), 2338L, 1L}, longArray0);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2637);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2637)}, intArray0);
      assertArrayEquals(new int[] {(-2637)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 251L;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 2338L;
      objectArray0[3] = (Object) 1L;
      objectArray0[4] = (Object) 1731L;
      objectArray0[5] = (Object) 1731L;
      objectArray0[6] = (Object) 1L;
      objectArray0[7] = (Object) (-2637);
      ArrayUtils.shift(objectArray0, (-2637), (-503), (-779));
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)112);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)112;
      floatArray0[1] = 263.5164F;
      floatArray0[2] = (float) (byte)75;
      floatArray0[3] = (float) (byte)112;
      floatArray0[4] = 943.78235F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {112.0F, 263.5164F, 75.0F, 112.0F, 943.78235F}, floatArray0, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.shift(floatArray0, (int) (byte)0, 38, (-1073741824));
      assertArrayEquals(new float[] {943.78235F, 112.0F, 263.5164F, 75.0F, 112.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-57), 2407);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      Long long0 = new Long(2407);
      assertNotNull(long0);
      assertEquals(2407L, (long)long0);
      
      Long long1 = Long.getLong("", (long) (-1));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[9];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      longArray0[5] = long0;
      longArray0[6] = long1;
      Long long2 = new Long(1547L);
      assertNotNull(long2);
      assertEquals(1547L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[7] = long2;
      longArray0[8] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2407L, 2407L, 2407L, 2407L, 2407L, 2407L, (-1L), 1547L, (-1L)}, longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      
      Character character0 = Character.valueOf('O');
      assertNotNull(character0);
      assertEquals('O', (char)character0);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      characterArray0[7] = character0;
      characterArray0[8] = character0;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertTrue(boolean0);
      assertEquals(9, characterArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      float[] floatArray0 = new float[4];
      floatArray0[1] = (-791.0F);
      floatArray0[2] = 2037.918F;
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 65);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = ';';
      charArray0[2] = 'p';
      charArray0[3] = ';';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'?', ';', 'p', ';'}, charArray0);
      assertArrayEquals(new char[] {'?', ';', 'p', ';'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-516);
      shortArray0[1] = (short)120;
      shortArray0[2] = (short)120;
      shortArray0[3] = (short)648;
      shortArray0[4] = (short) (-516);
      shortArray0[5] = (short)21845;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)648, 2080164414);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-516), (short)120, (short)120, (short)648, (short) (-516), (short)21845}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.subarray(intArray0, Integer.MAX_VALUE, 57);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 57;
      floatArray0[1] = (float) 57;
      floatArray0[2] = (float) 57;
      floatArray0[3] = (float) Integer.MAX_VALUE;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (float) Integer.MAX_VALUE;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {57.0F, 57.0F, 2.14748365E9F, Float.NaN, 2.14748365E9F, 57.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-64)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) (-3493.0F);
      doubleArray0[3] = (double) (byte) (-64);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-64), (int) (byte) (-64), 0.0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, (-3493.0), (-64.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Boolean boolean0 = Boolean.valueOf("A`=M~iH!");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) boolean0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[4] = 12L;
      int[] intArray0 = new int[2];
      intArray0[0] = (-2806);
      intArray0[1] = 0;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 12L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 12L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = ArrayUtils.get(booleanArray0, (-2806));
      assertNull(boolean2);
      assertEquals(1, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = boolean1;
      booleanArray1[1] = null;
      booleanArray1[2] = boolean1;
      booleanArray1[3] = null;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
      assertEquals(4, booleanArray2.length);
      assertEquals(4, booleanArray1.length);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-2806);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (double) (-2806);
      doubleArray1[3] = (double) 12L;
      doubleArray1[4] = (double) 12L;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0L;
      doubleArray1[7] = (double) doubleArray0[0];
      doubleArray1[8] = (double) 12L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 0.0, (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-2806.0), (-1.0), (-2806.0), 12.0, 12.0, 0.0, 0.0, 0.0, 12.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[4] = 12L;
      int[] intArray0 = new int[2];
      intArray0[0] = (-2806);
      intArray0[1] = 0;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 12L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 12L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[0] = boolean1;
      Boolean[] booleanArray1 = new Boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = boolean1;
      booleanArray1[2] = boolean1;
      booleanArray1[3] = boolean1;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
      assertEquals(4, booleanArray2.length);
      assertEquals(4, booleanArray1.length);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-2806);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (double) (-2806);
      doubleArray1[3] = (double) 12L;
      doubleArray1[4] = (double) 12L;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0L;
      doubleArray1[7] = (double) doubleArray0[0];
      doubleArray1[8] = (double) 12L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 0.0, (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-2806.0), (-1.0), (-2806.0), 12.0, 12.0, 0.0, 0.0, 0.0, 12.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-775);
      Long long0 = new Long(597L);
      assertNotNull(long0);
      assertEquals(597L, (long)long0);
      
      Long long1 = new Long((-508L));
      assertNotNull(long1);
      assertEquals((-508L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      char char0 = 'O';
      Character character0 = Character.valueOf('O');
      assertNotNull(character0);
      assertEquals('O', (char)character0);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertTrue(boolean0);
      assertEquals(5, characterArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = char0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1202;
      shortArray0[1] = (short)16;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1513), (int) (short)16);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1202, (short)16}, shortArray1);
      assertArrayEquals(new short[] {(short)1202, (short)16}, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-775), 0, 0, 0, 0}, intArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'O';
      floatArray0[1] = (float) (-775);
      floatArray0[2] = (float) (short)1202;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {79.0F, (-775.0F), 1202.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.swap((long[]) null, (int) char0, (int) char0, (int) char0);
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2407, 872);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'O', '\u0000'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(2, charArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) characterArray0);
      assertSame(characterArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, objectArray0.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, 597L);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.removeElement((long[]) null, 2653L);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2163;
      intArray0[1] = 121;
      intArray0[2] = (-2524);
      ArrayUtils.swap(intArray0, (-356), (-356), 121);
      assertArrayEquals(new int[] {2163, 121, (-2524)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, 32);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'B';
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-5);
      intArray0[1] = (int) (byte)56;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-5)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-5)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Character character0 = Character.valueOf('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      Character character1 = ArrayUtils.get((Character[]) null, 1755, character0);
      assertNotNull(character1);
      assertEquals('I', (char)character1);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 'B';
      longArray0[2] = 118L;
      longArray0[3] = (long) 56;
      boolean[] booleanArray1 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("', is neither of type Map.Entry nor an Array");
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      
      booleanArray0[5] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 34;
      intArray0[1] = (-2647);
      intArray0[2] = (-2018);
      intArray0[3] = 3378;
      intArray0[4] = 55;
      intArray0[5] = (-1425);
      boolean boolean6 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean6);
      assertArrayEquals(new int[] {34, (-2647), (-2018), 3378, 55, (-1425)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.insert((-1), booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      ArrayUtils.swap(floatArray0, (-1), (-1), (-1));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[1] = 'L';
      charArray0[2] = 'J';
      charArray0[3] = '';
      charArray0[4] = '';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', 'L', 'J', '', ''}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'L', 'J', '', ''}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'J';
      intArray0[1] = (int) '\u0000';
      intArray0[2] = (int) '';
      intArray0[3] = 92;
      intArray0[4] = (int) 'L';
      intArray0[5] = (int) '\u0000';
      MutableInt mutableInt0 = new MutableInt((Number) 92);
      assertNotNull(mutableInt0);
      assertEquals(92.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)92, mutableInt0.shortValue());
      assertEquals(92.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("92", mutableInt0.toString());
      assertEquals(92L, mutableInt0.longValue());
      assertEquals(92, mutableInt0.intValue());
      assertEquals(92, (int)mutableInt0.toInteger());
      assertEquals(92, (int)mutableInt0.getValue());
      assertEquals((byte)92, mutableInt0.byteValue());
      
      Comparator<MutableInt> comparator0 = (Comparator<MutableInt>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((MutableInt[]) null, comparator0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '';
      longArray0[1] = (long) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, 4830);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {127L, (-1L)}, longArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) 74;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) 92;
      doubleArray0[7] = (double) 76;
      ArrayUtils.reverse(doubleArray0, 0, 1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 74.0, 0.0, (-1.0), (-1.0), 92.0, 76.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1499.0F);
      floatArray0[1] = (-1499.0F);
      long[] longArray0 = new long[6];
      longArray0[0] = 7L;
      longArray0[1] = 9L;
      Double double0 = new Double(7L);
      assertNotNull(double0);
      assertEquals(7.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Boolean boolean0 = Boolean.valueOf("Arguments cannot both be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      String[] stringArray0 = new String[7];
      stringArray0[5] = "Arguments cannot both be null";
      stringArray0[1] = ", Length: ";
      stringArray0[2] = ", Length: ";
      stringArray0[3] = "Arguments cannot both be null";
      stringArray0[4] = "Arguments cannot both be null";
      stringArray0[5] = "org.apache.commons.lang3.builder.HashCodeBuilder";
      stringArray0[6] = "Arguments cannot both be null";
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "Arguments cannot both be null");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(7, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (Object) null, 1423);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertNotSame(bitSet1, bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      
      boolean boolean1 = ArrayUtils.isSameType(boolean0, object0);
      assertTrue(boolean1);
      
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)85;
      shortArray0[1] = (short) (-647);
      shortArray0[2] = (short) (-2557);
      shortArray0[3] = (short) (-1449);
      shortArray0[4] = (short)4830;
      shortArray0[5] = (short)277;
      shortArray0[6] = (short) (-15465);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-15465), (int) (short)4830);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)85, (short) (-647), (short) (-2557), (short) (-1449), (short)4830, (short)277, (short) (-15465)}, shortArray0);
      assertArrayEquals(new short[] {(short)85, (short) (-647), (short) (-2557), (short) (-1449), (short)4830, (short)277, (short) (-15465)}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 2447);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'X';
      charArray0[2] = 'B';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ';');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'p', 'X', 'B'}, charArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, charArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.lang3.builder.HashCodeBuilder";
      stringArray0[1] = "org.apache.commons.lang3.builder.HashCodeBuilder";
      stringArray0[2] = "org.apache.commons.lang3.builder.HashCodeBuilder";
      String[] stringArray1 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      
      Double double0 = new Double(2447);
      assertNotNull(double0);
      assertEquals(2447.0, (double)double0, 0.01);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) stringArray1, (Object) double0, 2447);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, stringArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'X';
      intArray0[1] = 939;
      intArray0[2] = (int) 'X';
      intArray0[3] = (int) 'X';
      BitSet bitSet2 = ArrayUtils.indexesOf(intArray0, 4582, 2447);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertNotNull(bitSet2);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertArrayEquals(new int[] {88, 939, 88, 88}, intArray0);
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertEquals(64, bitSet2.size());
      assertTrue(bitSet2.isEmpty());
      assertEquals(4, intArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, (-1), 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {88, 939, 88, 88}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 939, 15);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'p', 'X', 'B'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      
      BitSet bitSet3 = ArrayUtils.indexesOf((Object[]) stringArray0, (Object) "z5_3C");
      assertNotSame(bitSet3, bitSet1);
      assertNotSame(bitSet3, bitSet2);
      assertNotSame(bitSet3, bitSet0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(bitSet3);
      assertTrue(bitSet3.equals((Object)bitSet0));
      assertTrue(bitSet3.equals((Object)bitSet2));
      assertTrue(bitSet3.equals((Object)bitSet1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(0, bitSet3.cardinality());
      assertEquals("{}", bitSet3.toString());
      assertEquals(64, bitSet3.size());
      assertTrue(bitSet3.isEmpty());
      assertEquals(0, bitSet3.length());
      assertEquals(3, stringArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 88;
      floatArray0[1] = (float) 2447;
      floatArray0[2] = 157.5383F;
      ArrayUtils.shift(floatArray0, 88);
      assertArrayEquals(new float[] {157.5383F, 88.0F, 2447.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 392.0632F;
      floatArray0[1] = (-2469.3F);
      floatArray0[2] = (-1.0F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-952.8F);
      floatArray0[8] = (-952.8F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {392.0632F, (-2469.3F), (-1.0F), 0.0F, 0.0F, (-1.0F), (-1.0F), (-952.8F), (-952.8F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)32, (int) (byte)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte) (-1), (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-2469.3F));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[0];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) doubleArray2, (Object[]) doubleArray2);
      assertNotSame(doubleArray2, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, 0.0F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {392.0632F, (-2469.3F), (-1.0F), 0.0F, 0.0F, (-1.0F), (-1.0F), (-952.8F), (-952.8F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(17, floatArray2.length);
      assertEquals(18, floatArray1.length);
      
      Byte[] byteArray2 = new Byte[2];
      byteArray2[0] = (Byte) (byte) (-1);
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray3.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)1, 2396);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short) (-1), (short)1, (short) (-1), (short) (-1)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.insert((int) (byte)32, (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2979;
      shortArray0[1] = (short) (-2426);
      shortArray0[2] = (short) (-1451);
      shortArray0[3] = (short)14;
      shortArray0[4] = (short)321;
      shortArray0[5] = (short)4659;
      shortArray0[6] = (short)3;
      shortArray0[7] = (short) (-1);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)374);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2979, (short) (-2426), (short) (-1451), (short)14, (short)321, (short)4659, (short)3, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)374, (short)2979, (short) (-2426), (short) (-1451), (short)14, (short)321, (short)4659, (short)3, (short) (-1)}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)4659;
      floatArray0[1] = (float) (short) (-1451);
      floatArray0[2] = (float) (short) (-2426);
      floatArray0[3] = (float) (short) (-2426);
      floatArray0[4] = (float) (short) (-2426);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short)3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {3.0F, 4659.0F, (-1451.0F), (-2426.0F), (-2426.0F), (-2426.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {4659.0F, (-1451.0F), (-2426.0F), (-2426.0F), (-2426.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(5, floatArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2426.0F);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)4659;
      longArray0[1] = (long) (short)4659;
      longArray0[2] = (long) (short) (-2426);
      longArray0[3] = (long) (short)4659;
      longArray0[4] = (-561L);
      longArray0[5] = (long) (short)321;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (short) (-1), (int) (short)374);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {4659L, 4659L, (-2426L), 4659L, (-561L), 321L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = 1199L;
      longArray0[5] = 840L;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      longArray0[8] = (long) 1;
      ArrayUtils.shift(longArray0, 1267);
      assertArrayEquals(new long[] {1L, 1L, 1199L, 840L, 1L, 1L, 1L, 1L, 1L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "java.lang.Integer";
      stringArray0[4] = "GC";
      stringArray0[4] = "5cX";
      stringArray0[5] = ">[k%x9iD";
      String[] stringArray1 = ArrayUtils.insert((int) 2, stringArray0, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(12, stringArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[5] = (long) (short)2;
      longArray0[7] = 0L;
      longArray0[8] = (long) (short)2;
      ArrayUtils.shift(longArray0, (-3243), Integer.MAX_VALUE, (-3243));
      assertArrayEquals(new long[] {0L, 0L, 2L, 0L, 0L, 2L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) (short)2;
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "java.lang.Long";
      stringArray0[2] = "java.lang.Integer";
      stringArray0[4] = "GC";
      stringArray0[4] = "5cX";
      stringArray0[5] = ">[k%x9iD";
      String[] stringArray1 = ArrayUtils.insert((int) 2, stringArray0, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(12, stringArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[5] = (long) (short)2;
      longArray0[7] = 0L;
      longArray0[8] = (long) (short)2;
      ArrayUtils.shift(longArray0, (-3243), Integer.MAX_VALUE, (-1008));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 2L, 0L, 0L, 2L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) (short)2;
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3261;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)258;
      shortArray0[3] = (short)2;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.Long";
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "java.lang.Integer";
      stringArray0[3] = "GC";
      stringArray0[4] = "&5cX^";
      stringArray0[5] = ">[k%x9iD";
      String[] stringArray1 = ArrayUtils.insert((int) 2, stringArray0, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(12, stringArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)2;
      longArray0[1] = (long) (short)2;
      longArray0[2] = (long) (short)2;
      longArray0[3] = (long) (short)2;
      longArray0[4] = (long) (short)3261;
      longArray0[5] = (long) (short)2;
      longArray0[6] = (long) (short)2;
      longArray0[7] = 0L;
      longArray0[8] = (long) (short)2;
      ArrayUtils.shift(longArray0, (-3243), Integer.MAX_VALUE, (-1008));
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L, 3261L, 2L, 2L, 0L, 2L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 2}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)112;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-112), (byte)97, (byte) (-94), (byte)81, (byte)3, (byte)8, (byte)112}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte) (-112);
      boolean boolean1 = ArrayUtils.isArrayIndexValid(byteArray1, (int)  (-125));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = '[';
      charArray0[2] = 'b';
      charArray0[3] = 'W';
      charArray0[4] = '^';
      charArray0[5] = ',';
      charArray0[6] = '(';
      charArray0[7] = 'k';
      charArray0[8] = '^';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'b', '[', 'b', 'W', '^', ',', '(', 'k', '^'}, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = 1L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 1L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 1L}, longArray0);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.swap((float[]) null, (-1513), 2044, 157);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      Float float0 = new Float((-328.0F));
      assertNotNull(float0);
      assertEquals((-328.0F), (float)float0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (Object) float0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, (-96), 0, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_FLOAT_ARRAY, 0, (-805), 128);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)2, 2865);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-3915L);
      longArray0[1] = 13L;
      longArray0[2] = 977L;
      longArray0[3] = 2914L;
      long[] longArray1 = ArrayUtils.add(longArray0, (-2080L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-3915L), 13L, 977L, 2914L}, longArray0);
      assertArrayEquals(new long[] {(-3915L), 13L, 977L, 2914L, (-2080L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-78);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-28), (byte) (-99), (byte) (-78)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-28);
      intArray0[1] = 2913;
      intArray0[2] = 11;
      intArray0[3] = (int) (byte) (-99);
      intArray0[4] = (int) (byte) (-78);
      intArray0[5] = (int) (byte) (-28);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2913, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2913, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3261;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "java.lang.Integer";
      stringArray0[3] = "GC";
      stringArray0[4] = "&5cX^";
      stringArray0[5] = ">[k%x9iD";
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[0] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      ArrayUtils.swap(charArray0, (int) (short)3261, (int) (short)2);
      assertArrayEquals(new char[] {'l', '\u0000', 'l', 'l'}, charArray0);
      assertEquals(4, charArray0.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) stringArray0, (Object) boolean0);
      assertEquals((-1), int0);
      assertEquals(6, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)3261, (-3582));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.shift(longArray1, (-3500), (-3500), (-2145796699));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-78);
      shortArray0[1] = (short) (byte) (-78);
      shortArray0[3] = (short) (byte) (-78);
      shortArray0[4] = (short) (byte) (-78);
      shortArray0[5] = (short) (byte) (-78);
      shortArray0[6] = (short) (byte) (-78);
      shortArray0[7] = (short) (byte) (-78);
      shortArray0[8] = (short) (byte) (-78);
      ArrayUtils.swap(shortArray0, (-2145796699), (int) (short) (-78));
      assertArrayEquals(new short[] {(short) (-78), (short) (-78), (short)0, (short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78)}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-78), (-1));
      assertArrayEquals(new short[] {(short) (-78), (short) (-78), (short)0, (short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78)}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-3915L);
      longArray0[1] = 13L;
      longArray0[3] = 2914L;
      long[] longArray1 = ArrayUtils.add(longArray0, (-2099L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-3915L), 13L, 0L, 2914L}, longArray0);
      assertArrayEquals(new long[] {(-3915L), 13L, 0L, 2914L, (-2099L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-78);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-28), (byte) (-99), (byte) (-78)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (byte) (-28));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, booleanArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-28);
      shortArray0[1] = (short) (byte) (-78);
      ArrayUtils.swap(shortArray0, (int) (short) (-28), (int) (byte) (-28));
      assertArrayEquals(new short[] {(short) (-28), (short) (-78)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-28), 890);
      assertArrayEquals(new short[] {(short) (-28), (short) (-78)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-3915L);
      longArray0[1] = 13L;
      longArray0[2] = 977L;
      longArray0[3] = 2914L;
      long[] longArray1 = ArrayUtils.add(longArray0, (-2099L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-3915L), 13L, 977L, 2914L}, longArray0);
      assertArrayEquals(new long[] {(-3915L), 13L, 977L, 2914L, (-2099L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-78);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-28), (byte) (-99), (byte) (-78)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (byte) (-28));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, booleanArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-28);
      shortArray0[1] = (short) (byte) (-78);
      ArrayUtils.swap(shortArray0, (int) (short) (-28), (int) (byte) (-28));
      assertArrayEquals(new short[] {(short) (-28), (short) (-78)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-28), 890);
      assertArrayEquals(new short[] {(short) (-28), (short) (-78)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'w';
      charArray0[1] = 'c';
      charArray0[2] = ';';
      charArray0[3] = ':';
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'w';
      floatArray0[1] = (float) ';';
      floatArray0[2] = (float) ';';
      floatArray0[3] = (-615.0F);
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 'c';
      floatArray0[7] = 746.49F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-1018), 2080164414, 234);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Float[] floatArray1 = new Float[6];
      floatArray1[0] = (Float) 0.0F;
      floatArray1[2] = (Float) 59.0F;
      Float float0 = new Float((double) 2);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      floatArray1[3] = float0;
      floatArray1[4] = (Float) 59.0F;
      floatArray1[5] = (Float) 119.0F;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) ':';
      intArray0[1] = (int) 'w';
      intArray0[2] = (int) ';';
      intArray0[3] = 234;
      intArray0[4] = (-1018);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 119, 1);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {58, 119, 59, 234, (-1018)}, intArray0);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = (-1535);
      Integer integer0 = new Integer((-1535));
      assertNotNull(integer0);
      assertEquals((-1535), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1535));
      assertNotNull(integer1);
      assertEquals((-1535), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertNotNull(integer2);
      assertEquals((-1535), (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(4, integerArray0.length);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      assertNotNull(integer3);
      assertEquals((-1535), (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertEquals(4, integerArray0.length);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1535);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (double) 6;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 498.3249);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.0, 100.0, 6.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.0, 100.0, 6.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0, "Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals("true", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray1, 100.0, 100.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean2 == boolean1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.0, 100.0, 6.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.0, 100.0, 6.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-911);
      shortArray0[2] = (short) (-2483);
      shortArray0[3] = (short)1500;
      shortArray0[4] = (short)1403;
      shortArray0[5] = (short)156;
      shortArray0[6] = (short) (-4193);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-911));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short) (-911), (short) (-2483), (short)1500, (short)1403, (short)156, (short) (-4193)}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short) (-2483), (short)1500, (short)1403, (short)156, (short) (-4193)}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(6, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3261;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)258;
      shortArray0[3] = (short)2;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.Long";
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "java.lang.Integer";
      stringArray0[3] = "GC";
      stringArray0[4] = "&5cX^";
      stringArray0[5] = ">[k%x9iD";
      String[] stringArray1 = ArrayUtils.insert((int) 2, stringArray0, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(12, stringArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 7L;
      longArray0[1] = 1506L;
      longArray0[2] = (long) (short)3261;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) (short)2;
      longArray0[5] = (long) (short)258;
      long[] longArray1 = ArrayUtils.remove(longArray0, (int) (short)2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {7L, 1506L, 3261L, 2L, 2L, 258L}, longArray0);
      assertArrayEquals(new long[] {7L, 1506L, 2L, 2L, 258L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      
      Boolean boolean3 = new Boolean((String) null);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      
      Boolean[] booleanArray1 = new Boolean[8];
      booleanArray1[0] = boolean4;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = boolean4;
      booleanArray1[3] = boolean1;
      booleanArray1[4] = boolean4;
      booleanArray1[5] = boolean2;
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      
      booleanArray1[6] = boolean5;
      booleanArray1[7] = boolean1;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false, true}, booleanArray2));
      assertEquals(8, booleanArray2.length);
      assertEquals(8, booleanArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[1] = 92L;
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, (-2144942247), 1129);
      assertArrayEquals(new long[] {0L, 92L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '{';
      charArray0[2] = 'F';
      charArray0[3] = 'W';
      charArray0[4] = '8';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '+', 1129);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'-', '{', 'F', 'W', '8'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-68));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Character[] characterArray0 = new Character[13];
      char char0 = 'x';
      Character character0 = Character.valueOf('x');
      assertNotNull(character0);
      assertEquals('x', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('+');
      assertNotNull(character1);
      assertEquals('+', (char)character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray2.length);
      
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float(2449.3F);
      assertNotNull(float0);
      assertEquals(2449.3F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) char0);
      assertNotNull(float1);
      assertEquals(120.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertNotNull(float2);
      assertEquals(2449.3F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(7, floatArray0.length);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[0]);
      assertNotNull(float3);
      assertEquals(2449.3F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals(7, floatArray0.length);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1254.904426689);
      assertNotNull(float4);
      assertEquals(1254.9044F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float(3.0);
      assertNotNull(float5);
      assertEquals(3.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) (byte) (-68));
      assertNotNull(float6);
      assertEquals((-68.0F), (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      
      floatArray0[6] = float6;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2449.3F, 120.0F, 2449.3F, 2449.3F, 1254.9044F, 3.0F, (-68.0F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-4316.22527668), 784);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, 1550);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3261;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "java.lang.Integer";
      stringArray0[3] = "GC";
      stringArray0[4] = "&5cX^";
      stringArray0[5] = ">[k%x9iD";
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      ArrayUtils.swap(charArray0, (int) (short)3261, (int) (short)2);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l'}, charArray0);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.remove(charArray0, (int) (short)2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'l', 'l', 'l'}, charArray1);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l'}, charArray0);
      assertEquals(3, charArray1.length);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[2] = null;
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-1094), 2);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 100);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) 100;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      floatArray0[8] = (float) (byte)0;
      ArrayUtils.swap(floatArray0, 6230, 6230, 1262);
      assertArrayEquals(new float[] {0.0F, 100.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = 'F';
      charArray0[2] = 'S';
      charArray0[3] = 'L';
      charArray0[4] = 'o';
      charArray0[5] = 'T';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'T');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'j', 'F', 'S', 'L', 'o'}, charArray1);
      assertArrayEquals(new char[] {'j', 'F', 'S', 'L', 'o', 'T'}, charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(6, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1673), 1277);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      ArrayUtils.reverse(doubleArray0, (-1673), (-1673));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[1] = 'd';
      charArray0[7] = 'U';
      charArray0[3] = '-';
      charArray0[4] = 'E';
      charArray0[5] = 'e';
      charArray0[6] = 'o';
      charArray0[7] = 'd';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'T', 'd', '\u0000', '-', 'E', 'e', 'o', 'd'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'e';
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'T', 'd', '\u0000', '-', 'E', 'e', 'o', 'd'}, charArray0);
      assertEquals(8, charArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-67));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)49}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-657.7369F));
      assertNotNull(float0);
      assertEquals((-657.7369F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      floatArray0[1] = floatArray0[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-0.114F));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-657.7369F), (-657.7369F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      ArrayUtils.reverse(floatArray1);
      assertArrayEquals(new float[] {(-657.7369F), (-657.7369F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      ArrayUtils.swap((int[]) null, (int) (short)0, (int) (short)0);
      boolean boolean1 = ArrayUtils.isSorted(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertTrue(boolean1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      Class<MutableInt[]> class0 = MutableInt[].class;
      MutableInt[] mutableIntArray0 = ArrayUtils.nullToEmpty((MutableInt[]) null, class0);
      assertNotNull(mutableIntArray0);
      assertEquals(0, mutableIntArray0.length);
      
      ArrayUtils.reverse(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-4129L);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new long[] {(-4129L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-4129L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-4129L), 0L, 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = 'f';
      charArray0[2] = '?';
      charArray0[3] = 's';
      boolean boolean3 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new char[] {'&', 'f', '?', 's'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 3078.50002143528;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-459.79199177);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1648.5481861);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, (-459.79199177), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)84;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)99;
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("The Array must not be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)11, (int) (byte)98);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)98, (byte)84, (byte)0, (byte)0, (byte)84, (byte)99}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)99;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {(short)99}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3078.50002143528;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-459.79199177);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1648.5481861);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {3078.50002143528, 0.0, (-459.79199177), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)84;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)99;
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("The Array must not be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)11, (int) (byte)98);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-52), (byte)98, (byte)84, (byte)0, (byte)0, (byte)84, (byte)99}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = true;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short)16;
      shortArray0[2] = (short)16;
      shortArray0[3] = (short)16;
      shortArray0[4] = (short)16;
      shortArray0[5] = (short)16;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)16, (int) (short)16);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)16, (short)16, (short)16, (short)16, (short)16, (short)16}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 530;
      intArray0[1] = (int) (short)16;
      intArray0[2] = (int) (short)16;
      intArray0[3] = 2;
      intArray0[4] = 17;
      intArray0[5] = (-2147045278);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 17);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {530, 16, 16, 2, 17, (-2147045278)}, intArray0);
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)45);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new byte[] {(byte) (-70), (byte)19, (byte) (-1), (byte)4, (byte)104, (byte)45, (byte)1, (byte) (-96), (byte)0}, byteArray0);
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{5}", bitSet1.toString());
      assertEquals(6, bitSet1.length());
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3254.22998046875;
      doubleArray0[1] = (-268.0);
      doubleArray0[2] = 0.7;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3254.22998046875, 82, (-268.0));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {3254.22998046875, (-268.0), 0.7}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 3254.22998046875, (double) 82);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {3254.22998046875, (-268.0), 0.7}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = Character.valueOf('v');
      assertNotNull(character0);
      assertEquals('v', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = '.';
      Character character1 = Character.valueOf('.');
      assertNotNull(character1);
      assertEquals('.', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('.');
      assertNotNull(character2);
      assertEquals('.', (char)character2);
      assertTrue(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      char char1 = '$';
      Character character3 = Character.valueOf('$');
      assertNotNull(character3);
      assertEquals('$', (char)character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(char0);
      assertNotNull(character4);
      assertEquals('.', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char1));
      assertFalse(char0 == char1);
      
      characterArray0[4] = character4;
      Character character5 = new Character('/');
      assertNotNull(character5);
      assertEquals('/', (char)character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)char1));
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf(char1);
      assertNotNull(character6);
      assertEquals('$', (char)character6);
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character5));
      assertFalse(char1 == char0);
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'v', '.', '.', '$', '.', '/', '$'}, charArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2768);
      shortArray0[1] = (short)306;
      shortArray0[2] = (short) (-644);
      shortArray0[3] = (short)1838;
      shortArray0[4] = (short)957;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-311);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) character5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      
      Boolean boolean3 = new Boolean((String) null);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      
      Boolean[] booleanArray1 = new Boolean[8];
      booleanArray1[0] = boolean4;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = boolean4;
      booleanArray1[3] = boolean1;
      booleanArray1[4] = boolean4;
      booleanArray1[5] = boolean2;
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      
      booleanArray1[6] = boolean5;
      booleanArray1[7] = boolean1;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false, true}, booleanArray2));
      assertEquals(8, booleanArray2.length);
      assertEquals(8, booleanArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1091L);
      longArray0[1] = 92L;
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, (-2144942247), 1129);
      assertArrayEquals(new long[] {(-1091L), 92L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)108);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Short[] shortArray1 = new Short[9];
      Short short0 = new Short((short) (-265));
      assertNotNull(short0);
      assertEquals((short) (-265), (short)short0);
      
      Short short1 = new Short((short) (-4830));
      assertNotNull(short1);
      assertEquals((short) (-4830), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Object object0 = ArrayUtils.get((Object[]) shortArray1, (-2992));
      assertNull(object0);
      assertEquals(9, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)0, 3834, (-474.00818385536));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((String[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte)74);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {74.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(2, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.indexOf(floatArray0, (-1694.24F), (-2992));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1263);
      intArray0[1] = 9;
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 9;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-1263), (-4748));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 9L}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, longArray0.length);
      
      Integer integer0 = new Integer(9);
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      
      int int0 = ArrayUtils.indexOf(longArray0, 3944L, 9);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 9L}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.swap(intArray0, (-1263), 9, (-1263));
      assertArrayEquals(new int[] {(-1263), 9}, intArray0);
      assertEquals(2, intArray0.length);
      
      char char0 = '=';
      char[] charArray0 = new char[2];
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1263);
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) 9;
      objectArray0[3] = (Object) integer0;
      ArrayUtils.shift(objectArray0, (-1263));
      assertEquals(4, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 9, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[2] = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)126, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-124), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Short short0 = new Short((short)46);
      assertNotNull(short0);
      assertEquals((short)46, (short)short0);
      
      Short[] shortArray0 = new Short[9];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      shortArray0[8] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)46, (short)46, (short)46, (short)46, (short)46, (short)46, (short)46, (short)46, (short)46}, shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)126, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-124), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, Integer.MAX_VALUE, 2796);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[20];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(20, stringArray0.length);
      assertEquals(20, stringArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = Float.NaN;
      floatArray0[0] = Float.NaN;
      floatArray0[2] = 1571.2544F;
      floatArray0[3] = 0.0F;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)34;
      shortArray0[1] = (short)34;
      shortArray0[2] = (short)34;
      shortArray0[3] = (short)34;
      shortArray0[4] = (short)21845;
      shortArray0[5] = (short)34;
      shortArray0[6] = (short)34;
      shortArray0[1] = (short)34;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)34, (short)34, (short)34, (short)34, (short)21845, (short)34, (short)34, (short)0}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)21845;
      shortArray0[1] = (short)21845;
      shortArray0[2] = (short)34;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)21845, (short)21845, (short)34}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)21845;
      intArray0[1] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.contains(intArray0, Integer.MAX_VALUE);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {21845, Integer.MAX_VALUE}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Character character0 = new Character('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) '?');
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {63.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) '?';
      doubleArray0[2] = (double) '?';
      doubleArray0[3] = (double) '?';
      doubleArray0[6] = (double) '?';
      doubleArray0[8] = (double) '?';
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {63.0, 63.0, 63.0, 0.0, 0.0, 63.0, 0.0, 63.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 444.0, (-463), (double) (-463));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {63.0, 63.0, 63.0, 0.0, 0.0, 63.0, 0.0, 63.0, 0.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(9, doubleArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)16366;
      shortArray0[1] = (short)258;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short)36;
      shortArray0[4] = (short)16;
      shortArray0[5] = (short) (-190);
      shortArray0[6] = (short)100;
      shortArray0[7] = (short)321;
      shortArray0[8] = (short)34;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)16366, (short)258, (short)5, (short)36, (short)16, (short) (-190), (short)100, (short)321, (short)34}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "R!ekUFe{CKQ:j~s{c");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1L;
      floatArray0[8] = (-1566.58F);
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (float) 1L;
      floatArray0[5] = (float) 1L;
      floatArray0[6] = (float) 1L;
      floatArray0[7] = (float) 1L;
      floatArray0[5] = (float) 1L;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 2053L;
      longArray0[4] = 1L;
      longArray0[5] = 1L;
      longArray0[6] = 1L;
      ArrayUtils.shift(longArray0, (-12), (-3500), 2145414781);
      assertArrayEquals(new long[] {1L, 0L, 1L, 2053L, 1L, 1L, 1L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.insert((-1), booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      ArrayUtils.swap(floatArray0, (-1), (-1), (-1));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = 'L';
      charArray0[2] = 'J';
      charArray0[3] = '';
      charArray0[4] = 'G';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'j', 'L', 'J', '', 'G'}, charArray1);
      assertArrayEquals(new char[] {'j', 'L', 'J', '', 'G'}, charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'J';
      intArray0[1] = (int) 'j';
      intArray0[2] = (int) '';
      intArray0[3] = 92;
      intArray0[4] = (int) 'L';
      intArray0[5] = (int) 'j';
      ArrayUtils.reverse(intArray0, (-1251), (-333));
      assertArrayEquals(new int[] {74, 106, 127, 92, 76, 106}, intArray0);
      assertEquals(6, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 'j';
      longArray0[2] = (long) (-1251);
      ArrayUtils.reverse(longArray0, (-1), 76);
      assertArrayEquals(new long[] {(-1251L), 106L, (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertNotNull(mutableInt0);
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      
      mutableInt0.subtract(2);
      assertEquals((-3.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3), mutableInt0.intValue());
      assertEquals((short) (-3), mutableInt0.shortValue());
      assertEquals("-3", mutableInt0.toString());
      assertEquals((-3), (int)mutableInt0.toInteger());
      assertEquals((byte) (-3), mutableInt0.byteValue());
      assertEquals((-3.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3L), mutableInt0.longValue());
      assertEquals((-3), (int)mutableInt0.getValue());
      
      mutableIntArray0[0] = mutableInt0;
      ArrayUtils.reverse((int[]) null, 592, 592);
      ArrayUtils.reverse(arrayUtils0.EMPTY_LONG_ARRAY, 817, (-99));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-2243), (-8), (-2243));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '\u0000';
      charArray0[2] = '-';
      charArray0[3] = 'd';
      charArray0[4] = 'P';
      charArray0[5] = '[';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) '[';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 91}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 91}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)74;
      intArray0[1] = (int) (byte)74;
      ArrayUtils.swap(intArray0, 79, 74);
      assertArrayEquals(new int[] {74, 74}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      int int0 = ArrayUtils.indexOf(longArray0, (-2690L), (-2840));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 74);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {74, 74}, intArray0);
      assertArrayEquals(new int[] {74}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, Integer.MAX_VALUE);
      assertNotSame(intArray0, intArray1);
      assertEquals((-1), int1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {74, 74}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      
      Boolean boolean3 = new Boolean((String) null);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      
      Boolean[] booleanArray1 = new Boolean[8];
      booleanArray1[0] = boolean4;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = boolean4;
      booleanArray1[3] = boolean1;
      booleanArray1[4] = boolean4;
      booleanArray1[5] = boolean2;
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      
      booleanArray1[6] = boolean5;
      booleanArray1[7] = boolean1;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false, true}, booleanArray2));
      assertEquals(8, booleanArray2.length);
      assertEquals(8, booleanArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 887;
      intArray0[1] = 68;
      intArray0[2] = (-870);
      intArray0[3] = (-3500);
      intArray0[4] = 1755;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1755);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {887, 68, (-870), (-3500), 1755}, intArray0);
      assertArrayEquals(new int[] {887, 68, (-870), (-3500)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)89;
      shortArray0[1] = (short)739;
      shortArray0[2] = (short)1764;
      shortArray0[3] = (short)18688;
      shortArray0[4] = (short) (-1476);
      shortArray0[5] = (short) (-1020);
      shortArray0[6] = (short) (-1013);
      shortArray0[7] = (short)261;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1476));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1476), (short)89, (short)739, (short)1764, (short)18688, (short) (-1476), (short) (-1020), (short) (-1013), (short)261}, shortArray1);
      assertArrayEquals(new short[] {(short)89, (short)739, (short)1764, (short)18688, (short) (-1476), (short) (-1020), (short) (-1013), (short)261}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1362.0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_CHAR_ARRAY, ']', (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      byte[] byteArray1 = ArrayUtils.clone(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      short[] shortArray1 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_FLOAT_ARRAY, 739, 116, 1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (-1), 1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1362.0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_CHAR_ARRAY, '[', (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.shift(arrayUtils0.EMPTY_FLOAT_ARRAY, 166, (-2029), 0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (-1), 0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Short short0 = new Short((short) (-1073));
      assertNotNull(short0);
      assertEquals((short) (-1073), (short)short0);
      
      Short short1 = new Short((short)2792);
      assertNotNull(short1);
      assertEquals((short)2792, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-1120));
      assertNotNull(short2);
      assertEquals((short) (-1120), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-1073);
      floatArray0[1] = (float) 2256;
      floatArray0[2] = (-1254.0F);
      floatArray0[3] = (float) 2256;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) (-1727);
      long[] longArray0 = new long[7];
      longArray0[0] = 386L;
      longArray0[1] = (long) (short) (-1120);
      longArray0[2] = (long) (short) (-1073);
      longArray0[4] = (long) 1494;
      longArray0[6] = (long) 2256;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-837), 4);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {386L, (-1120L), (-1073L), 0L}, longArray1);
      assertArrayEquals(new long[] {386L, (-1120L), (-1073L), 0L, 1494L, 0L, 2256L}, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(7, longArray0.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[6];
      MutableInt mutableInt0 = new MutableInt((-1254.0F));
      assertNotNull(mutableInt0);
      assertEquals((byte)26, mutableInt0.byteValue());
      assertEquals((-1254), (int)mutableInt0.getValue());
      assertEquals((-1254), (int)mutableInt0.toInteger());
      assertEquals("-1254", mutableInt0.toString());
      assertEquals((-1254.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1254.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1254L), mutableInt0.longValue());
      assertEquals((-1254), mutableInt0.intValue());
      assertEquals((short) (-1254), mutableInt0.shortValue());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((-1727.0F));
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals("-1727", mutableInt1.toString());
      assertEquals((short) (-1727), mutableInt1.shortValue());
      assertEquals((-1727L), mutableInt1.longValue());
      assertEquals((-1727.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-1727), mutableInt1.intValue());
      assertEquals((-1727), (int)mutableInt1.getValue());
      assertEquals((-1727), (int)mutableInt1.toInteger());
      assertEquals((byte)65, mutableInt1.byteValue());
      assertEquals((-1727.0), mutableInt1.doubleValue(), 0.01);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(2256);
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertEquals((byte) (-48), mutableInt2.byteValue());
      assertEquals(2256, (int)mutableInt2.toInteger());
      assertEquals("2256", mutableInt2.toString());
      assertEquals(2256, (int)mutableInt2.getValue());
      assertEquals((short)2256, mutableInt2.shortValue());
      assertEquals(2256.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(2256, mutableInt2.intValue());
      assertEquals(2256.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(2256L, mutableInt2.longValue());
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(2256);
      assertNotNull(mutableInt3);
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertEquals((short)2256, mutableInt3.shortValue());
      assertEquals("2256", mutableInt3.toString());
      assertEquals(2256, mutableInt3.intValue());
      assertEquals(2256.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(2256L, mutableInt3.longValue());
      assertEquals((byte) (-48), mutableInt3.byteValue());
      assertEquals(2256, (int)mutableInt3.toInteger());
      assertEquals(2256.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(2256, (int)mutableInt3.getValue());
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(1);
      assertNotNull(mutableInt4);
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertEquals("1", mutableInt4.toString());
      assertEquals(1, mutableInt4.intValue());
      assertEquals((byte)1, mutableInt4.byteValue());
      assertEquals(1, (int)mutableInt4.toInteger());
      assertEquals((short)1, mutableInt4.shortValue());
      assertEquals(1, (int)mutableInt4.getValue());
      assertEquals(1.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(1.0, mutableInt4.doubleValue(), 0.01);
      assertEquals(1L, mutableInt4.longValue());
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt(Integer.MAX_VALUE);
      assertNotNull(mutableInt5);
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertEquals(2147483647L, mutableInt5.longValue());
      assertEquals(Integer.MAX_VALUE, mutableInt5.intValue());
      assertEquals(2.147483647E9, mutableInt5.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt5.shortValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt5.getValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt5.toInteger());
      assertEquals("2147483647", mutableInt5.toString());
      assertEquals((byte) (-1), mutableInt5.byteValue());
      assertEquals(2.14748365E9F, mutableInt5.floatValue(), 0.01F);
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt[] mutableIntArray1 = ArrayUtils.subarray(mutableIntArray0, (-1428), 4);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertEquals(6, mutableIntArray0.length);
      assertEquals(4, mutableIntArray1.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 4);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-104);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) 4);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, 1645.631F);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(2, floatArray0.length);
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertEquals(5, booleanArray2.length);
      assertEquals(1, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      float[] floatArray0 = new float[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 4);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[3] = (byte) (-104);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) 4);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        bitSet0.get((int) (byte)0, (int) (byte) (-104));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex < 0: -104
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = 128.0;
      doubleArray0[1] = 128.0;
      doubleArray0[2] = (-1003.8414388498);
      doubleArray0[3] = 621.471171217492;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(23, doubleArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 621.471171217492;
      objectArray0[1] = (Object) 621.471171217492;
      objectArray0[2] = (Object) 128.0;
      objectArray0[3] = (Object) 621.471171217492;
      objectArray0[4] = (Object) 621.471171217492;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      ArrayUtils.swap(objectArray0, 18, 18, 18);
      assertEquals(6, objectArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1169.335954272);
      doubleArray1[2] = 128.0;
      doubleArray1[3] = 100.0;
      doubleArray1[4] = 621.471171217492;
      doubleArray1[5] = 128.0;
      doubleArray1[6] = 621.471171217492;
      doubleArray1[7] = (-1169.335954272);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray1, 18, (-2849.89));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)51;
      shortArray0[2] = (short)0;
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'B';
      charArray0[4] = '#';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      int int0 = ArrayUtils.indexOf(charArray0, 'M');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'M', 'M', 'M', 'B', '#', 'M', 'M'}, charArray0);
      assertEquals(7, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      ArrayUtils.reverse((byte[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-5);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-5)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Character character0 = Character.valueOf('#');
      assertNotNull(character0);
      assertEquals('#', (char)character0);
      
      Character character1 = ArrayUtils.get((Character[]) null, (int)  (-5), (Character) null);
      assertNull(character1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'X';
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8=b";
      stringArray0[1] = "";
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "8=b");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'X';
      charArray1[1] = 'X';
      int int0 = ArrayUtils.lastIndexOf(charArray1, 'Y', (int) (short) (-1120));
      assertNotSame(charArray1, charArray0);
      assertEquals((-1), int0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'X', 'X'}, charArray1);
      assertEquals(2, charArray1.length);
      
      ArrayUtils.shift((Object[]) stringArray1, (-2146631808));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = ArrayUtils.toStringArray((Object[]) stringArray1, "8=b");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
      
      String[] stringArray3 = ArrayUtils.subarray(stringArray2, 0, (int)  (-1120));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray3);
      assertNotSame(stringArray1, stringArray3);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray3);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotNull(stringArray3);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertEquals(2, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
      assertEquals(0, stringArray3.length);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "R!ekUFe{CKQ:j~s{c");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[8] = 0.0F;
      char[] charArray0 = new char[4];
      charArray0[2] = 't';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', 0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 't', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      ArrayUtils.shift((Object[]) stringArray1, 0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String[] stringArray2 = ArrayUtils.toStringArray((Object[]) stringArray1, "-M");
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray2.length);
      
      String[] stringArray3 = new String[3];
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray3[0] = "-M";
      stringArray3[1] = "R!ekUFe{CKQ:j~s{c";
      stringArray3[2] = "*lb";
      String[] stringArray4 = ArrayUtils.subarray(stringArray3, 0, 0);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray4);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray4, stringArray3);
      assertNotSame(stringArray4, stringArray0);
      assertNotSame(stringArray4, stringArray1);
      assertNotSame(stringArray4, stringArray2);
      assertNotNull(stringArray4);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray0));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertEquals(3, stringArray3.length);
      assertEquals(0, stringArray4.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (int) 't';
      intArray0[2] = (int) 't';
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (int) 't';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 116, 116, 0, 0, 0, 116}, intArray0);
      assertEquals(14, intArray1.length);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-657.7369F));
      assertNotNull(float0);
      assertEquals((-657.7369F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      floatArray0[1] = floatArray0[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-0.114F));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-657.7369F), (-657.7369F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      ArrayUtils.reverse(floatArray1);
      assertArrayEquals(new float[] {(-657.7369F), (-657.7369F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)868;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)868, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)868, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      ArrayUtils.swap((int[]) null, (int) (short)0, (int) (short)0);
      boolean boolean1 = ArrayUtils.isSorted(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(boolean1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)868, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)868, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      Class<MutableInt[]> class0 = MutableInt[].class;
      MutableInt[] mutableIntArray0 = ArrayUtils.nullToEmpty((MutableInt[]) null, class0);
      assertNotNull(mutableIntArray0);
      assertEquals(0, mutableIntArray0.length);
      
      ArrayUtils.reverse(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)868, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)868, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 20;
      longArray0[1] = (long) 1040;
      longArray0[2] = (long) 20;
      longArray0[3] = (long) 1040;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 1040L, 20L, 1040L}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.swap((byte[]) null, 1337, 1337, 369);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('!');
      assertNotNull(character0);
      assertEquals('!', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('\"');
      assertNotNull(character1);
      assertEquals('\"', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'J');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'!', '\"'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-4458.930769));
      assertNotNull(double0);
      assertEquals((-4458.930769), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(583.04736866979);
      assertNotNull(double1);
      assertEquals(583.04736866979, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) character0);
      assertNotNull(double2);
      assertEquals(33.0, (double)double2, 0.01);
      assertFalse(character0.equals((Object)character1));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-4458.930769));
      assertNotNull(double3);
      assertEquals((-4458.930769), (double)double3, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3261;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)258;
      shortArray0[3] = (short)2;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.Long";
      stringArray0[1] = "java.lang.Integer";
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)258;
      doubleArray0[1] = (double) (short)3261;
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = (double) (short)2;
      doubleArray0[5] = (double) (short)2;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {258.0, 3261.0, 2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      ArrayUtils.swap((Object[]) stringArray0, (int) (short)258, (int) (short)258, (int) (short)2);
      assertEquals(6, stringArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) (short)258, (-1169.335954272));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 258, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3261;
      shortArray0[1] = (short)585;
      shortArray0[2] = (short)258;
      shortArray0[3] = (short)2;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.Long";
      stringArray0[1] = "java.lang.Integer";
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)258;
      doubleArray0[1] = (double) (short)3261;
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) (short)585;
      doubleArray0[4] = (double) (short)2;
      doubleArray0[5] = (double) (short)585;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {258.0, 3261.0, 2.0, 585.0, 2.0, 585.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      ArrayUtils.swap((Object[]) stringArray0, (int) (short)258, (int) (short)258, (int) (short)585);
      assertEquals(6, stringArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) (short)258, (-1169.335954272));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 258, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("`IOHq[8XV|z]WD");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1204.581F;
      floatArray0[1] = (-3517.38F);
      boolean boolean4 = ArrayUtils.contains(floatArray0, (-3517.38F));
      assertTrue(boolean4);
      assertArrayEquals(new float[] {1204.581F, (-3517.38F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean5 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean4);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('\"');
      assertNotNull(character0);
      assertEquals('\"', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('D');
      assertNotNull(character1);
      assertEquals('D', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Integer integer0 = new Integer((int) character0);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      assertFalse(character0.equals((Object)character1));
      
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) integer0);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertFalse(character0.equals((Object)character1));
      assertEquals(2, characterArray1.length);
      assertEquals(2, characterArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 2758L;
      longArray0[1] = 2436L;
      longArray0[2] = 113L;
      longArray0[3] = 316L;
      longArray0[4] = 1L;
      longArray0[5] = (-1851L);
      longArray0[6] = (-2281L);
      longArray0[7] = (-1L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2758L, 2436L, 113L, 316L, 1L, (-1851L), (-2281L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)19603;
      shortArray0[1] = (short) (-2681);
      shortArray0[2] = (short)2537;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (-2377);
      shortArray0[5] = (short) (-3078);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1712));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1712), (short)19603, (short) (-2681), (short)2537, (short)1, (short) (-2377), (short) (-3078)}, shortArray1);
      assertArrayEquals(new short[] {(short)19603, (short) (-2681), (short)2537, (short)1, (short) (-2377), (short) (-3078)}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'V');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      char char0 = ',';
      Character character0 = Character.valueOf(',');
      assertNotNull(character0);
      assertEquals(',', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertNotNull(character1);
      assertEquals(',', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('o');
      assertNotNull(character2);
      assertEquals('o', (char)character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      Character[] characterArray1 = ArrayUtils.addAll(characterArray0, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(3, characterArray0.length);
      assertEquals(6, characterArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) ',';
      floatArray0[2] = (float) 'o';
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) char0;
      ArrayUtils.reverse(floatArray0, 2, (int) char0);
      assertArrayEquals(new float[] {(-1.0F), 44.0F, 44.0F, (-1.0F), 111.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = char0;
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {','}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 111.0F;
      doubleArray0[1] = (double) 111.0F;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) ',';
      doubleArray0[4] = (double) 'o';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 111.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {111.0, 111.0, 2.0, 44.0, 111.0}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1648.5481861;
      doubleArray0[1] = 1648.5481861;
      doubleArray0[2] = 1648.5481861;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1648.5481861);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {1648.5481861, 1648.5481861, 1648.5481861}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Boolean boolean0 = new Boolean("The Array must not be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-52);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)98, (int) (byte)84);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-61), (byte) (-52)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)84, (int) (byte) (-61));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false, true, true, false}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1648.5481861, 1648.5481861, 1648.5481861}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1648.5481861, 1648.5481861, 1648.5481861, 1648.5481861, 1648.5481861, 1648.5481861}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short)1;
      shortArray0[0] = (short)1;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short)1;
      intArray0[5] = (int) (short)1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 1;
      MutableInt mutableInt0 = new MutableInt(1);
      assertNotNull(mutableInt0);
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1L, mutableInt0.longValue());
      
      Integer integer0 = mutableInt0.getValue();
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1L, mutableInt0.longValue());
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertEquals(1, (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      double[] doubleArray1 = ArrayUtils.insert(int0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 655.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-454.5708179534), (-11), (-454.5708179534));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 655.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 150, 150, 150);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 150;
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) 150);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {150L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 585);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 150;
      floatArray0[1] = (float) 150;
      floatArray0[2] = (float) 585;
      floatArray0[3] = (float) 150L;
      floatArray0[4] = (float) 150L;
      floatArray0[5] = (float) 150L;
      floatArray0[6] = (float) 150L;
      floatArray0[7] = (float) 150L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 150.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {150.0F, 150.0F, 585.0F, 150.0F, 150.0F, 150.0F, 150.0F, 150.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(7, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, floatArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(18, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 99.0F;
      floatArray0[1] = 3254.23F;
      floatArray0[2] = 2773.0F;
      floatArray0[3] = 970.1F;
      floatArray0[4] = 3254.23F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 99.0F;
      floatArray0[7] = 970.1F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {99.0F, 3254.23F, 2773.0F, 970.1F, 3254.23F, 0.0F, 99.0F, 970.1F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 970.1F;
      doubleArray0[2] = (double) 99.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-24));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 970.0999755859375, 99.0}, doubleArray0, 0.01);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-1969.076F), 986);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {99.0F, 3254.23F, 2773.0F, 970.1F, 3254.23F, 0.0F, 99.0F, 970.1F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)444;
      shortArray0[1] = (short)54;
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      ArrayUtils.shift(byteArray0, 2189);
      assertArrayEquals(new byte[] {(byte)89, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)89}, byteArray0);
      assertEquals(10, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)89;
      ArrayUtils.shift(byteArray1, 1596);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)89}, byteArray1);
      assertEquals(1, byteArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '4');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'4', 'G'}, charArray1);
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertEquals(2, charArray1.length);
      assertEquals(1, charArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((byte)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)89);
      assertNotNull(double1);
      assertEquals(89.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, double1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (byte)89;
      doubleArray2[1] = (double) (short)444;
      doubleArray2[2] = (double) 1596;
      doubleArray2[3] = (double) 2189;
      doubleArray2[4] = (double) (short)54;
      doubleArray2[5] = (double) (short)54;
      doubleArray2[6] = (double) (short)444;
      doubleArray2[7] = (double) (short)444;
      doubleArray2[8] = (double) (short)444;
      double[] doubleArray3 = ArrayUtils.removeAllOccurrences(doubleArray2, 444.0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {89.0, 1596.0, 2189.0, 54.0, 54.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {89.0, 444.0, 1596.0, 2189.0, 54.0, 54.0, 444.0, 444.0, 444.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray3.length);
      assertEquals(9, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), (-1.0), (-1.0), (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'R';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-24), (byte)36, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((byte) (-24));
      assertNotNull(short0);
      assertEquals((short) (-24), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-24)}, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte) (-24);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte) (-24);
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte) (-1);
      byteArray2[7] = (byte) (-24);
      byteArray2[8] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(boolean0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-1), (byte) (-1), (byte) (-24), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-24), (byte) (-1)}, byteArray2);
      assertEquals(9, byteArray2.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte)36;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-254), (int) (byte) (-24));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), 36L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)444;
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      ArrayUtils.shift(byteArray0, 2189);
      assertArrayEquals(new byte[] {(byte)89, (byte)89}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)444, 1065);
      assertArrayEquals(new short[] {(short)444, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)444;
      doubleArray0[1] = (double) 2189;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) 2189;
      doubleArray0[4] = (double) (short)54;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2189.0, (int) (byte)89, 2551.759);
      assertEquals(4, int0);
      assertArrayEquals(new double[] {444.0, 2189.0, 0.0, 2189.0, 54.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)89, (byte)89}, byteArray0);
      assertArrayEquals(new byte[] {(byte)89, (byte)89, (byte)89, (byte)89}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      ArrayUtils.reverse(doubleArray0, (-1659), 2);
      assertArrayEquals(new double[] {2189.0, 444.0, 0.0, 2189.0, 54.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 1, 1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, 4372, 56);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 975L;
      longArray0[1] = 0L;
      longArray0[2] = 150L;
      longArray0[3] = (-1L);
      longArray0[4] = 1038L;
      longArray0[5] = (-2147483648L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {975L, 0L, 150L, (-1L), 1038L, (-2147483648L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 4897.0F);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-2147483648L);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 150L;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-2.147483648E9));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2.147483648E9), 0.0, (-2.147483648E9), 0.0, 150.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2.147483648E9), 0.0, 150.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 3702.035355424282, (-114.620896));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(bitSet0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2.147483648E9), 0.0, (-2.147483648E9), 0.0, 150.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2.147483648E9), 0.0, 150.0}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      Float[] floatArray1 = new Float[0];
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      
      ArrayUtils.swap((Object[]) floatArray1, (-464), (-464), 0);
      assertNotSame(floatArray1, floatArray2);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertEquals(0, floatArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = ')';
      charArray0[2] = '$';
      charArray0[3] = '[';
      charArray0[4] = 's';
      charArray0[5] = '?';
      charArray0[6] = ')';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'!', ')', '$', '[', 's', '?', ')'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(14, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)112;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)112;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2921.7157), (-1.0));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {112.0, 0.0, 112.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {112.0, 0.0, 112.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-2145784688));
      assertNotNull(integer0);
      assertEquals((-2145784688), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2145784688));
      assertNotNull(integer1);
      assertEquals((-2145784688), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-15.715647F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-15.715647F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-15.715647F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-15.715647F), (-15.715647F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-15.715647F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-15.715647F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray2.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'v';
      charArray0[2] = ',';
      ArrayUtils.shift(charArray0, 34, 42, 102);
      assertArrayEquals(new char[] {'c', 'v', ','}, charArray0);
      assertEquals(3, charArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) booleanArray0);
      assertSame(booleanArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-775);
      Long long0 = new Long((-775));
      assertNotNull(long0);
      assertEquals((-775L), (long)long0);
      
      Long long1 = new Long((-508L));
      assertNotNull(long1);
      assertEquals((-508L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      char char0 = 'O';
      Character character0 = Character.valueOf('O');
      assertNotNull(character0);
      assertEquals('O', (char)character0);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertTrue(boolean0);
      assertEquals(5, characterArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = char0;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1202;
      shortArray0[1] = (short)16;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1513), (int) (short)16);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1202, (short)16, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)1202, (short)16, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-775), 0, 0, 0, 0}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'O';
      floatArray0[1] = (float) (-775);
      floatArray0[2] = (float) (short)1202;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {79.0F, (-775.0F), 1202.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.swap((long[]) null, (int) char0, (int) char0, (int) char0);
      char[] charArray1 = Character.toChars((int) 'O');
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'O'}, charArray1);
      assertEquals(1, charArray1.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) characterArray0);
      assertSame(characterArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, objectArray0.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (-775));
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.removeElement((long[]) null, 2653L);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-775);
      Long long0 = new Long(597L);
      assertNotNull(long0);
      assertEquals(597L, (long)long0);
      
      Long long1 = new Long((-508L));
      assertNotNull(long1);
      assertEquals((-508L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      char char0 = 'O';
      Character character0 = Character.valueOf('O');
      assertNotNull(character0);
      assertEquals('O', (char)character0);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertTrue(boolean0);
      assertEquals(5, characterArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = char0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1202;
      shortArray0[1] = (short)16;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1513), (int) (short)16);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1202, (short)16}, shortArray1);
      assertArrayEquals(new short[] {(short)1202, (short)16}, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 2);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'O';
      floatArray0[1] = (float) (-775);
      floatArray0[2] = (float) (short)1202;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {79.0F, (-775.0F), 1202.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.swap((long[]) null, (int) char0, (int) char0, (int) char0);
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2407, 872);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'O', '\u0000'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(2, charArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) characterArray0);
      assertSame(characterArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, objectArray0.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, 597L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("`IOHq[8XV|z]WD");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-4L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 38.0F;
      floatArray0[1] = (float) (-4L);
      floatArray0[2] = (float) (-4L);
      floatArray0[3] = (float) (-4L);
      floatArray0[4] = (float) (-4L);
      floatArray0[5] = (float) (-4L);
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {38.0F, (-4.0F), (-4.0F), (-4.0F), (-4.0F), (-4.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1089), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1089, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3150, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3150, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)18;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(23, byteArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'f';
      charArray0[4] = '&';
      charArray0[5] = '\\';
      charArray0[6] = '0';
      charArray0[7] = 'r';
      ArrayUtils.shift(charArray0, (int) (byte)47, (int) (byte)47, (int) (byte)47);
      assertArrayEquals(new char[] {'v', 'U', 'U', 'f', '&', '\\', '0', 'r'}, charArray0);
      assertEquals(8, charArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'v';
      longArray0[1] = (long) 'v';
      longArray0[2] = (long) 'v';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {118L, 118L, 118L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      double[] doubleArray0 = new double[6];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-4L));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {118L, 118L, 118L}, longArray0);
      assertArrayEquals(new long[] {118L, 118L, 118L}, longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)18;
      byteArray1[1] = (byte)74;
      byteArray1[2] = (byte)74;
      byteArray1[3] = (byte)18;
      byteArray1[4] = (byte)18;
      byteArray1[5] = (byte)18;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(148, byteArray1, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 148, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1629);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1629)}, shortArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1629)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(3, shortArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-1629);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 102, (int) (short) (-1629));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1629L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (short)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, floatArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((-2132306119));
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integerArray0[0]);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(5, integerArray0.length);
      assertEquals(6, integerArray1.length);
      
      long[] longArray2 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray2);
      assertArrayEquals(new long[] {(-1629L), 0L, 0L}, longArray0);
      assertEquals(5, intArray0.length);
      assertEquals(2, longArray2.length);
      assertEquals(3, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Short short0 = new Short((short)1183);
      assertNotNull(short0);
      assertEquals((short)1183, (short)short0);
      
      Short short1 = new Short((short) (-2783));
      assertNotNull(short1);
      assertEquals((short) (-2783), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-2783));
      assertNotNull(short2);
      assertEquals((short) (-2783), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      Short short3 = new Short((short)45);
      assertNotNull(short3);
      assertEquals((short)45, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)857);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1183, (short) (-2783)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      ArrayUtils.shift(shortArray1, 8, 13, (-2587));
      assertArrayEquals(new short[] {(short)1183, (short) (-2783)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int int0 = ArrayUtils.indexOf(longArray1, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '/';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '/'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int1 = ArrayUtils.lastIndexOf(charArray0, '/', (-584));
      assertNotSame(charArray0, charArray1);
      assertEquals((-1), int1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', '/'}, charArray0);
      assertEquals(2, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '/');
      assertNotSame(charArray0, charArray1);
      assertNotNull(bitSet0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000', '/'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 2147483647L;
      longArray0[1] = 2147483647L;
      longArray0[2] = (-1254L);
      longArray0[3] = 610L;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)107;
      doubleArray0[1] = (double) 2147483647L;
      doubleArray0[2] = 2019.633230880103;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {107.0, 2.147483647E9, 2019.633230880103}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {107.0, 2.147483647E9, 2019.633230880103, 2.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      Short short0 = new Short((byte)107);
      assertNotNull(short0);
      assertEquals((short)107, (short)short0);
      
      Short short1 = new Short((byte) (-1));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((byte) (-1));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      Short short3 = new Short((byte) (-1));
      assertNotNull(short3);
      assertEquals((short) (-1), (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      
      Short short4 = new Short((short) (-2783));
      assertNotNull(short4);
      assertEquals((short) (-2783), (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      
      Short short5 = new Short((byte)107);
      assertNotNull(short5);
      assertEquals((short)107, (short)short5);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      
      Short short6 = new Short((byte)100);
      assertNotNull(short6);
      assertEquals((short)100, (short)short6);
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short0;
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-2783));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)107, (short) (-1), (short)107}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = ')';
      charArray0[2] = 'p';
      charArray0[3] = 'm';
      charArray0[4] = ')';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'N', (-815));
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'P', ')', 'p', 'm', ')'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)18;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(23, byteArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'U';
      floatArray0[1] = (float) (byte)18;
      floatArray0[2] = (float) 'v';
      floatArray0[3] = (float) 'f';
      floatArray0[4] = (float) (byte)74;
      floatArray0[5] = (float) (byte)74;
      floatArray0[6] = (float) 'v';
      ArrayUtils.swap(floatArray0, (int) (byte)2, (int) (byte)18, (int) (byte)18);
      assertArrayEquals(new float[] {85.0F, 18.0F, 118.0F, 102.0F, 74.0F, 74.0F, 118.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, (int) (byte)18, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'd';
      charArray0[2] = ',';
      ArrayUtils.shift(charArray0, (-1779), 42, 102);
      assertArrayEquals(new char[] {'c', 'd', ','}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2163;
      intArray0[1] = 121;
      intArray0[2] = (-2524);
      ArrayUtils.swap(intArray0, (-356), (-356), 121);
      assertArrayEquals(new int[] {2163, 121, (-2524)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, 32);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'B';
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[2];
      intArray0[2] = (int) (byte) (-5);
      intArray0[1] = (int) (byte)56;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)56;
      ArrayUtils.shift(floatArray0, (int) (byte)56);
      assertArrayEquals(new float[] {56.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2163;
      intArray0[1] = 121;
      intArray0[2] = (-2524);
      ArrayUtils.swap(intArray0, (-356), (-356), 121);
      assertArrayEquals(new int[] {2163, 121, (-2524)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, 5);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = 'B';
      int int1 = ArrayUtils.indexOf(charArray0, 'M');
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'^', 'B'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)56;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-5)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-5)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Character character0 = Character.valueOf('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      Character character1 = ArrayUtils.get((Character[]) null, 1755, character0);
      assertNotNull(character1);
      assertEquals('I', (char)character1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)56;
      longArray0[1] = (long) 'B';
      longArray0[2] = 118L;
      longArray0[3] = (long) 121;
      int int2 = ArrayUtils.lastIndexOf(longArray0, 1L);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new long[] {56L, 66L, 118L, 121L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1629);
      int[] intArray0 = new int[5];
      intArray0[3] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1629)}, shortArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1629)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(3, shortArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-1629);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 102, (int) (short) (-1629));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1629L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (short)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, floatArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((-2132306119));
      Integer[] integerArray0 = new Integer[22];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integerArray0[0]);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(22, integerArray0.length);
      assertEquals(23, integerArray1.length);
      
      long[] longArray2 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray2);
      assertArrayEquals(new long[] {(-1629L), 0L, 0L}, longArray0);
      assertEquals(5, intArray0.length);
      assertEquals(2, longArray2.length);
      assertEquals(3, longArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) integerArray0[4], (int) (short)0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(5, bitSet1.length());
      assertEquals(5, bitSet1.cardinality());
      assertEquals("{0, 1, 2, 3, 4}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(22, integerArray0.length);
      
      ArrayUtils.swap((double[]) null, (int) integerArray0[2], (-6), 822);
      assertNotSame(integerArray0, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(22, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(6, objectArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)868;
      shortArray0[2] = (short)868;
      shortArray0[3] = (short)868;
      shortArray0[4] = (short)868;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)868);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)121, (short)868, (short)868, (short)868}, shortArray1);
      assertArrayEquals(new short[] {(short)121, (short)868, (short)868, (short)868, (short)868}, shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      ArrayUtils.swap((int[]) null, (int) (short)121, (-635));
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)121, (short)868, (short)868, (short)868, (short)868}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 2145567962, (int) (short)868);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)8, (-1424));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)14, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-57), 2407);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[15];
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2407;
      longArray0[1] = (long) (byte)87;
      longArray0[2] = (long) 2407;
      longArray0[3] = (long) (byte)87;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {2407L, 87L, 2407L, 87L}, longArray0);
      assertEquals(4, longArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2407;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-66);
      floatArray0[3] = (float) 87L;
      floatArray0[4] = (float) 156;
      floatArray0[5] = (float) (byte)87;
      floatArray0[6] = (float) 2407;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {2407.0F, (-1.0F), (-66.0F), 87.0F, 156.0F, 87.0F, 2407.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)87;
      shortArray0[1] = (short) (byte)47;
      shortArray0[1] = (short)48;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)87, (short)48, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)87, (short)48}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      boolean boolean2 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {2407.0F, (-1.0F), (-66.0F), 87.0F, 156.0F, 87.0F, 2407.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 392.0632F;
      floatArray0[1] = (-2469.3F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-2469.3F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-952.8F);
      floatArray0[8] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {392.0632F, (-2469.3F), (-1.0F), (-2469.3F), 0.0F, (-1.0F), (-1.0F), (-952.8F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)98;
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)98, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte) (-1), (byte)98, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-2469.3F));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[0];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) doubleArray2, (Object[]) doubleArray2);
      assertNotSame(doubleArray2, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, 0.0F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {392.0632F, (-2469.3F), (-1.0F), (-2469.3F), 0.0F, (-1.0F), (-1.0F), (-952.8F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(17, floatArray2.length);
      assertEquals(18, floatArray1.length);
      
      Byte[] byteArray2 = new Byte[2];
      byteArray2[0] = (Byte) (byte) (-1);
      byteArray2[1] = (Byte) (byte) (-1);
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray3.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)98;
      shortArray0[1] = (short) (byte)98;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte)98;
      shortArray0[6] = (short) (byte)98;
      ArrayUtils.reverse(shortArray0, (int) byte0, 79);
      assertArrayEquals(new short[] {(short)98, (short)98, (short) (-1), (short) (-1), (short)1, (short)98, (short)98}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Short short0 = new Short((short) (-1073));
      assertNotNull(short0);
      assertEquals((short) (-1073), (short)short0);
      
      Short short1 = new Short((short) (-1120));
      assertNotNull(short1);
      assertEquals((short) (-1120), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      ArrayUtils.shift((short[]) null, (int) (short) (-1120));
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1477.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1477.0F), 1.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'r');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 1;
      MutableInt mutableInt0 = new MutableInt(1);
      assertNotNull(mutableInt0);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      
      Integer integer0 = mutableInt0.getValue();
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      integerArray0[3] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 1;
      MutableInt mutableInt0 = new MutableInt(1);
      assertNotNull(mutableInt0);
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      
      Integer integer0 = mutableInt0.getValue();
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertEquals(1, (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ArrayUtils.swap((char[]) null, 1136, 2256, 1136);
      Short short0 = new Short((short) (-1073));
      assertNotNull(short0);
      assertEquals((short) (-1073), (short)short0);
      
      Short short1 = new Short((short)2792);
      assertNotNull(short1);
      assertEquals((short)2792, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-1120));
      assertNotNull(short2);
      assertEquals((short) (-1120), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-29));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1120);
      doubleArray0[1] = (double) 1136;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1120.0));
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-1120.0), 1136.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-1120.0), 1136.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1263L);
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'c';
      ArrayUtils.swap(charArray0, (-584), (-45), (-584));
      assertArrayEquals(new char[] {'I', 'c'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Short short0 = new Short((short) (-1120));
      assertNotNull(short0);
      assertEquals((short) (-1120), (short)short0);
      
      Short[] shortArray0 = new Short[2];
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      shortArray0[1] = short0;
      Short[] shortArray1 = ArrayUtils.addFirst(shortArray0, short0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(short0.equals((Object)short1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "x-`f";
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "x-`f";
      stringArray0[5] = "java.lang.Integer";
      stringArray0[4] = "java.lang.Integer";
      stringArray0[5] = "java.lang.Long";
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, stringArray0[3]);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray1.length);
      assertEquals(6, stringArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-45);
      floatArray0[1] = (float) (-1263L);
      floatArray0[2] = (-575.753F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 100, (-584));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-45.0F), (-1263.0F), (-575.753F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte) (-42));
      assertNotNull(byte0);
      assertEquals((byte) (-42), (byte)byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-39);
      Byte byte2 = Byte.valueOf((byte) (-39));
      assertNotNull(byte2);
      assertEquals((byte) (-39), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-42));
      assertNotNull(byte3);
      assertEquals((byte) (-42), (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte1);
      assertNotNull(byte4);
      assertEquals((byte) (-39), (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-1));
      assertNotNull(byte5);
      assertEquals((byte) (-1), (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte1);
      assertNotNull(byte6);
      assertEquals((byte) (-39), (byte)byte6);
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte) (-23));
      assertNotNull(byte7);
      assertEquals((byte) (-23), (byte)byte7);
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte)62);
      assertNotNull(byte8);
      assertEquals((byte)62, (byte)byte8);
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte7));
      
      byteArray0[7] = byte8;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-42), (byte) (-39), (byte) (-42), (byte) (-39), (byte) (-1), (byte) (-39), (byte) (-23), (byte)62}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'c';
      ArrayUtils.swap(charArray0, (-584), (-45), (-584));
      assertArrayEquals(new char[] {'I', 'c'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray0[0] = short0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.Integer";
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "java.lang.Integer";
      stringArray0[5] = "java.lang.Integer";
      stringArray0[4] = "java.lang.Integer";
      stringArray0[5] = "java.lang.Long";
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, stringArray0[3]);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-45);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 100, (-584));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-45.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(3, floatArray0.length);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte) (-42);
      Byte byte1 = new Byte((byte) (-42));
      assertNotNull(byte1);
      assertEquals((byte) (-42), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byteArray0[1] = (Byte) byte0;
      Byte byte2 = new Byte((byte) (-42));
      assertNotNull(byte2);
      assertEquals((byte) (-42), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertEquals((byte) (-42), (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte) (-1));
      assertNotNull(byte4);
      assertEquals((byte) (-1), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      
      byteArray0[4] = byte4;
      Byte byte5 = new Byte(byte0);
      assertNotNull(byte5);
      assertEquals((byte) (-42), (byte)byte5);
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      
      byteArray0[5] = byte5;
      byteArray0[6] = byte2;
      Byte byte6 = new Byte((byte)62);
      assertNotNull(byte6);
      assertEquals((byte)62, (byte)byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      
      byteArray0[7] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-42), (byte) (-42), (byte) (-42), (byte) (-42), (byte) (-1), (byte) (-42), (byte) (-42), (byte)62}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)108);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Short[] shortArray1 = new Short[9];
      Short short0 = new Short((short) (-265));
      assertNotNull(short0);
      assertEquals((short) (-265), (short)short0);
      
      ArrayUtils.swap((Object[]) shortArray1, (-2147269664), (-906));
      assertEquals(9, shortArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2147269664);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (short) (-265);
      floatArray0[3] = (float) (-906);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (short) (-265));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-2.14726963E9F), (-1.0F), (-265.0F), (-906.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2.14726963E9F), (-1.0F), (-265.0F), (-906.0F), (-265.0F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-2147269664);
      longArray0[1] = (long) (-906);
      longArray0[2] = (long) (-2147269664);
      longArray0[3] = (long) (-906);
      longArray0[4] = (long) (short)108;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-2147269664);
      ArrayUtils.swap(longArray0, 1671, (-2147483645));
      assertArrayEquals(new long[] {(-2147269664L), (-906L), (-2147269664L), (-906L), 108L, (-1L), (-1L), (-2147269664L)}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-775);
      Long long0 = new Long(597L);
      assertNotNull(long0);
      assertEquals(597L, (long)long0);
      
      Long long1 = new Long((-508L));
      assertNotNull(long1);
      assertEquals((-508L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      char char0 = 'O';
      Character character0 = Character.valueOf('O');
      assertNotNull(character0);
      assertEquals('O', (char)character0);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertTrue(boolean0);
      assertEquals(5, characterArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = char0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1202;
      shortArray0[1] = (short)16;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1513), (int) (short)16);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1202, (short)16}, shortArray1);
      assertArrayEquals(new short[] {(short)1202, (short)16}, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 2);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'O';
      floatArray0[1] = (float) (-775);
      floatArray0[2] = (float) (short)1202;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {79.0F, (-775.0F), 1202.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.swap((long[]) null, (int) char0, (int) char0, (int) char0);
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2407, 1022);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'O', '\u0000'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)101;
      shortArray0[4] = (short) (-1356);
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      boolean boolean0 = ArrayUtils.contains(charArray0, ')');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {')', ')', ')'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)101, (short)0, (short)0, (short) (-1356), (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean2 = ArrayUtils.isEmpty(doubleArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 848.062271;
      doubleArray0[2] = 2318.025;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3079.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 848.062271, 2318.025}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 848.062271, 2318.025}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1499.0F);
      floatArray0[1] = (-1499.0F);
      long[] longArray0 = new long[6];
      longArray0[0] = 7L;
      longArray0[1] = 9L;
      longArray0[2] = 2189L;
      floatArray0[3] = (float) (-1263L);
      longArray0[4] = (-2481L);
      longArray0[5] = 3928L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {7L, 9L, 2189L, 0L, (-2481L), 3928L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'F';
      charArray0[2] = ')';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {')', 'F', 'P'}, charArray0);
      assertEquals(3, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 7L;
      doubleArray0[1] = (double) 7L;
      doubleArray0[2] = (double) 7L;
      doubleArray0[3] = (double) (-1263L);
      doubleArray0[4] = (double) 'P';
      doubleArray0[5] = (double) 7L;
      doubleArray0[6] = (double) 9L;
      doubleArray0[7] = 100.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 3928L);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {7.0, 7.0, 7.0, (-1263.0), 80.0, 7.0, 9.0, 100.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7.0, 7.0, 7.0, (-1263.0), 80.0, 7.0, 9.0, 100.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long[] longArray0 = new long[2];
      longArray0[0] = (-1263L);
      longArray0[1] = (-1263L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1263L), (-1263L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.swap(doubleArray0, (-1261), (-1261));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1335;
      Character character0 = new Character('1');
      assertNotNull(character0);
      assertEquals('1', (char)character0);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf('B');
      assertNotNull(character1);
      assertEquals('B', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[2] = character1;
      characterArray0[3] = character0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[8];
      MutableInt mutableInt0 = new MutableInt((int) character0);
      assertNotNull(mutableInt0);
      assertFalse(character0.equals((Object)character1));
      assertEquals(49L, mutableInt0.longValue());
      assertEquals("49", mutableInt0.toString());
      assertEquals(49.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(49, (int)mutableInt0.getValue());
      assertEquals((byte)49, mutableInt0.byteValue());
      assertEquals(49, (int)mutableInt0.toInteger());
      assertEquals(49.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(49, mutableInt0.intValue());
      assertEquals((short)49, mutableInt0.shortValue());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((Number) (short)1335);
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(1335, (int)mutableInt1.getValue());
      assertEquals(1335.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)55, mutableInt1.byteValue());
      assertEquals(1335, (int)mutableInt1.toInteger());
      assertEquals(1335.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(1335L, mutableInt1.longValue());
      assertEquals(1335, mutableInt1.intValue());
      assertEquals("1335", mutableInt1.toString());
      assertEquals((short)1335, mutableInt1.shortValue());
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(28);
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertEquals(28.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(28L, mutableInt2.longValue());
      assertEquals(28.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(28, mutableInt2.intValue());
      assertEquals((short)28, mutableInt2.shortValue());
      assertEquals("28", mutableInt2.toString());
      assertEquals((byte)28, mutableInt2.byteValue());
      assertEquals(28, (int)mutableInt2.toInteger());
      assertEquals(28, (int)mutableInt2.getValue());
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(28);
      assertNotNull(mutableInt3);
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertEquals(28, mutableInt3.intValue());
      assertEquals(28, (int)mutableInt3.toInteger());
      assertEquals(28.0, mutableInt3.doubleValue(), 0.01);
      assertEquals((byte)28, mutableInt3.byteValue());
      assertEquals(28.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals((short)28, mutableInt3.shortValue());
      assertEquals("28", mutableInt3.toString());
      assertEquals(28, (int)mutableInt3.getValue());
      assertEquals(28L, mutableInt3.longValue());
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt((int) character0);
      assertNotNull(mutableInt4);
      assertFalse(character0.equals((Object)character1));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertTrue(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertEquals(49.0, mutableInt4.doubleValue(), 0.01);
      assertEquals("49", mutableInt4.toString());
      assertEquals(49.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(49L, mutableInt4.longValue());
      assertEquals(49, mutableInt4.intValue());
      assertEquals((short)49, mutableInt4.shortValue());
      assertEquals(49, (int)mutableInt4.getValue());
      assertEquals((byte)49, mutableInt4.byteValue());
      assertEquals(49, (int)mutableInt4.toInteger());
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt((int) character0);
      assertNotNull(mutableInt5);
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertTrue(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertTrue(mutableInt5.equals((Object)mutableInt4));
      assertFalse(character0.equals((Object)character1));
      assertEquals(49L, mutableInt5.longValue());
      assertEquals(49, mutableInt5.intValue());
      assertEquals((short)49, mutableInt5.shortValue());
      assertEquals(49.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals(49, (int)mutableInt5.getValue());
      assertEquals(49, (int)mutableInt5.toInteger());
      assertEquals("49", mutableInt5.toString());
      assertEquals(49.0, mutableInt5.doubleValue(), 0.01);
      assertEquals((byte)49, mutableInt5.byteValue());
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = new MutableInt((-1263L));
      assertNotNull(mutableInt6);
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertEquals("-1263", mutableInt6.toString());
      assertEquals((-1263L), mutableInt6.longValue());
      assertEquals((short) (-1263), mutableInt6.shortValue());
      assertEquals((-1263), mutableInt6.intValue());
      assertEquals((-1263), (int)mutableInt6.getValue());
      assertEquals((-1263.0), mutableInt6.doubleValue(), 0.01);
      assertEquals((byte)17, mutableInt6.byteValue());
      assertEquals((-1263.0F), mutableInt6.floatValue(), 0.01F);
      assertEquals((-1263), (int)mutableInt6.toInteger());
      
      mutableIntArray0[6] = mutableInt6;
      MutableInt mutableInt7 = new MutableInt(mutableInt2);
      assertNotNull(mutableInt7);
      assertFalse(mutableInt7.equals((Object)mutableInt0));
      assertFalse(mutableInt7.equals((Object)mutableInt4));
      assertFalse(mutableInt7.equals((Object)mutableInt1));
      assertFalse(mutableInt7.equals((Object)mutableInt5));
      assertFalse(mutableInt7.equals((Object)mutableInt6));
      assertTrue(mutableInt7.equals((Object)mutableInt2));
      assertTrue(mutableInt7.equals((Object)mutableInt3));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt3));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt4));
      assertFalse(mutableInt2.equals((Object)mutableInt6));
      assertFalse(mutableInt2.equals((Object)mutableInt5));
      assertEquals("28", mutableInt7.toString());
      assertEquals(28, (int)mutableInt7.getValue());
      assertEquals((short)28, mutableInt7.shortValue());
      assertEquals(28.0F, mutableInt7.floatValue(), 0.01F);
      assertEquals(28, (int)mutableInt7.toInteger());
      assertEquals((byte)28, mutableInt7.byteValue());
      assertEquals(28, mutableInt7.intValue());
      assertEquals(28.0, mutableInt7.doubleValue(), 0.01);
      assertEquals(28L, mutableInt7.longValue());
      assertEquals(28.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(28L, mutableInt2.longValue());
      assertEquals(28.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(28, mutableInt2.intValue());
      assertEquals((short)28, mutableInt2.shortValue());
      assertEquals("28", mutableInt2.toString());
      assertEquals((byte)28, mutableInt2.byteValue());
      assertEquals(28, (int)mutableInt2.toInteger());
      assertEquals(28, (int)mutableInt2.getValue());
      
      mutableIntArray0[7] = mutableInt7;
      Comparator<MutableInt> comparator0 = (Comparator<MutableInt>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1242), Integer.MAX_VALUE).when(comparator0).compare(any(org.apache.commons.lang3.mutable.MutableInt.class) , any(org.apache.commons.lang3.mutable.MutableInt.class));
      boolean boolean0 = ArrayUtils.isSorted(mutableIntArray0, comparator0);
      assertFalse(boolean0);
      assertEquals(8, mutableIntArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      long long0 = 92L;
      Long long1 = Long.valueOf(92L);
      assertNotNull(long1);
      assertEquals(92L, (long)long1);
      
      Long long2 = new Long(208L);
      assertNotNull(long2);
      assertEquals(208L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      Long long3 = new Long(208L);
      assertNotNull(long3);
      assertEquals(208L, (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      
      Long long4 = new Long(1L);
      assertNotNull(long4);
      assertEquals(1L, (long)long4);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      
      Long long5 = new Long(1941L);
      assertNotNull(long5);
      assertEquals(1941L, (long)long5);
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long3));
      
      Long long6 = new Long(2379L);
      assertNotNull(long6);
      assertEquals(2379L, (long)long6);
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      
      Long long7 = new Long((-1409L));
      assertNotNull(long7);
      assertEquals((-1409L), (long)long7);
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long4));
      
      Long[] longArray0 = new Long[6];
      longArray0[0] = long1;
      longArray0[1] = long3;
      Long long8 = new Long((long) longArray0[1]);
      assertNotNull(long8);
      assertEquals(208L, (long)long8);
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long0));
      assertTrue(long8.equals((Object)long3));
      assertTrue(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long4));
      assertFalse(long8.equals((Object)long6));
      assertEquals(6, longArray0.length);
      
      longArray0[2] = long8;
      longArray0[3] = long5;
      longArray0[4] = long6;
      longArray0[5] = long5;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 92L;
      floatArray0[1] = (float) long0;
      floatArray0[2] = (float) (long)longArray0[2];
      floatArray0[3] = (float) (long)longArray0[2];
      floatArray0[4] = (-1006.2378F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) (long)longArray0[2];
      floatArray0[7] = (float) (long)longArray0[1];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {92.0F, 92.0F, 208.0F, 208.0F, (-1006.2378F), 1.0F, 208.0F, 208.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {92.0F, 92.0F, 208.0F, 208.0F, (-1006.2378F), 1.0F, 208.0F, 208.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, 1095, (-906));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {92.0F, 92.0F, 208.0F, 208.0F, (-1006.2378F), 1.0F, 208.0F, 208.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-68));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('x');
      assertNotNull(character0);
      assertEquals('x', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('+');
      assertNotNull(character1);
      assertEquals('+', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertFalse(boolean0);
      assertEquals(2, characterArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(longArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, longArray0.length);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-68));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      Short short0 = new Short((short)51);
      assertNotNull(short0);
      assertEquals((short)51, (short)short0);
      
      Float float0 = new Float((double) (short)51);
      assertNotNull(float0);
      assertEquals(51.0F, (float)float0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) float0);
      assertEquals((-1), int0);
      assertEquals(9, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1612));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1612);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1612.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1612.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-4);
      byteArray0[7] = (byte) (-122);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 57, 887);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-4), (byte) (-122), (byte) (-4), (byte) (-122), (byte)32, (byte) (-4), (byte)0, (byte) (-122)}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1499.0F);
      floatArray0[1] = (-1499.0F);
      floatArray0[2] = 4897.0F;
      floatArray0[3] = 631.0F;
      floatArray0[4] = (-1499.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 4897.0F, 2);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1499.0F), (-1499.0F), 4897.0F, 631.0F, (-1499.0F)}, floatArray0, 0.01F);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = (-2656);
      intArray0[4] = (-1703);
      intArray0[5] = 2;
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 2, 2, (-2656), (-1703), 2}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'A';
      charArray0[2] = '1';
      charArray0[3] = ':';
      charArray0[5] = '|';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'6', 'A', '1', ':', '\u0000', '|'}, charArray0);
      assertEquals(12, charArray1.length);
      assertEquals(6, charArray0.length);
      
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) (-1499.0F);
      objectArray0[1] = (Object) (-2656);
      objectArray0[2] = (Object) '1';
      objectArray0[3] = (Object) (-1499.0F);
      objectArray0[4] = (Object) '|';
      objectArray0[5] = (Object) '6';
      objectArray0[6] = (Object) 2;
      objectArray0[7] = (Object) 2;
      Short short0 = new Short((short) (-53));
      assertNotNull(short0);
      assertEquals((short) (-53), (short)short0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) short0, 2);
      assertEquals((-1), int0);
      assertEquals(21, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)444;
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      ArrayUtils.shift(byteArray0, 2189);
      assertArrayEquals(new byte[] {(byte)89, (byte)89}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)444, 1065);
      assertArrayEquals(new short[] {(short)444, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)444;
      doubleArray0[1] = (double) 2189;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) 2189;
      doubleArray0[4] = (double) (short)54;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2189.0, (int) (byte)89, 2551.759);
      assertEquals(4, int0);
      assertArrayEquals(new double[] {444.0, 2189.0, 0.0, 2189.0, 54.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)89, (byte)89}, byteArray0);
      assertArrayEquals(new byte[] {(byte)89, (byte)89, (byte)89, (byte)89}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = 'u';
      ArrayUtils.shift(charArray0, (-661));
      assertArrayEquals(new char[] {'u', 'y'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 2189.0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = ArrayUtils.get(objectArray0, 1040, object1);
      assertNotSame(object1, object0);
      assertSame(object1, object2);
      assertNotSame(object2, object0);
      assertSame(object2, object1);
      assertNotNull(object2);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertEquals(4, objectArray0.length);
      
      objectArray0[1] = object2;
      objectArray0[2] = (Object) 'u';
      objectArray0[3] = (Object) 'u';
      int int1 = ArrayUtils.lastIndexOf(objectArray0, object0, 1065);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertEquals((-1), int1);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(int1 == int0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1499.0F);
      floatArray0[1] = (-1499.0F);
      floatArray0[2] = 4897.0F;
      floatArray0[3] = 631.0F;
      floatArray0[4] = (-1499.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 4897.0F, 2);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1499.0F), (-1499.0F), 4897.0F, 631.0F, (-1499.0F)}, floatArray0, 0.01F);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = (-2656);
      intArray0[4] = (-1703);
      intArray0[5] = 2;
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 2, 2, (-2656), (-1703), 2}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'A';
      charArray0[2] = '1';
      charArray0[3] = ':';
      charArray0[4] = ' ';
      charArray0[5] = '|';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'6', 'A', '1', ':', ' ', '|'}, charArray0);
      assertEquals(12, charArray1.length);
      assertEquals(6, charArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-1499.0F);
      objectArray0[1] = (Object) (-2656);
      objectArray0[2] = (Object) '1';
      objectArray0[3] = (Object) (-1499.0F);
      objectArray0[4] = (Object) '|';
      objectArray0[5] = (Object) '6';
      objectArray0[6] = (Object) 2;
      objectArray0[7] = (Object) 2;
      Short short0 = new Short((short) (-53));
      assertNotNull(short0);
      assertEquals((short) (-53), (short)short0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) short0, 2);
      assertEquals((-1), int0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Short short0 = new Short((short)9);
      assertNotNull(short0);
      assertEquals((short)9, (short)short0);
      
      Short short1 = new Short((short)1429);
      assertNotNull(short1);
      assertEquals((short)1429, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short)1429);
      assertNotNull(short2);
      assertEquals((short)1429, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short short3 = new Short((short)9);
      assertNotNull(short3);
      assertEquals((short)9, (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      
      Short short4 = new Short((short) (-3167));
      assertNotNull(short4);
      assertEquals((short) (-3167), (short)short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      
      Short short5 = new Short((short)2);
      assertNotNull(short5);
      assertEquals((short)2, (short)short5);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      
      Short short6 = new Short((short)1595);
      assertNotNull(short6);
      assertEquals((short)1595, (short)short6);
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short3;
      shortArray0[1] = short5;
      shortArray0[2] = short4;
      Short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray1, (Object) short0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals((-1), int0);
      assertTrue(short0.equals((Object)short3));
      assertFalse(short0.equals((Object)short4));
      assertFalse(short0.equals((Object)short5));
      assertFalse(short0.equals((Object)short2));
      assertFalse(short0.equals((Object)short6));
      assertFalse(short0.equals((Object)short1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = 'E';
      charArray0[2] = '-';
      charArray0[3] = 'd';
      charArray0[4] = 'P';
      charArray0[5] = '[';
      ArrayUtils.swap(charArray0, 1724, (-2143729304), (-450));
      assertArrayEquals(new char[] {'/', 'E', '-', 'd', 'P', '['}, charArray0);
      assertEquals(6, charArray0.length);
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-450);
      intArray0[1] = (int) '[';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-450), 91}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1247L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, (-1247L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      Boolean boolean0 = new Boolean("Cnot store ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-84), 46);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)47, (byte)2, (byte)58, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)2);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(2, intArray0.length);
      
      ArrayUtils.shift(intArray0, (int) (byte)0, (-1893), 27);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (-855.579F));
      assertNull(floatArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)47;
      longArray0[1] = 3345L;
      longArray0[2] = (long) (-1893);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (byte)58;
      longArray0[6] = 597L;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2078), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2078, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "R!ekUFe{CKQ:j~s{c");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1L;
      floatArray0[8] = (-1566.58F);
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 1L;
      long[] longArray0 = new long[4];
      longArray0[0] = 13L;
      longArray0[1] = 977L;
      longArray0[2] = (-2080L);
      longArray0[3] = 121L;
      long[] longArray1 = ArrayUtils.add(longArray0, (-2080L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {13L, 977L, (-2080L), 121L}, longArray0);
      assertArrayEquals(new long[] {13L, 977L, (-2080L), 121L, (-2080L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-3915L);
      longArray0[1] = 13L;
      longArray0[3] = 2914L;
      long[] longArray1 = ArrayUtils.add(longArray0, (-2107L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-3915L), 13L, 0L, 2914L}, longArray0);
      assertArrayEquals(new long[] {(-3915L), 13L, 0L, 2914L, (-2107L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-78);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-28), (byte) (-99), (byte) (-78)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-112);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)66;
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 1026, 550);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1026;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte) (-112);
      doubleArray0[3] = (double) 550;
      doubleArray0[4] = (double) 1026;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (-2694.7061);
      doubleArray0[7] = (double) (short)66;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1026.0, 0.0, (-112.0), 550.0, 1026.0, 0.0, (-2694.7061), 66.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)11, (byte)0, (byte) (-64), (byte) (-112), (byte) (-112), (byte)46, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = new Boolean("org.apache.commons.lang3.ArraySorter");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean0);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf(false);
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      
      booleanArray0[5] = boolean5;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 688);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 688, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'w';
      charArray0[1] = 'c';
      charArray0[2] = ';';
      charArray0[3] = ':';
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'w';
      floatArray0[1] = (float) ';';
      floatArray0[2] = (float) ';';
      floatArray0[3] = (-615.0F);
      floatArray0[4] = (-829.9F);
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 'c';
      floatArray0[7] = 746.49F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-1018), 2080164414, 234);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Float[] floatArray1 = new Float[6];
      floatArray1[0] = (Float) (-829.9F);
      floatArray1[1] = (Float) 59.0F;
      floatArray1[2] = (Float) 59.0F;
      Float float0 = new Float((double) 2);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      floatArray1[3] = float0;
      floatArray1[4] = (Float) 59.0F;
      floatArray1[5] = (Float) 119.0F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-775);
      intArray0[1] = 1738;
      intArray0[2] = (-1);
      float[] floatArray0 = new float[0];
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1724;
      shortArray0[1] = (short)16;
      ArrayUtils.shift(shortArray0, (-1127));
      assertArrayEquals(new short[] {(short)16, (short)1724}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = 'd';
      charArray0[2] = 'I';
      charArray0[3] = 'a';
      charArray0[4] = 'o';
      charArray0[5] = 's';
      charArray0[6] = '[';
      charArray0[7] = 'p';
      int int0 = ArrayUtils.indexOf(charArray0, '-', (-2798));
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'-', 'd', 'I', 'a', 'o', 's', '[', 'p'}, charArray0);
      assertEquals(8, charArray0.length);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true}, booleanArray0));
      assertEquals("{1, 4, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, booleanArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5575.801;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-909.1416359068);
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true}, booleanArray0));
      assertEquals("{1, 4, 6}", bitSet1.toString());
      assertEquals(7, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.cardinality());
      assertEquals(7, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4458.930769), 128);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {5575.801, 0.0, Double.NaN, (-909.1416359068), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 128;
      intArray0[1] = 128;
      intArray0[2] = 128;
      intArray0[3] = 128;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {128, 128, 128, 128, (-1), (-1)}, intArray1);
      assertArrayEquals(new int[] {128, 128, 128, 128, (-1), (-1)}, intArray0);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      ArrayUtils.swap(shortArray0, 0, 1, 1952);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0, (Random) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[5];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1044.14682831);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Boolean boolean0 = new Boolean("The Array must not be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)24, (int) (short)0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      int int2 = ArrayUtils.indexOf(byteArray0, (byte) (-1), (int) (short)0);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {1L, 1L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 359, 105);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (short)0;
      doubleArray1[1] = (double) (short)0;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) 1L;
      doubleArray1[4] = (double) 1L;
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = (double) 359;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 1;
      int int2 = ArrayUtils.lastIndexOf(doubleArray1, 589.6605, 0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 1.0, 1.0, (-1.0), 359.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 359, 105);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (short)0;
      doubleArray1[1] = (double) (short)0;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) 1L;
      doubleArray1[4] = (double) 1L;
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = (double) 359;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 1;
      int int2 = ArrayUtils.lastIndexOf(doubleArray1, 589.6605, 0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1), int2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 1.0, 1.0, (-1.0), 359.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      int int0 = new Byte((byte)92);
      assertEquals((byte)92, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)92;
      shortArray0[1] = (short) (byte)92;
      shortArray0[2] = (short) (byte)92;
      shortArray0[3] = (short) (byte)92;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)92, (short)92, (short)92, (short)92}, shortArray0);
      assertArrayEquals(new short[] {(short)92, (short)92, (short)92, (short)92}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)92, (short)92, (short)92, (short)92}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)92, (short)92, (short)92, (short)92}, shortArray0);
      assertArrayEquals(new short[] {(short)92, (short)92, (short)92, (short)92, (short)92, (short)92, (short)92, (short)92}, shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray2.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)92;
      floatArray0[1] = (float) (short)92;
      floatArray0[2] = (float) (byte)92;
      floatArray0[3] = (float) 1351;
      floatArray0[4] = (-4261.7F);
      floatArray0[5] = (float) (short)92;
      floatArray0[6] = (float) 1351;
      floatArray0[4] = (float) (short)92;
      ArrayUtils.shift(floatArray0, 2, (byte)92, 2);
      assertArrayEquals(new float[] {92.0F, 92.0F, 1351.0F, 0.0F, 92.0F, 1351.0F, 92.0F, 92.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)92;
      intArray0[1] = 48;
      intArray0[2] = (int) (short)92;
      intArray0[3] = (int) (short)92;
      intArray0[4] = 2;
      MockRandom mockRandom0 = new MockRandom(4928L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {48, 92, 92, 2, 92}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      int[] intArray0 = new int[9];
      intArray0[0] = 4372;
      intArray0[1] = 4372;
      intArray0[2] = 4372;
      intArray0[3] = 56;
      intArray0[4] = 4372;
      intArray0[5] = 4372;
      intArray0[6] = 56;
      intArray0[7] = 4372;
      intArray0[8] = 4372;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 82, 4372);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {4372, 4372, 4372, 56, 4372, 4372, 56, 4372, 4372}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(9, intArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(6, objectArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)868;
      shortArray0[2] = (short)868;
      shortArray0[3] = (short)868;
      shortArray0[4] = (short)868;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-2));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)121, (short)868, (short)868, (short)868, (short)868}, shortArray1);
      assertArrayEquals(new short[] {(short)121, (short)868, (short)868, (short)868, (short)868}, shortArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)121, (short)868, (short)868, (short)868, (short)868}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "short";
      stringArray0[1] = "Z";
      stringArray0[2] = "Cannot store ";
      stringArray0[3] = "java.lang.Integer";
      stringArray0[4] = "java.lang.Integer";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-112);
      shortArray0[1] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1364));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-112), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-112), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      Double double0 = new Double((byte) (-112));
      assertNotNull(double0);
      assertEquals((-112.0), (double)double0, 0.01);
      
      Double double1 = new Double((byte) (-112));
      assertNotNull(double1);
      assertEquals((-112.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(5575.801);
      assertNotNull(double2);
      assertEquals(5575.801, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte) (-100);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0, (byte) (-112), (byte) (-112), (byte)120, (byte)0, (byte) (-112), (byte) (-100)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ArrayUtils.shift(byteArray0, (int) (short) (-1364));
      assertArrayEquals(new byte[] {(byte)120, (byte)0, (byte) (-112), (byte) (-100), (byte) (-112), (byte)0, (byte) (-112), (byte) (-112)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)120;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte) (-112);
      doubleArray0[3] = (double) (byte)120;
      doubleArray0[4] = (double) (byte) (-100);
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)120;
      doubleArray0[7] = (double) (short) (-1364);
      doubleArray0[8] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {120.0, 0.0, (-112.0), 120.0, (-100.0), 0.0, 120.0, (-1364.0), 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3517.38F);
      floatArray0[1] = (-677.254F);
      floatArray0[2] = 2191.0F;
      floatArray0[3] = (-802.2F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1570.0F;
      floatArray0[6] = 7.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 7.0F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-3517.38F), (-677.254F), 2191.0F, (-802.2F), 0.0F, 1570.0F, 7.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("`IOHq[8XV|z]WD");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1.0);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = floatArray0[0];
      Float float2 = new Float((double) floatArray0[0]);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(6, floatArray0.length);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1.0);
      assertNotNull(float3);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) floatArray0[3]);
      assertNotNull(float4);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals(6, floatArray0.length);
      
      floatArray0[4] = float4;
      Float float5 = new Float(1182.8004F);
      assertNotNull(float5);
      assertEquals(1182.8004F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      
      floatArray0[5] = float5;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'w';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = ':';
      charArray0[4] = 's';
      charArray0[5] = 'L';
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'c';
      doubleArray0[1] = (double) 'c';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-965.084790625944), 2);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {99.0, 99.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-457.214588), (-1), 98.0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {99.0, 99.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-82);
      ArrayUtils.shift(byteArray0, 980, 13, 980);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-82), (byte)0, (byte) (-68), (byte)0, (byte) (-82)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-82);
      objectArray0[1] = (Object) (byte)0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1]);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      Object[] objectArray1 = new Object[6];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) false;
      objectArray1[1] = (Object) (byte)0;
      objectArray1[3] = (Object) (byte)0;
      objectArray1[4] = (Object) (byte) (-82);
      objectArray1[5] = (Object) false;
      ArrayUtils.swap(objectArray1, (int) (byte) (-82), 102);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(6, objectArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      ArrayUtils.shift(doubleArray0, (int) (byte)0, 77, 76);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2037.918F;
      floatArray0[1] = 2037.918F;
      floatArray0[2] = 2037.918F;
      floatArray0[3] = (-3493.0F);
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {2037.918F, 2037.918F, (-3493.0F), 2037.918F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)26, (-635));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-3493.0F);
      objectArray0[1] = (Object) (-3493.0F);
      Integer integer0 = new Integer((byte) (-64));
      assertNotNull(integer0);
      assertEquals((-64), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-64), object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (-3493.0F);
      objectArray0[4] = (Object) 2037.918F;
      objectArray0[5] = (Object) 2037.918F;
      objectArray0[6] = (Object) 0.0;
      objectArray0[7] = (Object) 2037.918F;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertNotNull(bitSet0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      float float0 = 2.0F;
      Float float1 = new Float(2.0F);
      assertNotNull(float1);
      assertEquals(2.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      floatArray0[3] = float1;
      floatArray0[4] = float1;
      floatArray0[6] = float1;
      floatArray0[7] = float1;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BYTE_ARRAY, (-2993));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-2993));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = Float.NaN;
      floatArray0[1] = 785.139F;
      floatArray0[2] = 1570.0F;
      floatArray0[3] = (-656.104F);
      floatArray0[5] = 35.1F;
      floatArray0[6] = 35.1F;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F, 785.139F, 1570.0F, (-656.104F), 0.0F, 35.1F, 35.1F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(map0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-405);
      shortArray0[2] = (short) (-1610);
      shortArray0[3] = (short) (-2340);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-405), (short) (-1610), (short) (-2340)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-405);
      intArray0[2] = (int) (short)0;
      intArray0[3] = 0;
      intArray0[4] = (int) (short) (-405);
      intArray0[5] = (int) (short)0;
      intArray0[6] = (-1);
      intArray0[7] = (int) (short) (-1610);
      ArrayUtils.swap(intArray0, (int) (short) (-1610), (int) (short) (-2340));
      assertArrayEquals(new int[] {0, (-405), 0, 0, (-405), 0, (-1), (-1610)}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string0 = ArrayUtils.toString((Object) "java.lang.Integer", "");
      assertNotNull(string0);
      assertEquals("java.lang.Integer", string0);
      
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)59);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-998), 1146, 1146);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), 76);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      Float float0 = new Float((float) 32);
      assertNotNull(float0);
      assertEquals(32.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) 69);
      assertNotNull(float1);
      assertEquals(69.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(4154.7974F);
      assertNotNull(float2);
      assertEquals(4154.7974F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float((double) 32);
      assertNotNull(float3);
      assertEquals(32.0F, (float)float3, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      Float float4 = new Float((float) (-998));
      assertNotNull(float4);
      assertEquals((-998.0F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-998);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 69);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-998.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {69.0F, (-998.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      ArrayUtils.shift(booleanArray1, 69);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_SHORT_ARRAY, (short)16);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = 106;
      Object object0 = ArrayUtils.get(objectArray0, 106);
      assertNull(object0);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = null;
      int int1 = (-52);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-52);
      doubleArray0[1] = (double) 106;
      doubleArray0[2] = (double) (-52);
      ArrayUtils.swap(doubleArray0, 116, (-537));
      assertArrayEquals(new double[] {(-52.0), 106.0, (-52.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = ArrayUtils.subarray(doubleArray0, (-537), 106);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-52.0), 106.0, (-52.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-52.0), 106.0, (-52.0)}, doubleArray3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-537), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -537, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-57), 2407);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)47;
      shortArray0[1] = (short) (byte)47;
      shortArray0[2] = (short) (byte) (-57);
      ArrayUtils.swap(shortArray0, 2795, (-2145767034), 2795);
      assertArrayEquals(new short[] {(short)47, (short)47, (short) (-57)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, 0, (int) (byte)47);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)47, (short)47, (short) (-57)}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1566.8;
      doubleArray0[1] = (double) (short)47;
      doubleArray0[2] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 128);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1566.8, 47.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1566.8, 47.0, (-1.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Byte byte0 = new Byte((byte)22);
      assertNotNull(byte0);
      assertEquals((byte)22, (byte)byte0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) shortArray1, (Object) byte0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)47, (short)47, (short) (-57)}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.insert(1269, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)21845;
      shortArray0[1] = (short)21845;
      shortArray0[2] = (short)34;
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      Character character0 = new Character('l');
      assertNotNull(character0);
      assertEquals('l', (char)character0);
      
      Character character1 = new Character('=');
      assertNotNull(character1);
      assertEquals('=', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = new Character('}');
      assertNotNull(character2);
      assertEquals('}', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      Character[] characterArray0 = new Character[10];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      short[] shortArray0 = new short[2];
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Character character0 = new Character('}');
      assertNotNull(character0);
      assertEquals('}', (char)character0);
      
      Character character1 = new Character('}');
      assertNotNull(character1);
      assertEquals('}', (char)character1);
      assertTrue(character1.equals((Object)character0));
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[2];
      ArrayUtils.reverse(intArray0, (-649), 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (-649));
      assertNotNull(float0);
      assertEquals((-649.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("`IOHq[8XV|z]WD");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, boolean1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(boolean1.equals((Object)boolean3));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1.0);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) 0);
      assertNotNull(float3);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) floatArray0[3]);
      assertNotNull(float4);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      floatArray0[4] = float4;
      Float float5 = new Float(1182.8004F);
      assertNotNull(float5);
      assertEquals(1182.8004F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      floatArray0[5] = float5;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 369, 20, 1040);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 20;
      longArray0[1] = (long) 1040;
      longArray0[2] = (long) 20;
      longArray0[3] = (long) 1040;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {20L, 1040L, 20L, 1040L}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.swap((byte[]) null, 1337, 1337, 369);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1251L;
      longArray0[1] = 1251L;
      longArray0[2] = 1251L;
      longArray0[3] = 1251L;
      longArray0[4] = 9L;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1906);
      shortArray0[1] = (short) (-3937);
      shortArray0[2] = (short)466;
      shortArray0[3] = (short)2387;
      shortArray0[4] = (short)8;
      shortArray0[5] = (short) (-259);
      int[] intArray0 = new int[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short) (-1906), (short) (-3937), (short)466, (short)2387, (short)8, (short) (-259)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1906), (short) (-3937), (short)466, (short)2387, (short)8, (short) (-259)}, shortArray0);
      assertEquals(0, intArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (short) (-3937);
      doubleArray1[1] = (double) (short) (-3937);
      doubleArray1[2] = (double) 1251L;
      doubleArray1[3] = (double) 9L;
      doubleArray1[4] = (double) (short)2387;
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 1.0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-3937.0), (-3937.0), 1251.0, 9.0, 2387.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1931), (-1808));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)92, 48);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)92;
      shortArray0[1] = (short) (byte)92;
      shortArray0[2] = (short) (byte)92;
      shortArray0[3] = (short) (byte)92;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)92, (short)92, (short)92, (short)92}, shortArray0);
      assertArrayEquals(new short[] {(short)92, (short)92, (short)92, (short)92}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)92, (short)92, (short)92, (short)92}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)92, (short)92, (short)92, (short)92}, shortArray0);
      assertArrayEquals(new short[] {(short)92, (short)92, (short)92, (short)92, (short)92, (short)92, (short)92, (short)92}, shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray2.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)92;
      floatArray0[1] = (float) (short)92;
      floatArray0[2] = (float) (byte)92;
      floatArray0[3] = (float) 1351;
      floatArray0[4] = (float) (byte)92;
      floatArray0[5] = (float) (short)92;
      floatArray0[6] = (float) 1351;
      floatArray0[4] = (float) (short)92;
      ArrayUtils.shift(floatArray0, 2, (-1), 2);
      assertArrayEquals(new float[] {92.0F, 92.0F, 92.0F, 1351.0F, 92.0F, 92.0F, 1351.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(4928L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = '[';
      charArray0[2] = 'W';
      charArray0[3] = 'Q';
      charArray0[4] = 'M';
      charArray0[5] = '-';
      charArray0[6] = '\'';
      int int1 = ArrayUtils.indexOf(charArray0, '-');
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'~', '[', 'W', 'Q', 'M', '-', '\''}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 392.0632F;
      floatArray0[1] = (-2469.3F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-2469.3F);
      floatArray0[4] = (-179.3689F);
      floatArray0[5] = (-1.0F);
      Short short0 = new Short((short) (-5957));
      assertNotNull(short0);
      assertEquals((short) (-5957), (short)short0);
      
      Short short1 = new Short((short) (-5957));
      assertNotNull(short1);
      assertEquals((short) (-5957), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)1493);
      assertNotNull(short2);
      assertEquals((short)1493, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)2763);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-498), (-1767), (-498));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = 'p';
      charArray0[2] = 'O';
      charArray0[3] = '[';
      charArray0[4] = 'C';
      charArray0[5] = 'c';
      charArray0[6] = '';
      charArray0[7] = '4';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '`');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'`', 'p', 'O', '[', 'C', 'c', '', '4'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Short short0 = new Short((short) (-1073));
      assertNotNull(short0);
      assertEquals((short) (-1073), (short)short0);
      
      Short short1 = new Short((short)2792);
      assertNotNull(short1);
      assertEquals((short)2792, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-1120));
      assertNotNull(short2);
      assertEquals((short) (-1120), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = 386L;
      longArray0[1] = (long) (short) (-1120);
      longArray0[2] = (long) (short) (-1073);
      longArray0[3] = (long) (short) (-1073);
      longArray0[4] = (long) 1494;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-837), 4);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {386L, (-1120L), (-1073L), (-1073L), 1494L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {386L, (-1120L), (-1073L), (-1073L)}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ArrayUtils.swap((char[]) null, 1136, 2256, 1136);
      Short short0 = new Short((short) (-1073));
      assertNotNull(short0);
      assertEquals((short) (-1073), (short)short0);
      
      Short short1 = new Short((short)2792);
      assertNotNull(short1);
      assertEquals((short)2792, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-1120));
      assertNotNull(short2);
      assertEquals((short) (-1120), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-29));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2256;
      doubleArray0[1] = (double) (short) (-1120);
      doubleArray0[2] = (double) (short) (-1073);
      doubleArray0[3] = (double) 2256;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (short)2792;
      ArrayUtils.shift(doubleArray0, (int) (short) (-1073), 1494, (-1727));
      assertArrayEquals(new double[] {2792.0, 2256.0, (-1120.0), (-1073.0), 2256.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      ArrayUtils.reverse((Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-1073);
      floatArray0[1] = (float) 2256;
      floatArray0[2] = (-1254.0F);
      floatArray0[3] = (float) 2256;
      floatArray0[4] = (float) 2256;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) (-1727);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 1136);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1136.0F, (-1073.0F), 2256.0F, (-1254.0F), 2256.0F, 2256.0F, 0.0F, (-1727.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1073.0F), 2256.0F, (-1254.0F), 2256.0F, 2256.0F, 0.0F, (-1727.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 386L;
      longArray0[1] = (long) (short) (-1120);
      longArray0[2] = (long) (short) (-1073);
      longArray0[3] = (long) (short) (-1073);
      longArray0[4] = (long) 1494;
      longArray0[5] = (long) 1136;
      longArray0[6] = (long) 2256;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-837), 4);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {386L, (-1120L), (-1073L), (-1073L)}, longArray1);
      assertArrayEquals(new long[] {386L, (-1120L), (-1073L), (-1073L), 1494L, 1136L, 2256L}, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 100;
      ArrayUtils.shift((float[]) null, (-2114946016));
      int int0 = ArrayUtils.indexOf(doubleArray0, 2387.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      MutableInt mutableInt0 = new MutableInt(2);
      assertNotNull(mutableInt0);
      assertEquals(2, mutableInt0.intValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      
      mutableInt0.subtract(2);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      
      Integer integer0 = mutableInt0.toInteger();
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      
      Integer[] integerArray0 = new Integer[16];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      mutableInt0.add((Number) integer0);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      
      mutableInt0.add((-4544));
      assertEquals((-4544), (int)mutableInt0.toInteger());
      assertEquals((-4544), (int)mutableInt0.getValue());
      assertEquals((-4544.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-4544L), mutableInt0.longValue());
      assertEquals((short) (-4544), mutableInt0.shortValue());
      assertEquals((-4544), mutableInt0.intValue());
      assertEquals((-4544.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-4544", mutableInt0.toString());
      assertEquals((byte)64, mutableInt0.byteValue());
      
      integerArray0[2] = integer0;
      int int0 = mutableInt0.decrementAndGet();
      assertEquals((-4545), int0);
      assertEquals((-4545), (int)mutableInt0.getValue());
      assertEquals((-4545), (int)mutableInt0.toInteger());
      assertEquals((-4545.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-4545L), mutableInt0.longValue());
      assertEquals((-4545), mutableInt0.intValue());
      assertEquals((short) (-4545), mutableInt0.shortValue());
      assertEquals("-4545", mutableInt0.toString());
      assertEquals((-4545.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)63, mutableInt0.byteValue());
      
      integerArray0[3] = integer0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-4544);
      floatArray0[1] = (float) (-4545);
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (-179.3689F);
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) (-4545);
      floatArray0[7] = 2214.7F;
      ArrayUtils.shift(floatArray0, (-4544), 2146181786, 2);
      assertArrayEquals(new float[] {(-4545.0F), 2214.7F, (-4544.0F), (-4545.0F), 2.0F, 2.0F, (-179.3689F), 2.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 2447);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'X';
      charArray0[2] = 'B';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ';');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'p', 'X', 'B'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, charArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.lang3.builder.HashCodeBuilder";
      stringArray0[1] = "org.apache.commons.lang3.builder.HashCodeBuilder";
      stringArray0[2] = "org.apache.commons.lang3.builder.HashCodeBuilder";
      String[] stringArray1 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      
      Double double0 = new Double(2447);
      assertNotNull(double0);
      assertEquals(2447.0, (double)double0, 0.01);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) stringArray1, (Object) double0, 2447);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, stringArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'X';
      intArray0[1] = 939;
      intArray0[2] = (int) 'X';
      intArray0[3] = (int) 'X';
      BitSet bitSet2 = ArrayUtils.indexesOf(intArray0, 4582, 2447);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertNotNull(bitSet2);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertArrayEquals(new int[] {88, 939, 88, 88}, intArray0);
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(4, intArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {88, 939, 88, 88}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 939, 15);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'p', 'X', 'B'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      
      BitSet bitSet3 = ArrayUtils.indexesOf((Object[]) stringArray0, (Object) "z5_3C");
      assertNotSame(bitSet3, bitSet2);
      assertNotSame(bitSet3, bitSet0);
      assertNotSame(bitSet3, bitSet1);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(bitSet3);
      assertTrue(bitSet3.equals((Object)bitSet0));
      assertTrue(bitSet3.equals((Object)bitSet1));
      assertTrue(bitSet3.equals((Object)bitSet2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(0, bitSet3.cardinality());
      assertEquals("{}", bitSet3.toString());
      assertTrue(bitSet3.isEmpty());
      assertEquals(64, bitSet3.size());
      assertEquals(0, bitSet3.length());
      assertEquals(3, stringArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 88;
      floatArray0[1] = (float) 2447;
      floatArray0[2] = 157.5383F;
      ArrayUtils.shift(floatArray0, 88);
      assertArrayEquals(new float[] {157.5383F, 88.0F, 2447.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1969);
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 2147483647L;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)101;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)101}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 2147483647L);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((boolean[]) null, true);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-909.1416359068);
      doubleArray0[2] = (double) 2147483647L;
      doubleArray0[3] = (-909.1416359068);
      doubleArray0[4] = (double) 121;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 121;
      doubleArray0[7] = (double) Integer.MAX_VALUE;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2038.27), 128);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {Double.NaN, (-909.1416359068), 2.147483647E9, (-909.1416359068), 121.0, Double.NaN, 121.0, 2.147483647E9}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("java.lang.Integer");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean("java.lang.Integer");
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      
      booleanArray0[5] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 100);
      assertNull(object0);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = null;
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[0] = (double) 100;
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)444;
      shortArray0[1] = (short)54;
      shortArray0[2] = (short)1136;
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1136;
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0, (int) (short)444);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0, (int) (short)1136, (int) (short)1136);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)1136;
      intArray0[1] = (int) (short)1136;
      intArray0[2] = (-1);
      intArray0[3] = (int) (short)444;
      intArray0[4] = (int) (short)444;
      intArray0[5] = (int) (short)1136;
      intArray0[6] = (int) (short)54;
      ArrayUtils.swap(intArray0, 1423, 1136, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {1136, 1136, (-1), 444, 444, 1136, 54}, intArray0);
      assertEquals(7, intArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)78;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-68));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)99, (byte)1, (byte)56, (byte)1, (byte)78}, byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte)1, (byte)56, (byte)1, (byte)78}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Boolean>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Boolean>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 6);
      Integer integer0 = new Integer(3018);
      assertNotNull(integer0);
      assertEquals(3018, (int)integer0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      AbstractMap.SimpleEntry<Integer, Boolean> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Boolean>(integer0, boolean1);
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(boolean1.equals((Object)boolean0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Boolean> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Boolean>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean1.equals((Object)boolean0));
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Long, AbstractMap.SimpleImmutableEntry<Character, AbstractMap.SimpleImmutableEntry>>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Long, AbstractMap.SimpleImmutableEntry<Character, AbstractMap.SimpleImmutableEntry>>, Object>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Long, AbstractMap.SimpleImmutableEntry<Character, AbstractMap.SimpleImmutableEntry>>>) comparator0);
      assertNotNull(comparator1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Boolean> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Boolean>(integer0, boolean1);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      Integer integer1 = new Integer((-2101));
      assertNotNull(integer1);
      assertEquals((-2101), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      MockRandom mockRandom0 = new MockRandom((-1263L));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1263L);
      doubleArray0[1] = (double) 3018;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1263.0), 3018.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1263.0), 3018.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-775);
      Long long0 = new Long(597L);
      assertNotNull(long0);
      assertEquals(597L, (long)long0);
      
      Long long1 = new Long((-508L));
      assertNotNull(long1);
      assertEquals((-508L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      char char0 = 'O';
      Character character0 = Character.valueOf('O');
      assertNotNull(character0);
      assertEquals('O', (char)character0);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertTrue(boolean0);
      assertEquals(5, characterArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = char0;
      charArray0[1] = 'O';
      boolean boolean1 = ArrayUtils.contains(charArray0, ')');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'O', 'O'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1326);
      shortArray0[1] = (short) (-4419);
      shortArray0[2] = (short) (-4419);
      shortArray0[4] = (short)115;
      shortArray0[5] = (short) (-1603);
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)1287;
      shortArray0[8] = (short)447;
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new short[] {(short) (-1326), (short) (-4419), (short) (-4419), (short)0, (short)115, (short) (-1603), (short)2, (short)1287, (short)447}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) char0;
      doubleArray0[2] = (-2047.47);
      doubleArray0[3] = (double) (short)1287;
      doubleArray0[4] = (double) (short)115;
      doubleArray0[5] = (double) (short) (-4419);
      doubleArray0[6] = (double) (short)1287;
      doubleArray0[7] = (double) (short) (-1603);
      doubleArray0[8] = (double) (short)447;
      boolean boolean3 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new double[] {2.0, 79.0, (-2047.47), 1287.0, 115.0, (-4419.0), 1287.0, (-1603.0), 447.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, true}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 4, 6}", bitSet0.toString());
      assertEquals(7, booleanArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5575.801;
      doubleArray0[1] = 5575.801;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-909.1416359068);
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, true}, booleanArray0));
      assertEquals(7, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(5, bitSet1.cardinality());
      assertEquals("{0, 1, 2, 4, 6}", bitSet1.toString());
      assertEquals(7, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4458.930769), 128);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {5575.801, 5575.801, Double.NaN, (-909.1416359068), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Boolean boolean0 = Boolean.valueOf("Arguments cannot both be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      String[] stringArray0 = new String[7];
      stringArray0[5] = "Arguments cannot both be null";
      stringArray0[1] = ", Length: ";
      stringArray0[2] = ", Length: ";
      stringArray0[3] = "Arguments cannot both be null";
      stringArray0[4] = "Arguments cannot both be null";
      stringArray0[5] = "org.apache.commons.lang3.builder.HashCodeBuilder";
      stringArray0[6] = "Arguments cannot both be null";
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "Arguments cannot both be null");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(7, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (Object) null, 1423);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertNotSame(bitSet1, bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      
      boolean boolean1 = ArrayUtils.isSameType(boolean0, object0);
      assertTrue(boolean1);
      
      char[] charArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, 'S');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 2447);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'X';
      charArray0[2] = 'B';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ';');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'p', 'X', 'B'}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, charArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.lang3.builder.HashCodeBuilder";
      stringArray0[1] = "org.apache.commons.lang3.builder.HashCodeBuilder";
      stringArray0[2] = "org.apache.commons.lang3.builder.HashCodeBuilder";
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "z5_3C");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      Double double0 = new Double(2447);
      assertNotNull(double0);
      assertEquals(2447.0, (double)double0, 0.01);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) stringArray1, (Object) double0, 2447);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2447;
      intArray0[1] = 939;
      intArray0[2] = (int) 'X';
      intArray0[3] = (int) 'X';
      BitSet bitSet2 = ArrayUtils.indexesOf(intArray0, 4582, 2447);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertNotNull(bitSet2);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertArrayEquals(new int[] {2447, 939, 88, 88}, intArray0);
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet2.isEmpty());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertEquals(4, intArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {2447, 939, 88, 88}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 939, 15);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'p', 'X', 'B'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      
      BitSet bitSet3 = ArrayUtils.indexesOf((Object[]) stringArray0, (Object) "z5_3C");
      assertNotSame(bitSet3, bitSet2);
      assertNotSame(bitSet3, bitSet0);
      assertNotSame(bitSet3, bitSet1);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(bitSet3);
      assertTrue(bitSet3.equals((Object)bitSet2));
      assertTrue(bitSet3.equals((Object)bitSet0));
      assertTrue(bitSet3.equals((Object)bitSet1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(bitSet3.isEmpty());
      assertEquals(0, bitSet3.length());
      assertEquals("{}", bitSet3.toString());
      assertEquals(64, bitSet3.size());
      assertEquals(0, bitSet3.cardinality());
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 82;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {82}, intArray0);
      assertEquals(1, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)2;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = 943.78235F;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)47);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.reverse(booleanArray0, 709, 709);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2.0F;
      doubleArray0[1] = 1716.7306895316;
      doubleArray0[2] = (double) 943.78235F;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (double) 1545.708F;
      doubleArray0[5] = (double) 2.0F;
      doubleArray0[6] = (double) (-1.0F);
      doubleArray0[7] = (double) (byte)2;
      doubleArray0[8] = (double) 2.0F;
      int[] intArray0 = new int[0];
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {2.0, 1716.7306895316, 943.7823486328125, 2.0, 1545.7080078125, 2.0, (-1.0), 2.0, 2.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 1716.7306895316, 943.7823486328125, 2.0, 1545.7080078125, 2.0, (-1.0), 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(0, intArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1263L);
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'c';
      ArrayUtils.swap(charArray0, (-584), (-45), (-584));
      assertArrayEquals(new char[] {'I', 'c'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Short short0 = new Short((short) (-1120));
      assertNotNull(short0);
      assertEquals((short) (-1120), (short)short0);
      
      Short[] shortArray0 = new Short[2];
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      shortArray0[1] = short0;
      Short[] shortArray1 = ArrayUtils.addFirst(shortArray0, short0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(short0.equals((Object)short1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "x-`f";
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "x-`f";
      stringArray0[3] = "java.lang.Integer";
      stringArray0[4] = "java.lang.Integer";
      stringArray0[5] = "java.lang.Long";
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "java.lang.Integer");
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertEquals(6, stringArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-45);
      floatArray0[1] = (float) (-1263L);
      floatArray0[2] = (-575.753F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 100, (-584));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-45.0F), (-1263.0F), (-575.753F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-11);
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte) (-11);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[19];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.shift(booleanArray0, 6);
      assertEquals(19, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)68;
      shortArray0[1] = (short) (-2384);
      byteArray0[3] = (byte)68;
      shortArray0[3] = (short) (byte)68;
      shortArray0[4] = (short) (byte)68;
      shortArray0[5] = (short) (byte)75;
      shortArray0[6] = (short) (byte)68;
      shortArray0[7] = (short) (byte) (-118);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)16);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)68, (short) (-2384), (short)0, (short)68, (short)68, (short)75, (short)68, (short) (-118)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)68;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), (-3372.200798315849));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {68.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1499.0F);
      floatArray0[1] = (-1499.0F);
      long[] longArray0 = new long[6];
      longArray0[0] = 7L;
      longArray0[1] = 9L;
      longArray0[2] = 2189L;
      floatArray0[3] = (float) (-1263L);
      longArray0[4] = (-2481L);
      longArray0[5] = 3928L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {7L, 9L, 2189L, 0L, (-2481L), 3928L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'F';
      charArray0[2] = ')';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {')', 'F', 'P'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'F';
      intArray0[1] = (int) 'F';
      intArray0[2] = (int) 'F';
      intArray0[3] = (int) 'P';
      intArray0[4] = (int) 'P';
      intArray0[5] = (int) 'P';
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 757);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {70, 70, 70, 80, 80, 80}, intArray0);
      assertArrayEquals(new int[] {70, 70, 70, 80, 80, 80}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1953.3F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1499.0F), (-1499.0F), 0.0F, (-1263.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1499.0F), (-1499.0F), 0.0F, (-1263.0F), 0.0F, (-1953.3F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ArrayUtils.swap((char[]) null, 1136, 2256, 1136);
      Short short0 = new Short((short)2792);
      assertNotNull(short0);
      assertEquals((short)2792, (short)short0);
      
      Short short1 = new Short((short) (-1120));
      assertNotNull(short1);
      assertEquals((short) (-1120), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short[] shortArray0 = ArrayUtils.addFirst((Short[]) null, short1);
      assertNotNull(shortArray0);
      assertFalse(short1.equals((Object)short0));
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1136;
      doubleArray0[1] = (double) (short) (-1120);
      doubleArray0[2] = (double) (short) (-1120);
      doubleArray0[3] = 85.0;
      doubleArray0[4] = (double) (short) (-1120);
      doubleArray0[5] = (double) 1136;
      doubleArray0[6] = 1716.7306895316;
      doubleArray0[7] = 85.0;
      doubleArray0[8] = (double) (short)2792;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (short)2792);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1136.0, (-1120.0), (-1120.0), 85.0, (-1120.0), 1136.0, 1716.7306895316, 85.0, 2792.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1136.0, (-1120.0), (-1120.0), 85.0, (-1120.0), 1136.0, 1716.7306895316, 85.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)108);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Short[] shortArray1 = new Short[9];
      Short short0 = new Short((short) (-265));
      assertNotNull(short0);
      assertEquals((short) (-265), (short)short0);
      
      Short short1 = new Short((short) (-4830));
      assertNotNull(short1);
      assertEquals((short) (-4830), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray1[1] = short1;
      Short short2 = new Short((short) shortArray1[1]);
      assertNotNull(short2);
      assertEquals((short) (-4830), (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals(9, shortArray1.length);
      
      shortArray1[2] = short2;
      Short short3 = new Short((short)108);
      assertNotNull(short3);
      assertEquals((short)108, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      
      shortArray1[3] = short3;
      Short short4 = new Short((short) shortArray1[1]);
      assertNotNull(short4);
      assertEquals((short) (-4830), (short)short4);
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertEquals(9, shortArray1.length);
      
      shortArray1[4] = short4;
      Short short5 = new Short((short)3);
      assertNotNull(short5);
      assertEquals((short)3, (short)short5);
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      
      shortArray1[5] = shortArray1[1];
      shortArray1[6] = short0;
      Short short6 = new Short((short)1494);
      assertNotNull(short6);
      assertEquals((short)1494, (short)short6);
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      
      shortArray1[7] = short6;
      Short short7 = new Short((short)1595);
      assertNotNull(short7);
      assertEquals((short)1595, (short)short7);
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short3));
      
      shortArray1[8] = short7;
      Short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(9, shortArray1.length);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Short short0 = new Short((short)9);
      assertNotNull(short0);
      assertEquals((short)9, (short)short0);
      
      Short short1 = new Short((short)1429);
      assertNotNull(short1);
      assertEquals((short)1429, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short)1429);
      assertNotNull(short2);
      assertEquals((short)1429, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short short3 = new Short((short)9);
      assertNotNull(short3);
      assertEquals((short)9, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      
      Short short4 = new Short((short) (-3167));
      assertNotNull(short4);
      assertEquals((short) (-3167), (short)short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      
      Short short5 = new Short((short)2);
      assertNotNull(short5);
      assertEquals((short)2, (short)short5);
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      
      Short short6 = new Short((short)1595);
      assertNotNull(short6);
      assertEquals((short)1595, (short)short6);
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short1;
      shortArray0[1] = short5;
      shortArray0[2] = short4;
      Short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)108);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Short[] shortArray1 = new Short[9];
      Short short0 = new Short((short) (-265));
      assertNotNull(short0);
      assertEquals((short) (-265), (short)short0);
      
      shortArray1[0] = short0;
      Short short1 = new Short((short) (-4830));
      assertNotNull(short1);
      assertEquals((short) (-4830), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray1[1] = short1;
      Short short2 = new Short((short) shortArray1[1]);
      assertNotNull(short2);
      assertEquals((short) (-4830), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals(9, shortArray1.length);
      
      shortArray1[2] = short2;
      Short short3 = new Short((short)108);
      assertNotNull(short3);
      assertEquals((short)108, (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      
      shortArray1[3] = short3;
      Short short4 = new Short((short) shortArray1[1]);
      assertNotNull(short4);
      assertEquals((short) (-4830), (short)short4);
      assertTrue(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short2));
      assertEquals(9, shortArray1.length);
      
      shortArray1[4] = short4;
      Short short5 = new Short((short)3);
      assertNotNull(short5);
      assertEquals((short)3, (short)short5);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      
      shortArray1[5] = short5;
      Short short6 = new Short((short)120);
      assertNotNull(short6);
      assertEquals((short)120, (short)short6);
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      
      shortArray1[6] = short6;
      Short short7 = new Short((short)1494);
      assertNotNull(short7);
      assertEquals((short)1494, (short)short7);
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short3));
      
      shortArray1[7] = short7;
      Short short8 = new Short((short)1595);
      assertNotNull(short8);
      assertEquals((short)1595, (short)short8);
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short4));
      assertFalse(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short0));
      
      shortArray1[8] = short8;
      Short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(9, shortArray1.length);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 432;
      doubleArray1[3] = (double) (-82);
      doubleArray1[4] = (double) 432;
      doubleArray1[5] = (double) (-82);
      doubleArray1[6] = (double) 432;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray1, (-82), 937.459);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -82, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Short short0 = new Short((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) short0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 37);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)65;
      floatArray0[1] = (float) 37;
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {65.0F, 37.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {65.0F, 37.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)116;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-815), (int) (byte)116);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-116), (byte)45, (byte) (-122), (byte) (-4), (byte)10, (byte)17, (byte)0, (byte)116}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-116), (byte)45, (byte) (-122), (byte) (-4), (byte)10, (byte)17, (byte)0, (byte)116}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Object[] objectArray0 = new Object[0];
      Long long0 = new Long(20L);
      assertNotNull(long0);
      assertEquals(20L, (long)long0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) long0);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, (-316));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 37;
      floatArray0[5] = (float) 20L;
      floatArray0[6] = (float) (-1);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 37.0F, 0.0F, 20.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 37.0F, 0.0F, 20.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)116;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-645), 37);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)116, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)116, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-4);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 32, (int) (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)45, (byte) (-46), (byte) (-4)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 1980, 3692, 349);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((double) 1980);
      assertNotNull(float0);
      assertEquals(1980.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 349);
      assertNotNull(float1);
      assertEquals(349.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-703.6F));
      assertNotNull(float2);
      assertEquals((-703.6F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-1243.451775));
      assertNotNull(float3);
      assertEquals((-1243.4518F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(35.1F);
      assertNotNull(float4);
      assertEquals(35.1F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      floatArray0[4] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1980.0F, 349.0F, (-703.6F), (-1243.4518F), 35.1F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 349;
      intArray0[1] = 1980;
      intArray0[2] = 3692;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {349, 1980, 3692}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)116;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)59, (byte) (-1), (byte)99, (byte)116}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)59, (byte) (-1), (byte)99, (byte)116}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray0, 1980, Integer.MAX_VALUE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)59, (byte) (-1), (byte)99, (byte)116}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Short short0 = new Short((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) short0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 37);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)65;
      floatArray0[1] = (float) 37;
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {65.0F, 37.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {65.0F, 37.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-122);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-815), (int) (byte) (-122));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-116), (byte)45, (byte) (-122), (byte) (-4), (byte)10, (byte)17, (byte)0, (byte) (-122)}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)2;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = 943.78235F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1545.708F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 2.0F, 943.78235F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1545.708F, (-1.0F), 2.0F, 943.78235F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)47);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.reverse(booleanArray0, 709, 709);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)51;
      shortArray0[2] = (short)0;
      ArrayUtils.swap(shortArray0, 0, 1, 1952);
      assertArrayEquals(new short[] {(short)51, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-112);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)66;
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 1026, 550);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1026;
      ArrayUtils.swap(doubleArray0, 2145521597, 2145521597, (int) (short)66);
      assertArrayEquals(new double[] {1026.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, false, true}, booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-112);
      shortArray0[1] = (short) (byte)0;
      short short0 = (short)66;
      shortArray0[2] = (short)66;
      Short short1 = new Short((short) (-949));
      assertNotNull(short1);
      assertEquals((short) (-949), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short)2049);
      assertNotNull(short2);
      assertEquals((short)2049, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short short3 = new Short((short)0);
      assertNotNull(short3);
      assertEquals((short)0, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = (Short) (short) (-112);
      shortArray1[1] = (Short) (short)66;
      shortArray1[2] = (Short) (short)66;
      shortArray1[3] = (Short) (short) (-112);
      Short short4 = new Short((short) (-112));
      assertNotNull(short4);
      assertEquals((short) (-112), (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      
      shortArray1[4] = short4;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)1928);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-112), (short)66, (short)66, (short) (-112), (short) (-112)}, shortArray2);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-949);
      doubleArray0[1] = (double) 1494;
      doubleArray0[2] = (double) (short)shortArray1[4];
      doubleArray0[3] = (double) (short) (-112);
      doubleArray0[4] = (double) short0;
      doubleArray0[5] = (double) (short) (-112);
      doubleArray0[6] = (double) (short)1928;
      doubleArray0[7] = (double) (short)2792;
      doubleArray0[8] = (double) (short)shortArray1[4];
      ArrayUtils.shift(doubleArray0, (int) (short) (-1120), (int) (short) (-1120), (int) (short) (-949));
      assertArrayEquals(new double[] {(-949.0), 1494.0, (-112.0), (-112.0), 66.0, (-112.0), 1928.0, 2792.0, (-112.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      ArrayUtils.reverse((Object[]) shortArray1);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'w';
      charArray0[1] = 'c';
      charArray0[2] = ';';
      charArray0[3] = ':';
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'w';
      floatArray0[1] = (float) ';';
      floatArray0[2] = (float) ';';
      floatArray0[3] = (-615.0F);
      floatArray0[4] = (-829.9F);
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 'c';
      floatArray0[7] = 746.49F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1840.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {119.0F, 59.0F, 59.0F, (-615.0F), (-829.9F), 2.0F, 99.0F, 746.49F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {119.0F, 59.0F, 59.0F, (-615.0F), (-829.9F), 2.0F, 99.0F, 746.49F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      Short short0 = new Short((short) (-1945));
      assertNotNull(short0);
      assertEquals((short) (-1945), (short)short0);
      
      Short short1 = new Short((short) (-1945));
      assertNotNull(short1);
      assertEquals((short) (-1945), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = ArrayUtils.isEquals(short0, short1);
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      assertTrue(short0.equals((Object)short1));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) ';';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 99);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {59}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'w';
      objectArray0[1] = (Object) 99.0F;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, objectArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 5, 2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'w', 'c', ';', ':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {59}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1629);
      int[] intArray0 = new int[5];
      intArray0[3] = (int) (short)0;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1629)}, shortArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1629)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(3, shortArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short) (-1629);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1629.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) (short) (-1629);
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short) (-1629);
      longArray0[4] = (long) (short)0;
      Character character0 = new Character('$');
      assertNotNull(character0);
      assertEquals('$', (char)character0);
      
      Character character1 = Character.valueOf('$');
      assertNotNull(character1);
      assertEquals('$', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '$');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) (-1));
      assertNull(floatArray0);
      
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, (-96), 0, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray1 = ArrayUtils.clone(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) arrayUtils0.EMPTY_TYPE_ARRAY, (Object) arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short) (-1));
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)2}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      ArrayUtils.swap(byteArray0, (int) (short) (-1), (int) (short)0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-89);
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (byte) (-89);
      doubleArray0[6] = (double) (short)2;
      doubleArray0[7] = (-1.0);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-89.0), 0.0, 0.0, 0.0, 0.0, (-89.0), 2.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'z';
      ArrayUtils.swap(charArray0, 248, 2, (int) (byte) (-89));
      assertArrayEquals(new char[] {'n', 'z'}, charArray0);
      assertEquals(2, charArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 202L);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {202L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)543;
      shortArray0[1] = (short)14;
      shortArray0[2] = (short) (-8);
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)543, (short)14, (short) (-8)}, shortArray0);
      assertArrayEquals(new short[] {(short)543, (short)14, (short) (-8), (short)543, (short)14, (short) (-8)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      ArrayUtils.shift((int[]) null, (int) (short)14);
      int int0 = ArrayUtils.indexOf(shortArray1, (short) (-8));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, int0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)543, (short)14, (short) (-8)}, shortArray0);
      assertArrayEquals(new short[] {(short)543, (short)14, (short) (-8), (short)543, (short)14, (short) (-8)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short) (-8);
      objectArray0[1] = (Object) (short)543;
      objectArray0[2] = (Object) (short)14;
      objectArray0[3] = (Object) (short) (-8);
      objectArray0[4] = (Object) (short)14;
      objectArray0[5] = (Object) (short)543;
      Object object0 = ArrayUtils.get((Object[]) null, (-85));
      assertNull(object0);
      
      objectArray0[6] = null;
      objectArray0[7] = (Object) (short)14;
      Double double0 = new Double((short)14);
      assertNotNull(double0);
      assertEquals(14.0, (double)double0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) double0);
      assertFalse(boolean0);
      assertEquals(8, objectArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int int1 = ArrayUtils.hashCode((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (short)543;
      doubleArray0[3] = (double) (short)14;
      doubleArray0[4] = (double) (short)14;
      doubleArray0[5] = (double) (short)543;
      doubleArray0[6] = (double) (-85);
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 2.0, 14.0);
      assertEquals(4, int2);
      assertFalse(int2 == int0);
      assertArrayEquals(new double[] {2.0, 2.0, 543.0, 14.0, 14.0, 543.0, (-85.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short) (-8), 0.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {2.0, 2.0, 543.0, 14.0, 14.0, 543.0, (-85.0)}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      
      Boolean boolean3 = new Boolean((String) null);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1649), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1649, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-11);
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte) (-11);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[19];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.shift(booleanArray0, 6);
      assertEquals(19, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)68;
      shortArray0[1] = (short) (-2384);
      shortArray0[2] = (short) (byte)68;
      shortArray0[3] = (short) (byte)68;
      shortArray0[4] = (short) (byte)68;
      shortArray0[5] = (short) (byte)75;
      shortArray0[6] = (short) (byte) (-11);
      shortArray0[7] = (short) (byte) (-118);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)16);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)68, (short) (-2384), (short)68, (short)68, (short)68, (short)75, (short) (-11), (short) (-118)}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-95);
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte) (-95);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[19];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.shift(booleanArray0, 6);
      assertEquals(19, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)68;
      shortArray0[1] = (short) (-2384);
      shortArray0[2] = (short) (byte)68;
      shortArray0[2] = (short) (byte)68;
      shortArray0[4] = (short) (byte)68;
      shortArray0[5] = (short) (byte)75;
      shortArray0[6] = (short) (byte) (-95);
      shortArray0[7] = (short) (byte) (-118);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)16);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)68, (short) (-2384), (short)68, (short)0, (short)68, (short)75, (short) (-95), (short) (-118)}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)444;
      shortArray0[1] = (short)54;
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      ArrayUtils.shift(byteArray0, 2189);
      assertArrayEquals(new byte[] {(byte)89, (byte)89}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)444, 1065);
      assertArrayEquals(new short[] {(short)444, (short)54, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)444;
      doubleArray0[1] = (double) 2189;
      doubleArray0[2] = (double) (short)54;
      doubleArray0[3] = (double) 2189;
      doubleArray0[4] = (double) (short)54;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2189.0, (int) (byte)89, 2551.759);
      assertEquals(4, int0);
      assertArrayEquals(new double[] {444.0, 2189.0, 54.0, 2189.0, 54.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)89, (byte)89, (byte)89, (byte)89}, byteArray1);
      assertArrayEquals(new byte[] {(byte)89, (byte)89}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ArrayUtils.swap((char[]) null, 1136, 2256, 1136);
      Short short0 = new Short((short) (-1073));
      assertNotNull(short0);
      assertEquals((short) (-1073), (short)short0);
      
      Short short1 = new Short((short)2792);
      assertNotNull(short1);
      assertEquals((short)2792, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-1120));
      assertNotNull(short2);
      assertEquals((short) (-1120), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-29));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2256;
      doubleArray0[1] = (double) (short) (-1120);
      doubleArray0[2] = (double) (short) (-1073);
      doubleArray0[3] = (double) 2256;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (short)2792;
      ArrayUtils.shift(doubleArray0, (int) (short) (-1073), 1494, (-1727));
      assertArrayEquals(new double[] {2792.0, 2256.0, (-1120.0), (-1073.0), 2256.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      ArrayUtils.reverse((Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(1494);
      assertNotNull(long0);
      assertEquals(1494L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)2792);
      assertNotNull(long1);
      assertEquals(2792L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long(2256);
      assertNotNull(long2);
      assertEquals(2256L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long long3 = new Long(1494);
      assertNotNull(long3);
      assertEquals(1494L, (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      
      longArray0[3] = long3;
      Long long4 = new Long(2256);
      assertNotNull(long4);
      assertEquals(2256L, (long)long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      
      longArray0[4] = long4;
      Long long5 = new Long((-1120L));
      assertNotNull(long5);
      assertEquals((-1120L), (long)long5);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      
      longArray0[5] = long5;
      Long long6 = new Long(7L);
      assertNotNull(long6);
      assertEquals(7L, (long)long6);
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long0));
      
      Long[] longArray1 = ArrayUtils.add(longArray0, 1, long6);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(7, longArray1.length);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(mutableIntArray0, (Comparator<MutableInt>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long[] longArray0 = new long[2];
      longArray0[0] = (-1263L);
      longArray0[1] = (-1263L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1263L), (-1263L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.swap(doubleArray0, (-1261), (-1261));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1335;
      Character character0 = new Character('1');
      assertNotNull(character0);
      assertEquals('1', (char)character0);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf('B');
      assertNotNull(character1);
      assertEquals('B', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[2] = character1;
      characterArray0[3] = character0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[8];
      MutableInt mutableInt0 = new MutableInt((int) character0);
      assertNotNull(mutableInt0);
      assertFalse(character0.equals((Object)character1));
      assertEquals(49, mutableInt0.intValue());
      assertEquals(49.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(49.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(49, (int)mutableInt0.getValue());
      assertEquals(49, (int)mutableInt0.toInteger());
      assertEquals((byte)49, mutableInt0.byteValue());
      assertEquals("49", mutableInt0.toString());
      assertEquals((short)49, mutableInt0.shortValue());
      assertEquals(49L, mutableInt0.longValue());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((Number) (short)1335);
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(1335L, mutableInt1.longValue());
      assertEquals(1335.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(1335, mutableInt1.intValue());
      assertEquals((short)1335, mutableInt1.shortValue());
      assertEquals(1335, (int)mutableInt1.toInteger());
      assertEquals((byte)55, mutableInt1.byteValue());
      assertEquals("1335", mutableInt1.toString());
      assertEquals(1335.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(1335, (int)mutableInt1.getValue());
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(28);
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertEquals(28, mutableInt2.intValue());
      assertEquals(28, (int)mutableInt2.getValue());
      assertEquals(28.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(28, (int)mutableInt2.toInteger());
      assertEquals((byte)28, mutableInt2.byteValue());
      assertEquals((short)28, mutableInt2.shortValue());
      assertEquals(28L, mutableInt2.longValue());
      assertEquals("28", mutableInt2.toString());
      assertEquals(28.0, mutableInt2.doubleValue(), 0.01);
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(28);
      assertNotNull(mutableInt3);
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertEquals(28.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(28, (int)mutableInt3.getValue());
      assertEquals((byte)28, mutableInt3.byteValue());
      assertEquals(28L, mutableInt3.longValue());
      assertEquals(28, (int)mutableInt3.toInteger());
      assertEquals(28.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals("28", mutableInt3.toString());
      assertEquals(28, mutableInt3.intValue());
      assertEquals((short)28, mutableInt3.shortValue());
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt((int) character0);
      assertNotNull(mutableInt4);
      assertFalse(character0.equals((Object)character1));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertTrue(mutableInt4.equals((Object)mutableInt0));
      assertEquals(49, (int)mutableInt4.getValue());
      assertEquals((byte)49, mutableInt4.byteValue());
      assertEquals(49.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals((short)49, mutableInt4.shortValue());
      assertEquals(49, mutableInt4.intValue());
      assertEquals(49L, mutableInt4.longValue());
      assertEquals("49", mutableInt4.toString());
      assertEquals(49, (int)mutableInt4.toInteger());
      assertEquals(49.0, mutableInt4.doubleValue(), 0.01);
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt((int) character0);
      assertNotNull(mutableInt5);
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertTrue(mutableInt5.equals((Object)mutableInt0));
      assertTrue(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(character0.equals((Object)character1));
      assertEquals(49.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals(49, (int)mutableInt5.toInteger());
      assertEquals((byte)49, mutableInt5.byteValue());
      assertEquals("49", mutableInt5.toString());
      assertEquals(49, (int)mutableInt5.getValue());
      assertEquals(49.0, mutableInt5.doubleValue(), 0.01);
      assertEquals(49L, mutableInt5.longValue());
      assertEquals(49, mutableInt5.intValue());
      assertEquals((short)49, mutableInt5.shortValue());
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = new MutableInt((-1263L));
      assertNotNull(mutableInt6);
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertEquals("-1263", mutableInt6.toString());
      assertEquals((-1263L), mutableInt6.longValue());
      assertEquals((short) (-1263), mutableInt6.shortValue());
      assertEquals((-1263.0F), mutableInt6.floatValue(), 0.01F);
      assertEquals((-1263), (int)mutableInt6.getValue());
      assertEquals((-1263.0), mutableInt6.doubleValue(), 0.01);
      assertEquals((-1263), (int)mutableInt6.toInteger());
      assertEquals((byte)17, mutableInt6.byteValue());
      assertEquals((-1263), mutableInt6.intValue());
      
      mutableIntArray0[6] = mutableInt6;
      MutableInt mutableInt7 = new MutableInt(mutableInt2);
      assertNotNull(mutableInt7);
      assertFalse(mutableInt7.equals((Object)mutableInt1));
      assertFalse(mutableInt7.equals((Object)mutableInt6));
      assertTrue(mutableInt7.equals((Object)mutableInt2));
      assertFalse(mutableInt7.equals((Object)mutableInt0));
      assertFalse(mutableInt7.equals((Object)mutableInt4));
      assertFalse(mutableInt7.equals((Object)mutableInt5));
      assertTrue(mutableInt7.equals((Object)mutableInt3));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt6));
      assertFalse(mutableInt2.equals((Object)mutableInt5));
      assertFalse(mutableInt2.equals((Object)mutableInt4));
      assertTrue(mutableInt2.equals((Object)mutableInt3));
      assertEquals(28, mutableInt7.intValue());
      assertEquals(28, (int)mutableInt7.toInteger());
      assertEquals((byte)28, mutableInt7.byteValue());
      assertEquals(28.0F, mutableInt7.floatValue(), 0.01F);
      assertEquals("28", mutableInt7.toString());
      assertEquals(28, (int)mutableInt7.getValue());
      assertEquals((short)28, mutableInt7.shortValue());
      assertEquals(28.0, mutableInt7.doubleValue(), 0.01);
      assertEquals(28L, mutableInt7.longValue());
      assertEquals(28, mutableInt2.intValue());
      assertEquals(28, (int)mutableInt2.getValue());
      assertEquals(28.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(28, (int)mutableInt2.toInteger());
      assertEquals((byte)28, mutableInt2.byteValue());
      assertEquals((short)28, mutableInt2.shortValue());
      assertEquals(28L, mutableInt2.longValue());
      assertEquals("28", mutableInt2.toString());
      assertEquals(28.0, mutableInt2.doubleValue(), 0.01);
      
      mutableIntArray0[7] = mutableInt7;
      Comparator<MutableInt> comparator0 = (Comparator<MutableInt>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(org.apache.commons.lang3.mutable.MutableInt.class) , any(org.apache.commons.lang3.mutable.MutableInt.class));
      boolean boolean0 = ArrayUtils.isSorted(mutableIntArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(8, mutableIntArray0.length);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_INT_ARRAY, (-101), 1101);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-101), (-101));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -101, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-775);
      intArray0[1] = (-775);
      intArray0[2] = (-1);
      intArray0[3] = (-3135);
      intArray0[4] = 3;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-775), (-775), (-1), (-3135), 3}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[3];
      intArray0[2] = 3;
      longArray0[1] = (long) 3;
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1738, 3);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      float[] floatArray0 = new float[18];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 785.139F;
      floatArray0[2] = 1570.0F;
      floatArray0[3] = 1570.0F;
      floatArray0[5] = 1570.0F;
      floatArray0[6] = (-976.943F);
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertEquals(4, int0);
      assertEquals(18, floatArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[3] = 4;
      intArray0[4] = (int) (short) (-405);
      intArray0[6] = (-1);
      ArrayUtils.swap(intArray0, (int) (short) (-1610), (int) (short) (-2340));
      assertArrayEquals(new int[] {4, 0, 0, 4, (-405), 0, (-1), 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '$');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 785.139F;
      floatArray0[2] = 1570.0F;
      floatArray0[3] = (-656.104F);
      floatArray0[4] = 1326.018F;
      floatArray0[5] = 1570.0F;
      floatArray0[6] = (-976.943F);
      int int0 = ArrayUtils.indexOf(floatArray0, 1326.018F);
      assertEquals(4, int0);
      assertArrayEquals(new float[] {Float.NaN, 785.139F, 1570.0F, (-656.104F), 1326.018F, 1570.0F, (-976.943F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[3] = 4;
      intArray0[4] = (int) (short) (-405);
      intArray0[6] = (-1);
      ArrayUtils.swap(intArray0, (int) (short) (-1610), (int) (short) (-2340));
      assertArrayEquals(new int[] {4, 0, 0, 4, (-405), 0, (-1), 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '$');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-32);
      ArrayUtils.shift(byteArray0, (int) (byte) (-32));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-32)}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1263);
      intArray0[1] = 9;
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 9;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-1263), (-4748));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 9L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(2, longArray0.length);
      
      Integer integer0 = new Integer(9);
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      
      int int0 = ArrayUtils.indexOf(longArray0, 3944L, 9);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 9L}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.swap(intArray0, (-1263), 9, (-1263));
      assertArrayEquals(new int[] {(-1263), 9}, intArray0);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      short[] shortArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_FLOAT_ARRAY, (-672), 544, (-5108));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, 178, 3220);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      int int0 = ArrayUtils.indexOf(longArray1, 0L);
      assertNotSame(longArray1, longArray0);
      assertEquals((-1), int0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = '/';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'.', '/'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = Float.NaN;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (-656.104F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 81);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, Float.NaN, (-656.104F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, (-656.104F), 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1114);
      intArray0[1] = 81;
      intArray0[2] = (-2145594920);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 9, 9);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1114), 81, (-2145594920)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 10;
      int[] intArray1 = ArrayUtils.subarray(intArray0, Integer.MAX_VALUE, 57);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 10}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, 156);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(bitSet0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 10}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = 'p';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {';', 'p'}, charArray0);
      assertArrayEquals(new char[] {';', 'p'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)799;
      shortArray0[2] = (short)1735;
      shortArray0[3] = (short)120;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-516);
      shortArray0[7] = (short) (-15941);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)799, (-3583));
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)1, (short)799, (short)1735, (short)120, (short) (-1), (short) (-1), (short) (-516), (short) (-15941)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 1.0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 66.0F;
      floatArray0[1] = (-143.0F);
      floatArray0[2] = (-1680.3F);
      floatArray0[3] = 1570.0F;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = 2797.43F;
      floatArray0[6] = Float.NaN;
      floatArray0[7] = 671.9F;
      int[] intArray0 = new int[4];
      intArray0[0] = 1124;
      intArray0[1] = 36;
      intArray0[2] = 675;
      intArray0[3] = 1097;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1124, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 1596.0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1596.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 20;
      longArray0[1] = (long) 20;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 20L, 7);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {20L, 20L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = 426L;
      longArray0[2] = 1L;
      longArray0[3] = 1L;
      longArray0[4] = 115L;
      longArray0[5] = 115L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 426L, 1L, 1L, 115L, 115L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 426L, 115L, 115L, 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(5, longArray1.length);
      
      ArrayUtils.reverse(longArray0, (-2873), (-2873));
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, 426L, 1L, 1L, 115L, 115L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = Short.valueOf((short) (-1120));
      assertNotNull(short0);
      assertEquals((short) (-1120), (short)short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.addFirst(shortArray0, shortArray0[0]);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3078.50002143528;
      doubleArray0[1] = 0.0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)95;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)95);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)95, (byte)95}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 502.127F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {502.127F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.shift(booleanArray0, (-2904));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.1);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Boolean boolean0 = new Boolean("The Array must not be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray1, (byte)75, (-2145059411));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1), int1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      MutableInt mutableInt0 = new MutableInt(0.0);
      assertNotNull(mutableInt0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      
      int int2 = mutableInt0.getAndDecrement();
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0, "The Array must not be null");
      assertNotNull(string0);
      assertEquals("-1", string0);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      
      ArrayUtils.swap(doubleArray0, (-3790), (int) (byte)0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.reverse((Object[]) longArray0);
      assertEquals(0, longArray0.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[3];
      mutableIntArray0[0] = mutableInt0;
      mutableIntArray0[1] = mutableInt0;
      mutableIntArray0[2] = mutableInt0;
      boolean boolean1 = ArrayUtils.isNotEmpty(mutableIntArray0);
      assertTrue(boolean1);
      assertEquals(3, mutableIntArray0.length);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3261;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)258;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-927);
      shortArray0[5] = (short) (-927);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3261, (short)2, (short)258, (short)2, (short) (-927), (short) (-927)}, shortArray0);
      assertArrayEquals(new short[] {(short)3261, (short)2, (short)258, (short)2, (short) (-927), (short) (-927)}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)2;
      floatArray0[3] = (float) (short)2;
      floatArray0[4] = 1645.631F;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)2;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(12, floatArray0.length);
      
      ArrayUtils.shift(shortArray0, (int) (short)3261);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short) (-927), (short) (-927), (short)3261, (short)2, (short)258}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 0.0F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2.0F, 2.0F, 1645.631F, 2.0F, 2.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(12, floatArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)74;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)11);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)92, (byte)108, (byte)15, (byte)0, (byte)74}, byteArray0);
      assertArrayEquals(new byte[] {(byte)92, (byte)108, (byte)15, (byte)0, (byte)74}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 100);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      floatArray0[8] = (float) (byte)0;
      ArrayUtils.swap(floatArray0, 6230, 6230, 1262);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)92, (int) (byte)92);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[12];
      shortArray0[0] = (short) (byte)92;
      shortArray0[1] = (short) (byte)92;
      shortArray0[2] = (short) (byte)92;
      shortArray0[3] = (short) (byte)92;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(12, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(12, shortArray0.length);
      assertEquals(24, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (short)92, 1351, (double) (short)92);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)92;
      floatArray0[1] = (float) (short)92;
      floatArray0[2] = (float) (byte)92;
      floatArray0[3] = (float) 1351;
      floatArray0[4] = (-4261.7F);
      floatArray0[5] = (float) (short)92;
      floatArray0[6] = (float) 1351;
      floatArray0[7] = (float) (short)92;
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (double) (short)92);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1001.706708155947;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1001.706708155947);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1001.706708155947}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1001.706708155947, 1001.706708155947}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1940L;
      longArray0[1] = 188L;
      longArray0[2] = (-2192L);
      longArray0[3] = 2147483647L;
      longArray0[4] = (-376L);
      longArray0[5] = 3944L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1940L, 188L, (-2192L), 2147483647L, (-376L), 3944L}, longArray0);
      assertArrayEquals(new long[] {1940L, 188L, (-2192L), 2147483647L, (-376L), 3944L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)112;
      doubleArray0[1] = (double) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2921.7157), (-1.0));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {112.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 112.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-2145784688));
      assertNotNull(integer0);
      assertEquals((-2145784688), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2145784688));
      assertNotNull(integer1);
      assertEquals((-2145784688), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double(4740.759);
      assertNotNull(double1);
      assertEquals(4740.759, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-1206.0));
      assertNotNull(double2);
      assertEquals((-1206.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double((-609.517755));
      assertNotNull(double3);
      assertEquals((-609.517755), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      Double double4 = new Double(41.3321042);
      assertNotNull(double4);
      assertEquals(41.3321042, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      Double double5 = new Double(1024.0);
      assertNotNull(double5);
      assertEquals(1024.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      
      Double[] doubleArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, double5);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1), (int) (short) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (-571.675F));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 35.1F;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (-571.675F);
      floatArray0[3] = 35.1F;
      floatArray0[4] = (-1953.3F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 35.1F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {35.1F, (-1.0F), (-571.675F), 35.1F, (-1953.3F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Character[] characterArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, (Object) double2);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(characterArray0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double5, 0.01);
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double4, 0.01);
      assertEquals(0, characterArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Boolean boolean0 = Boolean.valueOf("Arguments cannot both be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      String[] stringArray0 = new String[7];
      stringArray0[5] = "Arguments cannot both be null";
      boolean boolean1 = ArrayUtils.isSorted(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short)1586);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (short)0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-112);
      shortArray0[1] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1364));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-112), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-112), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      Double double0 = new Double((byte) (-112));
      assertNotNull(double0);
      assertEquals((-112.0), (double)double0, 0.01);
      
      Double double1 = new Double((byte) (-112));
      assertNotNull(double1);
      assertEquals((-112.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(5575.801);
      assertNotNull(double2);
      assertEquals(5575.801, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(41.3321042);
      assertNotNull(double3);
      assertEquals(41.3321042, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      Double double4 = new Double((byte)0);
      assertNotNull(double4);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      Double double5 = new Double((-609.517755));
      assertNotNull(double5);
      assertEquals((-609.517755), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      Double double6 = new Double((short) (-1364));
      assertNotNull(double6);
      assertEquals((-1364.0), (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      
      doubleArray0[0] = double6;
      Double double7 = new Double(1.0);
      assertNotNull(double7);
      assertEquals(1.0, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, double7);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short)66, (int) (short)66);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(bitSet0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-112), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-112), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 35.1F;
      floatArray0[1] = (float) (short) (-1364);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short)66);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {35.1F, (-1364.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1953.3F));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {35.1F, (-1364.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte) (-112);
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)122, (byte) (-112), (byte)0, (byte)0, (byte) (-40), (byte) (-112), (byte) (-112), (byte) (-112)}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-128);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-37));
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-37), (byte) (-37), (byte)103, (byte)48, (byte) (-128)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'j';
      charArray0[2] = 'D';
      charArray0[3] = 'k';
      charArray0[4] = 'C';
      charArray0[5] = 'v';
      charArray0[7] = 'z';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'q', 'j', 'D', 'k', 'C', 'v', '\u0000', 'z'}, charArray0);
      assertArrayEquals(new char[] {'q', 'j', 'D', 'k', 'C', 'v', '\u0000', 'z'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      
      ArrayUtils.shift(charArray0, (-1261), 823, (-1610));
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'D', 'k', 'C', 'v', '\u0000', 'z', 'q', 'j'}, charArray0);
      assertEquals(8, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0, (-228), 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)101;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-5));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-128)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      ArrayUtils.shift(charArray0, (-2142074368), (-1610), (int) (byte) (-128));
      assertArrayEquals(new char[] {'C'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0, (int) (byte) (-128), 7);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      ArrayUtils.shift(charArray0, (int) (byte) (-5));
      assertArrayEquals(new char[] {'C'}, charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1610);
      floatArray0[1] = (float) 'C';
      floatArray0[2] = (float) 'C';
      floatArray0[3] = (float) 'C';
      floatArray0[4] = (float) 7;
      floatArray0[5] = (float) (byte) (-5);
      floatArray0[6] = (float) (short)101;
      int int0 = ArrayUtils.indexOf(floatArray0, (-5.0F), (-1887));
      assertEquals(5, int0);
      assertArrayEquals(new float[] {(-1610.0F), 67.0F, 67.0F, 67.0F, 7.0F, (-5.0F), 101.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Boolean boolean0 = Boolean.valueOf("Arguments cannot both be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Arguments cannot both be null";
      stringArray0[1] = ", Length: ";
      stringArray0[2] = "Arguments cannot both be null";
      stringArray0[3] = "Arguments cannot both be null";
      stringArray0[4] = "Arguments cannot both be null";
      stringArray0[5] = "org.apache.commons.lang3.builder.HashCodeBuilder";
      stringArray0[6] = "Arguments cannot both be null";
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "Arguments cannot both be null");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(7, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (Object) null, 939);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertNotSame(bitSet1, bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      int int0 = 3148;
      short short0 = (short)13;
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, 3148, (short)13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3148, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-657.7369F));
      assertNotNull(float0);
      assertEquals((-657.7369F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      floatArray0[1] = floatArray0[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte)0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-657.7369F), (-657.7369F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      ArrayUtils.reverse(floatArray1);
      assertArrayEquals(new float[] {(-657.7369F), (-657.7369F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (int) (byte)0, (int) (short)0, (int) (byte)0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Short short0 = new Short((short) (-1120));
      assertNotNull(short0);
      assertEquals((short) (-1120), (short)short0);
      
      Short short1 = new Short((byte)0);
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short[] shortArray1 = new Short[6];
      shortArray1[0] = short1;
      shortArray1[1] = short1;
      shortArray1[2] = short1;
      shortArray1[3] = short0;
      shortArray1[4] = short1;
      shortArray1[5] = short0;
      Short[] shortArray2 = ArrayUtils.addFirst(shortArray1, short0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(short0.equals((Object)short1));
      assertEquals(7, shortArray2.length);
      assertEquals(6, shortArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)shortArray1[3];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (float)floatArray0[0];
      doubleArray0[3] = (double) (short)shortArray1[3];
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 128);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {128, 0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
      short[] shortArray3 = ArrayUtils.add(shortArray0, (int) (byte)0, (short) shortArray1[4]);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray1, shortArray2);
      assertNotNull(shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray3);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray3.length);
      assertEquals(7, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-998), 1146, 1146);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), 76);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      Float float0 = new Float((float) 32);
      assertNotNull(float0);
      assertEquals(32.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) 69);
      assertNotNull(float1);
      assertEquals(69.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      ArrayUtils.shift((int[]) null, (-1621));
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1217));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)101;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)65);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)101, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 106);
      assertNull(object0);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = null;
      byte[] byteArray0 = new byte[8];
      ArrayUtils.shift(byteArray0, (-52));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-52);
      doubleArray0[1] = (double) 106;
      doubleArray0[2] = (double) (-52);
      ArrayUtils.swap(doubleArray0, 116, (-537));
      assertArrayEquals(new double[] {(-52.0), 106.0, (-52.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 106;
      intArray0[1] = (-52);
      intArray0[2] = (-52);
      intArray0[3] = (-52);
      intArray0[4] = 116;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-594));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {106, (-52), (-52), (-52), 116}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long[] longArray0 = new long[2];
      longArray0[0] = (-1263L);
      longArray0[1] = (-1263L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1263L), (-1263L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.swap(doubleArray0, (-1261), (-1261));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1335;
      shortArray0[1] = (short) (-1563);
      shortArray0[2] = (short)1176;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)36;
      shortArray0[5] = (short)2162;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1335, (short) (-1563), (short)1176, (short) (-1), (short)36, (short)2162}, shortArray0);
      assertArrayEquals(new short[] {(short)1335, (short) (-1563), (short)1176, (short) (-1), (short)36, (short)2162}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      ArrayUtils.swap(doubleArray0, (-277), (-66), (-2384));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-1263L), (-1263L)}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Short short0 = new Short((short) (-1073));
      assertNotNull(short0);
      assertEquals((short) (-1073), (short)short0);
      
      Short short1 = new Short((short)2792);
      assertNotNull(short1);
      assertEquals((short)2792, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-1111));
      assertNotNull(short2);
      assertEquals((short) (-1111), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-29));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (short) (-1111);
      doubleArray0[2] = (double) (short) (-1073);
      doubleArray0[3] = (double) 2256;
      doubleArray0[4] = (double) (short) (-1111);
      doubleArray0[5] = (double) (short)2792;
      ArrayUtils.shift(doubleArray0, (int) (short) (-1073), 1494, (-1727));
      assertArrayEquals(new double[] {2792.0, 0.0, (-1111.0), (-1073.0), 2256.0, (-1111.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      ArrayUtils.reverse((Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Short short0 = new Short((short) (-1073));
      assertNotNull(short0);
      assertEquals((short) (-1073), (short)short0);
      
      Short short1 = new Short((short)2792);
      assertNotNull(short1);
      assertEquals((short)2792, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-1111));
      assertNotNull(short2);
      assertEquals((short) (-1111), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1073));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (short) (-1111);
      doubleArray0[2] = (double) (short) (-1073);
      doubleArray0[3] = (double) 2256;
      doubleArray0[4] = (double) (short) (-1111);
      doubleArray0[5] = (double) (short)2792;
      ArrayUtils.shift(doubleArray0, (int) (short) (-1073), 1494, (-1711));
      assertArrayEquals(new double[] {(-1111.0), (-1073.0), 2256.0, (-1111.0), 2792.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      ArrayUtils.reverse((Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-998), 1146, 1146);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), 76);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      Float float0 = new Float((float) 32);
      assertNotNull(float0);
      assertEquals(32.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) 69);
      assertNotNull(float1);
      assertEquals(69.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(4154.7974F);
      assertNotNull(float2);
      assertEquals(4154.7974F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float((double) 32);
      assertNotNull(float3);
      assertEquals(32.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      Float float4 = new Float((float) (-998));
      assertNotNull(float4);
      assertEquals((-998.0F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (-1.0F));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayUtils.swap(doubleArray0, (-1261), (-1261));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1335;
      Character character0 = new Character('1');
      assertNotNull(character0);
      assertEquals('1', (char)character0);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf('B');
      assertNotNull(character1);
      assertEquals('B', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[2] = character1;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '6');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'1', '1', 'B', '1', '1', '1', '1', '6'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)54;
      shortArray0[2] = (short)1136;
      int[] intArray0 = ArrayUtils.add((int[]) null, (int) (short)1136);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1136}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)54;
      objectArray0[1] = (Object) (short)1136;
      objectArray0[2] = (Object) (short)1136;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short)1136;
      objectArray0[5] = (Object) (short)54;
      objectArray0[6] = (Object) (short)54;
      objectArray0[7] = (Object) (short)0;
      objectArray0[8] = (Object) (short)1136;
      ArrayUtils.swap(objectArray0, (int) (short)1136, 23, 111);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = ';';
      charArray0[2] = 'k';
      ArrayUtils.swap(charArray0, 36, Integer.MAX_VALUE, 36);
      assertArrayEquals(new char[] {'l', ';', 'k'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) ';';
      intArray0[1] = (int) 'l';
      intArray0[2] = (-3097);
      intArray0[3] = Integer.MAX_VALUE;
      ArrayUtils.shift(intArray0, Integer.MAX_VALUE, (-3295), 825);
      assertArrayEquals(new int[] {59, 108, (-3097), Integer.MAX_VALUE}, intArray0);
      assertEquals(4, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      float[] floatArray0 = null;
      int int0 = Integer.MAX_VALUE;
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      char[] charArray0 = new char[0];
      int int1 = (-685);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-685));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -685, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      int int1 = (-685);
      int int2 = 3;
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, 3, (float) 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      doubleArray0[1] = double1;
      Long long0 = new Long((-1267L));
      assertNotNull(long0);
      assertEquals((-1267L), (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)108;
      byteArray0[8] = (byte)89;
      ArrayUtils.shift(byteArray0, (int) (byte)21);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)108, (byte)89, (byte)0, (byte)21, (byte)21, (byte)1, (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'G');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertArrayEquals(new char[] {'G', '#'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      Double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, doubleArray0[0]);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Long long0 = new Long((-1267L));
      assertNotNull(long0);
      assertEquals((-1267L), (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)108;
      byteArray0[8] = (byte)89;
      ArrayUtils.shift(byteArray0, (int) (byte)21);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)108, (byte)89, (byte) (-1), (byte)21, (byte)21, (byte)1, (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'G');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertArrayEquals(new char[] {'G', '#'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      Double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray0, doubleArray0[0]);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(3.0);
      assertNotNull(double0);
      assertEquals(3.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-36.11526858850215));
      assertNotNull(double1);
      assertEquals((-36.11526858850215), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(3.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      Double double3 = new Double((double) doubleArray0[0]);
      assertNotNull(double3);
      assertEquals(3.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[4] = double3;
      Double double4 = new Double((-2434.43669781039));
      assertNotNull(double4);
      assertEquals((-2434.43669781039), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[5] = double4;
      Double double5 = new Double((double) doubleArray0[4]);
      assertNotNull(double5);
      assertEquals(3.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[6] = double5;
      Double double6 = new Double((double) doubleArray0[6]);
      assertNotNull(double6);
      assertEquals(3.0, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[7] = double6;
      Double double7 = new Double(1.0);
      assertNotNull(double7);
      assertEquals(1.0, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      
      doubleArray0[8] = double7;
      Double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)85;
      ArrayUtils.shift(byteArray0, (int) (byte)36);
      assertArrayEquals(new byte[] {(byte)0, (byte)36, (byte)36, (byte)85, (byte) (-89), (byte)85}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)36;
      intArray0[1] = (int) (byte)85;
      intArray0[2] = (int) (byte)36;
      intArray0[3] = 934;
      intArray0[4] = (int) (byte)85;
      intArray0[5] = (int) (byte)36;
      intArray0[6] = (int) (byte)85;
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte)36);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {36, 85, 36, 934, 85, 36, 85}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Character character0 = new Character('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '?');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) '?';
      ArrayUtils.swap(doubleArray0, 156, 156);
      assertArrayEquals(new double[] {1.0, 63.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3139.4495874;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)16;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)84, (byte)12, (byte) (-52), (byte)84, (byte) (-52), (byte)12, (byte)98, (byte)12, (byte)16}, byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)12, (byte) (-52), (byte)84, (byte) (-52), (byte)12, (byte)98, (byte)12, (byte)16}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      
      Boolean boolean0 = new Boolean("The Array must not be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)0, 1301);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1), int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)84, (byte)12, (byte) (-52), (byte)84, (byte) (-52), (byte)12, (byte)98, (byte)12, (byte)16}, byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)12, (byte) (-52), (byte)84, (byte) (-52), (byte)12, (byte)98, (byte)12, (byte)16}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      
      MutableInt mutableInt0 = new MutableInt((Number) (byte) (-52));
      assertNotNull(mutableInt0);
      assertEquals((-52), (int)mutableInt0.toInteger());
      assertEquals((-52L), mutableInt0.longValue());
      assertEquals((-52.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-52), (int)mutableInt0.getValue());
      assertEquals((byte) (-52), mutableInt0.byteValue());
      assertEquals((-52.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-52), mutableInt0.shortValue());
      assertEquals("-52", mutableInt0.toString());
      assertEquals((-52), mutableInt0.intValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0, "");
      assertNotNull(string0);
      
      ArrayUtils.swap(doubleArray0, 1410, 3);
      assertArrayEquals(new double[] {(-1.0), 3139.4495874, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-657.7369F));
      assertNotNull(float0);
      assertEquals((-657.7369F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      floatArray0[1] = floatArray0[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-0.114F));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-657.7369F), (-657.7369F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      ArrayUtils.reverse(floatArray1);
      assertArrayEquals(new float[] {(-657.7369F), (-657.7369F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)868;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)868, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)868, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      ArrayUtils.swap((int[]) null, (int) (short)0, (int) (short)0);
      boolean boolean1 = ArrayUtils.isSorted(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(boolean1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)868, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)868, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '8';
      charArray0[2] = '*';
      charArray0[3] = 'J';
      ArrayUtils.swap(charArray0, (int) (short)0, 156, (int) (short)868);
      assertArrayEquals(new char[] {'!', '8', '*', 'J'}, charArray0);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '>');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'!', '8', '*', 'J'}, charArray0);
      assertArrayEquals(new char[] {'!', '8', '*', 'J', '>'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)868, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(6, objectArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)868;
      shortArray0[2] = (short)868;
      shortArray0[3] = (short)868;
      shortArray0[4] = (short)868;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-2));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)121, (short)868, (short)868, (short)868, (short)868}, shortArray1);
      assertArrayEquals(new short[] {(short)121, (short)868, (short)868, (short)868, (short)868}, shortArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      ArrayUtils.swap((int[]) null, (int) (short)121, (-635));
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)121, (short)868, (short)868, (short)868, (short)868}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-775);
      intArray0[1] = 1763;
      intArray0[2] = (-1);
      intArray0[3] = (-3135);
      intArray0[4] = 3;
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 3;
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)7, (-1653));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-66), 156);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {3L, 3L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-66);
      boolean boolean2 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new float[] {(-66.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)48);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(bitSet0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((short)48);
      assertNotNull(double0);
      assertEquals(48.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(3);
      assertNotNull(double1);
      assertEquals(3.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(48.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(3254.22998046875);
      assertNotNull(double3);
      assertEquals(3254.22998046875, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(3254.22998046875);
      assertNotNull(double4);
      assertEquals(3254.22998046875, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-3135));
      assertNotNull(double5);
      assertEquals((-3135.0), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      assertNotNull(double6);
      assertEquals(0.0, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[1]);
      assertNotNull(double7);
      assertEquals(3.0, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(4684.766287972);
      assertNotNull(double8);
      assertEquals(4684.766287972, (double)double8, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      
      doubleArray0[8] = double8;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 101.0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {48.0, 3.0, 48.0, 3254.22998046875, 3254.22998046875, (-3135.0), 0.0, 3.0, 4684.766287972}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)101;
      shortArray0[4] = (short) (-1356);
      shortArray0[5] = (short)1322;
      shortArray0[6] = (short)1202;
      shortArray0[7] = (short)16;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)1322, (int) (short)16);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)101, (short)0, (short)0, (short) (-1356), (short)1322, (short)1202, (short)16}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-2147045278));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1356);
      floatArray0[1] = (float) (short)101;
      floatArray0[2] = 4897.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1356.0F), 101.0F, 4897.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-793);
      intArray0[1] = 1763;
      intArray0[3] = (-3135);
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'l';
      charArray0[2] = '(';
      charArray0[3] = ':';
      ArrayUtils.swap(charArray0, 1763, (-3135));
      assertArrayEquals(new char[] {'e', 'l', '(', ':'}, charArray0);
      assertEquals(4, charArray0.length);
      
      ArrayUtils.shift(charArray0, (-793));
      assertArrayEquals(new char[] {'l', '(', ':', 'e'}, charArray0);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-128);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-37));
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-37), (byte) (-37), (byte)103, (byte)48, (byte) (-128)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      boolean boolean1 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'j';
      charArray0[2] = 'D';
      charArray0[3] = 'k';
      charArray0[4] = 'C';
      charArray0[5] = 'v';
      charArray0[6] = 'W';
      charArray0[7] = 'z';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'q', 'j', 'D', 'k', 'C', 'v', 'W', 'z'}, charArray1);
      assertArrayEquals(new char[] {'q', 'j', 'D', 'k', 'C', 'v', 'W', 'z'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
      
      ArrayUtils.shift(charArray0, (-1261), 823, (-1610));
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'D', 'k', 'C', 'v', 'W', 'z', 'q', 'j'}, charArray0);
      assertEquals(8, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0, (-228), 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Long long0 = Long.valueOf(92L);
      assertNotNull(long0);
      assertEquals(92L, (long)long0);
      
      Long long1 = new Long(208L);
      assertNotNull(long1);
      assertEquals(208L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(208L);
      assertNotNull(long2);
      assertEquals(208L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)1;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)56, 45);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-100), (byte)56, (byte)39, (byte)107, (byte)1}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[4] = 9L;
      int[] intArray0 = new int[2];
      intArray0[0] = (-2806);
      intArray0[1] = 0;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 9L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 9L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = ArrayUtils.get(booleanArray0, (-2806));
      assertNull(boolean2);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1748.7583260339254;
      doubleArray0[1] = (-16.45633);
      doubleArray0[2] = 1822.298;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 937.459);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1748.7583260339254, (-16.45633), 1822.298, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 13L;
      longArray0[1] = (-1549L);
      longArray0[2] = 2147483647L;
      longArray0[3] = (-1L);
      longArray0[4] = (-2457L);
      longArray0[5] = 0L;
      longArray0[6] = 3779L;
      longArray0[7] = 1702L;
      longArray0[8] = (-1120L);
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-1549L), 2147483647L, (-1L), (-2457L), 0L, 3779L, 1702L, (-1120L), 13L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-161.19195));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 543L;
      longArray0[1] = 391L;
      longArray0[2] = (-2345L);
      longArray0[3] = 13L;
      ArrayUtils.shift(longArray0, 2147098469, 0, 0);
      assertArrayEquals(new long[] {543L, 391L, (-2345L), 13L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-112);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)66;
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 1026, 550);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1026;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte) (-112);
      doubleArray0[3] = (double) 550;
      ArrayUtils.shift(shortArray0, (int) (short)66);
      assertArrayEquals(new short[] {(short) (-112), (short)0, (short)66, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 1.0F);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1362.0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_CHAR_ARRAY, ']', (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      byte[] byteArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray1 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_FLOAT_ARRAY, 739, 116, 1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-3517.38F);
      floatArray0[2] = 2440.27F;
      floatArray0[3] = 1645.631F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 3979.0476F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-3517.38F), 2440.27F, 1645.631F, 1.0F, 3979.0476F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-3517.38F), 2440.27F, 1645.631F, 1.0F, 3979.0476F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 100);
      assertNull(object0);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = null;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 100;
      doubleArray0[1] = (double) 0;
      boolean boolean1 = ArrayUtils.isEquals(100.0, object0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, objectArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      MockRandom mockRandom0 = new MockRandom((-2203L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, true}, booleanArray0));
      assertEquals("{0, 1, 2, 4, 6}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, booleanArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5575.801;
      doubleArray0[1] = 5575.801;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-909.1416359068);
      doubleArray0[4] = 1.5;
      doubleArray0[5] = 1263.900506738;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-2434.43669781039);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 5575.801, 128);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {5575.801, 5575.801, Double.NaN, (-909.1416359068), 1.5, 1263.900506738, (-1.0), (-2434.43669781039)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Character character0 = new Character('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      Character[] characterArray0 = new Character[1];
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertTrue(boolean0);
      assertEquals(1, characterArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1196;
      ArrayUtils.shift(shortArray0, (int) (short)1196);
      assertArrayEquals(new short[] {(short)1196}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1196;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1196.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1196.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = 'M';
      charArray0[6] = '?';
      charArray0[7] = '?';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '?');
      assertEquals(7, int0);
      assertArrayEquals(new char[] {'?', '?', '?', '?', '?', 'M', '?', '?'}, charArray0);
      assertEquals(8, charArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)25;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-77));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-93), (byte)90, (byte)41, (byte)95, (byte)55, (byte)7, (byte)25}, byteArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2037.918F;
      floatArray0[1] = (-791.0F);
      floatArray0[2] = 2037.918F;
      floatArray0[3] = (-3493.0F);
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {(-791.0F), 2037.918F, (-3493.0F), 2037.918F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-660.11319522145), (int) (byte) (-64), Double.NaN);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add((double[]) null, (double) (byte) (-64));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-64.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = 'S';
      charArray0[2] = '3';
      charArray0[3] = 'H';
      charArray0[4] = 'E';
      charArray0[5] = '&';
      charArray0[6] = '&';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '~');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'S', '3', 'H', 'E', '&', '&'}, charArray1);
      assertArrayEquals(new char[] {'~', 'S', '3', 'H', 'E', '&', '&'}, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1629);
      int[] intArray0 = new int[5];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.swap(intArray0, (int) (short)0, 7);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 7;
      int int0 = ArrayUtils.indexOf(longArray0, (-564L), 1);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 0L, 7L}, longArray0);
      assertEquals(3, longArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, (int) (short)0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, int1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1629);
      int[] intArray0 = new int[5];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.swap(intArray0, (int) (short)0, 7);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 7;
      int int0 = ArrayUtils.indexOf(longArray0, (-564L), 1);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 0L, 7L}, longArray0);
      assertEquals(3, longArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, (int) (short)0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, int1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0, 1755, 128);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '-';
      charArray0[2] = '5';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'>', '-', '5'}, charArray0);
      assertArrayEquals(new char[] {'>', '-', '5', '>', '-', '5'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      
      org.evosuite.runtime.Random.setNextRandom(1755);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)2;
      longArray0[1] = (long) '>';
      longArray0[2] = (long) '>';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 128, (-4357));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {2L, 62L, 62L}, longArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(3, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-2681), 699L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2681, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[2];
      ArrayUtils.reverse(intArray0, (-649), 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2363;
      shortArray0[1] = (short) (-1584);
      shortArray0[2] = (short) (-1268);
      shortArray0[3] = (short) (-3);
      shortArray0[4] = (short)780;
      shortArray0[5] = (short)57;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1268));
      assertEquals(2, int0);
      assertArrayEquals(new short[] {(short)2363, (short) (-1584), (short) (-1268), (short) (-3), (short)780, (short)57}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long[] longArray0 = new long[2];
      longArray0[0] = (-1263L);
      longArray0[1] = (-1263L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1263L), (-1263L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.swap(doubleArray0, (-1261), (-1261));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1263L);
      floatArray0[1] = (float) (-1261);
      floatArray0[2] = (float) 2264;
      floatArray0[3] = (float) (-66);
      floatArray0[4] = (float) (-1261);
      floatArray0[5] = (float) (-66);
      floatArray0[6] = (float) (-66);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1263.0F), (-1261.0F), 2264.0F, (-66.0F), (-1261.0F), (-66.0F), (-66.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer integer0 = Integer.valueOf(2264);
      assertNotNull(integer0);
      assertEquals(2264, (int)integer0);
      
      Integer integer1 = new Integer((-1261));
      assertNotNull(integer1);
      assertEquals((-1261), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-277));
      assertNotNull(integer2);
      assertEquals((-277), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      try { 
        Integer.valueOf("*[X CZ#d0G~X?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*[X CZ#d0G~X?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = Float.NaN;
      floatArray0[1] = 785.139F;
      floatArray0[2] = 1570.0F;
      floatArray0[3] = (-656.104F);
      floatArray0[5] = 35.1F;
      floatArray0[3] = 35.1F;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F, 785.139F, 1570.0F, 35.1F, 0.0F, 35.1F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(map0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)18;
      shortArray0[1] = (short) (-405);
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short)18, (int) (short) (-1610));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt((int) (short) (-405));
      assertNotNull(mutableInt0);
      assertEquals((-405), mutableInt0.intValue());
      assertEquals((short) (-405), mutableInt0.shortValue());
      assertEquals((-405L), mutableInt0.longValue());
      assertEquals((-405), (int)mutableInt0.getValue());
      assertEquals((byte)107, mutableInt0.byteValue());
      assertEquals((-405.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-405), (int)mutableInt0.toInteger());
      assertEquals("-405", mutableInt0.toString());
      assertEquals((-405.0), mutableInt0.doubleValue(), 0.01);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((Number) (short)18);
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(18.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)18, mutableInt1.shortValue());
      assertEquals(18L, mutableInt1.longValue());
      assertEquals(18.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("18", mutableInt1.toString());
      assertEquals(18, mutableInt1.intValue());
      assertEquals(18, (int)mutableInt1.getValue());
      assertEquals((byte)18, mutableInt1.byteValue());
      assertEquals(18, (int)mutableInt1.toInteger());
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt[] mutableIntArray1 = ArrayUtils.clone(mutableIntArray0);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotNull(mutableIntArray1);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertEquals(2, mutableIntArray1.length);
      assertEquals(2, mutableIntArray0.length);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3078.50002143528;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-458.7835519672643);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1648.5481861);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {3078.50002143528, 0.0, (-458.7835519672643)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[24];
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)84;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)99;
      int[] intArray0 = new int[0];
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)127, (int) (byte)99);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, (-1));
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new double[] {3078.50002143528, 0.0, (-458.7835519672643)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-664));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -664, Length: 24
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-68);
      int int0 = 1894;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 1894);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1894, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1362.0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_LONG_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_LONG_ARRAY, (-1471));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_TYPE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-1);
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3079.0;
      doubleArray0[1] = 0.03548725246057903;
      doubleArray0[2] = (-459.79199177);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 3079.0;
      objectArray0[1] = (Object) (-459.79199177);
      objectArray0[2] = (Object) 3079.0;
      objectArray0[3] = (Object) 0.03548725246057903;
      objectArray0[4] = (Object) 0.03548725246057903;
      Object object0 = ArrayUtils.get(objectArray0, 77);
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-38), (byte)74, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1120.0), (int) (byte)0, 3079.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {3079.0, 0.03548725246057903, (-459.79199177)}, doubleArray0, 0.01);
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, doubleArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "$lE)mH";
      stringArray0[2] = ":|Jq$Nj{Aaz}>=2";
      boolean boolean1 = ArrayUtils.isNotEmpty(stringArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 814.9058);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3079.0, 0.03548725246057903, (-459.79199177)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {814.9058, 3079.0, 0.03548725246057903, (-459.79199177)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'w';
      charArray0[1] = 'c';
      charArray0[2] = ';';
      charArray0[3] = ':';
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'w';
      floatArray0[1] = (float) ';';
      floatArray0[2] = (float) ';';
      floatArray0[3] = (-615.0F);
      floatArray0[4] = (-830.6481F);
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 'c';
      floatArray0[7] = 746.49F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1840.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {119.0F, 59.0F, 59.0F, (-615.0F), (-830.6481F), 2.0F, 99.0F, 746.49F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {119.0F, 59.0F, 59.0F, (-615.0F), (-830.6481F), 2.0F, 99.0F, 746.49F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) ';';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 99);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {59}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'w';
      objectArray0[1] = (Object) 99.0F;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 59.0F;
      doubleArray0[1] = (double) ';';
      doubleArray0[2] = (double) 'c';
      doubleArray0[3] = (double) 119.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3653.459956413001, 119.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {59.0, 59.0, 99.0, 119.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {119.0, 99.0, 59.0, 59.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Double[] doubleArray1 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertSame(doubleArray1, doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, 605, 13);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_CHAR_ARRAY, (-1791), 605, (-1791));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, 2817.747, 2146181786, 1321.3);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Short short0 = new Short((short) (-1120));
      assertNotNull(short0);
      assertEquals((short) (-1120), (short)short0);
      
      Short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, short0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(858.936809482661);
      assertNotNull(double0);
      assertEquals(858.936809482661, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Double double1 = new Double(858.936809482661);
      assertNotNull(double1);
      assertEquals(858.936809482661, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[3] = double0;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(858.936809482661, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[0] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {858.936809482661, 858.936809482661, 858.936809482661, 858.936809482661, 858.936809482661, 858.936809482661, 858.936809482661, 858.936809482661, 858.936809482661}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-2904), (-2904));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      doubleArray0[5] = doubleArray0[0];
      Byte byte0 = new Byte((byte)65);
      assertNotNull(byte0);
      assertEquals((byte)65, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[3] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[4] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-2904), (-2904));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) doubleArray0[1];
      Object object0 = ArrayUtils.get((Object[]) doubleArray0, (-2904), (Object) double0);
      assertNotNull(object0);
      assertEquals(0.0, object0);
      assertEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertTrue(object0.equals((Object)double2));
      assertTrue(object0.equals((Object)double1));
      assertEquals(9, doubleArray0.length);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) double0;
      Float float0 = new Float((float) (-2904));
      assertNotNull(float0);
      assertEquals((-2904.0F), (float)float0, 0.01F);
      
      Object object1 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object1);
      assertEquals((-2904.0F), object1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object1);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 1, 1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (Object) null, 939);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, 4372, 56);
      assertNotSame(bitSet1, bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3078.50002143528;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-459.79199177);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1648.5481861);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {3078.50002143528, 0.0, (-459.79199177)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)84;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)99;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-52), (byte)98, (byte)84, (byte)0, (byte)0, (byte)12, (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-52), (byte)98, (byte)84, (byte)0, (byte)0, (byte)12, (byte)99}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("The Array must not be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)11, (int) (byte)12);
      assertNotSame(byteArray0, byteArray1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-52), (byte)98, (byte)84, (byte)0, (byte)0, (byte)12, (byte)99}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      MutableInt mutableInt0 = new MutableInt((-459.79199177));
      assertNotNull(mutableInt0);
      assertEquals((short) (-459), mutableInt0.shortValue());
      assertEquals((-459), (int)mutableInt0.getValue());
      assertEquals((-459), (int)mutableInt0.toInteger());
      assertEquals("-459", mutableInt0.toString());
      assertEquals((byte)53, mutableInt0.byteValue());
      assertEquals((-459.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-459L), mutableInt0.longValue());
      assertEquals((-459), mutableInt0.intValue());
      assertEquals((-459.0), mutableInt0.doubleValue(), 0.01);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0, "The Array must not be null");
      assertNotNull(string0);
      assertEquals("-459", string0);
      assertEquals((short) (-459), mutableInt0.shortValue());
      assertEquals((-459), (int)mutableInt0.getValue());
      assertEquals((-459), (int)mutableInt0.toInteger());
      assertEquals("-459", mutableInt0.toString());
      assertEquals((byte)53, mutableInt0.byteValue());
      assertEquals((-459.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-459L), mutableInt0.longValue());
      assertEquals((-459), mutableInt0.intValue());
      assertEquals((-459.0), mutableInt0.doubleValue(), 0.01);
      
      ArrayUtils.swap(doubleArray0, (int) (byte) (-52), (int) (byte)12);
      assertArrayEquals(new double[] {3078.50002143528, 0.0, (-459.79199177)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 392.0632F;
      floatArray0[1] = (-2469.3F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-2469.3F);
      floatArray0[4] = (-179.3689F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-952.8F);
      floatArray0[8] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {392.0632F, (-2469.3F), (-1.0F), (-2469.3F), (-179.3689F), (-1.0F), (-1.0F), (-952.8F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)32, (int) (byte)27);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-1), (byte)98, (byte)1}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)27, (byte) (-1), (byte)98, (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-1), (byte)98, (byte)1}, byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-2469.3F));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[0];
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) doubleArray2, (Object[]) doubleArray2);
      assertNotSame(doubleArray2, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-19));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-19)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Byte byte0 = Byte.valueOf((byte) (-15));
      assertNotNull(byte0);
      assertEquals((byte) (-15), (byte)byte0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long((byte) (-19));
      assertNotNull(long0);
      assertEquals((-19L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((byte) (-15));
      assertNotNull(long1);
      assertEquals((-15L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long(1648L);
      assertNotNull(long2);
      assertEquals(1648L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long long3 = new Long((byte) (-15));
      assertNotNull(long3);
      assertEquals((-15L), (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      
      longArray0[3] = long3;
      Long long4 = new Long(1648L);
      assertNotNull(long4);
      assertEquals(1648L, (long)long4);
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      
      longArray0[4] = long4;
      Long long5 = new Long(799L);
      assertNotNull(long5);
      assertEquals(799L, (long)long5);
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      
      longArray0[5] = long5;
      Long long6 = new Long((-2192L));
      assertNotNull(long6);
      assertEquals((-2192L), (long)long6);
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long0));
      
      longArray0[6] = long6;
      Long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(14, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = (boolean) boolean0;
      booleanArray1[4] = true;
      booleanArray1[5] = (boolean) boolean0;
      ArrayUtils.shift(booleanArray1, 49);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true}, booleanArray1));
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-1056));
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte)74);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 263.5164F;
      floatArray0[1] = 263.5164F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (byte)2;
      floatArray0[4] = (float) 1;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {263.5164F, 263.5164F, 1.0F, 2.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-118);
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte) (-11);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)68, (byte)110, (byte) (-11), (byte) (-118), (byte)0, (byte)75, (byte) (-11), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)68, (byte)110, (byte) (-11), (byte) (-118), (byte)0, (byte)75, (byte) (-11), (byte)0}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.shift(booleanArray0, 6);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 100);
      assertNull(object0);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 100;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      MockRandom mockRandom0 = new MockRandom((-2203L));
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(2063L);
      assertNotNull(doubleStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'w';
      charArray0[1] = 'c';
      charArray0[2] = ';';
      charArray0[3] = ':';
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'w';
      floatArray0[1] = (float) ';';
      floatArray0[2] = (float) ';';
      floatArray0[3] = (-615.0F);
      floatArray0[4] = (-829.9F);
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 'c';
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('w');
      assertNotNull(character0);
      assertEquals('w', (char)character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = (Character) ':';
      characterArray0[2] = (Character) ';';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, ':');
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'w', ':', ';'}, charArray1);
      assertEquals(3, charArray1.length);
      assertEquals(3, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)8;
      Byte byte1 = new Byte((byte)8);
      assertNotNull(byte1);
      assertEquals((byte)8, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)67);
      assertNotNull(byte2);
      assertEquals((byte)67, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)8);
      assertNotNull(byte3);
      assertEquals((byte)8, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertEquals((byte)8, (byte)byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      
      byteArray0[3] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)8, (byte)67, (byte)8, (byte)8}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      ArrayUtils.reverse(byteArray1);
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)67, (byte)8}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      int[] intArray0 = new int[0];
      byte[] byteArray2 = ArrayUtils.removeAll(byteArray1, intArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)67, (byte)8}, byteArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)67, (byte)8}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, byteArray2.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = '\"';
      charArray0[2] = 'x';
      charArray0[3] = 'l';
      charArray0[4] = '-';
      charArray0[5] = '[';
      ArrayUtils.swap(charArray0, (-1197), (int) (byte)67);
      assertArrayEquals(new char[] {']', '\"', 'x', 'l', '-', '['}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = (-3852L);
      longArray0[2] = 0L;
      longArray0[3] = 1500L;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1466);
      intArray0[1] = 1504;
      intArray0[2] = 3622;
      ArrayUtils.shift(intArray0, 1504);
      assertArrayEquals(new int[] {3622, (-1466), 1504}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2197);
      shortArray0[1] = (short) (-265);
      shortArray0[2] = (short) (-2355);
      shortArray0[3] = (short)165;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-2197), (short) (-265), (short) (-2355), (short)165}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2197), (short) (-265), (short) (-2355), (short)165, (short) (-2197), (short) (-265), (short) (-2355), (short)165}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short) (-2197);
      Long long0 = new Long((-2192L));
      assertNotNull(long0);
      assertEquals((-2192L), (long)long0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object1);
      assertEquals((-2192L), object1);
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) (short) (-265);
      ArrayUtils.shift(objectArray0, 1993);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int int0 = ArrayUtils.indexOf(longArray1, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '/';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '/'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1841;
      shortArray0[1] = (short) (-32185);
      shortArray0[2] = (short) (-356);
      shortArray0[3] = (short) (-815);
      shortArray0[4] = (short)4191;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)165;
      shortArray0[7] = (short)100;
      shortArray0[8] = (short) (-265);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1841, (short) (-32185), (short) (-356), (short) (-815), (short)4191, (short)0, (short)165, (short)100, (short) (-265)}, shortArray0);
      assertEquals(18, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) true;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (short)0;
      ArrayUtils.shift(objectArray0, (int) (short) (-32185));
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'c';
      charArray0[4] = ':';
      Class<Object[]> class0 = Object[].class;
      Object[] objectArray0 = new Object[9];
      charArray0[2] = ':';
      objectArray0[2] = (Object) ':';
      objectArray0[3] = (Object) 'e';
      objectArray0[4] = (Object) ':';
      objectArray0[5] = (Object) ':';
      objectArray0[6] = (Object) 'e';
      objectArray0[7] = (Object) (short)0;
      objectArray0[8] = (Object) class0;
      Class<Object[]> class1 = Object[].class;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0, class1);
      assertSame(class1, class0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      assertEquals(9, objectArray1.length);
      assertEquals(9, objectArray0.length);
      
      ArrayUtils.shift(objectArray1, (-13), 59, 2218);
      assertSame(class1, class0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(9, objectArray1.length);
      assertEquals(9, objectArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-13);
      longArray0[1] = (long) (short)0;
      longArray0[3] = 2584L;
      longArray0[4] = (long) ':';
      objectArray0[6] = (Object) (-1427L);
      longArray0[6] = (long) (short)0;
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'c';
      charArray0[4] = 'N';
      Class<Object[]> class0 = Object[].class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 'N';
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) 'N';
      objectArray0[3] = (Object) 'e';
      objectArray0[4] = (Object) 'N';
      objectArray0[5] = (Object) 'e';
      objectArray0[6] = (Object) 'e';
      objectArray0[7] = (Object) (short)0;
      objectArray0[8] = (Object) class0;
      Class<Object[]> class1 = Object[].class;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0, class1);
      assertSame(class1, class0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      assertEquals(9, objectArray1.length);
      assertEquals(9, objectArray0.length);
      
      ArrayUtils.shift(objectArray1, (-13), 59, 2218);
      assertSame(class1, class0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(9, objectArray1.length);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 832, (double) (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-13);
      longArray0[1] = 3944L;
      longArray0[2] = (long) 0;
      longArray0[3] = 2584L;
      longArray0[4] = (long) 'N';
      longArray0[5] = (-1427L);
      longArray0[6] = (long) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-13L), 3944L, 0L, 2584L, 78L, (-1427L), 0L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)18;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-1);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)105, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 2052.5644, 5, (-103.338910502));
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(byteArray0, (int) (byte) (-1), (-2119594249));
      assertArrayEquals(new byte[] {(byte)3, (byte)105, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)128;
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-685), (-685));
      assertNull(longArray0);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) (short)128);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)128);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      ArrayUtils.swap(doubleArray0, (-685), 14, (int) (short)0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)444;
      shortArray0[1] = (short)54;
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      ArrayUtils.shift(byteArray0, 2189);
      assertArrayEquals(new byte[] {(byte)89, (byte)89}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)444, 1065);
      assertArrayEquals(new short[] {(short)444, (short)54, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2037.918F;
      floatArray0[1] = (-791.0F);
      floatArray0[2] = 2037.918F;
      floatArray0[3] = (-3493.0F);
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {(-791.0F), 2037.918F, (-3493.0F), 2037.918F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-660.11319522145), (int) (byte) (-64), Double.NaN);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'y';
      charArray0[2] = 'd';
      charArray0[3] = '$';
      charArray0[4] = '';
      charArray0[5] = 'G';
      charArray0[6] = 'G';
      charArray0[7] = 'h';
      charArray0[8] = 'i';
      int int1 = ArrayUtils.indexOf(charArray0, 'i', (-1237));
      assertEquals(8, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'Z', 'y', 'd', '$', '', 'G', 'G', 'h', 'i'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 392.0632F;
      floatArray0[1] = (-2469.3F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-179.3689F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-952.8F);
      floatArray0[8] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {392.0632F, (-2469.3F), (-1.0F), 1.0F, (-179.3689F), (-1.0F), (-1.0F), (-952.8F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)32, (int) (byte)27);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-1), (byte)98, (byte)1}, byteArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)27, (byte) (-1), (byte)98, (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-1), (byte)98, (byte)1}, byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-2469.3F));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[0];
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)97);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Short[] shortArray1 = new Short[9];
      Short short0 = new Short((short) (-265));
      assertNotNull(short0);
      assertEquals((short) (-265), (short)short0);
      
      ArrayUtils.swap((Object[]) shortArray1, (-2147269664), (-906));
      assertEquals(9, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (-2147269664));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)3;
      ArrayUtils.shift(byteArray0, (-906), 234, (-906));
      assertArrayEquals(new byte[] {(byte)70, (byte) (-1), (byte)3}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(3.0);
      assertNotNull(double0);
      assertEquals(3.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-859.9));
      assertNotNull(double1);
      assertEquals((-859.9), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(3.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      Double double3 = new Double((double) doubleArray0[0]);
      assertNotNull(double3);
      assertEquals(3.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[4] = double3;
      Double double4 = new Double((-2434.43669781039));
      assertNotNull(double4);
      assertEquals((-2434.43669781039), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[5] = double4;
      Double double5 = new Double((double) doubleArray0[4]);
      assertNotNull(double5);
      assertEquals(3.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[6] = double5;
      Double double6 = new Double((double) doubleArray0[6]);
      assertNotNull(double6);
      assertEquals(3.0, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[7] = double6;
      Double double7 = new Double(1.0);
      assertNotNull(double7);
      assertEquals(1.0, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      
      doubleArray0[8] = double7;
      Double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)85;
      ArrayUtils.shift(byteArray0, (int) (byte)36);
      assertArrayEquals(new byte[] {(byte)0, (byte)36, (byte)36, (byte)85, (byte) (-89), (byte)85}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = 'L';
      charArray0[2] = 'q';
      charArray0[3] = '0';
      charArray0[4] = 'E';
      charArray0[5] = 'K';
      charArray0[6] = '/';
      charArray0[7] = 'X';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'L', 1556);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'(', 'L', 'q', '0', 'E', 'K', '/', 'X'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '&', 3593);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      short[] shortArray0 = new short[3];
      Character character0 = new Character('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1));
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((float) (short) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-5069.437113));
      assertNotNull(float1);
      assertEquals((-5069.437F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) (short) (-1));
      assertNotNull(float2);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-2634.45));
      assertNotNull(float3);
      assertEquals((-2634.45F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(73.2547);
      assertNotNull(float4);
      assertEquals(73.2547F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) floatArray0[0]);
      assertNotNull(float5);
      assertEquals((-1.0F), (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals(7, floatArray0.length);
      
      floatArray0[5] = float5;
      Float float6 = new Float((-2634.45));
      assertNotNull(float6);
      assertEquals((-2634.45F), (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float3, 0.01F);
      
      floatArray0[6] = float6;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 700.1F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-5069.437F), (-1.0F), (-2634.45F), 73.2547F, (-1.0F), (-2634.45F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      ArrayUtils.swap(charArray0, 260, (int) (short) (-1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = new Integer((byte) (-57));
      assertEquals((-57), int0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[15];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)87, 44);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(15, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2407;
      longArray0[1] = (long) (byte)87;
      longArray0[2] = (long) 2407;
      longArray0[3] = (long) (byte)87;
      String[] stringArray0 = ArrayUtils.insert(2407, (String[]) null, (String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)846;
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short) (-262));
      assertNull(shortArray1);
      
      ArrayUtils.swap((int[]) null, 7, (int) (short)846);
      boolean boolean0 = ArrayUtils.contains((int[]) null, 7);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '#';
      charArray0[2] = '-';
      charArray0[3] = '[';
      ArrayUtils.shift(charArray0, (int) (short)846, 7, (int) (short)846);
      assertArrayEquals(new char[] {'{', '#', '-', '['}, charArray0);
      assertEquals(4, charArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)124;
      long[] longArray0 = new long[8];
      longArray0[0] = (-994L);
      longArray0[1] = (long) (-685);
      longArray0[3] = (long) (byte)85;
      longArray0[4] = (long) (byte) (-115);
      longArray0[5] = (long) (byte) (-93);
      longArray0[6] = (long) (byte)85;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-12), (-12));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-994L), (-685L), 0L, 85L, (-115L), (-93L), 85L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (byte) (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, floatArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = (Object) 85L;
      objectArray0[2] = (Object) (byte) (-93);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (-685L);
      objectArray0[5] = (Object) (-115L);
      objectArray0[6] = (Object) (byte) (-1);
      ArrayUtils.reverse(objectArray0, (-1024), 512);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 2724);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 2724;
      longArray0[3] = (long) 2724;
      longArray0[4] = (long) 2724;
      ArrayUtils.shift(longArray0, (-1));
      assertArrayEquals(new long[] {(-1L), 2724L, 2724L, 2724L, (-1L)}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Short short0 = new Short((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) short0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)65;
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 2147483647L;
      longArray0[1] = 2147483647L;
      longArray0[2] = (-1254L);
      longArray0[3] = 610L;
      longArray0[4] = 1793L;
      longArray0[5] = 115L;
      longArray0[6] = (-994L);
      longArray0[7] = (-210L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-685), (-685));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2147483647L, 2147483647L, (-1254L), 610L, 1793L, 115L, (-994L), (-210L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2147483647L;
      floatArray0[1] = (float) 1793L;
      floatArray0[2] = (float) (-994L);
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Short short0 = new Short((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) short0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 2);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Double[] doubleArray1 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertSame(doubleArray1, doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, 605, 13);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1.0), 1186);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = 's';
      charArray0[2] = 'X';
      ArrayUtils.swap(charArray0, 14, 1136, 1136);
      assertArrayEquals(new char[] {'h', 's', 'X'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Short short0 = new Short((short) (-1120));
      assertNotNull(short0);
      assertEquals((short) (-1120), (short)short0);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      Short[] shortArray1 = ArrayUtils.addFirst(shortArray0, shortArray0[1]);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Integer";
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "java.lang.Integer";
      stringArray0[3] = "x-`f";
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "java.lang.Integer");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)shortArray0[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) shortArray0[0], 14);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new float[] {(-1120.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1120.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '\u0000';
      charArray0[3] = 'd';
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'd';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-362), (-125));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {100.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[3] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 1571.2544F;
      floatArray0[3] = Float.NaN;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 81);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, Float.NaN, 1571.2544F, Float.NaN, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1571.2544F, Float.NaN, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      char[] charArray0 = new char[28];
      charArray0[0] = 'w';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = ':';
      charArray0[4] = 's';
      charArray0[5] = '_';
      charArray0[7] = 'h';
      charArray0[8] = 'X';
      ArrayUtils.swap(charArray0, 14, 1136, 2);
      assertEquals(28, charArray0.length);
      
      Short[] shortArray0 = new Short[0];
      Short short0 = new Short((short) (-1120));
      assertNotNull(short0);
      assertEquals((short) (-1120), (short)short0);
      
      Short[] shortArray1 = ArrayUtils.addFirst(shortArray0, short0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.Integer";
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "java.lang.Integer");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-1120);
      floatArray0[1] = (float) 'c';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 14, 1136);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1120.0F), 99.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1150.0F;
      floatArray0[1] = 1150.0F;
      floatArray0[2] = 66.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1150.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1150.0F, 1150.0F, 66.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(3, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-117), (-968));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1150.0F, 1150.0F, 66.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      charArray0[1] = '^';
      charArray0[2] = '+';
      charArray0[3] = 'b';
      charArray0[4] = '1';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'b', (-968));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new char[] {'H', '^', '+', 'b', '1'}, charArray0);
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(4, bitSet1.length());
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{3}", bitSet1.toString());
      assertEquals(5, charArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2240);
      shortArray0[1] = (short) (-1528);
      shortArray0[2] = (short) (-4199);
      shortArray0[3] = (short)51;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)2;
      BitSet bitSet2 = ArrayUtils.indexesOf(shortArray0, (short) (-2240));
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertNotNull(bitSet2);
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertArrayEquals(new short[] {(short) (-2240), (short) (-1528), (short) (-4199), (short)51, (short)2, (short)2}, shortArray0);
      assertEquals("{0}", bitSet2.toString());
      assertEquals(1, bitSet2.cardinality());
      assertEquals(64, bitSet2.size());
      assertFalse(bitSet2.isEmpty());
      assertEquals(1, bitSet2.length());
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(23, byteArray0.length);
      
      double[] doubleArray0 = new double[6];
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'U';
      charArray0[2] = 'r';
      charArray0[3] = 'f';
      charArray0[4] = '&';
      charArray0[5] = '\\';
      charArray0[6] = '0';
      charArray0[7] = 'r';
      ArrayUtils.shift(charArray0, (int) (byte)47, (int) (byte)47, (int) (byte)47);
      assertArrayEquals(new char[] {'v', 'U', 'r', 'f', '&', '\\', '0', 'r'}, charArray0);
      assertEquals(8, charArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'v';
      longArray0[1] = (long) 'v';
      longArray0[2] = (long) 'v';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {118L, 118L, 118L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-4L));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {118L, 118L, 118L}, longArray0);
      assertArrayEquals(new long[] {118L, 118L, 118L}, longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)101;
      shortArray0[2] = (short)1229;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-128), (int) (short)1229);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)55);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)55, (byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      ArrayUtils.swap(charArray0, (int) (short)101, (int) (short)1229, (-450));
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Short short0 = new Short((short)3022);
      assertNotNull(short0);
      assertEquals((short)3022, (short)short0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(256L);
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      char[] charArray0 = new char[28];
      charArray0[0] = 'w';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = ':';
      charArray0[4] = 's';
      charArray0[5] = '_';
      charArray0[7] = 'h';
      charArray0[8] = 'X';
      ArrayUtils.swap(charArray0, 14, 1136, 2);
      assertEquals(28, charArray0.length);
      
      Short[] shortArray0 = new Short[0];
      Short short0 = new Short((short) (-1120));
      assertNotNull(short0);
      assertEquals((short) (-1120), (short)short0);
      
      Short[] shortArray1 = ArrayUtils.addFirst(shortArray0, short0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.Integer";
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "java.lang.Integer");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-1120);
      floatArray0[1] = (float) 'V';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 14, 1136);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1120.0F), 86.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 1980, 3692, 349);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((double) 1980);
      assertNotNull(float0);
      assertEquals(1980.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 349);
      assertNotNull(float1);
      assertEquals(349.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-703.6F));
      assertNotNull(float2);
      assertEquals((-703.6F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-1243.451775));
      assertNotNull(float3);
      assertEquals((-1243.4518F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(35.1F);
      assertNotNull(float4);
      assertEquals(35.1F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      floatArray0[4] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1980.0F, 349.0F, (-703.6F), (-1243.4518F), 35.1F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 349;
      intArray0[1] = 1980;
      intArray0[2] = 3692;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {349, 1980, 3692}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)116;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)59, (byte) (-1), (byte)99, (byte)116}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)59, (byte) (-1), (byte)99, (byte)116}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[2] = ',';
      ArrayUtils.shift(charArray0, (-1779), 42, 102);
      assertArrayEquals(new char[] {'c', '\u0000', ','}, charArray0);
      assertEquals(3, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1779);
      doubleArray0[1] = (double) 102;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) 42;
      doubleArray0[4] = (double) 'c';
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 99.0, 2051.388632502);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1779.0), 102.0, (-1.0), 42.0, 99.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2773.0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)95);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_FLOAT_ARRAY, 2171.0317F);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {2171.0317F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) 2171.0317F);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1102.04);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1629);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1629)}, shortArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1629)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(3, shortArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-1629);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1629L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1629L), 0L, 0L, (-1629L), 0L, 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (short) (-1629), (-1471));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {1L, 1L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 359, 105);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 1980, 3692, 349);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((double) 1980);
      assertNotNull(float0);
      assertEquals(1980.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 349);
      assertNotNull(float1);
      assertEquals(349.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-703.6F));
      assertNotNull(float2);
      assertEquals((-703.6F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-1243.451775));
      assertNotNull(float3);
      assertEquals((-1243.4518F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(35.1F);
      assertNotNull(float4);
      assertEquals(35.1F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      
      floatArray0[4] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1980.0F, 349.0F, (-703.6F), (-1243.4518F), 35.1F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 349;
      intArray0[1] = 1980;
      intArray0[2] = 3692;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {349, 1980, 3692}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)116;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)59, (byte) (-1), (byte)99, (byte)116}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)59, (byte) (-1), (byte)99, (byte)116}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1076);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'w';
      charArray0[1] = 'c';
      charArray0[2] = ';';
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)62);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      int[] intArray0 = new int[5];
      intArray0[1] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(3, shortArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1629);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1629)}, shortArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1629)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(3, shortArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1822.298;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short) (-1629);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1822.298, 0.0, 0.0, (-1629.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-1629);
      longArray0[1] = (long) (short) (-1629);
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short) (-1629);
      longArray0[4] = (long) (short)0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1629L), (-1629L), 0L, (-1629L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-1629L), (-1629L), 0L, (-1629L), 0L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 137.0;
      doubleArray0[1] = (-3.491);
      doubleArray0[2] = (-3.491);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-3.491));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {137.0, (-3.491), (-3.491)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {137.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-3.491);
      objectArray0[1] = (Object) true;
      MockRandom mockRandom0 = new MockRandom(87L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray0, (-3.491));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3.491), 137.0, (-3.491), (-3.491)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {137.0, (-3.491), (-3.491)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      char[] charArray0 = new char[8];
      charArray0[0] = '/';
      charArray0[1] = '=';
      charArray0[2] = '1';
      ArrayUtils.swap(charArray0, (-450), (-450), 9);
      assertArrayEquals(new char[] {'/', '=', '1', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      short short0 = (short)85;
      Short short1 = new Short((short)85);
      assertNotNull(short1);
      assertEquals((short)85, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[7];
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      shortArray0[2] = short1;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      shortArray0[5] = (Short) short0;
      shortArray0[6] = short1;
      Short short2 = new Short(short0);
      assertNotNull(short2);
      assertEquals((short)85, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      Short[] shortArray1 = ArrayUtils.addFirst(shortArray0, short2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      short[] shortArray2 = new short[4];
      shortArray2[0] = (short) (-2);
      shortArray2[1] = short0;
      shortArray2[2] = short0;
      shortArray2[3] = (short)85;
      ArrayUtils.shuffle(shortArray2);
      assertArrayEquals(new short[] {(short)85, (short)85, (short)85, (short) (-2)}, shortArray2);
      assertEquals(4, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)101;
      shortArray0[2] = (short)1229;
      shortArray0[3] = (short)6;
      shortArray0[4] = (short) (-1356);
      shortArray0[5] = (short)1322;
      shortArray0[6] = (short)1202;
      shortArray0[7] = (short)16;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)1322, (int) (short)16);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)101, (short)1229, (short)6, (short) (-1356), (short)1322, (short)1202, (short)16}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int[] intArray0 = null;
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-2147045295));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-112);
      shortArray0[1] = (short) (byte)0;
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean3;
      booleanArray0[1] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean[] booleanArray2 = new boolean[0];
      ArrayUtils.shuffle(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3254.23F;
      floatArray0[1] = 99.0F;
      floatArray0[2] = 99.0F;
      floatArray0[3] = 2773.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {3254.23F, 99.0F, 99.0F, 2773.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 99.0F;
      doubleArray0[1] = (double) 99.0F;
      doubleArray0[2] = 543.0;
      doubleArray0[3] = (double) 2773.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-575.753F), (-311));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {3254.23F, 99.0F, 99.0F, 2773.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)0;
      ArrayUtils.shift(byteArray0, 980, 13, 980);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte) (-82), (byte)0, (byte) (-68), (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1]);
      assertEquals(0, int0);
      assertEquals(2, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (byte)95;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 13;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte) (-1);
      int int1 = ArrayUtils.indexOf(floatArray0, (float) (byte) (-1), Integer.MAX_VALUE);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 95.0F, 0.0F, 13.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)444;
      shortArray0[1] = (short)54;
      shortArray0[2] = (short)1136;
      shortArray0[3] = (short)2773;
      ArrayUtils.shift(shortArray0, (int) (short)444);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)444, (short)54, (short)1136, (short)2773}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte)95;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-120), (byte)68, (byte)110, (byte) (-11), (byte) (-118), (byte)75, (byte)99, (byte)95}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)68, (byte)110, (byte) (-11), (byte) (-118), (byte)1, (byte)75, (byte)99, (byte)95}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(9, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      Object object0 = ArrayUtils.get((Object[]) longArray0, (int) 0);
      assertNull(object0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = null;
      objectArray0[6] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[3]);
      assertEquals(0, int0);
      assertEquals(7, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)50;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)2189;
      shortArray0[8] = (short) (byte)112;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2, (short)50, (short)0, (short)0, (short)0, (short)2189, (short)112}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)50, (short)2189, (short)112}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (short)0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = '&';
      charArray0[2] = 'A';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '&');
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'A', '&', 'A'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Character character0 = Character.valueOf('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      Character character1 = Character.valueOf('*');
      assertNotNull(character1);
      assertEquals('*', (char)character1);
      
      Object object0 = ArrayUtils.get(objectArray0, (-641), (Object) character1);
      assertNotNull(object0);
      assertEquals('*', object0);
      assertEquals(6, objectArray0.length);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.get(objectArray0, (-641));
      assertNull(object2);
      assertEquals(6, objectArray0.length);
      
      objectArray0[3] = null;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[4] = object3;
      Object object4 = ArrayUtils.get(objectArray0, (-641));
      assertNull(object4);
      assertEquals(6, objectArray0.length);
      
      objectArray0[5] = null;
      ArrayUtils.reverse(objectArray0, (-641), (-641));
      assertEquals(6, objectArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-641);
      doubleArray0[1] = (double) '*';
      doubleArray0[2] = (double) '*';
      doubleArray0[3] = (double) '*';
      doubleArray0[4] = (double) (-641);
      doubleArray0[5] = 0.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-641.0), 42.0, 42.0, 42.0, (-641.0), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, object1, (-641));
      assertNotSame(object1, object3);
      assertEquals(1, int0);
      assertFalse(object1.equals((Object)object3));
      assertEquals(6, objectArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '*';
      intArray0[1] = (-96);
      intArray0[2] = (-641);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = (int) '*';
      intArray0[6] = (-641);
      intArray0[7] = (int) '*';
      intArray0[8] = (int) '*';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 56, 68);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {42, (-96), (-641), 1, 1, 42, (-641), 42, 42}, intArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long[] longArray0 = new long[2];
      longArray0[0] = (-1263L);
      longArray0[1] = (-1263L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1263L), (-1263L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.swap(doubleArray0, (-1261), (-1261));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1335;
      Character character0 = new Character('1');
      assertNotNull(character0);
      assertEquals('1', (char)character0);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf('B');
      assertNotNull(character1);
      assertEquals('B', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[2] = character1;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '6');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'1', '1', 'B', '1', '1', '1', '1', '6'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Short short0 = new Short((short)1183);
      assertNotNull(short0);
      assertEquals((short)1183, (short)short0);
      
      Short short1 = new Short((short) (-2783));
      assertNotNull(short1);
      assertEquals((short) (-2783), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-2783));
      assertNotNull(short2);
      assertEquals((short) (-2783), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      Short short3 = new Short((short)45);
      assertNotNull(short3);
      assertEquals((short)45, (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)45);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1183, (short) (-2783)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      ArrayUtils.shift(shortArray1, 8, 13, (-2587));
      assertArrayEquals(new short[] {(short)1183, (short) (-2783)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '^');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-2587);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-2587.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 785.139F;
      floatArray0[2] = 1570.0F;
      floatArray0[3] = (-656.104F);
      floatArray0[4] = 1326.018F;
      floatArray0[5] = 1570.0F;
      floatArray0[6] = (-976.943F);
      int int0 = ArrayUtils.indexOf(floatArray0, 1326.018F);
      assertEquals(4, int0);
      assertArrayEquals(new float[] {Float.NaN, 785.139F, 1570.0F, (-656.104F), 1326.018F, 1570.0F, (-976.943F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(map0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-405);
      shortArray0[2] = (short) (-1610);
      shortArray0[3] = (short) (-2340);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-405), (short) (-1610), (short) (-2340)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = (int) (short) (-405);
      intArray0[2] = (int) (short)0;
      intArray0[3] = 4;
      intArray0[4] = (int) (short) (-405);
      intArray0[5] = (int) (short)0;
      intArray0[6] = (-1);
      intArray0[7] = (int) (short) (-1610);
      ArrayUtils.swap(intArray0, (int) (short) (-1610), (int) (short) (-2340));
      assertArrayEquals(new int[] {4, (-405), 0, 4, (-405), 0, (-1), (-1610)}, intArray0);
      assertEquals(8, intArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '$');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('!');
      assertNotNull(character0);
      assertEquals('!', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertNotNull(character1);
      assertEquals('!', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'J');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'!', '!'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-4458.930769));
      assertNotNull(double0);
      assertEquals((-4458.930769), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(583.04736866979);
      assertNotNull(double1);
      assertEquals(583.04736866979, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) character0);
      assertNotNull(double2);
      assertEquals(33.0, (double)double2, 0.01);
      assertTrue(character0.equals((Object)character1));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-4458.930769));
      assertNotNull(double3);
      assertEquals((-4458.930769), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[3] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-37.37366793792878);
      doubleArray0[3] = (-37.37366793792878);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-24), (byte)36, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((byte) (-24));
      assertNotNull(short0);
      assertEquals((short) (-24), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-24)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[7] = 0.0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), (-1.0), (-1.0), (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = 'R';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'8', 'R', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-24), (byte)36, (byte) (-1)}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((byte) (-24));
      assertNotNull(short0);
      assertEquals((short) (-24), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-24)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1), (-924));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)6, (-1469));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (byte)6);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_INT_ARRAY, (-1), (int) (short) (-2505));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Short short0 = new Short((byte)36);
      assertNotNull(short0);
      assertEquals((short)36, (short)short0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertNotSame(shortArray1, shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1;
      longArray0[1] = 1343L;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2271L), 1);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {1L, 1343L, 1L, 1L, 1L, 1L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      long[] longArray0 = new long[2];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 7);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2768.1142);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2564.6962814;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-921.97180839019));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2768.1142), 0.0, 2564.6962814}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-921.97180839019), (-2768.1142), 0.0, 2564.6962814}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1101;
      intArray0[1] = 2189;
      ArrayUtils.swap(intArray0, 1101, 1);
      assertArrayEquals(new int[] {1101, 2189}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2189;
      longArray0[1] = (-845L);
      longArray0[2] = (long) 2189;
      longArray0[3] = 1759L;
      longArray0[4] = (long) 1101;
      longArray0[5] = (long) 2189;
      longArray0[6] = (long) 2189;
      longArray0[7] = (long) 1;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 1101, 16);
      assertEquals(4, int0);
      assertArrayEquals(new long[] {2189L, (-845L), 2189L, 1759L, 1101L, 2189L, 2189L, 1L}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)95);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), (-1), 59);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Short short0 = new Short((short) (-81));
      assertNotNull(short0);
      assertEquals((short) (-81), (short)short0);
      
      Short short1 = new Short((short) (-1243));
      assertNotNull(short1);
      assertEquals((short) (-1243), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-81));
      assertNotNull(short2);
      assertEquals((short) (-81), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      Short[] shortArray0 = ArrayUtils.addFirst((Short[]) null, short2);
      assertNotNull(shortArray0);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1716.7306895316;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (short) (-1243));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1716.7306895316}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1716.7306895316}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      doubleArray0[1] = double1;
      Long long0 = new Long((-1267L));
      assertNotNull(long0);
      assertEquals((-1267L), (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)21;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-748), (int) (byte)21);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1, (short)21}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf("Array element ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean("Array element ");
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean((boolean) boolean2);
      assertNotNull(boolean6);
      assertTrue(boolean6);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean4));
      assertFalse(boolean2.equals((Object)boolean5));
      assertFalse(boolean2.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean3));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.FALSE;
      assertNotNull(boolean7);
      assertFalse(boolean7);
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean5));
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = Boolean.valueOf("java.lang.Integer");
      assertNotNull(boolean8);
      assertFalse(boolean8);
      assertTrue(boolean8.equals((Object)boolean5));
      assertFalse(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean6));
      
      booleanArray0[8] = boolean8;
      Boolean[] booleanArray1 = ArrayUtils.toArray(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-5278.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[7] = 0.0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), (-5278.0), (-1.0), (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = 'R';
      charArray0[2] = ']';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'8', 'R', ']'}, charArray0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, 1.0F);
      assertNull(floatArray0);
      
      Double[] doubleArray2 = ArrayUtils.toArray(doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), (-5278.0), (-1.0), (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((-733L));
      assertNotNull(long2);
      assertEquals((-733L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      longArray0[2] = long2;
      Long long3 = Long.getLong("", 173L);
      assertNotNull(long3);
      assertEquals(173L, (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      
      longArray0[3] = long3;
      Long long4 = new Long(3944L);
      assertNotNull(long4);
      assertEquals(3944L, (long)long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      
      longArray0[4] = long4;
      Long long5 = new Long((-3642L));
      assertNotNull(long5);
      assertEquals((-3642L), (long)long5);
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      
      longArray0[5] = long5;
      Long long6 = new Long(1L);
      assertNotNull(long6);
      assertEquals(1L, (long)long6);
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long3));
      assertTrue(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long5));
      
      longArray0[6] = long6;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 0L, (-733L), 173L, 3944L, (-3642L), 1L}, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)66;
      shortArray0[2] = (short)99;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 162.362F;
      floatArray0[1] = (float) (short)99;
      floatArray0[2] = (float) (short)99;
      ArrayUtils.swap(floatArray0, (int) (short)99, 115, 2);
      assertArrayEquals(new float[] {162.362F, 99.0F, 99.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 99.0F, 3973.102578412467);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) "1Sg}_", 22);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1499.0F);
      floatArray0[1] = (-3160.043F);
      floatArray0[2] = 4897.0F;
      floatArray0[3] = 631.0F;
      floatArray0[4] = (-1499.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 35.1F, 2);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1499.0F), (-3160.043F), 4897.0F, 631.0F, (-1499.0F)}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = (-2656);
      intArray0[4] = (-1703);
      intArray0[5] = 2;
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 2, 2, (-2656), (-1703), 2}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'A';
      charArray0[2] = '1';
      charArray0[3] = ':';
      charArray0[4] = ' ';
      charArray0[5] = '|';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'6', 'A', '1', ':', ' ', '|'}, charArray0);
      assertEquals(12, charArray1.length);
      assertEquals(6, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '|';
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) '1';
      doubleArray0[3] = (double) (-1499.0F);
      doubleArray0[4] = (double) 4897.0F;
      doubleArray0[5] = (double) (-3160.043F);
      doubleArray0[6] = (double) (-1499.0F);
      doubleArray0[7] = (double) '1';
      int int0 = ArrayUtils.indexOf(doubleArray0, 124.0, (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {124.0, 2.0, 49.0, (-1499.0), 4897.0, (-3160.04296875), (-1499.0), 49.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Short short0 = new Short((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) short0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)65;
      int int2 = ArrayUtils.indexOf(doubleArray0, 65.0, (-451), 65.0);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new double[] {65.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-49.65F));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-501));
      assertNotNull(integer0);
      assertEquals((-501), (int)integer0);
      
      int int0 = 2;
      Integer integer1 = new Integer(2);
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[0] = integer1;
      Integer integer2 = new Integer((-501));
      assertNotNull(integer2);
      assertEquals((-501), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      MutableInt mutableInt0 = new MutableInt(int0);
      assertNotNull(mutableInt0);
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, mutableInt0.intValue());
      assertEquals((short)2, mutableInt0.shortValue());
      
      mutableInt0.setValue((Number) int0);
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, mutableInt0.intValue());
      assertEquals((short)2, mutableInt0.shortValue());
      
      mutableInt0.increment();
      assertEquals(3, (int)mutableInt0.getValue());
      assertEquals((byte)3, mutableInt0.byteValue());
      assertEquals(3.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3, (int)mutableInt0.toInteger());
      assertEquals(3L, mutableInt0.longValue());
      assertEquals(3.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("3", mutableInt0.toString());
      assertEquals(3, mutableInt0.intValue());
      assertEquals((short)3, mutableInt0.shortValue());
      
      Integer integer3 = mutableInt0.toInteger();
      assertNotNull(integer3);
      assertEquals(3, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(3, (int)mutableInt0.getValue());
      assertEquals((byte)3, mutableInt0.byteValue());
      assertEquals(3.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3, (int)mutableInt0.toInteger());
      assertEquals(3L, mutableInt0.longValue());
      assertEquals(3.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("3", mutableInt0.toString());
      assertEquals(3, mutableInt0.intValue());
      assertEquals((short)3, mutableInt0.shortValue());
      
      mutableInt0.subtract(int0);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[2]);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(4, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-501);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-501), (double) 2);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-501.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'w';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = ':';
      charArray0[4] = 's';
      charArray0[5] = 'L';
      charArray0[8] = 'X';
      ArrayUtils.swap(charArray0, 14, 1136, 2);
      assertArrayEquals(new char[] {'w', 'c', 'c', ':', 's', 'L', '\u0000', '\u0000', 'X'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Short[] shortArray0 = new Short[0];
      Short short0 = new Short((short) (-1120));
      assertNotNull(short0);
      assertEquals((short) (-1120), (short)short0);
      
      Short[] shortArray1 = ArrayUtils.addFirst(shortArray0, short0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      short[] shortArray2 = new short[2];
      shortArray2[0] = (short) (-1120);
      shortArray2[1] = (short) (-1120);
      short[] shortArray3 = ArrayUtils.removeAllOccurrences(shortArray2, (short) (-1120));
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertNotNull(shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short) (-1120), (short) (-1120)}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray3);
      assertEquals(2, shortArray2.length);
      assertEquals(0, shortArray3.length);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), 1146, 1146);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 1, 1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Float float0 = new Float((-3461.426F));
      assertNotNull(float0);
      assertEquals((-3461.426F), (float)float0, 0.01F);
      
      Float float1 = new Float((float) 69);
      assertNotNull(float1);
      assertEquals(69.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(2234.0F);
      assertNotNull(float2);
      assertEquals(2234.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float((-1.0));
      assertNotNull(float3);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_SHORT_ARRAY, (short)872);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Float float4 = new Float(1840.0F);
      assertNotNull(float4);
      assertEquals(1840.0F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      Object object0 = ArrayUtils.get((Object[]) arrayUtils0.EMPTY_FIELD_ARRAY, (-1158));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      Short short0 = new Short((short) (-1852));
      assertNotNull(short0);
      assertEquals((short) (-1852), (short)short0);
      
      int int0 = ArrayUtils.indexOf((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (Object) short0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_SHORT_ARRAY, (short)5457);
      assertNotSame(shortArray1, shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, 525, (byte)73);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 525, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2252.319F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-2252.319F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-2252.319F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2252.319F), (-2252.319F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_INT_ARRAY, (-101), 1101);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) 20, 7);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'c';
      charArray0[4] = 'N';
      charArray0[5] = 'H';
      charArray0[6] = '\"';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', 'c', 'N', 'H', '\"'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'N';
      intArray0[1] = (int) 'c';
      intArray0[2] = 101;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {78, 99, 101}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.shift((int[]) null, 988, 78, (int) (short)0);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {78, 99, 101}, intArray1);
      assertArrayEquals(new int[] {78, 99, 101}, intArray0);
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', 'e', 'c', 'N', 'H', '\"', 'e'}, charArray0);
      assertEquals(7, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 1468);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)6, (-1450));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), (int) (byte) (-108), (-12));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Short short0 = new Short((short)1470);
      assertNotNull(short0);
      assertEquals((short)1470, (short)short0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[1];
      doubleArray0[3] = (double) 93;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      MockRandom mockRandom2 = new MockRandom();
      assertNotNull(mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom2);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)18;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)3, (int) (byte) (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)3, (byte)105, (byte) (-1), (byte) (-69), (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-108));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)3, (byte)105, (byte) (-1), (byte) (-69), (byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)3, (byte)105, (byte) (-1), (byte) (-69), (byte) (-1), (byte)0}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      char[] charArray0 = new char[1];
      ArrayUtils.swap(charArray0, (-450), 14, (int) (byte) (-69));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Short short0 = new Short((short)85);
      assertNotNull(short0);
      assertEquals((short)85, (short)short0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      int int0 = 1462;
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 1136, 1462);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[13];
      doubleArray0[1] = (double) 550;
      doubleArray0[0] = (double) 1462;
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, 1, 2474.46F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-112);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)112;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[0] = (short) (byte)112;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte) (-112);
      shortArray0[7] = (short) (byte) (-112);
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)112, (short)0, (short)0, (short)0, (short)0, (short)0, (short) (-112), (short) (-112)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = '*';
      charArray0[2] = 't';
      charArray0[3] = 'H';
      char[] charArray1 = ArrayUtils.subarray((char[]) null, (-775), (-1088));
      assertNull(charArray1);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)444;
      shortArray0[1] = (short)54;
      shortArray0[2] = (short)1136;
      int[] intArray0 = ArrayUtils.add((int[]) null, (int) (short)1136);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1136}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)54;
      objectArray0[1] = (Object) (short)1136;
      objectArray0[2] = (Object) (short)1136;
      objectArray0[3] = (Object) (short)444;
      objectArray0[4] = (Object) (short)1136;
      objectArray0[5] = (Object) (short)54;
      objectArray0[6] = (Object) (short)54;
      objectArray0[7] = (Object) (short)444;
      objectArray0[8] = (Object) (short)1136;
      ArrayUtils.swap(objectArray0, (int) (short)1136, 23, 111);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      ArrayUtils.shift(byteArray0, 980, 13, 980);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-82), (byte)0, (byte) (-68), (byte)0, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = (Object) (byte)0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1]);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      Object[] objectArray1 = new Object[6];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) false;
      objectArray1[1] = (Object) (byte)0;
      objectArray1[3] = (Object) (byte)0;
      objectArray1[4] = (Object) (byte) (-1);
      objectArray1[5] = (Object) false;
      ArrayUtils.swap(objectArray1, (int) (byte) (-82), 102);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(6, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      ArrayUtils.shift(byteArray0, 980, 13, 980);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-82), (byte)0, (byte) (-68), (byte)0, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = (Object) (byte)0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1]);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      Object[] objectArray1 = new Object[6];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) false;
      objectArray1[1] = (Object) (byte)0;
      objectArray1[2] = (Object) true;
      objectArray1[3] = (Object) (byte)0;
      objectArray1[4] = (Object) (byte) (-1);
      objectArray1[5] = (Object) false;
      ArrayUtils.swap(objectArray1, (int) (byte) (-82), 102);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(6, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      float[] floatArray0 = new float[4];
      long[] longArray0 = new long[2];
      longArray0[0] = (-1247L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, (-1247L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, 1012, 797.2553F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1012, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-112);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)66;
      int int0 = 1026;
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 1026, 550);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1026;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte) (-112);
      doubleArray0[3] = (double) 550;
      doubleArray0[4] = (double) 1026;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (-2694.7061);
      doubleArray0[7] = (double) (short)66;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1026.0, 0.0, (-112.0), 550.0, 1026.0, 0.0, (-2694.7061), 66.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1026;
      floatArray0[1] = (float) 550;
      floatArray0[0] = (float) 1026;
      floatArray0[3] = (float) (short)66;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (byte) (-112);
      floatArray0[6] = (float) (short) (-112);
      floatArray0[7] = (float) (short) (-112);
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, (int) (short)66, (-112.0F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 66, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)47, (byte)2, (byte)74, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (byte)47;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)2;
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 47.0, 0.0, 0.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)47;
      shortArray0[1] = (short) (byte)74;
      shortArray0[2] = (short) (byte)47;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)47;
      ArrayUtils.swap(shortArray0, 2146400767, (int) (byte)0);
      assertArrayEquals(new short[] {(short)47, (short)74, (short)47, (short)2, (short)47}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Short[] shortArray1 = new Short[4];
      shortArray1[0] = (Short) (short)2;
      shortArray1[1] = (Short) (short)47;
      shortArray1[2] = (Short) (short)47;
      shortArray1[3] = (Short) (short)47;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'w';
      charArray0[1] = 'c';
      charArray0[2] = ';';
      charArray0[3] = ':';
      charArray0[4] = 's';
      charArray0[5] = 'L';
      charArray0[7] = 'h';
      charArray0[8] = 'X';
      ArrayUtils.swap(charArray0, 14, 1136, 2);
      assertArrayEquals(new char[] {'w', 'c', ';', ':', 's', 'L', '\u0000', 'h', 'X'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Short[] shortArray0 = new Short[0];
      Short short0 = new Short((short) (-1120));
      assertNotNull(short0);
      assertEquals((short) (-1120), (short)short0);
      
      Short[] shortArray1 = ArrayUtils.addFirst(shortArray0, short0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'c';
      intArray0[1] = (int) 'X';
      ArrayUtils.swap(intArray0, 2, (-514));
      assertArrayEquals(new int[] {99, 88}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Character character0 = Character.valueOf('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object0);
      assertEquals('*', object0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-641), object0);
      assertNotNull(object1);
      assertEquals('*', object1);
      assertEquals(6, objectArray0.length);
      
      objectArray0[0] = object1;
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      objectArray0[1] = null;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object object3 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object3);
      assertEquals(true, object3);
      
      objectArray0[2] = object3;
      Object object4 = ArrayUtils.get(objectArray0, (-641));
      assertNull(object4);
      assertEquals(6, objectArray0.length);
      
      objectArray0[3] = null;
      Object object5 = new Object();
      assertNotNull(object5);
      
      objectArray0[4] = object5;
      Object object6 = ArrayUtils.get(objectArray0, (-641));
      assertNull(object6);
      assertEquals(6, objectArray0.length);
      
      objectArray0[5] = null;
      ArrayUtils.reverse(objectArray0, (-641), (-641));
      assertEquals(6, objectArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-641);
      doubleArray0[1] = (double) '*';
      doubleArray0[2] = (double) '*';
      doubleArray0[3] = (double) '*';
      doubleArray0[4] = (double) (-641);
      ArrayUtils.shift((short[]) null, (int) (short)2773);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Byte byte0 = new Byte((byte)76);
      assertNotNull(byte0);
      assertEquals((byte)76, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)1);
      assertNotNull(byte2);
      assertEquals((byte)1, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte0;
      byteArray0[1] = byte1;
      Byte byte3 = new Byte((byte) (-42));
      assertNotNull(byte3);
      assertEquals((byte) (-42), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte) (-42)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 1571.2544F;
      floatArray0[3] = (-656.104F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 81);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, Float.NaN, 1571.2544F, (-656.104F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1571.2544F, (-656.104F), 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-118);
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte) (-11);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)68, (byte)68, (byte) (-11), (byte) (-118), (byte)0, (byte)75, (byte) (-11), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)68, (byte)68, (byte) (-11), (byte) (-118), (byte)0, (byte)75, (byte) (-11), (byte)0}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.shift(booleanArray0, 6);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)68;
      shortArray0[1] = (short) (-2384);
      shortArray0[2] = (short) (byte)68;
      shortArray0[3] = (short) (byte)68;
      shortArray0[4] = (short) (byte)68;
      shortArray0[5] = (short) (byte)75;
      shortArray0[6] = (short) (byte) (-11);
      shortArray0[7] = (short) (byte) (-118);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)16);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)68, (short) (-2384), (short)68, (short)68, (short)68, (short)75, (short) (-11), (short) (-118)}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)76);
      assertNotNull(byte1);
      assertEquals((byte)76, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[1] = byte0;
      Byte byte2 = new Byte((byte) (-29));
      assertNotNull(byte2);
      assertEquals((byte) (-29), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray0[2] = byte2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-775);
      intArray0[1] = 1763;
      intArray0[2] = (-1);
      intArray0[3] = (-3135);
      intArray0[4] = 3;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-775), 1763, (-1), (-3135), 3}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 3;
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)7, (-1653));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)87);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)87}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-66), 156);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)87;
      shortArray0[1] = (short) (byte)87;
      shortArray0[2] = (short) (byte)7;
      shortArray0[3] = (short) (byte)87;
      shortArray0[4] = (short) (byte)87;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)87);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)87, (short)87, (short)7, (short)87, (short)87}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Byte[] byteArray2 = new Byte[4];
      byte byte0 = (byte)88;
      Byte byte1 = new Byte((byte)88);
      assertNotNull(byte1);
      assertEquals((byte)88, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray2[0] = byte1;
      Byte byte2 = new Byte((byte) (-1));
      assertNotNull(byte2);
      assertEquals((byte) (-1), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray2[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertEquals((byte)88, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray2[2] = byte3;
      Byte byte4 = new Byte((byte)115);
      assertNotNull(byte4);
      assertEquals((byte)115, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      
      byteArray2[3] = byte4;
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)88, (byte) (-1), (byte)88, (byte)115}, byteArray3);
      assertEquals(4, byteArray3.length);
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Short short0 = new Short((short) (-1073));
      assertNotNull(short0);
      assertEquals((short) (-1073), (short)short0);
      
      Short short1 = new Short((short)2792);
      assertNotNull(short1);
      assertEquals((short)2792, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-1120));
      assertNotNull(short2);
      assertEquals((short) (-1120), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      long[] longArray0 = new long[7];
      longArray0[0] = 386L;
      longArray0[1] = (long) (short) (-1120);
      longArray0[2] = (long) (short) (-1073);
      longArray0[3] = (long) (short) (-1073);
      longArray0[4] = (long) 1494;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(2L);
      assertNotNull(intStream0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-1073);
      intArray0[1] = (int) (short) (-1073);
      intArray0[2] = (int) (short) (-1120);
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {(-1073), (-1120), (-1073)}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)92, 48);
      assertNotSame(byteArray0, byteArray1);
      assertEquals((-1), int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)92;
      shortArray0[1] = (short) (byte)92;
      shortArray0[2] = (short) (byte)92;
      shortArray0[3] = (short) (byte)92;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)92, (short)92, (short)92, (short)92}, shortArray0);
      assertArrayEquals(new short[] {(short)92, (short)92, (short)92, (short)92}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)92, (short)92, (short)92, (short)92}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)92, (short)92, (short)92, (short)92}, shortArray0);
      assertArrayEquals(new short[] {(short)92, (short)92, (short)92, (short)92, (short)92, (short)92, (short)92, (short)92}, shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray2.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)92;
      floatArray0[1] = (float) (short)92;
      floatArray0[2] = (float) (byte)92;
      floatArray0[3] = (float) 1351;
      floatArray0[4] = (-4261.7F);
      floatArray0[5] = (float) (short)92;
      floatArray0[6] = (float) 1351;
      floatArray0[7] = (float) (short)92;
      ArrayUtils.shift(floatArray0, 2, (-1), 2);
      assertArrayEquals(new float[] {92.0F, 92.0F, 92.0F, 1351.0F, (-4261.7F), 92.0F, 1351.0F, 92.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)92;
      intArray0[1] = 48;
      intArray0[2] = (int) (short)92;
      intArray0[3] = (int) (short)92;
      intArray0[4] = 2;
      MockRandom mockRandom0 = new MockRandom(4928L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {48, 92, 92, 2, 92}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short)0;
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)59;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short)59;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)59;
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, Float.NaN, 3);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[2], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Character character0 = Character.valueOf('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object0);
      assertEquals('*', object0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-641), object0);
      assertNotNull(object1);
      assertEquals('*', object1);
      assertEquals(6, objectArray0.length);
      
      objectArray0[0] = object1;
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      objectArray0[1] = null;
      Object object3 = ArrayUtils.get(objectArray0, (-641));
      assertNull(object3);
      assertEquals(6, objectArray0.length);
      
      objectArray0[3] = null;
      Object object4 = new Object();
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = ArrayUtils.get(objectArray0, (-641));
      assertNull(object5);
      assertEquals(6, objectArray0.length);
      
      objectArray0[5] = null;
      ArrayUtils.reverse(objectArray0, (-641), (-641));
      assertEquals(6, objectArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-641);
      doubleArray0[1] = (double) '*';
      doubleArray0[2] = (double) '*';
      doubleArray0[3] = (double) '*';
      doubleArray0[4] = (double) (-641);
      doubleArray0[5] = 0.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-641.0), 42.0, 42.0, 42.0, (-641.0), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-641));
      assertEquals(1, int0);
      assertEquals(6, objectArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '*';
      intArray0[1] = (-96);
      intArray0[2] = (-641);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = (int) '*';
      intArray0[6] = (-641);
      intArray0[7] = (int) '*';
      intArray0[8] = (int) '*';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 56, 68);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {42, (-96), (-641), 1, 1, 42, (-641), 42, 42}, intArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)444;
      shortArray0[1] = (short)54;
      shortArray0[2] = (short)1136;
      shortArray0[3] = (short)2773;
      ArrayUtils.shift(shortArray0, (int) (short)444);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)444, (short)54, (short)1136, (short)2773}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)75;
      byteArray0[8] = (byte)53;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)68, (byte)68, (byte) (-11), (byte) (-118), (byte)1, (byte)75, (byte)0, (byte)53}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)68, (byte)68, (byte) (-11), (byte) (-118), (byte)75, (byte)0, (byte)53}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)112);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      double[] doubleArray0 = ArrayUtils.insert(2145732047, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)101;
      shortArray0[2] = (short)1229;
      shortArray0[3] = (short)6;
      shortArray0[4] = (short) (-1356);
      shortArray0[5] = (short)1322;
      shortArray0[6] = (short)1202;
      shortArray0[7] = (short)16;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)1322, (int) (short)16);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)101, (short)1229, (short)6, (short) (-1356), (short)1322, (short)1202, (short)16}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-2147045295));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, Integer.MAX_VALUE);
      assertNull(intArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      ArrayUtils.shift(charArray0, 2145521597, 2647, (-583));
      assertArrayEquals(new char[] {'E', 'E'}, charArray0);
      assertEquals(2, charArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'E';
      doubleArray0[1] = (-240.55004);
      doubleArray0[2] = (double) 'E';
      doubleArray0[3] = (double) (short)16;
      doubleArray0[4] = (double) (short)1322;
      doubleArray0[5] = (double) (short)101;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1322.0);
      assertEquals(4, int0);
      assertArrayEquals(new double[] {69.0, (-240.55004), 69.0, 16.0, 1322.0, 101.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_INT_ARRAY, 2407);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1362.0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_CHAR_ARRAY, ']', (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_LONG_ARRAY, (-1471));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.swap((Object[]) floatArray0, (-82), (-82), 432);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (float)floatArray0[0];
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 432;
      doubleArray1[3] = (double) (-82);
      doubleArray1[4] = (double) 432;
      doubleArray1[5] = (double) (-82);
      doubleArray1[6] = (double) 432;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray1, (-82), 937.459);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -82, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      objectArray0[0] = object0;
      long[] longArray0 = new long[9];
      longArray0[0] = 597L;
      longArray0[1] = (-1793L);
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = (-505L);
      longArray0[5] = 2986L;
      longArray0[6] = 1L;
      longArray0[7] = 0L;
      longArray0[8] = 92L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2986L, 53);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {597L, (-1793L), 1L, 0L, (-505L), 2986L, 1L, 0L, 92L}, longArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(9, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)11;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-120), (byte)100, (byte) (-123), (byte)124, (byte) (-128), (byte)40, (byte)11}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      int int0 = ArrayUtils.indexOf(longArray1, 0L);
      assertNotSame(longArray1, longArray0);
      assertEquals((-1), int0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '/';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '/'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(858.936809482661);
      assertNotNull(double0);
      assertEquals(858.936809482661, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Double double1 = new Double(858.936809482661);
      assertNotNull(double1);
      assertEquals(858.936809482661, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[3] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(858.936809482661, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[4] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {858.936809482661, 858.936809482661, 858.936809482661, 858.936809482661, 858.936809482661, 858.936809482661, 858.936809482661, 858.936809482661, 858.936809482661}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-2904), (-2904));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) doubleArray0[1];
      Object object0 = ArrayUtils.get((Object[]) doubleArray0, (-2904), (Object) double0);
      assertNotNull(object0);
      assertEquals(858.936809482661, object0);
      assertEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertTrue(object0.equals((Object)double1));
      assertTrue(object0.equals((Object)double2));
      assertEquals(9, doubleArray0.length);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) double0;
      Float float0 = new Float((float) (-2904));
      assertNotNull(float0);
      assertEquals((-2904.0F), (float)float0, 0.01F);
      
      Object object1 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object1);
      assertEquals((-2904.0F), object1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object1);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, objectArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1388;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)9;
      shortArray0[3] = (short) (-3937);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1711), (int) (short)1388);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1388, (short)0, (short)9, (short) (-3937)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)1388;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (short) (-3937);
      floatArray0[4] = (-1499.0F);
      floatArray0[5] = (float) (short)1388;
      floatArray0[6] = (float) (short)1388;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1388.0F, 0.0F, 1.0F, (-3937.0F), (-1499.0F), 1388.0F, 1388.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.swap(booleanArray0, (-1472), (-1472), (-1472));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)17, (int) (byte)17);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte byte0 = (byte)0;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-112);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)66;
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 1026, 550);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1026;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte) (-112);
      doubleArray0[3] = (double) 550;
      doubleArray0[4] = (double) 1026;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (-2694.7061);
      doubleArray0[7] = (double) (short)66;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1026.0, 0.0, (-112.0), 550.0, 1026.0, 0.0, (-2694.7061), 66.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1026;
      floatArray0[1] = (float) 550;
      floatArray0[2] = (float) 1026;
      floatArray0[3] = (float) (short)66;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (byte) (-112);
      floatArray0[6] = (float) (short) (-112);
      floatArray0[7] = (float) (short) (-112);
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, floatArray0);
      assertNull(floatArray1);
      assertArrayEquals(new float[] {1026.0F, 550.0F, 1026.0F, 66.0F, 0.0F, (-112.0F), (-112.0F), (-112.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = Integer.valueOf(1026);
      assertNotNull(integer0);
      assertEquals(1026, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)66);
      assertNotNull(integer1);
      assertEquals(66, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2147045295));
      assertNotNull(integer2);
      assertEquals((-2147045295), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      String string0 = "on";
      try { 
        Integer.valueOf("on");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"on\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_INT_ARRAY, (-101), 1101);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), 2);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-101);
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-101.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, (-1098));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Long long0 = Long.valueOf(92L);
      assertNotNull(long0);
      assertEquals(92L, (long)long0);
      
      Long long1 = new Long(208L);
      assertNotNull(long1);
      assertEquals(208L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(208L);
      assertNotNull(long2);
      assertEquals(208L, (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      Long long3 = new Long(1941L);
      assertNotNull(long3);
      assertEquals(1941L, (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      
      Long long4 = new Long(2379L);
      assertNotNull(long4);
      assertEquals(2379L, (long)long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      
      Long long5 = new Long((-1409L));
      assertNotNull(long5);
      assertEquals((-1409L), (long)long5);
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      
      Long[] longArray0 = new Long[6];
      longArray0[1] = long2;
      Long long6 = new Long((long) longArray0[1]);
      assertNotNull(long6);
      assertEquals(208L, (long)long6);
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long4));
      assertTrue(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertTrue(long6.equals((Object)long2));
      assertEquals(6, longArray0.length);
      
      longArray0[3] = long3;
      longArray0[4] = long4;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 100);
      assertNull(object0);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) (byte)74, (Object) (byte)74);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      Object object0 = ArrayUtils.get((Object[]) longArray0, (int) 0);
      assertNull(object0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = null;
      objectArray0[6] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[3]);
      assertEquals(0, int0);
      assertEquals(7, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)50;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)2189;
      shortArray0[8] = (short) (byte)112;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2, (short)50, (short)0, (short)0, (short)0, (short)2189, (short)112}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)50, (short)2189, (short)112}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (short)0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2, (short)50, (short)0, (short)0, (short)0, (short)2189, (short)112}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray2.length);
      
      MutableInt mutableInt0 = new MutableInt((-241));
      assertNotNull(mutableInt0);
      assertEquals((-241.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-241", mutableInt0.toString());
      assertEquals((-241), (int)mutableInt0.getValue());
      assertEquals((byte)15, mutableInt0.byteValue());
      assertEquals((-241), (int)mutableInt0.toInteger());
      assertEquals((-241L), mutableInt0.longValue());
      assertEquals((-241.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-241), mutableInt0.intValue());
      assertEquals((short) (-241), mutableInt0.shortValue());
      
      Integer integer0 = mutableInt0.getValue();
      assertNotNull(integer0);
      assertEquals((-241), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-241.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-241", mutableInt0.toString());
      assertEquals((-241), (int)mutableInt0.getValue());
      assertEquals((byte)15, mutableInt0.byteValue());
      assertEquals((-241), (int)mutableInt0.toInteger());
      assertEquals((-241L), mutableInt0.longValue());
      assertEquals((-241.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-241), mutableInt0.intValue());
      assertEquals((short) (-241), mutableInt0.shortValue());
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integer0, objectArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_LONG_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-3.491));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_CHAR_ARRAY, '?', 1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_LONG_ARRAY, 2544);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.swap(booleanArray0, (-1472), (-1472), (-1472));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-1472), 843);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)101;
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      char[] charArray0 = new char[1];
      ArrayUtils.swap(charArray0, 121, (-1241), Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[28];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[7] = (int) (short)101;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (int) (short)101;
      intArray0[4] = 121;
      intArray0[6] = (int) (short)101;
      intArray0[7] = Integer.MAX_VALUE;
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-112);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)112;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)112;
      shortArray0[5] = (short) (byte)0;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-112), (byte) (-112), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-64);
      doubleArray0[1] = 502.8139347399087;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (byte) (-112);
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, 2, (double) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-64.0), 502.8139347399087, 0.0, 0.0, (-112.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayUtils.reverse(byteArray0, (-2550), (-270));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-112), (byte) (-112), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)112, (short)0, (short)0, (short)0, (short)112, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) "");
      assertNotNull(object0);
      assertEquals("", object0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (byte) (-112);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (short)0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-112), 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, (-112), 0, 0}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 82;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {82}, intArray0);
      assertEquals(1, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      Object[] objectArray0 = new Object[2];
      IntStream intStream0 = mockRandom0.ints(82, 111);
      assertNotNull(intStream0);
      
      objectArray0[0] = (Object) 82;
      objectArray0[1] = (Object) mockRandom0;
      ArrayUtils.swap(objectArray0, (-484), (-2161), 111);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      MutableInt mutableInt0 = new MutableInt(2);
      assertNotNull(mutableInt0);
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2, (int)mutableInt0.getValue());
      
      mutableInt0.subtract(2);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      
      Integer integer0 = mutableInt0.toInteger();
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      
      Integer[] integerArray0 = new Integer[16];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      mutableInt0.add((Number) integer0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      
      mutableInt0.add((-4544));
      assertEquals((-4544.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-4544), (int)mutableInt0.toInteger());
      assertEquals((-4544L), mutableInt0.longValue());
      assertEquals((-4544), (int)mutableInt0.getValue());
      assertEquals((-4544), mutableInt0.intValue());
      assertEquals((-4544.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-4544", mutableInt0.toString());
      assertEquals((short) (-4544), mutableInt0.shortValue());
      assertEquals((byte)64, mutableInt0.byteValue());
      
      integerArray0[2] = integer0;
      int int0 = mutableInt0.decrementAndGet();
      assertEquals((-4545), int0);
      assertEquals((-4545.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-4545), (int)mutableInt0.getValue());
      assertEquals((-4545), (int)mutableInt0.toInteger());
      assertEquals((-4545L), mutableInt0.longValue());
      assertEquals((byte)63, mutableInt0.byteValue());
      assertEquals("-4545", mutableInt0.toString());
      assertEquals((-4545.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-4545), mutableInt0.intValue());
      assertEquals((short) (-4545), mutableInt0.shortValue());
      
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      ArrayUtils.shuffle((Object[]) integerArray0);
      assertEquals(16, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[2] = null;
      int[] intArray0 = new int[6];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      ArrayUtils.shift(objectArray0, 1169);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = ", LNength: ";
      stringArray0[2] = ", LNength: ";
      stringArray0[4] = stringArray0[3];
      stringArray0[5] = "org.apache.commons.lang3.builder.HashCodeBuilder";
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, stringArray0[4]);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(7, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (Object) null, 1423);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertNotSame(bitSet1, bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      
      char[] charArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, 'S');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-775);
      intArray0[1] = 1763;
      intArray0[2] = (-1);
      intArray0[3] = (-3135);
      intArray0[3] = 3;
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)7;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1763, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-57), 2407);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)87, 48);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2407;
      longArray0[1] = (long) (byte)87;
      longArray0[2] = (long) 2407;
      longArray0[3] = (long) (byte)87;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {2407L, 87L, 2407L, 87L}, longArray0);
      assertEquals(4, longArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2407;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-66);
      floatArray0[3] = (float) 87L;
      floatArray0[4] = (float) 156;
      floatArray0[5] = (float) (byte)87;
      floatArray0[6] = (float) 2407;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {2407.0F, (-1.0F), (-66.0F), 87.0F, 156.0F, 87.0F, 2407.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)87;
      shortArray0[1] = (short) (byte)47;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short) (byte)47;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)87, (short)47, (short)48, (short)47}, shortArray0);
      assertArrayEquals(new short[] {(short)87, (short)47, (short)48, (short)47}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Character character0 = new Character('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      float[] floatArray0 = new float[2];
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), (int) (short)1196);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1196);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Class<Object[]> class0 = Object[].class;
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray0, class0);
      assertSame(longArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.shift((Object[]) longArray0, 59, 85, (-125));
      assertSame(longArray0, objectArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-128);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)1);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-99), (byte)103, (byte)48, (byte) (-128)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      boolean boolean1 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'j';
      charArray0[2] = 'D';
      charArray0[3] = 'k';
      charArray0[4] = 'C';
      charArray0[5] = 'v';
      charArray0[6] = 'W';
      charArray0[7] = 'z';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'q', 'j', 'D', 'k', 'C', 'v', 'W', 'z'}, charArray1);
      assertArrayEquals(new char[] {'q', 'j', 'D', 'k', 'C', 'v', 'W', 'z'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3261;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)258;
      shortArray0[3] = (short)2;
      Integer integer0 = new Integer((short)258);
      assertNotNull(integer0);
      assertEquals(258, (int)integer0);
      
      Long long0 = new Long(1322L);
      assertNotNull(long0);
      assertEquals(1322L, (long)long0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, long0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'j';
      charArray0[4] = 'k';
      charArray0[5] = 'v';
      charArray0[6] = 'W';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'k', 'v', 'v', 'j', 'k', 'v', 'W'}, charArray1);
      assertArrayEquals(new char[] {'k', 'v', 'v', 'j', 'k', 'v', 'W'}, charArray0);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Character character0 = Character.valueOf('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object0);
      assertEquals('*', object0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-641), object0);
      assertNotNull(object1);
      assertEquals('*', object1);
      assertEquals(6, objectArray0.length);
      
      objectArray0[0] = object1;
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      objectArray0[1] = null;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object object3 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object3);
      assertEquals(true, object3);
      
      objectArray0[2] = object3;
      Object object4 = ArrayUtils.get(objectArray0, (-641));
      assertNull(object4);
      assertEquals(6, objectArray0.length);
      
      objectArray0[3] = null;
      Object object5 = new Object();
      assertNotNull(object5);
      
      objectArray0[4] = object5;
      Object object6 = ArrayUtils.get(objectArray0, (-641));
      assertNull(object6);
      assertEquals(6, objectArray0.length);
      
      objectArray0[5] = null;
      ArrayUtils.reverse(objectArray0, (-641), 91);
      assertEquals(6, objectArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-641);
      doubleArray0[1] = (double) '*';
      doubleArray0[2] = (double) '*';
      doubleArray0[3] = (double) '*';
      doubleArray0[4] = (double) (-641);
      doubleArray0[5] = 0.0;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-641.0), 42.0, 42.0, 42.0, (-641.0), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-641));
      assertEquals(0, int0);
      assertEquals(6, objectArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1623;
      shortArray0[1] = (short) (-220);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1623);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1623, (short) (-220)}, shortArray0);
      assertArrayEquals(new short[] {(short)1623, (short) (-220), (short)1623}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      boolean boolean2 = ArrayUtils.contains(charArray0, '*');
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {'*'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2704.9598826786864);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(7, booleanArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)68;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)68);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)68}, shortArray0);
      assertArrayEquals(new short[] {(short)68, (short)68}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)68;
      floatArray0[1] = (float) (short)68;
      floatArray0[2] = (-1967.6F);
      ArrayUtils.swap(floatArray0, (int) (short)68, (int) (short)68);
      assertArrayEquals(new float[] {68.0F, 68.0F, (-1967.6F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), 1146, 1146);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 1, 1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Float float0 = new Float((-3461.426F));
      assertNotNull(float0);
      assertEquals((-3461.426F), (float)float0, 0.01F);
      
      Float float1 = new Float((float) 69);
      assertNotNull(float1);
      assertEquals(69.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(2234.0F);
      assertNotNull(float2);
      assertEquals(2234.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float((-1.0));
      assertNotNull(float3);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      Float float4 = new Float(1840.0F);
      assertNotNull(float4);
      assertEquals(1840.0F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      
      Object object0 = ArrayUtils.get((Object[]) arrayUtils0.EMPTY_FIELD_ARRAY, (-1158));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      Short short0 = new Short((short) (-1852));
      assertNotNull(short0);
      assertEquals((short) (-1852), (short)short0);
      
      int int0 = ArrayUtils.indexOf((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (Object) short0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_SHORT_ARRAY, (short)5457);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, 525, (byte)73);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 525, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-657.7369F));
      assertNotNull(float0);
      assertEquals((-657.7369F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      floatArray0[1] = floatArray0[0];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.reverse(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)868;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)868, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)868, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-998), 1146, 1146);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 489, 76);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      Float float0 = new Float((float) 32);
      assertNotNull(float0);
      assertEquals(32.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) 69);
      assertNotNull(float1);
      assertEquals(69.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(4154.7974F);
      assertNotNull(float2);
      assertEquals(4154.7974F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float((double) 32);
      assertNotNull(float3);
      assertEquals(32.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      Float float4 = new Float((float) (-998));
      assertNotNull(float4);
      assertEquals((-998.0F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (-1.0F));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, 85.0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 468.19;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-5278.0);
      doubleArray0[4] = (-1.0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true}, booleanArray0));
      assertEquals("{0, 1, 2, 3, 4, 6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertEquals(7, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 88, 3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      assertEquals(0, booleanArray2.length);
      assertEquals(4, booleanArray1.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((short[]) null, (short) (-531));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object0);
      assertEquals(true, object0);
      
      objectArray1[0] = object0;
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      int int0 = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)0, (-1));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) short0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)47, (byte)2, (byte)74, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[6];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (-1629);
      shortArray0[2] = (short) (byte)74;
      shortArray0[3] = (short) (byte)74;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (byte)74;
      shortArray0[7] = (short) (byte)47;
      int[] intArray0 = new int[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1629), (short)74, (short)74, (short)0, (short)0, (short)74, (short)47}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-1629), (short)74, (short)74, (short)0, (short)0, (short)74, (short)47}, shortArray0);
      assertEquals(0, intArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-1125.4288831352058));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)0, (int) (short)0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 392.0632F;
      floatArray0[1] = (-2469.3F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-2469.3F);
      floatArray0[4] = (-179.3689F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-952.8F);
      floatArray0[8] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {392.0632F, (-2469.3F), (-1.0F), (-2469.3F), (-179.3689F), (-1.0F), (-1.0F), (-952.8F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)98;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)32, (int) (byte)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)98, (byte)0}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)98, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte) (-1), (byte)98, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-2469.3F));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[0];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) doubleArray2, (Object[]) doubleArray2);
      assertNotSame(doubleArray2, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {392.0632F, (-2469.3F), (-1.0F), (-2469.3F), (-179.3689F), (-1.0F), (-1.0F), (-952.8F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray2.length);
      assertEquals(18, floatArray1.length);
      
      Byte[] byteArray2 = new Byte[2];
      byteArray2[0] = (Byte) (byte) (-1);
      byteArray2[1] = (Byte) (byte) (-1);
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3236.0F;
      floatArray0[1] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 4);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {3236.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-104);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-39), (-1148));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte) (-16), (byte) (-16), (byte) (-104), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 7);
      Class<Double> class0 = Double.class;
      classArray0[0] = class0;
      Class<Double> class1 = Double.class;
      classArray0[1] = class1;
      Class<Double> class2 = Double.class;
      classArray0[2] = class2;
      Class<Double> class3 = Double.class;
      classArray0[4] = class3;
      Class<Double> class4 = Double.class;
      classArray0[5] = class4;
      classArray0[6] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte) (-104);
      intArray0[2] = (int) (byte) (-104);
      intArray0[3] = (int) (byte) (-16);
      int[] intArray1 = ArrayUtils.add(intArray0, 4);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-104), (-104), (-16), 4}, intArray1);
      assertArrayEquals(new int[] {0, (-104), (-104), (-16)}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, (int) (byte)69, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)69);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_BOOLEAN_ARRAY, (boolean[]) null);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3236.0F;
      floatArray0[1] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 4);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {3236.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-104);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-39), (-1148));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte) (-16), (byte) (-16), (byte) (-104), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 7);
      Class<Double> class0 = Double.class;
      classArray0[0] = class0;
      Class<Double> class1 = Double.class;
      classArray0[1] = class1;
      Class<Double> class2 = Double.class;
      classArray0[2] = class2;
      Class<Double> class3 = Double.class;
      classArray0[3] = class3;
      Class<Double> class4 = Double.class;
      classArray0[4] = class4;
      Class<Double> class5 = Double.class;
      classArray0[5] = class5;
      classArray0[6] = class5;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte) (-104);
      intArray0[2] = (int) (byte) (-104);
      intArray0[3] = (int) (byte) (-16);
      int[] intArray1 = ArrayUtils.add(intArray0, 4);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-104), (-104), (-16), 4}, intArray1);
      assertArrayEquals(new int[] {0, (-104), (-104), (-16)}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1362.0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_CHAR_ARRAY, ']', (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_LONG_ARRAY, (-1471));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      ArrayUtils.shift(byteArray0, 980, 13, 980);
      assertArrayEquals(new byte[] {(byte)48, (byte)95, (byte) (-82), (byte)0, (byte) (-68), (byte)0, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = (Object) (byte)0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1]);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '/';
      charArray0[1] = 'd';
      charArray0[2] = '[';
      charArray0[3] = 'o';
      charArray0[4] = 'w';
      charArray0[5] = '[';
      charArray0[6] = 'd';
      charArray0[7] = '`';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'d', '[', 'o', 'w', '[', 'd', '`', '/'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Long long0 = new Long(1040L);
      assertNotNull(long0);
      assertEquals(1040L, (long)long0);
      
      Long long1 = new Long((-1247L));
      assertNotNull(long1);
      assertEquals((-1247L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(1040L);
      assertNotNull(long2);
      assertEquals(1040L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      
      Long long3 = new Long(74L);
      assertNotNull(long3);
      assertEquals(74L, (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      
      Long long4 = new Long(1090L);
      assertNotNull(long4);
      assertEquals(1090L, (long)long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      
      Long long5 = new Long((-1247L));
      assertNotNull(long5);
      assertEquals((-1247L), (long)long5);
      assertFalse(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      
      Long[] longArray0 = new Long[9];
      longArray0[0] = long2;
      longArray0[1] = long4;
      longArray0[2] = long2;
      Long long6 = new Long(2147483647L);
      assertNotNull(long6);
      assertEquals(2147483647L, (long)long6);
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long3));
      
      longArray0[3] = long6;
      longArray0[4] = long5;
      longArray0[5] = long4;
      longArray0[6] = long0;
      longArray0[7] = long5;
      longArray0[8] = long2;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      
      Character[] characterArray0 = ArrayUtils.clone((Character[]) null);
      assertNull(characterArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 74L;
      doubleArray0[1] = (double) (long)longArray0[2];
      doubleArray0[2] = (double) (long)longArray0[7];
      doubleArray0[3] = (double) (long)longArray0[6];
      doubleArray0[4] = (double) (long)longArray0[6];
      doubleArray0[5] = (double) (-1247L);
      doubleArray0[6] = (double) 2147483647L;
      ArrayUtils.swap(doubleArray0, 2199, 2199, 0);
      assertArrayEquals(new double[] {74.0, 1040.0, (-1247.0), 1040.0, 1040.0, (-1247.0), 2.147483647E9}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(3.0);
      assertNotNull(double0);
      assertEquals(3.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-859.9));
      assertNotNull(double1);
      assertEquals((-859.9), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(3.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      assertNotNull(double3);
      assertEquals(3.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[0]);
      assertNotNull(double4);
      assertEquals(3.0, (double)double4, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-2434.43669781039));
      assertNotNull(double5);
      assertEquals((-2434.43669781039), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[4]);
      assertNotNull(double6);
      assertEquals(3.0, (double)double6, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[6]);
      assertNotNull(double7);
      assertEquals(3.0, (double)double7, 0.01);
      assertEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertEquals((double)double7, (double)double4, 0.01);
      assertEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double3, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(1.0);
      assertNotNull(double8);
      assertEquals(1.0, (double)double8, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      
      doubleArray0[8] = double8;
      Double[] doubleArray1 = ArrayUtils.clone((Double[]) null);
      assertNull(doubleArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)85;
      ArrayUtils.shift(byteArray0, (int) (byte)53);
      assertArrayEquals(new byte[] {(byte)53, (byte)45, (byte)85, (byte) (-89), (byte)85, (byte) (-1)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = 'L';
      charArray0[2] = 'q';
      charArray0[3] = '0';
      charArray0[4] = 'E';
      charArray0[5] = '@';
      charArray0[6] = '/';
      charArray0[7] = 'X';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'L', 1556);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'(', 'L', 'q', '0', 'E', '@', '/', 'X'}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)543;
      shortArray0[1] = (short)543;
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)543, (short)543, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)543, (short)543, (short)0, (short)543, (short)543, (short)0}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      ArrayUtils.shift((int[]) null, (int) (short)543);
      int int0 = ArrayUtils.indexOf(shortArray1, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, int0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)543, (short)543, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)543, (short)543, (short)0, (short)543, (short)543, (short)0}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)543;
      objectArray0[5] = (Object) (short)543;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short)543;
      objectArray0[5] = (Object) (short)543;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNotNull(object0);
      assertEquals((short)0, object0);
      assertEquals(8, objectArray0.length);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) (short)543;
      Double double0 = new Double((short)543);
      assertNotNull(double0);
      assertEquals(543.0, (double)double0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) double0);
      assertFalse(boolean0);
      assertEquals(8, objectArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) (short)543;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2L, 543L}, longArray0);
      assertArrayEquals(new long[] {2L, 543L, 2L, 543L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      charArray0[1] = 'F';
      charArray0[2] = 'P';
      charArray0[3] = '\'';
      charArray0[4] = 'F';
      charArray0[5] = 'A';
      charArray0[6] = 'h';
      charArray0[7] = 'G';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'G', 'h', 'A', 'F', '\'', 'P', 'F', '{'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('!');
      assertNotNull(character0);
      assertEquals('!', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertNotNull(character1);
      assertEquals('!', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'J');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'!', '!'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-4458.930769));
      assertNotNull(double0);
      assertEquals((-4458.930769), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(583.04736866979);
      assertNotNull(double1);
      assertEquals(583.04736866979, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) character0);
      assertNotNull(double2);
      assertEquals(33.0, (double)double2, 0.01);
      assertTrue(character0.equals((Object)character1));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'!', '!'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (-1), (-1), 3438);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      ArrayUtils.swap((char[]) null, 1136, 2256, 1136);
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)27;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)27, (-3373));
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)1, (byte)122, (byte)27}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-112);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)112;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)112;
      shortArray0[5] = (short) (byte)0;
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte)0, (-5), 100.0);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(byteArray0, (int) (short)0, (-2341));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-112), (byte) (-112)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-112), (int) (short)0);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-112), (byte) (-112)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ArrayUtils.shift((Object[]) null, 444, (-5), 2218);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      String string0 = ArrayUtils.toString((Object) "+vPWC)j@1 adj6S", "Cnnot4to re ");
      assertNotNull(string0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) "+vPWC)j@1 adj6S", 5);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3261;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)258;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-927);
      shortArray0[5] = (short) (-927);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3261, (short)2, (short)258, (short)2, (short) (-927), (short) (-927)}, shortArray0);
      assertArrayEquals(new short[] {(short)3261, (short)2, (short)258, (short)2, (short) (-927), (short) (-927)}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)2;
      floatArray0[3] = (float) (short)2;
      floatArray0[4] = (float) (short)258;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)2;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(12, floatArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-64);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-64), (byte)57}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2.0F;
      doubleArray0[1] = (double) (short) (-927);
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) 2.0F;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) (-927), (int) (short)258, 0.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2.0, (-927.0), 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.reverse(byteArray0, (int) (short)0, (int) (byte) (-71));
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-64), (byte)57}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Short[] shortArray2 = ArrayUtils.removeAllOccurrences((Short[]) null, (Short) null);
      assertNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-501));
      assertNotNull(integer0);
      assertEquals((-501), (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 2;
      Integer integer1 = new Integer(2);
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[0] = integer1;
      Integer integer2 = new Integer((-501));
      assertNotNull(integer2);
      assertEquals((-501), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      MutableInt mutableInt0 = new MutableInt(int0);
      assertNotNull(mutableInt0);
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2, mutableInt0.intValue());
      
      Integer integer3 = mutableInt0.toInteger();
      assertNotNull(integer3);
      assertEquals(2, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2, mutableInt0.intValue());
      
      mutableInt0.subtract(int0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[2]);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(4, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 655.0;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, (-705.0699626));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 655.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[3] = true;
      booleanArray0[7] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false, false}, booleanArray0));
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 3}", bitSet0.toString());
      assertEquals(8, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 3, 3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-531);
      shortArray0[1] = (short) (-531);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-531);
      shortArray0[4] = (short) (-531);
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-531));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new short[] {(short) (-531), (short) (-531), (short) (-1), (short) (-531), (short) (-531)}, shortArray0);
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0, 1, 3, 4}", bitSet1.toString());
      assertEquals(4, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(5, bitSet1.length());
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = (-143L);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 2147483647L;
      longArray0[1] = 2147483647L;
      longArray0[2] = (-1254L);
      longArray0[3] = 610L;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)107;
      doubleArray0[1] = (double) 2147483647L;
      doubleArray0[2] = 2019.633230880103;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {107.0, 2.147483647E9, 2019.633230880103}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {107.0, 2.147483647E9, 2019.633230880103, 2.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      Short short0 = new Short((byte) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      Short short1 = new Short((byte) (-1));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((byte) (-1));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      Short short3 = new Short((short) (-2783));
      assertNotNull(short3);
      assertEquals((short) (-2783), (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      
      Short short4 = new Short((byte)107);
      assertNotNull(short4);
      assertEquals((short)107, (short)short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      
      Short short5 = new Short((byte)100);
      assertNotNull(short5);
      assertEquals((short)100, (short)short5);
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      
      Short[] shortArray0 = new Short[3];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-2783));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2783), (short) (-2783), (short) (-2783)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3261;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)258;
      shortArray0[3] = (short)2;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3261, (short)2, (short)258, (short)2, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)3261);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3261, (short)2, (short)258, (short)2, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)3261, (short)2, (short)258, (short)2, (short)0, (short)0}, shortArray2);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)124;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)11;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-120), (byte)100, (byte) (-123), (byte)124, (byte)0, (byte)124, (byte)11}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte)85;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-93);
      byteArray1[4] = (byte)124;
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte)100;
      byteArray1[7] = (byte)107;
      byteArray1[8] = (byte) (-1);
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)85, (byte) (-1), (byte) (-93), (byte)124, (byte) (-1), (byte)100, (byte)107, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-93);
      doubleArray0[1] = (double) (byte)100;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte)100;
      doubleArray0[6] = (double) (byte) (-93);
      doubleArray0[7] = (-222.77903569);
      doubleArray0[8] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) (byte) (-1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-93.0), 100.0, (-1.0), (-1.0), (-1.0), 100.0, (-93.0), (-222.77903569), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-93.0), 100.0, (-1.0), (-1.0), (-1.0), 100.0, (-93.0), (-222.77903569), (-1.0)}, doubleArray0, 0.01);
      assertEquals(10, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((byte)124);
      assertNotNull(short0);
      assertEquals((short)124, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)100);
      assertNotNull(short1);
      assertEquals((short)100, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((byte)107);
      assertNotNull(short2);
      assertEquals((short)107, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      shortArray0[2] = short2;
      Short short3 = new Short((byte)124);
      assertNotNull(short3);
      assertEquals((short)124, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      
      shortArray0[3] = short3;
      Short short4 = new Short((byte) (-115));
      assertNotNull(short4);
      assertEquals((short) (-115), (short)short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      
      shortArray0[4] = short4;
      Short short5 = new Short((byte) (-115));
      assertNotNull(short5);
      assertEquals((short) (-115), (short)short5);
      assertTrue(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      
      shortArray0[5] = short5;
      Short short6 = new Short((byte) (-1));
      assertNotNull(short6);
      assertEquals((short) (-1), (short)short6);
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short0));
      
      shortArray0[6] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)124, (short)100, (short)107, (short)124, (short) (-115), (short) (-115), (short) (-1)}, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("`IOHq[8XV|z]WD");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      
      booleanArray0[3] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, boolean1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(boolean1.equals((Object)boolean3));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[4] = '+';
      charArray0[7] = '+';
      int int0 = new Character('8');
      assertEquals('8', int0);
      
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte)99);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, 135.6083);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(arrayUtils0.EMPTY_INT_ARRAY, (int) (byte)11, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Byte byte0 = new Byte((byte) (-47));
      assertNotNull(byte0);
      assertEquals((byte) (-47), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-47));
      assertNotNull(byte1);
      assertEquals((byte) (-47), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = ArrayUtils.add(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, 0, byte1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(1, byteArray1.length);
      
      int int2 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, 135.6083, (int) (byte)11, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      boolean[] booleanArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 842.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-914));
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 842.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-2397), (byte) (-56));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2397, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)444;
      shortArray0[2] = (short)1136;
      shortArray0[3] = (short)2773;
      shortArray0[4] = (short)2773;
      shortArray0[5] = (short)3898;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-2217));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)444, (short)0, (short)1136, (short)2773, (short)2773, (short)3898, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)444, (short)0, (short)1136, (short)2773, (short)2773, (short)3898, (short)0}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.shift((double[]) null, 1109, (int) (short)444, (-2562));
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 82;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {82}, intArray0);
      assertEquals(1, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1946);
      DoubleStream doubleStream0 = mockRandom0.doubles(1L);
      assertNotNull(doubleStream0);
      
      shortArray0[3] = (short) (-1551);
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short) (-1946), (short)0, (short) (-1551), (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      String string0 = ArrayUtils.toString((Object) mockRandom0);
      assertNotNull(string0);
      
      ArrayUtils.shift(doubleArray0, 3812, 33, (int) (short)0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-775);
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(597L);
      assertNotNull(long0);
      assertEquals(597L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-508L));
      assertNotNull(long1);
      assertEquals((-508L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = Long.getLong(",86^K*g8/*H", (long) longArray0[1]);
      assertNotNull(long2);
      assertEquals((-508L), (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(3, longArray0.length);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {597L, (-508L), (-508L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      char char0 = 'O';
      Character character0 = Character.valueOf('O');
      assertNotNull(character0);
      assertEquals('O', (char)character0);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertTrue(boolean0);
      assertEquals(5, characterArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = char0;
      charArray0[1] = 'O';
      boolean boolean1 = ArrayUtils.contains(charArray0, ')');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'O', 'O'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1326);
      shortArray0[1] = (short) (-4419);
      shortArray0[2] = (short) (-460);
      shortArray0[3] = (short) (-1946);
      shortArray0[4] = (short)115;
      shortArray0[5] = (short) (-1603);
      shortArray0[6] = (short) (-384);
      shortArray0[7] = (short)1287;
      shortArray0[8] = (short)447;
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new short[] {(short) (-1326), (short) (-4419), (short) (-460), (short) (-1946), (short)115, (short) (-1603), (short) (-384), (short)1287, (short)447}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 100);
      assertNull(object0);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = null;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 100;
      doubleArray0[1] = (double) 0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      MockRandom mockRandom0 = new MockRandom((-2203L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.shift(longArray0, Integer.MAX_VALUE, 727, (-314));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (-1252.706338);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.147483647E9, (-1252.706338)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, (-1252.706338)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(5, classArray1.length);
      assertEquals(5, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3236.0F;
      floatArray0[1] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 4);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {3236.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-104);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-39), (-1148));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte) (-16), (byte) (-16), (byte) (-104), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 7);
      Class<Double> class0 = Double.class;
      classArray0[0] = class0;
      Class<Double> class1 = Double.class;
      classArray0[1] = class1;
      Class<Double> class2 = Double.class;
      classArray0[2] = class2;
      Class<Double> class3 = Double.class;
      classArray0[3] = class3;
      Class<Double> class4 = Double.class;
      classArray0[4] = class4;
      Class<Double> class5 = Double.class;
      classArray0[5] = class5;
      Class<Double> class6 = Double.class;
      classArray0[6] = class6;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-121);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)66;
      shortArray0[3] = (short) (byte) (-121);
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte) (-121);
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short) (-121), (short)0, (short)66, (short) (-121), (short)0, (short) (-121)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'q';
      charArray0[2] = '|';
      charArray0[3] = 'O';
      charArray0[4] = 'C';
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)66;
      intArray0[1] = (int) (short) (-121);
      intArray0[2] = (int) '|';
      intArray0[3] = 1831;
      intArray0[4] = (int) (short)66;
      intArray0[5] = (int) 'q';
      intArray0[6] = (int) (short)0;
      intArray0[7] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1831, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Character character0 = Character.valueOf('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object0);
      assertEquals('*', object0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-641), object0);
      assertNotNull(object1);
      assertEquals('*', object1);
      assertEquals(6, objectArray0.length);
      
      objectArray0[0] = object1;
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      objectArray0[1] = null;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object object3 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object3);
      assertEquals(true, object3);
      
      objectArray0[2] = object3;
      Object object4 = ArrayUtils.get(objectArray0, (-641));
      assertNull(object4);
      assertEquals(6, objectArray0.length);
      
      objectArray0[3] = null;
      Object object5 = new Object();
      assertNotNull(object5);
      
      objectArray0[4] = object5;
      Object object6 = ArrayUtils.get(objectArray0, (-641));
      assertNull(object6);
      assertEquals(6, objectArray0.length);
      
      objectArray0[5] = null;
      ArrayUtils.reverse(objectArray0, (-641), 91);
      assertEquals(6, objectArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-641);
      doubleArray0[1] = (double) '*';
      doubleArray0[2] = (double) '*';
      doubleArray0[3] = (double) '*';
      doubleArray0[4] = (double) (-641);
      doubleArray0[5] = 0.0;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-641.0), 42.0, 42.0, 42.0, (-641.0), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-641));
      assertEquals(0, int0);
      assertEquals(6, objectArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 91;
      intArray0[2] = 91;
      intArray0[3] = 0;
      intArray0[4] = (-641);
      intArray0[5] = 91;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-641), (-641));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -641, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)95);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, 1090, (-3526));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1090, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 100);
      assertNull(object0);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = null;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 100;
      doubleArray0[1] = (double) 0;
      boolean boolean1 = ArrayUtils.isEquals(100.0, object0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, objectArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      MockRandom mockRandom0 = new MockRandom((-2190L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)36;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)95);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-96), (byte) (-1), (byte)95, (byte)48, (byte)36}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3078.50002143528;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-459.79199177);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1648.5481861);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {3078.50002143528, 0.0, (-459.79199177)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)84;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)67;
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("The Array must not be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)11, (int) (byte)0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-52), (byte)98, (byte)84, (byte)0, (byte)0, (byte)0, (byte)67}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3078.50002143528;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-459.79199177);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1648.5481861);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {3078.50002143528, 0.0, (-459.79199177)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)99;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)122, (byte) (-52), (byte)98, (byte)84, (byte)6, (byte) (-96), (byte)12, (byte)99}, byteArray1);
      assertArrayEquals(new byte[] {(byte)122, (byte) (-52), (byte)98, (byte)84, (byte)6, (byte) (-96), (byte)12, (byte)99}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("true");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)11, (int) (byte)12);
      assertNotSame(byteArray0, byteArray1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)122, (byte) (-52), (byte)98, (byte)84, (byte)6, (byte) (-96), (byte)12, (byte)99}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-143.0F);
      floatArray0[1] = 1312.7708F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 582.9F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-143.0F), 1312.7708F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {582.9F, (-143.0F), 1312.7708F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)6, (-1450));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), (int) (byte) (-108), (-12));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_SHORT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.insert(2478, arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Character character0 = new Character('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      Character[] characterArray0 = new Character[1];
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertTrue(boolean0);
      assertEquals(1, characterArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1196;
      ArrayUtils.shift(shortArray0, (int) (short)1196);
      assertArrayEquals(new short[] {(short)1196}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)1196;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1196.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1196.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-1), (-1));
      assertNull(charArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(3.0);
      assertNotNull(double0);
      assertEquals(3.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-859.9));
      assertNotNull(double1);
      assertEquals((-859.9), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(3.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      assertNotNull(double3);
      assertEquals(3.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[0]);
      assertNotNull(double4);
      assertEquals(3.0, (double)double4, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-2434.43669781039));
      assertNotNull(double5);
      assertEquals((-2434.43669781039), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[4]);
      assertNotNull(double6);
      assertEquals(3.0, (double)double6, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[6]);
      assertNotNull(double7);
      assertEquals(3.0, (double)double7, 0.01);
      assertEquals((double)double7, (double)double0, 0.01);
      assertEquals((double)double7, (double)double4, 0.01);
      assertEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertEquals((double)double7, (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(1.0);
      assertNotNull(double8);
      assertEquals(1.0, (double)double8, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      
      doubleArray0[8] = double8;
      Double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)85;
      ArrayUtils.shift(byteArray0, (int) (byte)53);
      assertArrayEquals(new byte[] {(byte)53, (byte)45, (byte)85, (byte) (-89), (byte)85, (byte) (-1)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = 'L';
      charArray0[2] = 'q';
      charArray0[3] = '0';
      charArray0[4] = 'E';
      charArray0[5] = '@';
      charArray0[6] = '/';
      charArray0[7] = 'X';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'L', 1556);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'(', 'L', 'q', '0', 'E', '@', '/', 'X'}, charArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'K', 3593);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 392.0632F;
      floatArray0[1] = (-2469.3F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-179.3689F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-952.8F);
      floatArray0[8] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {392.0632F, (-2469.3F), (-1.0F), 1.0F, (-179.3689F), (-1.0F), (-1.0F), (-952.8F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)32, (int) (byte)27);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-1), (byte)98, (byte)1}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)27, (byte) (-1), (byte)98, (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-1), (byte)98, (byte)1}, byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (byte)27;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte)98;
      doubleArray0[4] = (double) (byte)1;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {27.0, (-1.0), 98.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Character character0 = new Character('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      Character[] characterArray0 = new Character[3];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 517.4F;
      floatArray0[1] = 2164.7285F;
      int[] intArray0 = new int[5];
      intArray0[0] = 102;
      intArray0[1] = 37;
      intArray0[2] = 1079;
      intArray0[3] = 2;
      intArray0[4] = (-4057);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1079, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), (int) (byte)32);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-1), (byte)1, (byte)32, (byte)65, (byte)1, (byte) (-1)}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(7, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)45);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)45, (byte)32, (byte) (-1), (byte)1, (byte)32, (byte)65, (byte)1, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-1), (byte)1, (byte)32, (byte)65, (byte)1, (byte) (-1)}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)65;
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte)65;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 392.0632F;
      floatArray0[1] = (-2469.3F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-179.3689F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-952.8F);
      floatArray0[8] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {392.0632F, (-2469.3F), (-1.0F), 1.0F, (-179.3689F), (-1.0F), (-1.0F), (-952.8F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)32, (int) (byte)27);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-1), (byte)98, (byte)1}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)27, (byte) (-1), (byte)98, (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-1), (byte)98, (byte)1}, byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(4, byteArray0.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      Short[] shortArray1 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      ArrayUtils.swap((char[]) null, 1136, 2256, 1136);
      Short short0 = new Short((short)2792);
      assertNotNull(short0);
      assertEquals((short)2792, (short)short0);
      
      Short short1 = new Short((short) (-1120));
      assertNotNull(short1);
      assertEquals((short) (-1120), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1136;
      doubleArray0[1] = (double) (short) (-1120);
      doubleArray0[2] = (double) (short) (-1120);
      doubleArray0[3] = 85.0;
      doubleArray0[4] = (double) (short) (-1120);
      doubleArray0[5] = (double) 1136;
      doubleArray0[6] = 1716.7306895316;
      doubleArray0[4] = 85.0;
      doubleArray0[8] = (double) (short)2792;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (short)2792);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1136.0, (-1120.0), (-1120.0), 85.0, 85.0, 1136.0, 1716.7306895316, 0.0, 2792.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1136.0, (-1120.0), (-1120.0), 85.0, 85.0, 1136.0, 1716.7306895316, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-960L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      short[] shortArray0 = new short[3];
      long[] longArray0 = new long[3];
      longArray0[1] = 1840L;
      longArray0[2] = 1840L;
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 1840L);
      assertNull(floatArray0);
      
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      int int0 = 2407;
      String string1 = ArrayUtils.get(stringArray0, 2407);
      assertNull(string1);
      assertEquals(5, stringArray0.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[15];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[2] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[2] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3078.50002143528;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-459.79199177);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1648.5481861);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {3078.50002143528, 0.0, (-459.79199177)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)99;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)122, (byte) (-52), (byte)98, (byte)84, (byte)6, (byte) (-96), (byte)12, (byte)99}, byteArray1);
      assertArrayEquals(new byte[] {(byte)122, (byte) (-52), (byte)98, (byte)84, (byte)6, (byte) (-96), (byte)12, (byte)99}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("true");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("?{t>E(FMGx*uqP3x'Q");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean1);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("m$$0D&M>pWJZy");
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf(" in an array of ");
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("hmT)OwHBNs}");
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertNotNull(boolean6);
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      
      booleanArray0[6] = boolean6;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2773.0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf((float[]) null, 510.4594F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 962.22817515);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {962.22817515}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 369, 20, 1040);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 20;
      longArray0[1] = (long) 1040;
      longArray0[2] = (long) 20;
      longArray0[3] = (long) 1040;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-2506));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.swap((int[]) null, 1040, (int) (short) (-2506));
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertTrue(boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.reverse(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 1040L, 20L, 1040L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-657.7369F));
      assertNotNull(float0);
      assertEquals((-657.7369F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      floatArray0[1] = floatArray0[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-0.114F));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-657.7369F), (-657.7369F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      ArrayUtils.reverse(floatArray1);
      assertArrayEquals(new float[] {(-657.7369F), (-657.7369F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      ArrayUtils.swap((int[]) null, (int) (short)0, (int) (short)0);
      boolean boolean1 = ArrayUtils.isSorted(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertTrue(boolean1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 9L;
      longArray0[1] = (-376L);
      longArray0[2] = (-376L);
      longArray0[3] = 9L;
      longArray0[4] = (-1622L);
      longArray0[5] = 3137L;
      longArray0[6] = (-1L);
      longArray0[7] = 1L;
      longArray0[8] = (-1263L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1263L), 1L, (-1L), 3137L, (-1622L), 9L, (-376L), (-376L), 9L}, longArray0);
      assertEquals(9, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-376L);
      int int0 = (-1229);
      ArrayUtils.swap(doubleArray0, (-1229), (-774));
      assertArrayEquals(new double[] {(-376.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-376L);
      floatArray0[1] = (float) (-774);
      floatArray0[2] = 0.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-774), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -774, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      ArrayUtils.reverse(floatArray0, 0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      ArrayUtils.swap((double[]) null, 12, 12);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      float[] floatArray0 = new float[4];
      long[] longArray0 = new long[2];
      longArray0[0] = (-1263L);
      longArray0[1] = (-1263L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1263L), (-1263L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.swap(doubleArray0, (-1261), (-1261));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2264, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2264, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 9L;
      longArray0[1] = (-376L);
      longArray0[2] = 597L;
      longArray0[3] = 9L;
      longArray0[4] = (-1622L);
      longArray0[5] = 3137L;
      longArray0[6] = (-1L);
      longArray0[7] = 1L;
      longArray0[8] = (-1263L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1263L), 1L, (-1L), 3137L, (-1622L), 9L, 597L, (-376L), 9L}, longArray0);
      assertEquals(9, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-376L);
      int int0 = (-1229);
      ArrayUtils.swap(doubleArray0, (-1229), (-774));
      assertArrayEquals(new double[] {(-376.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 597L;
      floatArray0[1] = (float) (-774);
      floatArray0[2] = 0.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-774), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -774, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 82;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {82}, intArray0);
      assertEquals(1, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1946);
      shortArray0[3] = (short) (-1551);
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short) (-1946), (short)0, (short) (-1551), (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      String string0 = ArrayUtils.toString((Object) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Character character0 = Character.valueOf('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object0);
      assertEquals('*', object0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-641), object0);
      assertNotNull(object1);
      assertEquals('*', object1);
      assertEquals(6, objectArray0.length);
      
      objectArray0[0] = object1;
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      objectArray0[1] = null;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object object3 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object3);
      assertEquals(true, object3);
      
      objectArray0[2] = object3;
      Object object4 = ArrayUtils.get(objectArray0, (-641));
      assertNull(object4);
      assertEquals(6, objectArray0.length);
      
      objectArray0[3] = null;
      Object object5 = new Object();
      assertNotNull(object5);
      
      objectArray0[4] = object5;
      Object object6 = ArrayUtils.get(objectArray0, (-641));
      assertNull(object6);
      assertEquals(6, objectArray0.length);
      
      objectArray0[5] = null;
      ArrayUtils.reverse(objectArray0, (-641), (-641));
      assertEquals(6, objectArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-641);
      doubleArray0[1] = (double) '*';
      doubleArray0[2] = (double) '*';
      doubleArray0[3] = (double) '*';
      doubleArray0[4] = (double) (-641);
      doubleArray0[5] = 0.0;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-641.0), 42.0, 42.0, 42.0, (-641.0), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-641));
      assertEquals(1, int0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-112);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)112;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[0] = (short) (byte)112;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte) (-112);
      shortArray0[7] = (short) (byte) (-112);
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)112, (short)0, (short)0, (short)0, (short)0, (short)0, (short) (-112), (short) (-112)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = '*';
      charArray0[2] = 't';
      charArray0[3] = 'H';
      charArray0[4] = 'C';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '?');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'?', '*', 't', 'H', 'C'}, charArray0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, charArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertArrayEquals(new char[] {'?', '*', 't', 'H', 'C'}, charArray0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, charArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 't';
      intArray0[1] = (int) 't';
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) 'C';
      intArray0[4] = (int) '?';
      intArray0[5] = (int) '*';
      intArray0[6] = (int) (byte) (-112);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 116, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)47, (byte)2, (byte)74, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[6];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (-1629);
      shortArray0[2] = (short) (byte)74;
      shortArray0[3] = (short) (byte)74;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (byte)74;
      shortArray0[7] = (short) (byte)47;
      int[] intArray0 = new int[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1629), (short)74, (short)74, (short)0, (short)0, (short)74, (short)47}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-1629), (short)74, (short)74, (short)0, (short)0, (short)74, (short)47}, shortArray0);
      assertEquals(0, intArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-1125.4288831352058));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, (int) (short)0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte)47);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 161);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, false}, booleanArray0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      Object object0 = ArrayUtils.get((Object[]) longArray0, (int) 0);
      assertNull(object0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = null;
      objectArray0[5] = (Object) (byte)0;
      objectArray0[6] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[3]);
      assertEquals(0, int0);
      assertEquals(7, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)50;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)2189;
      shortArray0[8] = (short) (byte)112;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2, (short)50, (short)0, (short)0, (short)0, (short)2189, (short)112}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)50, (short)2189, (short)112}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean2 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-112);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)66;
      shortArray0[3] = (short) (byte) (-112);
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte) (-112);
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short) (-112), (short)0, (short)66, (short) (-112), (short)0, (short) (-112)}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3261;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)258;
      shortArray0[3] = (short)2;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.Long";
      char[] charArray0 = new char[8];
      charArray0[0] = 'c';
      charArray0[1] = '(';
      charArray0[2] = 'i';
      charArray0[3] = 'Y';
      charArray0[4] = ')';
      charArray0[5] = 'h';
      charArray0[6] = 'E';
      charArray0[7] = 'N';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, (int) (short)2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'c', '('}, charArray1);
      assertArrayEquals(new char[] {'c', '(', 'i', 'Y', ')', 'h', 'E', 'N'}, charArray0);
      assertEquals(2, charArray1.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = (-143L);
      int[] intArray0 = new int[4];
      intArray0[0] = (-270);
      intArray0[1] = (-2192);
      intArray0[2] = (-270);
      intArray0[3] = (-270);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-270));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-270), (-2192), (-270), (-270)}, intArray0);
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(4, intArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-2192));
      assertEquals(0, int0);
      assertArrayEquals(new long[] {1L, 0L, (-143L), 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      float[] floatArray0 = new float[18];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) (-2192);
      floatArray0[3] = (float) (-143L);
      Long[] longArray1 = new Long[1];
      longArray1[0] = (Long) 0L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray2);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      
      Character character0 = new Character('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertTrue(boolean0);
      assertEquals(0, characterArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 108);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'?', '?', '?', '?'}, charArray0);
      assertArrayEquals(new char[] {'?', '?', '?', '?'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1362.0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_LONG_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_LONG_ARRAY, (-1471));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_TYPE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-1);
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2037.918F;
      floatArray0[1] = (-791.0F);
      floatArray0[2] = 2037.918F;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)98;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)100, (byte) (-89), (byte)98, (byte)87}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = '`';
      charArray0[4] = '&';
      charArray0[6] = '0';
      charArray0[7] = 'r';
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'v';
      longArray0[1] = (long) 'v';
      longArray0[2] = (long) 'v';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {118L, 118L, 118L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      double[] doubleArray0 = new double[6];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) '0');
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {118L, 118L, 118L}, longArray0);
      assertArrayEquals(new long[] {118L, 118L, 118L}, longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)18;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(148, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 148, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      floatArray0[1] = float1;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-86);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-86)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'm';
      charArray0[2] = '1';
      ArrayUtils.shift(charArray0, (int) (byte) (-12), (int) (byte) (-86), (int) (byte) (-12));
      assertArrayEquals(new char[] {'R', 'm', '1'}, charArray0);
      assertEquals(3, charArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-12);
      longArray0[1] = (long) 'm';
      longArray0[2] = (long) 'R';
      longArray0[3] = (long) (byte) (-86);
      longArray0[4] = (long) '1';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-12L), 109L, 82L, (-86L), 49L}, longArray0);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '1';
      doubleArray0[1] = (double) '1';
      doubleArray0[2] = (double) 49L;
      doubleArray0[3] = (double) 82L;
      doubleArray0[4] = (double) (float)floatArray0[1];
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) '1';
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 1.0F;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 49.0, 1.0, 1.0, 82.0, 49.0, 49.0, 49.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-4L));
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-12L), 109L, 82L, (-86L), 49L}, longArray2);
      assertArrayEquals(new long[] {(-12L), 109L, 82L, (-86L), 49L}, longArray0);
      assertEquals(5, longArray2.length);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1263);
      intArray0[1] = 9;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1263), 9}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 9;
      longArray0[1] = (long) 9;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-1263), (-4748));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {9L, 9L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, longArray0.length);
      
      Integer integer0 = new Integer(9);
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      
      int int0 = ArrayUtils.indexOf(longArray0, 3944L, (-2033));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {9L, 9L}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.swap(intArray0, 50, 9, 50);
      assertArrayEquals(new int[] {(-1263), 9}, intArray0);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-68);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte) (-82);
      longArray0[2] = (long) (byte) (-82);
      int int0 = ArrayUtils.indexOf(longArray0, 1L, 121);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, (-82L), (-82L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      ArrayUtils.swap((int[]) null, 1417, (int) (byte)0, 121);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)18;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)3, (int) (byte) (-16));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)3, (byte)105, (byte) (-1), (byte) (-69), (byte) (-16), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-103));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)3, (byte)105, (byte) (-1), (byte) (-69), (byte) (-16), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte)0, (byte)3, (byte)105, (byte) (-1), (byte) (-69), (byte) (-16), (byte)0}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-450), 14, (int) (byte) (-69));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Short short0 = new Short((short)85);
      assertNotNull(short0);
      assertEquals((short)85, (short)short0);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.addFirst(shortArray0, short0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-111), (int) (byte) (-111));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)7}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)7, (byte)7, (byte)7}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 431, (-2145796699));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-775);
      intArray0[1] = 1763;
      intArray0[2] = (-1);
      intArray0[3] = (-3135);
      intArray0[4] = 3;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[1] = "##n";
      stringArray0[2] = "FullDetail must be true when using JsonToStringStyle";
      stringArray0[3] = "<~)\"s&!>8fo!6pg%==y";
      stringArray0[4] = "";
      stringArray0[5] = "<~)\"s&!>8fo!6pg%==y";
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3135), stringArray0, stringArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3135, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "GC";
      stringArray0[1] = "&5cX^";
      stringArray0[2] = "";
      stringArray0[3] = "java.lang.Integer";
      stringArray0[4] = "java.lang.Integer";
      stringArray0[5] = "5dF2:9.f!44_ :ex";
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-420), stringArray0, stringArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -420, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[2] = null;
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      int int0 = new Short((short)0);
      assertEquals((short)0, int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, (short)0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3078.500021435;
      doubleArray0[1] = 0.0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1499.0F);
      floatArray0[1] = (-1499.0F);
      floatArray0[2] = 4897.0F;
      floatArray0[3] = 631.0F;
      floatArray0[4] = (-1499.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 4897.0F, 2);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1499.0F), (-1499.0F), 4897.0F, 631.0F, (-1499.0F)}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = (-2656);
      intArray0[4] = (-1703);
      intArray0[5] = 2;
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 2, 2, (-2656), (-1703), 2}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'A';
      charArray0[2] = '1';
      charArray0[3] = ':';
      charArray0[4] = ' ';
      ArrayUtils.swap(charArray0, (-1706), (-1706), (-2423));
      assertArrayEquals(new char[] {'6', 'A', '1', ':', ' ', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3261;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)258;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-927);
      shortArray0[5] = (short) (-927);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3261, (short)2, (short)258, (short)2, (short) (-927), (short) (-927)}, shortArray0);
      assertArrayEquals(new short[] {(short)3261, (short)2, (short)258, (short)2, (short) (-927), (short) (-927)}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)2;
      floatArray0[3] = (float) (short)2;
      floatArray0[4] = 1645.631F;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)2;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(12, floatArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-64);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-64), (byte)57}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2.0F;
      doubleArray0[1] = (double) (short) (-927);
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) 2.0F;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) (-927), (int) (short)258, 0.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2.0, (-927.0), 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.reverse(byteArray0, (int) (short)0, (int) (byte) (-71));
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-64), (byte)57}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Long long0 = new Long((-1267L));
      assertNotNull(long0);
      assertEquals((-1267L), (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[3] = (byte) (-16);
      byteArray0[7] = (byte) (-95);
      byteArray0[8] = (byte)89;
      ArrayUtils.shift(byteArray0, (int) (byte)21);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)89, (byte) (-1), (byte)21, (byte) (-38), (byte) (-16), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      Short short0 = new Short((short) (-82));
      assertNotNull(short0);
      assertEquals((short) (-82), (short)short0);
      
      ArrayUtils.shift((byte[]) null, 83);
      String string0 = ArrayUtils.toString((Object) short0);
      assertNotNull(string0);
      assertEquals("-82", string0);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Long long0 = new Long((-1267L));
      assertNotNull(long0);
      assertEquals((-1267L), (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte) (-95);
      byteArray0[8] = (byte)89;
      ArrayUtils.shift(byteArray0, (int) (byte) (-38));
      assertArrayEquals(new byte[] {(byte) (-38), (byte)1, (byte) (-1), (byte) (-1), (byte) (-16), (byte) (-95), (byte)89, (byte) (-1), (byte)21}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-101);
      intArray0[1] = 2872;
      intArray0[2] = 3622;
      intArray0[3] = (-1466);
      ArrayUtils.shift(intArray0, 0);
      assertArrayEquals(new int[] {(-101), 2872, 3622, (-1466)}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      int[] intArray0 = new int[1];
      intArray0[0] = 100;
      ArrayUtils.shift(intArray0, 100, (-2260), (-2260));
      assertArrayEquals(new int[] {100}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      doubleArray0[1] = double1;
      long[] longArray0 = new long[8];
      longArray0[0] = 1251L;
      longArray0[1] = 1251L;
      longArray0[2] = 1251L;
      longArray0[3] = 1251L;
      longArray0[4] = 9L;
      longArray0[5] = 1251L;
      longArray0[6] = 1251L;
      longArray0[7] = 1251L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {1251L, 1251L, 1251L, 1251L, 9L, 1251L, 1251L, 1251L}, longArray0);
      assertEquals(8, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2806);
      intArray0[1] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 156);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-2806), 0}, intArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, intArray0.length);
      
      ArrayUtils.shift(intArray0, 0, 0, 1024);
      assertArrayEquals(new int[] {(-2806), 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) 1251L);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)47, (byte)2, (byte)74, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (byte)47;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)47;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)2;
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 47.0, 0.0, 47.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)47;
      shortArray0[1] = (short) (byte)74;
      shortArray0[2] = (short) (byte)47;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)47;
      ArrayUtils.swap(shortArray0, 2146400767, 450);
      assertArrayEquals(new short[] {(short)47, (short)74, (short)47, (short)2, (short)47}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Short[] shortArray1 = new Short[4];
      shortArray1[0] = (Short) (short)2;
      shortArray1[1] = (Short) (short)47;
      shortArray1[2] = (Short) (short)47;
      shortArray1[3] = (Short) (short)47;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3261;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)258;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-927);
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3261, (short)2, (short)258, (short)2, (short) (-927), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)3261, (short)2, (short)258, (short)2, (short) (-927), (short)0}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)2;
      floatArray0[3] = (float) (short)2;
      floatArray0[4] = 1645.631F;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)2;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {0.0F, 2.0F, 2.0F, 1645.631F, 0.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-64);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-64), (byte)57}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2.0F;
      doubleArray0[1] = (double) (short) (-927);
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) 2.0F;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) (-927), (int) (short)258, 0.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2.0, (-927.0), 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int int1 = ArrayUtils.hashCode((Object) "*b$u");
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-775);
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-2917), 104, 100);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, 3944L);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.swap((byte[]) null, 1, 2, (-1696));
      MutableInt mutableInt0 = new MutableInt((Number) (-775));
      assertNotNull(mutableInt0);
      assertEquals((-775), mutableInt0.intValue());
      assertEquals((-775.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-775), (int)mutableInt0.toInteger());
      assertEquals((-775), (int)mutableInt0.getValue());
      assertEquals((byte) (-7), mutableInt0.byteValue());
      assertEquals((-775.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-775), mutableInt0.shortValue());
      assertEquals((-775L), mutableInt0.longValue());
      assertEquals("-775", mutableInt0.toString());
      
      ArrayUtils.hashCode((Object) mutableInt0);
      assertEquals((-775), mutableInt0.intValue());
      assertEquals((-775.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-775), (int)mutableInt0.toInteger());
      assertEquals((-775), (int)mutableInt0.getValue());
      assertEquals((byte) (-7), mutableInt0.byteValue());
      assertEquals((-775.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-775), mutableInt0.shortValue());
      assertEquals((-775L), mutableInt0.longValue());
      assertEquals("-775", mutableInt0.toString());
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }
}
