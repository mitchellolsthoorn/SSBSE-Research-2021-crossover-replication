/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 14:56:22 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 0.1, (-312), 51.0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (-745));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2140896273);
      intArray0[1] = (-1);
      intArray0[2] = (-2140896273);
      intArray0[3] = (-2140896273);
      intArray0[4] = 670;
      intArray0[5] = (-745);
      intArray0[6] = 3811;
      intArray0[7] = 111;
      intArray0[8] = (-312);
      int[] intArray1 = ArrayUtils.remove(intArray0, 5);
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-2140896273), (-1), (-2140896273), (-2140896273), 670, 3811, 111, (-312)}, intArray1);
      assertArrayEquals(new int[] {(-2140896273), (-1), (-2140896273), (-2140896273), 670, (-745), 3811, 111, (-312)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[5];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean((String) null);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean((String) null);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5);
      
      booleanArray0[4] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray1));
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'M');
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'M';
      floatArray0[1] = (-408.6F);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {77.0F, (-408.6F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {77.0F, (-408.6F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-20.83F);
      floatArray0[2] = (-1884.137F);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1884.137F);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (-1.0);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1884.136962890625), 0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      ArrayUtils.swap(doubleArray0, 2, 2);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1884.136962890625), 0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2482.94083, 2);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1884.136962890625), 0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)254;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-613);
      shortArray0[3] = (short)3573;
      shortArray0[4] = (short)122;
      shortArray0[5] = (short)1187;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertNotNull(bitSet0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)254, (short)0, (short) (-613), (short)3573, (short)122, (short)1187}, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-1478), (int) (short) (-613));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '|';
      charArray0[2] = '|';
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '|';
      doubleArray0[1] = (double) '|';
      doubleArray0[2] = (double) '|';
      doubleArray0[3] = (double) '|';
      doubleArray0[4] = 1.5;
      doubleArray0[5] = (double) '|';
      doubleArray0[6] = (double) 'y';
      doubleArray0[7] = (double) '|';
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {124.0, 124.0, 124.0, 124.0, 1.5, 124.0, 121.0, 124.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-2140896273));
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(0, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '|';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-625));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -625, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (int) (short) (-3093);
      ArrayUtils.swap((short[]) null, (-2564), 12, (-1711));
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-1711), (int) (short) (-3093));
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-80));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) (byte)0, (-2564));
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'Z');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 0.1, (-312), 51.0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) false;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(4, objectArray0.length);
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte) (-99));
      assertNotNull(byte0);
      assertEquals((byte) (-99), (byte)byte0);
      
      byteArray0[1] = byte0;
      Byte byte1 = new Byte((byte)95);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)95, (byte)byte1);
      
      byteArray0[2] = byte1;
      Byte byte2 = new Byte((byte) (-63));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-63), (byte)byte2);
      
      byteArray0[3] = byte2;
      Byte byte3 = new Byte((byte)12);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)12, (byte)byte3);
      
      byteArray0[4] = byte3;
      Byte byte4 = new Byte((byte) (-63));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte) (-63), (byte)byte4);
      
      byteArray0[5] = byte4;
      byte byte5 = (byte)29;
      Byte byte6 = new Byte((byte)29);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertEquals((byte)29, (byte)byte6);
      
      byteArray0[6] = byte6;
      byteArray0[7] = (Byte) byte5;
      try { 
        Byte.decode("java.lang.Byte");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Byte\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3);
      shortArray0[1] = (short)932;
      shortArray0[2] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3), (short)932, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      Character character1 = Character.valueOf('4');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('4', (char)character1);
      
      Character character2 = new Character('o');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertEquals('o', (char)character2);
      
      Boolean boolean1 = Boolean.valueOf("PH-3m");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray1);
      
      ArrayUtils.swap((boolean[]) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      
      mutableInt0.add(1072);
      assertEquals(1072.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1072, mutableInt0.intValue());
      assertEquals((short)1072, mutableInt0.shortValue());
      assertEquals(1072.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1072L, mutableInt0.longValue());
      assertEquals((byte)48, mutableInt0.byteValue());
      assertEquals(1072, (int)mutableInt0.getValue());
      assertEquals(1072, (int)mutableInt0.toInteger());
      assertEquals("1072", mutableInt0.toString());
      
      int int0 = mutableInt0.addAndGet(1072);
      assertEquals(2144, int0);
      assertEquals(2144.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2144L, mutableInt0.longValue());
      assertEquals(2144, mutableInt0.intValue());
      assertEquals(2144.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("2144", mutableInt0.toString());
      assertEquals((short)2144, mutableInt0.shortValue());
      assertEquals((byte)96, mutableInt0.byteValue());
      assertEquals(2144, (int)mutableInt0.getValue());
      assertEquals(2144, (int)mutableInt0.toInteger());
      
      mutableInt0.increment();
      assertEquals(2145, mutableInt0.intValue());
      assertEquals(2145.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2145L, mutableInt0.longValue());
      assertEquals(2145.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("2145", mutableInt0.toString());
      assertEquals((short)2145, mutableInt0.shortValue());
      assertEquals((byte)97, mutableInt0.byteValue());
      assertEquals(2145, (int)mutableInt0.getValue());
      assertEquals(2145, (int)mutableInt0.toInteger());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      mutableInt0.subtract(0);
      assertEquals(2145, mutableInt0.intValue());
      assertEquals(2145.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2145L, mutableInt0.longValue());
      assertEquals(2145.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("2145", mutableInt0.toString());
      assertEquals((short)2145, mutableInt0.shortValue());
      assertEquals((byte)97, mutableInt0.byteValue());
      assertEquals(2145, (int)mutableInt0.getValue());
      assertEquals(2145, (int)mutableInt0.toInteger());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "The Array must not be null";
      stringArray0[1] = ":{PJUU";
      stringArray0[2] = ":{PJUU";
      stringArray0[3] = "\"";
      stringArray0[4] = ":{PJUU";
      stringArray0[6] = "L@7pJ";
      stringArray0[7] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[8] = "The Array must not be null";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 0, 0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1072;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 1072;
      floatArray0[3] = (float) 1072;
      floatArray0[4] = (float) 2144;
      floatArray0[5] = (float) 2144;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-890), 0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {1072.0F, 0.0F, 1072.0F, 1072.0F, 2144.0F, 2144.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[2] = (-20.83F);
      floatArray0[3] = (-20.83F);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, false, true, true}, booleanArray0));
      assertEquals(1, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = ')';
      charArray0[2] = 'F';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'5', ')', 'F'}, charArray0);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long((-1076L));
      assertNotNull(long0);
      assertEquals((-1076L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1022L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1022L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-1076L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertEquals((-1076L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-1022L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-1022L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-699L));
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertEquals((-699L), (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((-488L));
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long3));
      assertEquals((-488L), (long)long5);
      
      longArray0[5] = long5;
      Long long6 = new Long((-452L));
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertEquals((-452L), (long)long6);
      
      longArray0[6] = long6;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1142L);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1076L), (-1022L), (-1076L), (-1022L), (-699L), (-488L), (-452L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, 1498, 1498);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 1);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'i');
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1498;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {1498.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1498.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.shift(longArray0, (-6162), 389, (-6162));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L}, longArray0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'k');
      assertNull(charArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)460;
      shortArray0[2] = (short)64;
      shortArray0[3] = (short)1483;
      shortArray0[4] = (short)1526;
      shortArray0[5] = (short)1526;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-3009), (int) (short)64);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)460, (short)64, (short)1483, (short)1526, (short)1526}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)70);
      assertNotNull(byte0);
      assertEquals((byte)70, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte1 = (byte)7;
      Byte byte2 = new Byte((byte)7);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)7, (byte)byte2);
      
      byteArray0[0] = byte2;
      Byte byte3 = new Byte(byte1);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)7, (byte)byte3);
      
      byteArray0[1] = byte3;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)70, (byte)70, (byte)70, (byte)70}, byteArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '4');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 0;
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) float0);
      assertEquals(1, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 84L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (-1L);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) int0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {84L, (-1L)}, longArray1);
      assertArrayEquals(new long[] {84L, 0L, 0L, (-1L), 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int1 = ArrayUtils.indexOf(longArray1, (-1L));
      assertEquals(2, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {84L, (-1L)}, longArray1);
      assertArrayEquals(new long[] {84L, 0L, 0L, (-1L), 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(1, int1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short[] shortArray0 = new short[5];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)9;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-26);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-26.0), (int) (byte)9, (double) (byte) (-26));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-26.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 99;
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 99;
      longArray0[2] = (long) 99;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1373, 2);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 99L, 99L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[6];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, ',');
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(65536);
      assertEquals(0, int0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2639;
      floatArray0[1] = (float) '0';
      floatArray0[2] = (float) ',';
      floatArray0[3] = (float) '0';
      floatArray0[4] = (float) ',';
      floatArray0[5] = (float) 2639;
      MutableInt mutableInt0 = new MutableInt((-3598));
      assertNotNull(mutableInt0);
      assertEquals("-3598", mutableInt0.toString());
      assertEquals((short) (-3598), mutableInt0.shortValue());
      assertEquals((-3598.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3598), mutableInt0.intValue());
      assertEquals((byte) (-14), mutableInt0.byteValue());
      assertEquals((-3598), (int)mutableInt0.getValue());
      assertEquals((-3598.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3598L), mutableInt0.longValue());
      assertEquals((-3598), (int)mutableInt0.toInteger());
      
      MutableInt mutableInt1 = new MutableInt(44.0F);
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals((byte)44, mutableInt1.byteValue());
      assertEquals(44, (int)mutableInt1.getValue());
      assertEquals(44, (int)mutableInt1.toInteger());
      assertEquals(44.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(44L, mutableInt1.longValue());
      assertEquals("44", mutableInt1.toString());
      assertEquals(44, mutableInt1.intValue());
      assertEquals((short)44, mutableInt1.shortValue());
      assertEquals(44.0, mutableInt1.doubleValue(), 0.01);
      
      int int1 = mutableInt0.compareTo(mutableInt1);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals("-3598", mutableInt0.toString());
      assertEquals((short) (-3598), mutableInt0.shortValue());
      assertEquals((-3598.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3598), mutableInt0.intValue());
      assertEquals((byte) (-14), mutableInt0.byteValue());
      assertEquals((-3598), (int)mutableInt0.getValue());
      assertEquals((-3598.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3598L), mutableInt0.longValue());
      assertEquals((-3598), (int)mutableInt0.toInteger());
      assertEquals((byte)44, mutableInt1.byteValue());
      assertEquals(44, (int)mutableInt1.getValue());
      assertEquals(44, (int)mutableInt1.toInteger());
      assertEquals(44.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(44L, mutableInt1.longValue());
      assertEquals("44", mutableInt1.toString());
      assertEquals(44, mutableInt1.intValue());
      assertEquals((short)44, mutableInt1.shortValue());
      assertEquals(44.0, mutableInt1.doubleValue(), 0.01);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      mutableInt0.subtract((-3598));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertNotSame(mutableInt0, mutableInt1);
      
      char[] charArray2 = Character.toChars((int) ',');
      assertNotNull(charArray2);
      assertEquals(1, charArray2.length);
      assertArrayEquals(new char[] {','}, charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) ',';
      doubleArray0[1] = (double) 48.0F;
      doubleArray0[2] = (double) (-3598);
      doubleArray0[3] = (double) 44.0F;
      doubleArray0[4] = (double) 2639.0F;
      doubleArray0[5] = 0.7;
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) 48.0F, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {44.0, 48.0, (-3598.0), 44.0, 2639.0, 0.7}, doubleArray0, 0.01);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 127;
      intArray0[1] = (-63);
      intArray0[2] = (-63);
      intArray0[4] = 1155;
      intArray0[5] = 852;
      intArray0[6] = (-88);
      boolean boolean0 = ArrayUtils.contains(intArray0, 1155);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {127, (-63), (-63), 0, 1155, 852, (-88)}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-63);
      longArray0[1] = (long) 2534;
      longArray0[2] = (long) (-88);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-88);
      longArray0[5] = (long) (-63);
      longArray0[6] = (long) 1155;
      longArray0[7] = (long) 852;
      longArray0[8] = (long) (-88);
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (-88));
      assertNotNull(longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (long) 0, (-125));
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals((-1), int0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 861L);
      assertNotNull(longArray2);
      assertEquals(10, longArray1.length);
      assertEquals(10, longArray2.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L), (-88L)}, longArray2);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 53, 471);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray3 = ArrayUtils.addAll(longArray2, longArray1);
      assertNotNull(longArray3);
      assertEquals(10, longArray1.length);
      assertEquals(10, longArray2.length);
      assertEquals(20, longArray3.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L), (-88L)}, longArray2);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      char char0 = 'T';
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('T');
      assertNotNull(character1);
      assertEquals('T', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertEquals('T', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('N');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('N', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(char0);
      assertNotNull(character4);
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertEquals('T', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('~');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertEquals('~', (char)character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'T', 'T', 'T', 'N', 'T', '~'}, charArray0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '~';
      intArray0[1] = (-324);
      int int0 = ArrayUtils.indexOf(intArray0, (-324));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {126, (-324)}, intArray0);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 'N';
      ArrayUtils.shift(doubleArray0, (int) character5);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, 78.0}, doubleArray0, 0.01);
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'T', 'T', 'T', 'N', 'T', '~'}, charArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, 811);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {126, (-324)}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Long[] longArray2 = ArrayUtils.subarray(longArray1, (int) char0, 811);
      assertNotNull(longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (int) character4);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {126, (-324)}, intArray0);
      assertArrayEquals(new int[] {126, (-324)}, intArray1);
      assertTrue(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character5));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-324);
      Float float0 = new Float((float) (short) (-324));
      assertNotNull(float0);
      assertEquals((-324.0F), (float)float0, 0.01F);
      
      Float float1 = new Float(404.6928F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(404.6928F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {404.6928F, 404.6928F}, floatArray1, 0.01F);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)257);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-324)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-324), (short)257}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 404.6928F;
      doubleArray0[1] = (double) (short)257;
      doubleArray0[2] = (double) (short) (-1);
      double[] doubleArray1 = ArrayUtils.insert(3, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {404.69281005859375, 257.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {404.69281005859375, 257.0, (-1.0), 404.69281005859375, 257.0, (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-23);
      shortArray0[1] = (short) (-23);
      shortArray0[2] = (short) (-324);
      Float float0 = new Float((float) (short) (-324));
      assertNotNull(float0);
      assertEquals((-324.0F), (float)float0, 0.01F);
      
      Float float1 = new Float(404.6928F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(404.6928F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)257);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-23), (short) (-23), (short) (-324)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-23), (short) (-23), (short) (-324), (short)257}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 404.6928F;
      doubleArray0[1] = (double) (short)257;
      doubleArray0[2] = (double) (short) (-23);
      double[] doubleArray1 = ArrayUtils.insert(3, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {404.69281005859375, 257.0, (-23.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {404.69281005859375, 257.0, (-23.0), 404.69281005859375, 257.0, (-23.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[3];
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0;
      ArrayUtils.shift(objectArray0, (-1258));
      assertEquals(1, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1792);
      assertNotNull(bitSet0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-10);
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)9;
      shortArray0[4] = (short)100;
      shortArray0[5] = (short) (-141);
      shortArray0[6] = (short)2180;
      shortArray0[7] = (short) (-141);
      shortArray0[8] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-10), (short)5, (short)0, (short)9, (short)100, (short) (-141), (short)2180, (short) (-141), (short) (-1)}, shortArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 629, 1792);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[3] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte)122, (int) (short)9);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 2);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.hashCode((Object) "=48z~2.1hb.");
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertArrayEquals(new char[] {'x'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)84;
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)89);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-9), (byte)0, (byte) (-15), (byte)84}, byteArray0);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)122);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[2] = false;
      booleanArray0[5] = false;
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean2);
      
      double[] doubleArray0 = new double[9];
      long[] longArray0 = new long[1];
      longArray0[0] = (-203L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-203L), (int) (short)122);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-203L)}, longArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Short short0 = new Short((short)116);
      assertNotNull(short0);
      assertEquals((short)116, (short)short0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 59;
      ArrayUtils.shift(booleanArray0, (int) (short)122, (int) (short)122, 59);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      Double double0 = new Double((short)2941);
      assertNotNull(double0);
      assertEquals(2941.0, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2005, doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2005, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-440);
      shortArray0[1] = (short) (-241);
      shortArray0[2] = (short)13;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)13);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-440), (short) (-241), (short)13}, shortArray0);
      assertArrayEquals(new short[] {(short)13, (short) (-440), (short) (-241), (short)13}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, (int) (short) (-241), (int) (short) (-241), 4733);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '7');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 4733;
      longArray0[1] = (long) (short)13;
      longArray0[2] = (long) 4733;
      longArray0[3] = (long) (short) (-440);
      longArray0[4] = (long) 4733;
      longArray0[5] = (long) (short) (-440);
      longArray0[6] = (long) (short)13;
      longArray0[7] = (long) (short)13;
      longArray0[8] = (long) (short) (-241);
      ArrayUtils.reverse(longArray0, (-18), (-778));
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {4733L, 13L, 4733L, (-440L), 4733L, (-440L), 13L, 13L, (-241L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 0.1, (-310), 51.0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(4, objectArray0.length);
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte)106);
      assertNotNull(byte0);
      assertEquals((byte)106, (byte)byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-99);
      Byte byte2 = new Byte((byte) (-99));
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-99), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)95);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)95, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-63));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte) (-63), (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)12);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte)12, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-63));
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertEquals((byte) (-63), (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)29);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertEquals((byte)29, (byte)byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte(byte1);
      assertNotNull(byte8);
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte4));
      assertEquals((byte) (-99), (byte)byte8);
      
      byteArray0[7] = byte8;
      try { 
        Byte.decode("java.lang.Byte");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Byte\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = 'T';
      charArray0[1] = 'T';
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      short short0 = (short)92;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)92;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)92}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = (Character) 'T';
      characterArray0[1] = (Character) 'T';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      ArrayUtils.shift((float[]) null, (int) (byte)0);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((short)92);
      assertNotNull(integer0);
      assertEquals(92, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)92);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(92, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((short)92);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(92, (int)integer2);
      
      integerArray0[2] = integer2;
      try { 
        Integer.valueOf("org.apache.commons.lang3.mutable.MutableInt", (int) characterArray0[1]);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 84 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[24];
      charArray0[4] = 'T';
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, int0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) int0;
      longArray0[2] = 4596L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 'T';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 642L, (-3346));
      assertNotNull(bitSet0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 4596L, 0L, 0L, 0L, 84L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-3093);
      intArray0[1] = (int) (short) (-3093);
      intArray0[2] = (int) (short) (-3093);
      intArray0[3] = (int) (short) (-3093);
      intArray0[4] = (int) (short) (-3093);
      intArray0[5] = (int) (short) (-3093);
      intArray0[6] = (int) (short) (-3093);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-3093), (-3093), (-3093), (-3093), (-3093), (-3093), (-3093)}, intArray0);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[6];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(6, characterArray0.length);
      assertEquals(6, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'L';
      floatArray0[1] = (float) (-3093);
      ArrayUtils.swap(floatArray0, (-3093), 253, (-1573));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {76.0F, (-3093.0F), 0.0F}, floatArray0, 0.01F);
      
      Character character0 = Character.valueOf('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) character0, (-3093));
      assertEquals(6, characterArray0.length);
      assertEquals((-1), int0);
      assertSame(characterArray0, characterArray1);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 14, (int) (short)0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '~');
      assertNull(charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1136;
      Long long0 = new Long(1136);
      assertNotNull(long0);
      assertEquals(1136L, (long)long0);
      
      Long long1 = new Long((short)0);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      Long long2 = new Long((short)0);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      Long long3 = new Long((short) (-1));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertEquals((-1L), (long)long3);
      
      Long[] longArray0 = ArrayUtils.clone((Long[]) null);
      assertNull(longArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1136);
      assertNotNull(integer0);
      assertEquals(1136, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) 0, 88);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1258);
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      int int0 = ArrayUtils.indexOf(charArray0, '4', (-2));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'}', '}', '}'}, charArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) ':';
      doubleArray0[1] = (double) '4';
      doubleArray0[3] = (double) '4';
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-2290);
      doubleArray0[6] = (double) '}';
      doubleArray0[7] = (double) (-2);
      ArrayUtils.swap(doubleArray0, 153, 117);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {58.0, 52.0, 0.0, 52.0, (-1.0), (-2290.0), 125.0, (-2.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer((-877));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-877), (int)integer0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0, 0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '}';
      characterArray0[1] = (Character) '}';
      char char0 = '{';
      Character character0 = Character.valueOf('{');
      assertNotNull(character0);
      assertEquals('{', (char)character0);
      
      characterArray0[2] = character0;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'}', '}', '{'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1258);
      intArray0[1] = (-1);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1053);
      shortArray0[1] = (short)26713;
      shortArray0[2] = (short)26713;
      shortArray0[3] = (short)26713;
      shortArray0[4] = (short)26713;
      shortArray0[5] = (short)26713;
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((double) (-1258));
      assertNotNull(float0);
      assertEquals((-1258.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-1258));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1258.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1.0));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(0.0F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) (-1.0F));
      assertNotNull(float4);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((-1.0F), (float)float4, 0.01F);
      
      Short short0 = new Short((short) (-55));
      assertNotNull(short0);
      assertEquals((short) (-55), (short)short0);
      
      Short[] shortArray1 = ArrayUtils.add((Short[]) null, short0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, (-3346), (-3118), 1);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1053), (short)26713, (short)26713, (short)26713, (short)26713, (short)26713}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, 1, 1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1258), (-1), 0}, intArray0);
      assertEquals((-1), int0);
      
      float[] floatArray1 = new float[2];
      floatArray1[0] = (-2759.72F);
      floatArray1[1] = (float) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray1, (int) (short)26713);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 26713, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+S4Y");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      charArray0[6] = ' ';
      charArray0[7] = '5';
      ArrayUtils.swap(charArray0, (-2147146440), (int) (short) (-1025), 55);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {' ', ' ', '\u0000', ' ', ' ', '\u0000', ' ', '5'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (-1L));
      assertFalse(boolean1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2147146440);
      intArray0[1] = (int) ' ';
      intArray0[2] = (int) ' ';
      intArray0[3] = (int) ' ';
      intArray0[4] = (int) ' ';
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = (int) '5';
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-2147146440), 32, 32, 32, 32, Integer.MAX_VALUE, 53}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      int[] intArray2 = ArrayUtils.addFirst(intArray1, 339);
      assertNotNull(intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray2.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {339}, intArray2);
      assertArrayEquals(new int[] {(-2147146440), 32, 32, 32, 32, Integer.MAX_VALUE, 53}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1258);
      MockRandom mockRandom0 = new MockRandom(1070L);
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1258);
      ArrayUtils.shift(objectArray0, 3210);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2774.228740006262), Integer.MAX_VALUE);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = (-1063L);
      MutableInt mutableInt0 = new MutableInt(2461);
      assertNotNull(mutableInt0);
      assertEquals(2461L, mutableInt0.longValue());
      assertEquals(2461, mutableInt0.intValue());
      assertEquals(2461.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2461, (int)mutableInt0.getValue());
      assertEquals(2461, (int)mutableInt0.toInteger());
      assertEquals("2461", mutableInt0.toString());
      assertEquals((short)2461, mutableInt0.shortValue());
      assertEquals(2461.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-99), mutableInt0.byteValue());
      
      ArrayUtils.hashCode((Object) mutableInt0);
      assertEquals(2461L, mutableInt0.longValue());
      assertEquals(2461, mutableInt0.intValue());
      assertEquals(2461.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2461, (int)mutableInt0.getValue());
      assertEquals(2461, (int)mutableInt0.toInteger());
      assertEquals("2461", mutableInt0.toString());
      assertEquals((short)2461, mutableInt0.shortValue());
      assertEquals(2461.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-99), mutableInt0.byteValue());
      
      Float float0 = new Float((double) (-1063L));
      assertNotNull(float0);
      assertEquals((-1063.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      Float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, float1);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1136;
      intArray0[1] = 76;
      intArray0[1] = 1136;
      intArray0[3] = 76;
      intArray0[6] = 1136;
      intArray0[7] = 7;
      ArrayUtils.shift(intArray0, (-1204), 0, (-401));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1136, 1136, 0, 76, 0, 0, 1136, 7}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)50;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 1136);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)50}, byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)50}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1136;
      longArray0[1] = (long) (-1204);
      longArray0[2] = (long) 1136;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)50;
      shortArray0[1] = (short) (byte)50;
      shortArray0[2] = (short) (byte)61;
      ArrayUtils.shift(longArray0, 0, (-401), (-1633));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1136L, (-1204L), 1136L, 0L, 0L}, longArray0);
      
      AbstractMap.SimpleImmutableEntry<Object, Float>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Object, Float>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Object, Float>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.toArray(abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)50, (-1502));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)50, (short)50, (short)61}, shortArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 18688;
      intArray0[1] = (-2025);
      intArray0[2] = 1;
      intArray0[3] = (-84);
      intArray0[4] = (-1265);
      intArray0[5] = (-1);
      intArray0[6] = (-2685);
      intArray0[4] = 88;
      intArray0[8] = 723;
      ArrayUtils.shift(intArray0, 1449);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {18688, (-2025), 1, (-84), 88, (-1), (-2685), 0, 723}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = '$';
      charArray0[2] = '0';
      charArray0[3] = '';
      charArray0[4] = '2';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'u', '$', '0', '', '2'}, charArray1);
      assertArrayEquals(new char[] {'u', '$', '0', '', '2'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 723;
      doubleArray0[1] = (double) (-84);
      doubleArray0[2] = (double) (-2685);
      doubleArray0[3] = (double) '$';
      doubleArray0[4] = (double) '$';
      int int0 = ArrayUtils.indexOf(doubleArray0, (-639.5176917267657), 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {723.0, (-84.0), (-2685.0), 36.0, 36.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 855.6834715630647;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-991.2034911500001);
      doubleArray0[4] = (-1884.136962890625);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1317.0, 0.0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 855.6834715630647, 0.0, (-991.2034911500001), (-1884.136962890625)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 855.6834715630647, 0.0, (-991.2034911500001), (-1884.136962890625)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 15;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {(-1), (-1), 15}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), 15, (-1), (-1), 15}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1286);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1321));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-1286), 0}, intArray0);
      assertArrayEquals(new int[] {(-1286), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-753);
      doubleArray0[1] = 2388.0860872860085;
      doubleArray0[2] = (double) (-1286);
      doubleArray0[3] = (double) (-753);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1321);
      doubleArray0[6] = (double) (-1286);
      doubleArray0[7] = (double) (-1321);
      doubleArray0[8] = (double) (-1286);
      ArrayUtils.swap(doubleArray0, 0, (-753));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-753.0), 2388.0860872860085, (-1286.0), (-753.0), 0.0, (-1321.0), (-1286.0), (-1321.0), (-1286.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-753);
      floatArray0[1] = (float) (-753);
      floatArray0[2] = (float) (-1286);
      floatArray0[3] = (float) (-1286);
      floatArray0[4] = (float) (-753);
      floatArray0[5] = (float) (-1286);
      floatArray0[6] = (float) (-753);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-753.0F), (-753.0F), (-1286.0F), (-1286.0F), (-753.0F), (-1286.0F), (-753.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte byte0 = (byte) (-39);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      Long[] longArray0 = new Long[0];
      long long0 = (-1338L);
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1338L));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      MockRandom mockRandom1 = new MockRandom((-2147146440L));
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int0 = mockRandom1.nextInt((int) (byte) (-71));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0, int0);
      assertNotSame(mockRandom1, mockRandom0);
      
      MockRandom mockRandom2 = new MockRandom((byte) (-71));
      assertNotNull(mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      
      IntStream intStream0 = mockRandom2.ints((int) (byte) (-39), 0);
      assertNotNull(intStream0);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(mockRandom1.equals((Object)mockRandom2));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom2);
      assertNotSame(mockRandom1, mockRandom0);
      
      Integer integer0 = new Integer((byte) (-39));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-39), (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      
      int int1 = 7;
      Integer integer2 = Integer.getInteger("java.lang.String", 0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 1093, integer2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1093, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-70);
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      byte byte1 = (byte) (-61);
      Integer integer0 = new Integer((byte) (-70));
      assertNotNull(integer0);
      assertEquals((-70), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (int)  (-70), integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -70, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      mutableInt0.subtract(0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[3] = (double) 0;
      char[] charArray0 = new char[0];
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray0.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-0.78583235F);
      floatArray0[1] = (-1379.0F);
      floatArray0[2] = 830.4F;
      floatArray0[3] = (-404.93F);
      floatArray0[4] = (-1642.9943F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = 856.56F;
      ArrayUtils.reverse(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 856.56F, 1.0F, (-1642.9943F), (-404.93F), 830.4F, (-1379.0F), (-0.78583235F)}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 3287.0F);
      assertNotNull(bitSet0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 856.56F, 1.0F, (-1642.9943F), (-404.93F), 830.4F, (-1379.0F), (-0.78583235F)}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = '=';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'A', '='}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 18688;
      intArray0[1] = (-2025);
      intArray0[2] = 1;
      intArray0[3] = (-84);
      intArray0[4] = (-1265);
      intArray0[5] = (-1);
      intArray0[6] = (-2685);
      intArray0[4] = 88;
      intArray0[8] = 723;
      ArrayUtils.shift(intArray0, 1449);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {18688, (-2025), 1, (-84), 88, (-1), (-2685), 0, 723}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = '$';
      charArray0[2] = '0';
      charArray0[3] = '';
      charArray0[4] = '2';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'u', '$', '0', '', '2'}, charArray1);
      assertArrayEquals(new char[] {'u', '$', '0', '', '2'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) "I", (-2685));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18688, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[2] = (-20.83F);
      floatArray0[4] = (-20.83F);
      floatArray0[6] = 0.0F;
      floatArray0[5] = (-20.83F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), (-20.83F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray0, (-2103.6594F));
      assertNotNull(floatArray2);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray2.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), (-20.83F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), (-20.83F), 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray1, (Object) null, (-47));
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), (-20.83F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertEquals((-1), int0);
      assertNotSame(floatArray0, floatArray2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)99;
      shortArray0[1] = (short) (-436);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-436);
      intArray0[1] = (-1);
      ArrayUtils.shift(intArray0, 54);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-436), (-1)}, intArray0);
      
      Float[] floatArray3 = ArrayUtils.toObject(floatArray2);
      assertNotNull(floatArray3);
      assertEquals(9, floatArray3.length);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray2.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), (-20.83F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), (-20.83F), 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      ArrayUtils.swap((Object[]) floatArray3, (-436), (int) (short) (-436));
      assertEquals(9, floatArray3.length);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray2.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), (-20.83F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), (-20.83F), 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (short) (-436), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 2);
      Class<Boolean> class0 = Boolean.class;
      classArray0[0] = class0;
      Class<Boolean> class1 = Boolean.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(2, classArray0.length);
      assertEquals(2, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 18688;
      intArray0[1] = (-2025);
      intArray0[2] = 1;
      intArray0[3] = (-84);
      intArray0[4] = (-1265);
      intArray0[5] = (-1);
      intArray0[6] = (-2685);
      intArray0[7] = 88;
      intArray0[8] = 736;
      ArrayUtils.shift(intArray0, 1449);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {18688, (-2025), 1, (-84), (-1265), (-1), (-2685), 88, 736}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = '$';
      charArray0[2] = '0';
      charArray0[3] = '';
      charArray0[4] = '2';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'u', '$', '0', '', '2'}, charArray1);
      assertArrayEquals(new char[] {'u', '$', '0', '', '2'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 736;
      doubleArray0[1] = (double) (-84);
      doubleArray0[2] = (double) (-2685);
      doubleArray0[3] = (double) '$';
      doubleArray0[4] = (double) '$';
      int int0 = ArrayUtils.indexOf(doubleArray0, (-627.7315063476562), 88);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {736.0, (-84.0), (-2685.0), 36.0, 36.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[6];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '5');
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(65536);
      assertEquals(0, int0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2639;
      floatArray0[1] = (float) '5';
      floatArray0[2] = (float) ',';
      floatArray0[3] = (float) '0';
      floatArray0[4] = (float) ',';
      floatArray0[5] = (float) 2639;
      floatArray0[6] = (float) 2639;
      floatArray0[7] = (float) 65536;
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {53.0F, 44.0F, 48.0F, 44.0F, 2639.0F, 2639.0F, 65536.0F, 2639.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift((long[]) null, (-1455));
      char[] charArray2 = ArrayUtils.subarray(charArray1, 2639, 65536);
      assertNotNull(charArray2);
      assertEquals(0, charArray2.length);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'I';
      doubleArray0[1] = (double) 2639.0F;
      doubleArray0[2] = (double) '|';
      doubleArray0[3] = (double) 48.0F;
      doubleArray0[4] = (double) (-1455);
      doubleArray0[5] = (double) 44.0F;
      doubleArray0[6] = 405.54;
      doubleArray0[7] = (double) 44.0F;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {73.0, 2639.0, 124.0, 48.0, (-1455.0), 44.0, 405.54, 44.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {73.0, 2639.0, 124.0, 48.0, (-1455.0), 44.0, 405.54, 44.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[1] = '&';
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray1 = new Byte[5];
      byte byte0 = (byte) (-89);
      Byte byte1 = new Byte((byte) (-89));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-89), (byte)byte1);
      
      byteArray1[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-89), (byte)byte2);
      
      byteArray1[1] = byte2;
      Byte byte3 = new Byte((byte)10);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)10, (byte)byte3);
      
      byteArray1[2] = byte3;
      byteArray1[3] = (Byte) byte0;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte) (-89), (byte)byte4);
      
      byteArray1[4] = byte4;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals(5, byteArray1.length);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray1, byteArray2);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray2, "1ZY>M{");
      assertNotNull(stringArray0);
      assertEquals(5, byteArray2.length);
      assertEquals(5, stringArray0.length);
      assertEquals(5, byteArray1.length);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray1, byteArray2);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) byte0;
      doubleArray0[4] = (double) '&';
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) byte0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 36, (int) (short)0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {3.0, (-89.0), 0.0, (-89.0), 38.0, 0.0, (-89.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)10;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) '&';
      floatArray0[4] = 126.0F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) byte0;
      floatArray1[1] = (float) 36;
      floatArray1[2] = (float) byte0;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-89.0F), 36.0F, (-89.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {10.0F, 38.0F, 126.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {10.0F, (-89.0F), (-89.0F), 38.0F, 126.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[1] = '&';
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray1 = new Byte[5];
      byte byte0 = (byte) (-89);
      Byte byte1 = new Byte((byte) (-89));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-89), (byte)byte1);
      
      byteArray1[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-89), (byte)byte2);
      
      byteArray1[1] = byte2;
      Byte byte3 = new Byte((byte)10);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)10, (byte)byte3);
      
      byteArray1[2] = byte3;
      byteArray1[3] = (Byte) byte0;
      byte byte4 = (byte) (-41);
      Byte byte5 = new Byte((byte) (-41));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte) (-41), (byte)byte5);
      
      byteArray1[4] = byte5;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals(5, byteArray1.length);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray1, byteArray2);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray2, "1ZY>M{");
      assertNotNull(stringArray0);
      assertEquals(5, byteArray2.length);
      assertEquals(5, stringArray0.length);
      assertEquals(5, byteArray1.length);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray1, byteArray2);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = (double) (byte) (-41);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (byte) (-41);
      doubleArray0[4] = (double) '&';
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) byte0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 36, (int) (short)0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {3.0, (-41.0), 0.0, (-41.0), 38.0, 0.0, (-89.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-41);
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) '&';
      floatArray0[4] = 126.0F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) byte4;
      floatArray1[1] = (float) 36;
      floatArray1[2] = (float) byte4;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(5, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertArrayEquals(new float[] {(-41.0F), (-89.0F), (-89.0F), 38.0F, 126.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-41.0F), 36.0F, (-41.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-89.0F), (-89.0F), 38.0F, 126.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-1063L);
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1216), (-1216));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)3;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)59);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-75), (byte)3}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-75), (byte)3}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'B', (int) (byte) (-75));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'B', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-2025.09F));
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-2025.09F)}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)3;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)3}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'T';
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = "Xp^R7,/^1?";
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)10;
      shortArray0[2] = (short)10;
      shortArray0[3] = (short)10;
      shortArray0[4] = (short)10;
      shortArray0[5] = (short)10;
      shortArray0[6] = (short)10;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)10);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)10, (short)10, (short)10, (short)10, (short)10, (short)10, (short)10}, shortArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) stringArray0, (Object[]) stringArray0);
      assertNotNull(objectArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(12, objectArray0.length);
      assertNotSame(stringArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      Integer integer0 = new Integer((short)2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer((-31));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-31), (int)integer1);
      
      Integer integer2 = new Integer((short)2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2, (int)integer2);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[0] = integer0;
      integerArray0[2] = integer2;
      integerArray0[4] = integer2;
      integerArray0[6] = integer0;
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 7, integerArray0[1]);
      assertNotNull(integerArray1);
      assertEquals(9, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((short)2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) integerArray0[4]);
      assertNotNull(long1);
      assertEquals(8, integerArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(2L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(853L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(853L, (long)long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {2L, 2L, 853L}, longArray1);
      
      boolean boolean2 = ArrayUtils.contains(shortArray0, (short)2);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[2] = 'K';
      charArray0[3] = '?';
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = (Character) '?';
      characterArray0[1] = (Character) '?';
      Character character0 = Character.valueOf('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      characterArray0[3] = character0;
      characterArray0[5] = (Character) 'K';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(7, characterArray0.length);
      assertEquals(7, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-51)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-51), (byte) (-51)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-51);
      shortArray0[1] = (short) (-1394);
      shortArray0[2] = (short) (byte) (-51);
      shortArray0[3] = (short) (byte) (-51);
      shortArray0[4] = (short) (byte) (-51);
      shortArray0[5] = (short) (byte) (-51);
      shortArray0[6] = (short) (byte) (-51);
      shortArray0[7] = (short) (byte) (-51);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)50);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-51), (short) (-1394), (short) (-51), (short) (-51), (short) (-51), (short) (-51), (short) (-51), (short) (-51)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-51), (short) (-1394), (short) (-51), (short) (-51), (short) (-51), (short) (-51), (short) (-51), (short) (-51)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      ArrayUtils.swap(shortArray0, (-1), (int) (short) (-51), 1072);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-51), (short) (-1394), (short) (-51), (short) (-51), (short) (-51), (short) (-51), (short) (-51), (short) (-51)}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1286);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1321));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-1286), 0}, intArray0);
      assertArrayEquals(new int[] {(-1286), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-75);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-52), (byte) (-29), (byte) (-75)}, byteArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1286);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1286.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1286.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-29);
      floatArray0[1] = 1772.3F;
      floatArray0[2] = (float) (byte) (-75);
      floatArray0[3] = (float) (byte) (-1);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (byte) (-75);
      floatArray0[6] = (float) (byte) (-29);
      floatArray0[7] = 0.0F;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 448.99548F, (-6));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-29.0F), 1772.3F, (-75.0F), (-1.0F), 0.0F, (-75.0F), (-29.0F), 0.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1286);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1321));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-1286), 0}, intArray0);
      assertArrayEquals(new int[] {(-1286), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-75);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-52), (byte) (-29), (byte) (-75)}, byteArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1286);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1286.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1286.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-29);
      floatArray0[1] = 1772.3F;
      floatArray0[2] = (float) (byte) (-75);
      floatArray0[3] = (float) (byte) (-1);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (byte) (-75);
      floatArray0[6] = (float) (byte) (-29);
      floatArray0[7] = 0.0F;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 448.99548F, (-6));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-29.0F), 1772.3F, (-75.0F), (-1.0F), 0.0F, (-75.0F), (-29.0F), 0.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = 'I';
      charArray0[4] = '&';
      ArrayUtils.reverse(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'&', 'I', '&', '&', '&'}, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 'I';
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (-1));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 73.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 73.0F, (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray2);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertArrayEquals(new float[] {(-1.0F), 73.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'I';
      intArray0[1] = (-1);
      intArray0[2] = (int) 'I';
      intArray0[3] = (-1);
      intArray0[4] = 7;
      intArray0[5] = (int) '&';
      intArray0[6] = (int) '&';
      intArray0[7] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 7, 2146902135);
      assertNotNull(intArray1);
      assertEquals(1, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray1);
      assertArrayEquals(new int[] {73, (-1), 73, (-1), 7, 38, 38, Integer.MAX_VALUE}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.5298000574111938);
      doubleArray0[1] = (-1.5298000574111938);
      doubleArray0[2] = 397.08;
      doubleArray0[3] = (-1.5298000574111938);
      doubleArray0[4] = 1.0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = 'A';
      charArray0[2] = '&';
      charArray0[3] = 'A';
      ArrayUtils.reverse(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'A', '&', 'A', '&'}, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 'A';
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 65.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 65.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) (-1.5298000574111938);
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '&';
      longArray0[1] = (long) '&';
      longArray0[2] = (long) 'A';
      Float[] floatArray2 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray2);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertArrayEquals(new float[] {0.0F, 65.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'A';
      intArray0[1] = (int) 'A';
      intArray0[2] = (int) 'A';
      intArray0[3] = (int) 'A';
      intArray0[4] = (-1);
      intArray0[5] = (int) 'A';
      intArray0[6] = (int) '&';
      intArray0[7] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), 32);
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {65, 65, 65, 65, (-1), 65, 38, Integer.MAX_VALUE}, intArray1);
      assertArrayEquals(new int[] {65, 65, 65, 65, (-1), 65, 38, Integer.MAX_VALUE}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1703.239F);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-1703.239F);
      Double double0 = new Double((-1703.239F));
      assertNotNull(double0);
      assertEquals((-1703.239013671875), (double)double0, 0.01);
      
      objectArray0[3] = (Object) (-1703.239F);
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(6, objectArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Zv\u0002fz`^vH(uSe");
      assertNotNull(stringArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'z';
      charArray0[1] = 'N';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      charArray0[5] = 'C';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'z', 'N', 'z', 'z', 'z', 'C'}, charArray1);
      assertArrayEquals(new char[] {'z', 'N', 'z', 'z', 'z', 'C'}, charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-2772), 0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, (-993.0F));
      assertNull(floatArray1);
      
      Long long0 = new Long((-2772));
      assertNotNull(long0);
      assertEquals((-2772L), (long)long0);
      
      String string0 = ArrayUtils.toString((Object) long0);
      assertNotNull(string0);
      assertEquals("-2772", string0);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray0, 'z');
      assertNotNull(charArray2);
      assertEquals(7, charArray2.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'z', 'z', 'N', 'z', 'z', 'z', 'C'}, charArray2);
      assertArrayEquals(new char[] {'z', 'N', 'z', 'z', 'z', 'C'}, charArray0);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-886.3573076900446));
      assertNotNull(double0);
      assertEquals((-886.3573076900446), (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[4];
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      ArrayUtils.swap(intArray0, 2, 2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 1, 1}, intArray0);
      
      Float float0 = new Float((-886.3573076900446));
      assertNotNull(float0);
      assertEquals((-886.3573F), (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) null, (Object) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1703.239F);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-1703.239F);
      Double double0 = new Double((-1703.239F));
      assertNotNull(double0);
      assertEquals((-1703.239013671875), (double)double0, 0.01);
      
      objectArray0[3] = (Object) (-1703.239F);
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(6, objectArray0.length);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[5] = 0;
      Double double1 = new Double(0.1);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.1, (double)double1, 0.01);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = ';';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'M', ';'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)90);
      assertNotNull(short0);
      assertEquals((short)90, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)90);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)90, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-2080));
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short) (-2080), (short)short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-542));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)90, (short)90, (short) (-2080)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Short[] shortArray0 = new Short[8];
      Short short0 = Short.valueOf((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertEquals(8, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1136, (short)short1);
      
      shortArray0[1] = short1;
      short short2 = (short) (-2);
      Short short3 = new Short((short) (-2));
      assertNotNull(short3);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short) (-2), (short)short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short(short2);
      assertNotNull(short4);
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertEquals((short) (-2), (short)short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short) (-31761));
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertEquals((short) (-31761), (short)short5);
      
      shortArray0[4] = short5;
      Short short6 = new Short((short) (-31761));
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertTrue(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      assertEquals((short) (-31761), (short)short6);
      
      shortArray0[5] = short6;
      Short short7 = new Short(short2);
      assertNotNull(short7);
      assertFalse(short7.equals((Object)short6));
      assertTrue(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short0));
      assertTrue(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short5));
      assertTrue(short7.equals((Object)short3));
      assertEquals((short) (-2), (short)short7);
      
      shortArray0[6] = short7;
      short short8 = (short)2;
      Short short9 = new Short((short)2);
      assertNotNull(short9);
      assertFalse(short9.equals((Object)short3));
      assertFalse(short9.equals((Object)short5));
      assertFalse(short9.equals((Object)short2));
      assertFalse(short9.equals((Object)short0));
      assertFalse(short9.equals((Object)short6));
      assertFalse(short9.equals((Object)short7));
      assertTrue(short9.equals((Object)short8));
      assertFalse(short9.equals((Object)short4));
      assertFalse(short9.equals((Object)short1));
      assertEquals((short)2, (short)short9);
      
      shortArray0[7] = short9;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short8);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)1136, (short)1136, (short) (-2), (short) (-2), (short) (-31761), (short) (-31761), (short) (-2), (short)2}, shortArray1);
      assertFalse(short8 == short2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '4';
      charArray0[2] = ',';
      charArray0[3] = '%';
      charArray0[4] = 'B';
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '%';
      longArray0[1] = (long) '4';
      long[] longArray1 = ArrayUtils.add(longArray0, (-1L));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {37L, 52L}, longArray0);
      assertArrayEquals(new long[] {37L, 52L, (-1L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-3527L), (-1682));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {37L, 52L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals((-1), int0);
      assertNotSame(longArray0, longArray1);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray0, (-2670L));
      assertNotNull(longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray2.length);
      assertArrayEquals(new long[] {37L, 52L}, longArray0);
      assertArrayEquals(new long[] {37L, 52L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (int) ',');
      assertNull(intArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1994091957), 53);
      assertNotNull(charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'B', '4', ',', '%', 'B'}, charArray1);
      assertArrayEquals(new char[] {'B', '4', ',', '%', 'B'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(1481);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1481, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3060);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(3060, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(2, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("java.lang.String");
      assertNull(integer3);
      
      integerArray0[3] = null;
      Integer integer4 = new Integer(1481);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(1481, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals(2, (int)integer5);
      
      integerArray0[5] = integer5;
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertEquals(6, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "iR";
      stringArray0[2] = "yes";
      stringArray0[3] = "J";
      stringArray0[4] = "4Mbm< {a-M?l D-!;`";
      stringArray0[5] = "java.lang.Byte";
      stringArray0[6] = "java.lang.Byte";
      stringArray0[7] = "org.apache.commons.lang3.mutable.MutableInt";
      boolean boolean0 = ArrayUtils.isNotEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(3219);
      assertNotNull(mutableInt0);
      assertEquals(3219, mutableInt0.intValue());
      assertEquals(3219.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3219L, mutableInt0.longValue());
      assertEquals((short)3219, mutableInt0.shortValue());
      assertEquals(3219, (int)mutableInt0.getValue());
      assertEquals(3219, (int)mutableInt0.toInteger());
      assertEquals("3219", mutableInt0.toString());
      assertEquals(3219.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-109), mutableInt0.byteValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[12];
      charArray0[4] = 'T';
      charArray0[2] = 'T';
      charArray0[4] = 'T';
      int[] intArray0 = new int[4];
      intArray0[0] = 3219;
      Character[] characterArray0 = new Character[2];
      char char0 = 'D';
      Character character0 = Character.valueOf('D');
      assertNotNull(character0);
      assertEquals('D', (char)character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = (Character) 'T';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'T';
      floatArray0[1] = (float) 'D';
      floatArray0[2] = (float) 253;
      ArrayUtils.swap(floatArray0, 3219, (-2137065507), 3219);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {84.0F, 68.0F, 253.0F}, floatArray0, 0.01F);
      
      Character character1 = Character.valueOf('2');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('2', (char)character1);
      
      Character character2 = Character.valueOf('>');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertEquals('>', (char)character2);
      
      int int0 = ArrayUtils.indexOf((Object[]) characterArray1, (Object) character2, 1748);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertEquals((-1), int0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(12, charArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-2137065507);
      longArray0[1] = (long) 1748;
      longArray0[2] = (long) 'D';
      longArray0[3] = (long) char0;
      longArray0[4] = (long) '2';
      longArray0[5] = (long) 1748;
      ArrayUtils.shift(longArray0, (int) char0, 253, 2732);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-2137065507L), 1748L, 68L, 68L, 50L, 1748L}, longArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-2845);
      shortArray0[3] = (short)1093;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)120;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1136, (-3093));
      assertNotNull(bitSet0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1136, (short)1, (short) (-2845), (short)1093, (short)2, (short)120}, shortArray0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      charArray0[4] = '&';
      charArray0[5] = '&';
      charArray0[6] = 'A';
      charArray0[7] = '&';
      charArray0[8] = 'A';
      ArrayUtils.reverse(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'A', '&', 'A', '&', '&', '&', '&', '&', 'A'}, charArray0);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, (-964.0F));
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-964.0F)}, floatArray0, 0.01F);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray2.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, true, true, true, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)122);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf(false);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      
      Boolean boolean5 = Boolean.valueOf(true);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(16, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      boolean[] booleanArray2 = new boolean[6];
      booleanArray2[0] = (boolean) boolean3;
      booleanArray2[1] = boolean0;
      booleanArray2[2] = boolean0;
      booleanArray2[3] = (boolean) boolean3;
      booleanArray2[4] = true;
      booleanArray2[5] = boolean0;
      ArrayUtils.shift(booleanArray2, (-1534), 42, 16);
      assertEquals(6, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray2));
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2012, (int) (short)2012);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals((-1), int0);
      assertNotSame(shortArray0, shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 166L;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1258);
      intArray0[1] = (-1);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1053);
      shortArray0[1] = (short)26713;
      shortArray0[3] = (short)26713;
      shortArray0[4] = (short)26713;
      shortArray0[5] = (short)26713;
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((double) (-1258));
      assertNotNull(float0);
      assertEquals((-1258.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-1258));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1258.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1.0));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(0.0F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) (-1.0F));
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) floatArray0[0]);
      assertNotNull(float5);
      assertEquals(6, floatArray0.length);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((-1258.0F), (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-38.18854F));
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1258.0F), (-1258.0F), (-1.0F), 0.0F, (-1.0F), (-1258.0F)}, floatArray1, 0.01F);
      
      Character character0 = Character.valueOf('u');
      assertNotNull(character0);
      assertEquals('u', (char)character0);
      
      String string0 = ArrayUtils.toString((Object) character0);
      assertNotNull(string0);
      assertEquals("u", string0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'u');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'u'}, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1380L;
      longArray0[1] = (long) (short) (-1053);
      longArray0[2] = (long) (short) (-1053);
      longArray0[3] = 2147483647L;
      longArray0[4] = (long) (-1258);
      longArray0[5] = (long) (short)26713;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1380L, (-1053L), (-1053L), 2147483647L, (-1258L), 26713L, 0L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, 1498, 1498);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 1);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) (-1L));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-38.18854F));
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F)}, floatArray1, 0.01F);
      
      Character character0 = Character.valueOf('u');
      assertNotNull(character0);
      assertEquals('u', (char)character0);
      
      String string0 = ArrayUtils.toString((Object) floatArray0[1]);
      assertNotNull(string0);
      assertEquals(3, floatArray0.length);
      assertEquals("0.0", string0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'U');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'U'}, charArray0);
      
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean0);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1258);
      intArray0[1] = (-1);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1053);
      shortArray0[1] = (short)26713;
      shortArray0[2] = (short)26713;
      shortArray0[3] = (short)26713;
      shortArray0[4] = (short)26713;
      shortArray0[5] = (short)26713;
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((double) (-1258));
      assertNotNull(float0);
      assertEquals((-1258.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-1258));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1258.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1.0));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(0.0F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) (-1.0F));
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) floatArray0[0]);
      assertNotNull(float5);
      assertEquals(6, floatArray0.length);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals((-1258.0F), (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-38.18854F));
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1258.0F), (-1258.0F), (-1.0F), 0.0F, (-1.0F), (-1258.0F)}, floatArray1, 0.01F);
      
      Character character0 = Character.valueOf('u');
      assertNotNull(character0);
      assertEquals('u', (char)character0);
      
      String string0 = ArrayUtils.toString((Object) character0);
      assertNotNull(string0);
      assertEquals("u", string0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'u');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'u'}, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1380L;
      longArray0[1] = (long) (short) (-1053);
      longArray0[2] = (long) (short) (-1053);
      longArray0[3] = 2147483647L;
      longArray0[4] = (long) (-1258);
      longArray0[5] = (long) (short)26713;
      longArray0[6] = (long) (short)26713;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1380L, (-1053L), (-1053L), 2147483647L, (-1258L), 26713L, 26713L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Double double0 = new Double(280.74576194084943);
      assertNotNull(double0);
      assertEquals(280.74576194084943, (double)double0, 0.01);
      
      Double double1 = new Double(280.74576194084943);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(280.74576194084943, (double)double1, 0.01);
      
      Double double2 = new Double(969.66681);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(969.66681, (double)double2, 0.01);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1069));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      
      ArrayUtils.shift(booleanArray0, 1, 1, (-157));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)889;
      shortArray0[2] = (short)25022;
      shortArray0[3] = (short)1317;
      shortArray0[4] = (short)889;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)889, (short)25022, (short)1317, (short)889, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1422.129275055);
      doubleArray0[2] = (-2774.228740006262);
      doubleArray0[3] = (double) (short)1317;
      doubleArray0[4] = (double) (-157);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 100.0, (int) (short)1317, (-1422.129275055));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-1422.129275055), (-2774.228740006262), 1317.0, (-157.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = 'w';
      charArray0[2] = 'a';
      charArray0[3] = ';';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'a');
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'!', 'w', 'a', ';'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short)1925;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0, (-2146613938), (-2146613938));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 37, (int) (short)1925);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      int int0 = ArrayUtils.indexOf(charArray0, 'i');
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'i', 'i'}, charArray0);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) 37;
      floatArray0[2] = (float) (-1L);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 37.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 37.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray1, 779);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 779, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)122);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[2] = false;
      booleanArray0[5] = false;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)122;
      doubleArray0[1] = (double) (short)122;
      doubleArray0[2] = (double) (short)122;
      doubleArray0[3] = (double) (short)122;
      doubleArray0[4] = (double) (short)122;
      doubleArray0[5] = (double) (short)122;
      doubleArray0[6] = (double) (short)122;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)122, (-1225));
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {122.0, 122.0, 122.0, 122.0, 122.0, 122.0, 122.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray1, (short)122, (-1225));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals((-1), int0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-20.83F);
      floatArray0[2] = (-1884.9321F);
      floatArray0[4] = (-697.5627F);
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2144021276), (-2144021276));
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-92);
      shortArray0[1] = (short) (-2883);
      shortArray0[2] = (short) (-732);
      shortArray0[3] = (short) (-1486);
      shortArray0[4] = (short)460;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)460, 1526);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-92), (short) (-2883), (short) (-732), (short) (-1486), (short)460, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.shift(intArray0, (int) (short)0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1341), (int) (short) (-92));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 2, 1526);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-3093);
      intArray0[1] = (int) (short) (-3093);
      intArray0[2] = (int) (short) (-3093);
      intArray0[3] = (int) (short) (-3093);
      intArray0[4] = (int) (short) (-3093);
      intArray0[5] = (int) (short) (-3093);
      intArray0[6] = (int) (short) (-3093);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-3093), (-3093), (-3093), (-3093), (-3093), (-3093), (-3093)}, intArray0);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[6];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(6, characterArray0.length);
      assertEquals(6, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'L';
      floatArray0[1] = (float) (-3093);
      ArrayUtils.swap(floatArray0, (-3093), 253, (-1573));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {76.0F, (-3093.0F), 0.0F}, floatArray0, 0.01F);
      
      Character character0 = Character.valueOf('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) character0, (-3093));
      assertEquals(6, characterArray0.length);
      assertEquals((-1), int0);
      assertSame(characterArray0, characterArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (int) (byte)110);
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1136);
      assertNotNull(double0);
      assertEquals(1136.0, (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      Double double1 = new Double((byte)0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      Double double2 = new Double((-596.07331934));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-596.07331934), (double)double2, 0.01);
      
      doubleArray0[3] = double2;
      doubleArray0[4] = doubleArray0[1];
      Double double3 = new Double(31.307640395758675);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(31.307640395758675, (double)double3, 0.01);
      
      doubleArray0[5] = double3;
      doubleArray0[6] = doubleArray0[2];
      Double double4 = new Double((-363.492272074944));
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((-363.492272074944), (double)double4, 0.01);
      
      doubleArray0[7] = double4;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, 9);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 9;
      longArray0[1] = (long) (byte)110;
      longArray0[2] = (long) (byte)110;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) 9;
      longArray0[5] = (-585L);
      longArray0[6] = (long) (byte)110;
      longArray0[7] = (long) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-585L), (int) (byte)0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {9L, 110L, 110L, 0L, 9L, (-585L), 110L, 0L}, longArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)110;
      shortArray0[1] = (short) (byte)110;
      shortArray0[2] = (short)52;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)2732;
      shortArray0[5] = (short)1066;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2732);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)110, (short)110, (short)52, (short)0, (short)1066}, shortArray1);
      assertArrayEquals(new short[] {(short)110, (short)110, (short)52, (short)0, (short)2732, (short)1066}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1136);
      assertNotNull(double0);
      assertEquals(1136.0, (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      Double double1 = new Double((byte)0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      Double double2 = new Double((-596.07331934));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-596.07331934), (double)double2, 0.01);
      
      doubleArray0[3] = double2;
      doubleArray0[4] = doubleArray0[1];
      Double double3 = new Double(31.307640395758675);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(31.307640395758675, (double)double3, 0.01);
      
      doubleArray0[5] = double3;
      doubleArray0[6] = doubleArray0[2];
      Double double4 = new Double((-363.492272074944));
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((-363.492272074944), (double)double4, 0.01);
      
      doubleArray0[7] = double4;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, 9);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 9;
      longArray0[1] = (long) (byte)110;
      longArray0[2] = (long) (byte)110;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) 9;
      longArray0[5] = (-585L);
      longArray0[6] = (long) (byte)110;
      longArray0[7] = (long) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-585L), (int) (byte)0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {9L, 110L, 110L, 0L, 9L, (-585L), 110L, 0L}, longArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short) (byte)110;
      shortArray0[2] = (short)52;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)2732;
      shortArray0[5] = (short)1066;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2732);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)110, (short)52, (short)0, (short)2732, (short)1066}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)110, (short)52, (short)0, (short)1066}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-917);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-62);
      ArrayUtils.shift(byteArray0, (int) (byte) (-26), 2525, 2);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-62), (byte) (-26), (byte)7}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte) (-26);
      ArrayUtils.swap(longArray0, (int) (byte) (-26), 308, 2145223138);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-26L)}, longArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray1);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte)7);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-917), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-917), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)7}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)10);
      assertNotNull(bitSet0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-62), (byte) (-26), (byte)7}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)114;
      shortArray0[1] = (short)2957;
      shortArray0[2] = (short) (-2225);
      shortArray0[3] = (short) (-1572);
      shortArray0[4] = (short) (-1061);
      shortArray0[5] = (short)114;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)113);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)114, (short)2957, (short) (-2225), (short) (-1572), (short) (-1061), (short)114}, shortArray0);
      assertArrayEquals(new short[] {(short)114, (short)2957, (short) (-2225), (short) (-1572), (short) (-1061), (short)114, (short)113}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Character character0 = new Character('k');
      assertNotNull(character0);
      assertEquals('k', (char)character0);
      
      Character character1 = Character.valueOf('*');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('*', (char)character1);
      
      Character character2 = Character.valueOf('k');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('k', (char)character2);
      
      Boolean boolean0 = Boolean.valueOf("S");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'k';
      intArray0[1] = (int) (short)932;
      intArray0[2] = (int) 'k';
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {107, 932, 107, 0}, intArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 932;
      longArray0[1] = (long) 107;
      longArray0[2] = (-1994091957L);
      longArray0[3] = (long) '*';
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1354), (int) (byte)0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {932L, 107L, (-1994091957L), 42L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean boolean3 = ArrayUtils.contains((char[]) null, '\'');
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-34));
      assertNotNull(byte0);
      assertEquals((byte) (-34), (byte)byte0);
      
      Byte byte1 = new Byte((byte)107);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)107, (byte)byte1);
      
      Byte byte2 = new Byte((byte)11);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)11, (byte)byte2);
      
      byte byte3 = (byte) (-79);
      Byte byte4 = new Byte((byte) (-79));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertEquals((byte) (-79), (byte)byte4);
      
      byte byte5 = (byte)44;
      Byte byte6 = Byte.valueOf((byte)44);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertEquals((byte)44, (byte)byte6);
      
      byte byte7 = (byte) (-42);
      Byte byte8 = Byte.valueOf((byte) (-42));
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte4));
      assertEquals((byte) (-42), (byte)byte8);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte4;
      byteArray0[1] = byte2;
      byteArray0[2] = byte1;
      byteArray0[3] = byte8;
      byteArray0[4] = byte6;
      byteArray0[5] = byte6;
      byteArray0[6] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)11, (byte)107, (byte) (-42), (byte)44, (byte)44, (byte)44}, byteArray1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 1411);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2709, (int) byte5);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(byte5 == byte7);
      assertFalse(byte5 == byte3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) byte3;
      longArray0[1] = (long) (byte) (-79);
      longArray0[2] = (long) byte5;
      longArray0[3] = (long) (byte)11;
      longArray0[4] = (long) byte5;
      longArray0[5] = (-1994091957L);
      longArray0[6] = (long) byte7;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) byte3, (int) byte5);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {(-79L), (-79L), 44L, 11L, 44L, (-1994091957L), (-42L)}, longArray0);
      assertArrayEquals(new long[] {(-79L), (-79L), 44L, 11L, 44L, (-1994091957L), (-42L)}, longArray1);
      assertFalse(byte3 == byte7);
      assertFalse(byte3 == byte5);
      assertFalse(byte5 == byte7);
      assertFalse(byte5 == byte3);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = 'F';
      charArray0[2] = '*';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'B');
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'*', 'F', '*'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Double double0 = new Double(226.01F);
      assertNotNull(double0);
      assertEquals(226.00999450683594, (double)double0, 0.01);
      
      Double[] doubleArray0 = null;
      Double[] doubleArray1 = ArrayUtils.removeElement((Double[]) null, (Object) double0);
      assertNull(doubleArray1);
      
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 226.01F;
      doubleArray2[1] = (double) ')';
      doubleArray2[2] = 469.5687;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, 267.0, (-4086), 78.0);
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {226.00999450683594, 41.0, 469.5687}, doubleArray2, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1711);
      longArray0[1] = (long) (-1711);
      longArray0[2] = (long) (-1711);
      longArray0[3] = (long) ')';
      longArray0[4] = 1155L;
      longArray0[5] = (long) ')';
      ArrayUtils.swap(longArray0, 1, 871);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1711L), (-1711L), (-1711L), 41L, 1155L, 41L}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) ')';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {41.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-1711));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1711, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-271);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short) (-271)}, shortArray0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      String[] stringArray0 = ArrayUtils.insert((int) 0, (String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) (short) (-271));
      assertNotNull(float0);
      assertEquals((-271.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(3629.85);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3629.85F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-271.0F), 3629.85F}, floatArray1, 0.01F);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-78), (-1549));
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-78);
      longArray0[1] = (long) (byte) (-78);
      longArray0[2] = (long) (byte) (-78);
      longArray0[3] = (long) (byte) (-78);
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (long) (byte) (-123);
      longArray0[6] = (long) (-1549);
      longArray0[7] = (long) (byte) (-1);
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-3639L), (int) (byte) (-123));
      assertNotNull(bitSet1);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-78L), (-78L), (-78L), (-78L), (-1L), (-123L), (-1549L), (-1L)}, longArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-78L);
      objectArray0[2] = (Object) (-1549L);
      objectArray0[3] = (Object) (-78L);
      Short short0 = new Short((short)2941);
      assertNotNull(short0);
      assertEquals((short)2941, (short)short0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-78L);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-78.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 55, 59, 55);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 0.0;
      Double double0 = new Double((byte) (-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray1[1] = double0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) 0.0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int)  (-1), doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)122, (int) (short)122, (double) (short)122);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[13];
      intArray0[0] = (int) (short)122;
      intArray0[1] = 7;
      intArray0[2] = (int) (short)122;
      intArray0[3] = 7;
      intArray0[4] = (int) (short)122;
      intArray0[5] = (-1);
      intArray0[6] = 7;
      intArray0[7] = (int) (short)122;
      ArrayUtils.shift(intArray0, (-703), (int) (short)122, (-1204));
      assertEquals(13, intArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-703), 122);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertArrayEquals(new byte[] {(byte)61}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 122);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(byteArray0, 408, 0, 128);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 124.07763390000002);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      boolean[] booleanArray1 = new boolean[3];
      booleanArray1[0] = boolean0;
      booleanArray1[1] = (boolean) boolean2;
      booleanArray1[2] = boolean0;
      int int1 = ArrayUtils.indexOf(booleanArray1, boolean0, 7);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = ArrayUtils.insert((-1), (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 99;
      long[] longArray0 = new long[3];
      longArray0[0] = (-2097L);
      longArray0[1] = (long) 99;
      longArray0[2] = (long) 99;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      Double[] doubleArray0 = ArrayUtils.subarray((Double[]) null, 2, 43);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-121);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-121)}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      
      mutableInt0.add(1072);
      assertEquals(1072L, mutableInt0.longValue());
      assertEquals(1072.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1072, (int)mutableInt0.getValue());
      assertEquals("1072", mutableInt0.toString());
      assertEquals(1072, (int)mutableInt0.toInteger());
      assertEquals((byte)48, mutableInt0.byteValue());
      assertEquals(1072, mutableInt0.intValue());
      assertEquals((short)1072, mutableInt0.shortValue());
      assertEquals(1072.0F, mutableInt0.floatValue(), 0.01F);
      
      int int0 = mutableInt0.addAndGet(1072);
      assertEquals(2144, int0);
      assertEquals(2144L, mutableInt0.longValue());
      assertEquals(2144.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2144, (int)mutableInt0.getValue());
      assertEquals(2144, (int)mutableInt0.toInteger());
      assertEquals((byte)96, mutableInt0.byteValue());
      assertEquals(2144, mutableInt0.intValue());
      assertEquals((short)2144, mutableInt0.shortValue());
      assertEquals(2144.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("2144", mutableInt0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      mutableInt0.subtract(0);
      assertEquals(2144L, mutableInt0.longValue());
      assertEquals(2144.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2144, (int)mutableInt0.getValue());
      assertEquals(2144, (int)mutableInt0.toInteger());
      assertEquals((byte)96, mutableInt0.byteValue());
      assertEquals(2144, mutableInt0.intValue());
      assertEquals((short)2144, mutableInt0.shortValue());
      assertEquals(2144.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("2144", mutableInt0.toString());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "The Array must not be null";
      stringArray0[1] = ":{PJUU";
      stringArray0[2] = ":{PJUU";
      stringArray0[3] = "\"";
      stringArray0[4] = ":{PJUU";
      stringArray0[6] = "L@7pJ";
      stringArray0[7] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[8] = "The Array must not be null";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 0, 0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-56);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-127), (byte) (-29), (byte)117, (byte) (-56)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-127), (byte) (-29), (byte)117, (byte) (-56)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-125);
      doubleArray0[1] = (double) (byte) (-125);
      doubleArray0[2] = (double) (byte) (-56);
      doubleArray0[3] = (double) (byte)117;
      doubleArray0[4] = (double) (byte) (-56);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 811.3015964489257);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-125.0), (-125.0), (-56.0), 117.0, (-56.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {811.3015964489257, (-125.0), (-125.0), (-56.0), 117.0, (-56.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-127);
      longArray0[1] = (long) (byte) (-29);
      longArray0[2] = (long) (byte) (-29);
      long[] longArray1 = ArrayUtils.add(longArray0, (-9L));
      assertNotNull(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-127L), (-29L), (-29L), (-9L)}, longArray1);
      assertArrayEquals(new long[] {(-127L), (-29L), (-29L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = ":{PJUU";
      stringArray0[2] = "\"";
      stringArray0[3] = "The Array must not be null";
      stringArray0[4] = "org.apache.commons.lang3.mutable.MutableInt";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (int)  (-56), (int)  (-56));
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      ArrayUtils.swap(intArray0, 0, 0, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      
      Long long0 = new Long((-2168L));
      assertNotNull(long0);
      assertEquals((-2168L), (long)long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[2] = long0;
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((byte) (-39));
      assertNotNull(double0);
      assertEquals((-39.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2168L));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-2168.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(50.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(50.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(2);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals(2.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-1422.129275055));
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((-1422.129275055), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-1.0));
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((-1.0), (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 2);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-39.0), 0.0, (-2168.0), 50.0, 2.0, (-1422.129275055), (-1.0)}, doubleArray1, 0.01);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {0, 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0, "~c2r=}");
      assertNotNull(stringArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-883);
      intArray0[1] = 761;
      intArray0[2] = 59;
      intArray0[3] = (-905);
      intArray0[4] = 2142350139;
      intArray0[5] = (-3865);
      intArray0[6] = 1229;
      intArray0[7] = (-2074);
      intArray0[8] = (-2145929751);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-2074));
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {(-883), 761, 59, (-905), 2142350139, (-3865), 1229, (-2074), (-2145929751)}, intArray0);
      assertArrayEquals(new int[] {(-2074), (-883), 761, 59, (-905), 2142350139, (-3865), 1229, (-2074), (-2145929751)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 59;
      doubleArray0[1] = (double) 761;
      doubleArray0[2] = (double) (-883);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 2142350139, (double) (-905));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {59.0, 761.0, (-883.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-3865);
      floatArray0[1] = (float) 761;
      floatArray0[2] = (float) 1229;
      int int0 = ArrayUtils.indexOf(floatArray0, 889.0F, 1229);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-3865.0F), 761.0F, 1229.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = 'B';
      charArray0[2] = '~';
      charArray0[3] = '*';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '~');
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'x', 'B', '~', '*'}, charArray0);
      assertArrayEquals(new char[] {'x', 'B', '*'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (-3527L);
      longArray0[2] = (-1076L);
      longArray0[3] = (-1L);
      longArray0[4] = (-1720L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1076L);
      doubleArray0[1] = (double) (-1720L);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1076.0), (-1720.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      short[] shortArray0 = new short[4];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)7, 248);
      assertNotNull(bitSet0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-49);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)7;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (byte)98;
      doubleArray0[3] = (double) (byte)63;
      doubleArray0[4] = (double) (byte)67;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (byte) (-49);
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {7.0, 0.0, 98.0, 63.0, 67.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-49.0)}, doubleArray1, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1703.239F);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-1703.239F);
      Double double0 = new Double((-1703.239F));
      assertNotNull(double0);
      assertEquals((-1703.239013671875), (double)double0, 0.01);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) 635, 635);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-20.83F);
      floatArray0[2] = (-1884.137F);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1884.137F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (-1.0);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1884.136962890625), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      ArrayUtils.swap(doubleArray0, 2, 2);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1884.136962890625), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2482.94083, 2);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1884.136962890625), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)254;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-613);
      shortArray0[3] = (short)3573;
      shortArray0[4] = (short)122;
      shortArray0[5] = (short)1187;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-3123));
      assertNotNull(bitSet0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)254, (short)0, (short) (-613), (short)3573, (short)122, (short)1187}, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1258);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1053);
      shortArray0[1] = (short)26713;
      shortArray0[2] = (short)26713;
      shortArray0[3] = (short)26713;
      shortArray0[4] = (short)26713;
      shortArray0[5] = (short)26713;
      ArrayUtils.shift(shortArray0, 2, 1045, (-1258));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1053), (short)26713, (short)26713, (short)26713, (short)26713, (short)26713}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1053);
      doubleArray0[1] = (double) (short)26713;
      doubleArray0[2] = (double) (short)26713;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 26713.0, (int) (short)26713, 544.965857);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1053.0), 26713.0, 26713.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-78);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)104;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)121);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)35, (byte)7, (byte) (-78), (byte)0, (byte)7, (byte)75, (byte)104}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1258);
      intArray0[1] = (-1);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1053);
      shortArray0[1] = (short)26713;
      shortArray0[2] = (short)26713;
      shortArray0[3] = (short)26713;
      shortArray0[4] = (short)26713;
      shortArray0[5] = (short)26713;
      ArrayUtils.shift(shortArray0, 2, 1045, (-1258));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1053), (short)26713, (short)26713, (short)26713, (short)26713, (short)26713}, shortArray0);
      
      Long long0 = new Long((short)26713);
      assertNotNull(long0);
      assertEquals(26713L, (long)long0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1053);
      doubleArray0[1] = (double) (short)26713;
      doubleArray0[2] = (double) (short)26713;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 26713.0, (int) (short)26713, 544.965857);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1053.0), 26713.0, 26713.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)104;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)121);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)35, (byte)36, (byte) (-78), (byte) (-92), (byte)7, (byte)75, (byte)104}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 6639);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3929);
      shortArray0[1] = (short) (-3929);
      shortArray0[2] = (short) (-3929);
      shortArray0[3] = (short) (-3929);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((double) (short) (-3929));
      assertNotNull(float0);
      assertEquals((-3929.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1068.6001F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1068.6001F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) (short) (-3929));
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-3929.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[2]);
      assertNotNull(float3);
      assertEquals(4, floatArray0.length);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((-3929.0F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-34));
      assertNotNull(byte0);
      assertEquals((byte) (-34), (byte)byte0);
      
      Byte byte1 = new Byte((byte)107);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)107, (byte)byte1);
      
      Byte byte2 = new Byte((byte)11);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)11, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-79));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-79), (byte)byte3);
      
      byte byte4 = (byte)44;
      Byte byte5 = Byte.valueOf((byte)44);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertEquals((byte)44, (byte)byte5);
      
      Byte byte6 = Byte.valueOf((byte) (-42));
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertEquals((byte) (-42), (byte)byte6);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte3;
      byteArray0[1] = byte2;
      byteArray0[2] = byte1;
      byteArray0[3] = byte6;
      byteArray0[4] = byte5;
      byteArray0[5] = byte5;
      byteArray0[6] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)11, (byte)107, (byte) (-42), (byte)44, (byte)44, (byte)44}, byteArray1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 1411);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2709, (int) byte4);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 4.0;
      doubleArray0[3] = (-2.0);
      doubleArray0[4] = 1.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2059.24042898573);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, 4.0, (-2.0), 1.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 53L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1379);
      shortArray0[1] = (short) (-2124);
      shortArray0[2] = (short) (-2951);
      shortArray0[3] = (short)68;
      shortArray0[4] = (short)59;
      shortArray0[5] = (short)3842;
      shortArray0[6] = (short) (-1041);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), 469);
      assertNotNull(bitSet0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1379), (short) (-2124), (short) (-2951), (short)68, (short)59, (short)3842, (short) (-1041)}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = 1641L;
      longArray0[2] = (-2293L);
      longArray0[3] = 1636L;
      longArray0[4] = 382L;
      longArray0[5] = 631L;
      ArrayUtils.swap(longArray0, 120, (-798));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {1L, 1641L, (-2293L), 1636L, 382L, 631L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-2293L));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 382L;
      floatArray0[1] = 616.0F;
      floatArray0[2] = (float) 1641L;
      floatArray0[3] = (-93.14F);
      floatArray0[4] = (float) 120;
      floatArray0[5] = (float) (-798);
      floatArray0[6] = (float) 382L;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1742.2653F);
      floatArray1[1] = (float) 120;
      floatArray1[2] = 616.0F;
      floatArray1[3] = (float) 1636L;
      floatArray1[4] = (float) 1L;
      floatArray1[5] = (float) 631L;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1742.2653F), 120.0F, 616.0F, 1636.0F, 1.0F, 631.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {382.0F, 616.0F, 1641.0F, (-93.14F), 120.0F, (-798.0F), 382.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1379), (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-1379);
      longArray0[2] = (long) (short) (-1379);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1379L), (-1379L), 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short)0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)72;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-52), (byte) (-94), (byte)100, (byte)72}, byteArray0);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-52), (byte) (-94), (byte)100, (byte)72}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-82)}, byteArray0);
      assertTrue(boolean0);
      
      Long long0 = new Long(3298L);
      assertNotNull(long0);
      assertEquals(3298L, (long)long0);
      
      Long long1 = new Long(1952L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1952L, (long)long1);
      
      Long long2 = new Long(3287);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(3287L, (long)long2);
      
      Long long3 = new Long((-1605L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-1605L), (long)long3);
      
      Long[] longArray0 = ArrayUtils.clone((Long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.shift(byteArray0, 970, 3287, 248);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-82)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 3287;
      longArray1[1] = 3298L;
      longArray1[2] = (-1605L);
      longArray1[3] = (long) 248;
      longArray1[4] = (long) 248;
      longArray1[5] = (long) 248;
      longArray1[6] = (long) (byte) (-82);
      longArray1[7] = (long) 248;
      longArray1[8] = (long) 3287;
      ArrayUtils.shift(longArray1, 3287, 3287, 3287);
      assertEquals(9, longArray1.length);
      assertArrayEquals(new long[] {3287L, 3298L, (-1605L), 248L, 248L, 248L, (-82L), 248L, 3287L}, longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)44, 970);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 248L, (int) (byte)44, 246.062278149);
      assertNotNull(bitSet1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 99;
      intArray0[1] = (-1929);
      intArray0[2] = (-1379);
      intArray0[3] = (-174);
      intArray0[4] = (-1);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {99, (-1929), (-1379), (-174), (-1)}, intArray0);
      assertArrayEquals(new int[] {99, (-1929), (-1379), (-174), (-1)}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, 99);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {99, (-1929), (-1379), (-174), (-1)}, intArray0);
      assertEquals(0, int0);
      assertSame(intArray0, intArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short)2674;
      shortArray0[2] = (short)1411;
      shortArray0[3] = (short)1509;
      shortArray0[4] = (short)99;
      shortArray0[5] = (short)96;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)96);
      assertNotNull(bitSet0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)32, (short)2674, (short)1411, (short)1509, (short)99, (short)96}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Long long0 = new Long((-99L));
      assertNotNull(long0);
      assertEquals((-99L), (long)long0);
      
      long long1 = (-1L);
      Long long2 = new Long((-1L));
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-1L), (long)long2);
      
      Long long3 = Long.getLong("org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl", long2);
      assertNotNull(long3);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertEquals((-1L), (long)long3);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long3;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long2;
      Long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Double double0 = new Double((-1L));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Long long4 = new Long(long1);
      assertNotNull(long4);
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertEquals((-1L), (long)long4);
      
      String string0 = ArrayUtils.toString((Object) "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl", "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = 'o';
      charArray0[2] = 'T';
      charArray0[3] = '\\';
      charArray0[4] = ':';
      charArray0[5] = '5';
      charArray0[6] = 'q';
      charArray0[7] = 'e';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'0', 'o', 'T', '\\', ':', '5', 'q', 'e'}, charArray0);
      assertTrue(boolean0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(longArray1);
      assertNotNull(map0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (int) (short) (-3093);
      ArrayUtils.swap((short[]) null, (-2564), 12, (-1711));
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-80));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) (byte)0, (-2564));
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'Z');
      assertFalse(boolean0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 3365, 3365);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, (-3093), 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Short[] shortArray1 = ArrayUtils.removeElement((Short[]) null, (Object) boolean1);
      assertNull(shortArray1);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1380;
      longArray0[1] = (long) (short)351;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1994091957);
      intArray0[1] = 1380;
      intArray0[2] = 1380;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1093, 1380);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-1994091957), 1380, 1380}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 53, (-1994091957));
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float[] floatArray0 = new float[7];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4086);
      shortArray0[1] = (short)2;
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short)2);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-4086), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4086), (short)2, (short) (-4086), (short)2}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)3;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)20, (byte)68, (byte) (-89), (byte)3}, byteArray1);
      assertArrayEquals(new byte[] {(byte)20, (byte)0, (byte)68, (byte) (-89), (byte)3}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray2 = new short[7];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (byte) (-89);
      shortArray2[1] = (short) (byte) (-89);
      shortArray2[2] = (short)2;
      shortArray2[3] = (short) (byte)68;
      shortArray2[4] = (short)2;
      shortArray2[5] = (short) (byte) (-89);
      shortArray2[6] = (short)2;
      short[] shortArray3 = ArrayUtils.addAll(shortArray2, shortArray1);
      assertNotNull(shortArray3);
      assertEquals(7, shortArray2.length);
      assertEquals(2, shortArray0.length);
      assertEquals(11, shortArray3.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-89), (short) (-89), (short)2, (short)68, (short)2, (short) (-89), (short)2}, shortArray2);
      assertArrayEquals(new short[] {(short) (-4086), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4086), (short)2, (short) (-4086), (short)2}, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.shift((Object[]) floatArray1, 1, (int) (short)2, 4);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "org.apache.commons.lang3.builder.ToStringStyle");
      assertNotNull(stringArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float[] floatArray0 = new float[7];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4086);
      shortArray0[1] = (short)2;
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short)2);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-4086), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4086), (short)2, (short) (-4086), (short)2}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)3;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)20, (byte)68, (byte) (-89), (byte)3}, byteArray1);
      assertArrayEquals(new byte[] {(byte)20, (byte) (-52), (byte)68, (byte) (-89), (byte)3}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray2 = new short[7];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short) (byte) (-89);
      shortArray2[1] = (short) (byte) (-89);
      shortArray2[2] = (short)2;
      shortArray2[3] = (short) (byte)68;
      shortArray2[4] = (short)2;
      shortArray2[5] = (short) (byte) (-89);
      shortArray2[6] = (short)2;
      short[] shortArray3 = ArrayUtils.addAll(shortArray2, shortArray1);
      assertNotNull(shortArray3);
      assertEquals(7, shortArray2.length);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(11, shortArray3.length);
      assertArrayEquals(new short[] {(short) (-89), (short) (-89), (short)2, (short)68, (short)2, (short) (-89), (short)2}, shortArray2);
      assertArrayEquals(new short[] {(short) (-4086), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4086), (short)2, (short) (-4086), (short)2}, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.shift((Object[]) floatArray1, 1, (int) (short)2, 4);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "org.apache.commons.lang3.builder.ToStringStyle");
      assertNotNull(stringArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float[] floatArray0 = new float[7];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4086);
      shortArray0[1] = (short)2;
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short)2);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-4086), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4086), (short)2, (short) (-4086), (short)2}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)3;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)20, (byte)68, (byte) (-89), (byte)3}, byteArray1);
      assertArrayEquals(new byte[] {(byte)20, (byte)0, (byte)68, (byte) (-89), (byte)3}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray2 = new short[7];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (byte) (-89);
      shortArray2[1] = (short) (byte) (-89);
      shortArray2[2] = (short)2;
      shortArray2[3] = (short) (byte)68;
      shortArray2[4] = (short)2;
      shortArray2[5] = (short) (byte) (-89);
      shortArray2[6] = (short)2;
      short[] shortArray3 = ArrayUtils.addAll(shortArray2, shortArray1);
      assertNotNull(shortArray3);
      assertEquals(7, shortArray2.length);
      assertEquals(2, shortArray0.length);
      assertEquals(11, shortArray3.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-89), (short) (-89), (short)2, (short)68, (short)2, (short) (-89), (short)2}, shortArray2);
      assertArrayEquals(new short[] {(short) (-4086), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4086), (short)2, (short) (-4086), (short)2}, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray3);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.shift((Object[]) floatArray1, 1, (int) (short)2, 4);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-63);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)0;
      Float float0 = new Float((-1779.357328863));
      assertNotNull(float0);
      assertEquals((-1779.3573F), (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1779.357328863);
      doubleArray0[1] = (double) (byte) (-61);
      doubleArray0[2] = (double) (byte)2;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte) (-63));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1779.357328863), (-61.0), 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-63.0), (-1779.357328863), (-61.0), 2.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)2;
      longArray0[1] = 2841L;
      longArray0[2] = (long) (byte) (-63);
      longArray0[3] = (long) (byte) (-9);
      longArray0[4] = (long) (byte) (-61);
      longArray0[5] = (long) (byte)0;
      ArrayUtils.reverse(longArray0, (int) (byte)0, 4551);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, (-61L), (-9L), (-63L), 2841L, 2L}, longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 4551;
      intArray0[1] = 4551;
      intArray0[2] = (int) (byte) (-63);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte) (-9);
      intArray0[6] = 4551;
      intArray0[7] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) float0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-63);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)0;
      Float float0 = new Float((-1779.357328863));
      assertNotNull(float0);
      assertEquals((-1779.3573F), (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1779.357328863);
      doubleArray0[1] = (double) (byte) (-61);
      doubleArray0[2] = (double) (byte)2;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte) (-63));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1779.357328863), (-61.0), 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-63.0), (-1779.357328863), (-61.0), 2.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)0, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Double double0 = new Double(280.74576194084943);
      assertNotNull(double0);
      assertEquals(280.74576194084943, (double)double0, 0.01);
      
      Double double1 = new Double(280.74576194084943);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(280.74576194084943, (double)double1, 0.01);
      
      Double double2 = new Double(969.66681);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(969.66681, (double)double2, 0.01);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1069));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      
      ArrayUtils.shift(booleanArray0, 1, 1, (-157));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)889;
      shortArray0[2] = (short)25022;
      shortArray0[3] = (short)1317;
      shortArray0[4] = (short)889;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)889, (short)25022, (short)1317, (short)889, (short)0}, shortArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'n';
      charArray0[2] = 'y';
      charArray0[3] = 'B';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'P', 'n', 'y', 'B', 'P', 'n', 'y', 'B'}, charArray1);
      assertArrayEquals(new char[] {'P', 'n', 'y', 'B'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'n';
      floatArray0[1] = (float) 'P';
      floatArray0[2] = (float) (short)25022;
      floatArray0[3] = (float) 'P';
      floatArray0[4] = (float) (short)25022;
      floatArray0[5] = (float) (short)889;
      floatArray0[6] = (float) (short)25022;
      floatArray0[7] = (float) 'P';
      floatArray0[8] = (float) 'y';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (short)25022);
      assertNotNull(bitSet0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {110.0F, 80.0F, 25022.0F, 80.0F, 25022.0F, 889.0F, 25022.0F, 80.0F, 121.0F}, floatArray0, 0.01F);
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals("{2, 4, 6}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2116.78362703819);
      ArrayUtils.swap(doubleArray0, (-1098), (-2294), (-2146338544));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2116.78362703819)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-3);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)119);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-21), (byte)90, (byte)84, (byte) (-3)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-21), (byte)90, (byte)84, (byte) (-3)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((short[]) null, (int) (byte)119, (int) (byte) (-21), (-2145182452));
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)84;
      longArray0[1] = (long) (byte)90;
      longArray0[2] = (long) (-1098);
      longArray0[3] = (long) (-2145182452);
      longArray0[4] = (long) (byte) (-21);
      longArray0[5] = (long) (-2294);
      longArray0[6] = (long) (byte)84;
      longArray0[7] = (-3639L);
      longArray0[8] = (long) (byte)90;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {84L, 90L, (-1098L), (-2145182452L), (-21L), (-2294L), 84L, (-3639L), 90L}, longArray1);
      assertArrayEquals(new long[] {84L, 90L, (-1098L), (-2145182452L), (-21L), (-2294L), 84L, (-3639L), 90L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-3);
      intArray0[1] = (int) (byte)119;
      intArray0[2] = (int) (byte) (-21);
      intArray0[3] = (int) (byte)84;
      intArray0[4] = (-2145182452);
      intArray0[5] = (int) (byte)119;
      intArray0[6] = (int) (byte) (-21);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, 1348);
      assertNotNull(bitSet0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-3), 119, (-21), 84, (-2145182452), 119, (-21)}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+S4Y");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      Short[] shortArray0 = new Short[0];
      int[] intArray0 = new int[5];
      int int0 = 41;
      intArray0[0] = 41;
      intArray0[1] = 0;
      intArray0[2] = 2147;
      int int1 = 85;
      intArray0[3] = 85;
      intArray0[4] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)122);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[2] = false;
      booleanArray0[5] = false;
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean2);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-991.2034911500001);
      doubleArray0[1] = (double) (short)122;
      doubleArray0[2] = (double) (short)122;
      doubleArray0[3] = (double) (short)122;
      doubleArray0[4] = (double) (short)122;
      doubleArray0[5] = (double) (short)122;
      doubleArray0[6] = 100.0;
      doubleArray0[7] = (double) (short)122;
      doubleArray0[8] = (double) (short)122;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 41.0, (int) (short)122, (-991.2034911500001));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-991.2034911500001), 122.0, 122.0, 122.0, 122.0, 122.0, 100.0, 122.0, 122.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)122;
      intArray0[1] = (int) (short)122;
      intArray0[2] = (-1);
      intArray0[3] = (int) (short)122;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = (int) (short)122;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false, true, false, false}, booleanArray0));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 120;
      ArrayUtils.swap(intArray0, 120, (-1647), 1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {120}, intArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-82)}, byteArray0);
      assertTrue(boolean0);
      
      Long long0 = new Long(3298L);
      assertNotNull(long0);
      assertEquals(3298L, (long)long0);
      
      Long long1 = new Long(1952L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1952L, (long)long1);
      
      Long long2 = new Long(3287);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(3287L, (long)long2);
      
      Long long3 = new Long((-1605L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertEquals((-1605L), (long)long3);
      
      Long[] longArray0 = ArrayUtils.clone((Long[]) null);
      assertNull(longArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-82)}, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-82)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      
      ArrayUtils.shift(byteArray0, 970, 3287, 248);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-82)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
      
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 3287;
      longArray1[1] = 3298L;
      longArray1[2] = (-1605L);
      longArray1[3] = (long) 248;
      longArray1[4] = (long) 248;
      longArray1[5] = (long) 248;
      longArray1[6] = (long) (byte) (-82);
      longArray1[7] = (long) 248;
      longArray1[8] = (long) 3287;
      ArrayUtils.shift(longArray1, 3287, 3287, 3287);
      assertEquals(9, longArray1.length);
      assertArrayEquals(new long[] {3287L, 3298L, (-1605L), 248L, 248L, 248L, (-82L), 248L, 3287L}, longArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 404.6928F;
      floatArray0[1] = (float) (-1605L);
      floatArray0[2] = (float) 248L;
      floatArray0[3] = (float) 248L;
      floatArray0[4] = (float) 3287;
      floatArray0[5] = (float) (-1605L);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {404.6928F, (-1605.0F), 248.0F, 248.0F, 3287.0F, (-1605.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {404.6928F, (-1605.0F), 248.0F, 248.0F, 3287.0F, (-1605.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-84.0);
      doubleArray1[1] = 2926.95494192386;
      doubleArray1[2] = 1.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 552.4962, (-2456), (-84.0));
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-84.0), 2926.95494192386, 1.0}, doubleArray1, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-2456);
      floatArray0[1] = (float) (-2456);
      floatArray0[2] = (float) (-2456);
      floatArray0[3] = (float) (-2456);
      floatArray0[4] = (float) (-2456);
      floatArray0[5] = (float) (-2456);
      floatArray0[6] = 448.46387F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1403.953F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-2456.0F), (-2456.0F), (-2456.0F), (-2456.0F), (-2456.0F), (-2456.0F), 448.46387F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2456.0F), (-2456.0F), (-2456.0F), (-2456.0F), (-2456.0F), (-2456.0F), 448.46387F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short)160;
      shortArray0[2] = (short) (-4189);
      shortArray0[3] = (short)550;
      shortArray0[4] = (short) (-79);
      shortArray0[5] = (short) (-4364);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)550, 114);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)9, (short)160, (short) (-4189), (short)550, (short) (-79), (short) (-4364)}, shortArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      Character character1 = Character.valueOf('4');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('4', (char)character1);
      
      Character character2 = new Character('o');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertEquals('o', (char)character2);
      
      Boolean boolean0 = Boolean.valueOf("PH-3m");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'o';
      intArray0[1] = (int) (short)932;
      intArray0[2] = (int) 'o';
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {111, 932, 111, 0}, intArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3);
      shortArray0[1] = (short)932;
      shortArray0[2] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3), (short)932, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      Character character1 = Character.valueOf('4');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('4', (char)character1);
      
      Character character2 = new Character('o');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('o', (char)character2);
      
      Boolean boolean1 = Boolean.valueOf("PH-3m");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-3);
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-3.0F)}, floatArray0, 0.01F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'o';
      intArray0[1] = (int) (short)932;
      intArray0[2] = (int) 'o';
      intArray0[3] = (int) (short)932;
      boolean boolean3 = ArrayUtils.isEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {111, 932, 111, 932}, intArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[1] = '&';
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray1 = new Byte[5];
      byte byte0 = (byte) (-89);
      Byte byte1 = new Byte((byte) (-89));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-89), (byte)byte1);
      
      byteArray1[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-89), (byte)byte2);
      
      byteArray1[1] = byte2;
      Byte byte3 = new Byte((byte)10);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)10, (byte)byte3);
      
      byteArray1[2] = byte3;
      byteArray1[3] = (Byte) byte0;
      Byte byte4 = new Byte((byte) (-41));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte) (-41), (byte)byte4);
      
      byteArray1[4] = byte4;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals(5, byteArray1.length);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-99), (-1549));
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-99);
      longArray0[1] = (long) (byte) (-99);
      longArray0[2] = (long) (byte) (-99);
      longArray0[3] = (long) (byte) (-99);
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (long) (byte) (-123);
      longArray0[6] = (long) (-1549);
      longArray0[7] = (long) (byte) (-1);
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-3639L), (int) (byte) (-123));
      assertNotNull(bitSet1);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-99L), (-99L), (-99L), (-99L), (-1L), (-123L), (-1549L), (-1L)}, longArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-99L);
      objectArray0[2] = (Object) (-1549L);
      objectArray0[3] = (Object) (-99L);
      Short short0 = new Short((short)2941);
      assertNotNull(short0);
      assertEquals((short)2941, (short)short0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(objectArray0, (Object) short0, (-1773));
      assertNotNull(bitSet2);
      assertEquals(4, objectArray0.length);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-99L);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-99.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 55, 59, 55);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) boolean0, 55);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)87);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)87;
      longArray0[1] = (long) (byte)87;
      longArray0[2] = (long) (byte)87;
      longArray0[3] = (-2147483648L);
      longArray0[4] = (long) (byte)87;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {87L, 87L, 87L, (-2147483648L), 87L}, longArray0);
      assertArrayEquals(new long[] {87L, 87L, 87L, (-2147483648L), 87L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)87;
      intArray0[1] = (int) (byte)87;
      intArray0[2] = (int) (byte)87;
      intArray0[3] = (-699);
      intArray0[4] = (int) (byte)87;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 87);
      assertNotNull(intArray1);
      assertEquals(1, intArray1.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-699)}, intArray1);
      assertArrayEquals(new int[] {87, 87, 87, (-699), 87}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = ';';
      charArray0[2] = '|';
      charArray0[3] = '&';
      charArray0[4] = '4';
      charArray0[5] = '<';
      ArrayUtils.shift(charArray0, 50);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'4', '<', 'a', ';', '|', '&'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)2);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)37;
      shortArray0[6] = (short) (byte)37;
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      ArrayUtils.reverse(booleanArray0, 1072, 1072);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Character character0 = new Character('_');
      assertNotNull(character0);
      assertEquals('_', (char)character0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double(1859.8734130859375);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1859.8734130859375, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1072).when(comparator0).compare(anyDouble() , anyDouble());
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0, comparator0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "RG3@'71Jv";
      stringArray0[1] = "org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle";
      stringArray0[2] = "C{fvOd`CQR";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1072, stringArray0, stringArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1072, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1604);
      shortArray0[1] = (short) (-912);
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)970);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1604), (short) (-912), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1604), (short) (-912), (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)13;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)12);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-108), (byte)12, (byte)13}, byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-108), (byte)13}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short)1925;
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1925;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)1925;
      intArray0[1] = (-1);
      intArray0[2] = (int) (short)1925;
      intArray0[3] = (int) (short)1925;
      intArray0[4] = (int) (short)1925;
      intArray0[5] = (int) (short)1925;
      intArray0[6] = (int) (short)1925;
      intArray0[7] = (int) (short)1925;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1925);
      assertNotNull(bitSet0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1925, (-1), 1925, 1925, 1925, 1925, 1925, 1925}, intArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.cardinality());
      assertEquals("{0, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ZRdB7W1AS(";
      stringArray0[1] = "zW";
      stringArray0[2] = "org.apache.commons.lang3.mutable.MutableInt";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-1);
      objectArray0[1] = (Object) "ZRdB7W1AS(";
      objectArray0[2] = (Object) "org.apache.commons.lang3.mutable.MutableInt";
      objectArray0[3] = (Object) (short)1925;
      objectArray0[4] = (Object) "org.apache.commons.lang3.mutable.MutableInt";
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, (Object) bitSet0);
      assertNotNull(bitSet1);
      assertEquals(5, objectArray0.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1925, (-1), 1925, 1925, 1925, 1925, 1925, 1925}, intArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.cardinality());
      assertEquals("{0, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 3277;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-94)}, byteArray0);
      assertTrue(boolean0);
      
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      Long long2 = new Long(1932L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(1932L, (long)long2);
      
      Long long3 = new Long(3277);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertEquals(3277L, (long)long3);
      
      int int1 = (-53);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-94);
      intArray0[1] = (int) (byte) (-94);
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-94));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -94, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = 643.84F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertNotNull(booleanArray3);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      
      ArrayUtils.shift((char[]) null, 3047);
      int int0 = ArrayUtils.indexOf((char[]) null, '?', (-443));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) (short) (-541);
      doubleArray0[2] = (double) 643.84F;
      ArrayUtils.swap(doubleArray0, 2418, 3047, 1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {9.0, (-541.0), 643.8400268554688}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1136;
      intArray0[1] = 1136;
      intArray0[1] = 1136;
      intArray0[6] = 76;
      intArray0[7] = 7;
      ArrayUtils.shift(intArray0, (-1204), 0, (-401));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1136, 1136, 0, 0, 0, 0, 76, 7}, intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1204);
      doubleArray0[1] = (-4113.111434);
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 76;
      doubleArray0[6] = (double) 1136;
      doubleArray0[7] = (double) 7;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1204.0), (-4113.111434), 7.0, 0.0, (-1.0), 76.0, 1136.0, 7.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      ArrayUtils.swap(doubleArray0, 211, 7);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1204.0), (-4113.111434), 7.0, 0.0, (-1.0), 76.0, 1136.0, 7.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-63), 211, 76);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1380;
      longArray0[1] = (long) (short)351;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1994091957);
      intArray0[1] = 1380;
      intArray0[2] = 1380;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1093, (-53));
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-1994091957), 1380, 1380}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 53, (-1994091957));
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 127;
      intArray0[1] = (-63);
      intArray0[2] = (-147);
      intArray0[3] = (-18);
      intArray0[4] = (-63);
      intArray0[5] = 852;
      intArray0[6] = (-88);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-63));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {127, (-63), (-147), (-18), (-63), 852, (-88)}, intArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-147);
      floatArray0[1] = (float) (-63);
      floatArray0[2] = (float) (-147);
      floatArray0[3] = (float) 127;
      floatArray0[4] = (float) (-63);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1012.16F));
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-147.0F), (-63.0F), (-147.0F), 127.0F, (-63.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1012.16F), (-147.0F), (-63.0F), (-147.0F), 127.0F, (-63.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2534, (-83));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-147);
      longArray0[1] = (long) 2534;
      longArray0[2] = (long) (-88);
      longArray0[3] = (long) (-18);
      longArray0[4] = (long) (-88);
      longArray0[5] = (long) (-63);
      longArray0[6] = (long) (-63);
      longArray0[7] = (long) 852;
      longArray0[8] = (long) (-88);
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (-88));
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertArrayEquals(new long[] {(-147L), 2534L, (-88L), (-18L), (-88L), (-63L), (-63L), 852L, (-88L)}, longArray0);
      assertArrayEquals(new long[] {(-147L), 2534L, (-88L), (-18L), (-88L), (-63L), (-63L), 852L, (-88L), (-88L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) "org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle");
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[5];
      charArray0[4] = 'T';
      charArray0[2] = 'T';
      charArray0[4] = 'T';
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'T', '\u0000', 'T'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'T', '\u0000', 'T'}, charArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 0;
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(616L);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      Object[] objectArray0 = new Object[2];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 616L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 0, 0);
      assertNotNull(bitSet0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 616.0F}, floatArray0, 0.01F);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) doubleStream0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-20.83F);
      floatArray0[2] = (-1884.137F);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1884.137F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (-1.0);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1884.136962890625), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      ArrayUtils.swap(doubleArray0, 2, 2);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1884.136962890625), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = 2110L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L, 2L, 2L, 2110L}, longArray1);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L, 2L, 2L, 2110L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-917);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-330);
      doubleArray0[1] = (double) (short) (-330);
      doubleArray0[2] = (double) (short) (-330);
      doubleArray0[3] = (double) (short) (-917);
      doubleArray0[4] = 342.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 342.0, (-330.0));
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-330.0), (-330.0), (-330.0), (-917.0), 342.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-62);
      ArrayUtils.shift(byteArray0, (int) (byte) (-26), 2525, (int) (short) (-917));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)9, (byte) (-62), (byte)0}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte) (-62);
      ArrayUtils.swap(longArray0, (int) (byte) (-26), 308, 2145223138);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-62L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      int[] intArray0 = new int[4];
      intArray0[0] = 1824;
      intArray0[1] = 1824;
      intArray0[2] = 1824;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1824, 1155);
      assertNotNull(bitSet0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1824, 1824, 1824, 0}, intArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 0L);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      ArrayUtils.shift(floatArray0, 1824, 1824, (-39));
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1824, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1824, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-99), (-1549));
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-99);
      longArray0[1] = (long) (byte) (-99);
      longArray0[2] = (long) (byte) (-99);
      longArray0[3] = (long) (byte) (-99);
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (long) (byte) (-123);
      longArray0[6] = (long) (-1549);
      longArray0[7] = (long) (byte) (-1);
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-3639L), (int) (byte) (-123));
      assertNotNull(bitSet1);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-99L), (-99L), (-99L), (-99L), (-1L), (-123L), (-1549L), (-1L)}, longArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-99L);
      objectArray0[2] = (Object) (-1549L);
      objectArray0[3] = (Object) (-99L);
      Short short0 = new Short((short)2941);
      assertNotNull(short0);
      assertEquals((short)2941, (short)short0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(objectArray0, (Object) short0, (-1773));
      assertNotNull(bitSet2);
      assertEquals(4, objectArray0.length);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertEquals(64, bitSet2.size());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-99L);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-99.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 55, 59, 55);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 32, (int) (short)2941, (-1));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 59, 55, 101);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-917);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-330);
      doubleArray0[1] = (double) (short) (-330);
      doubleArray0[2] = (double) (short) (-330);
      doubleArray0[3] = (double) (short) (-917);
      doubleArray0[4] = 342.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 342.0, (-330.0));
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-330.0), (-330.0), (-330.0), (-917.0), 342.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-62);
      ArrayUtils.shift(byteArray0, (int) (byte) (-26), 2525, 2);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-62), (byte) (-26), (byte)7}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte) (-26);
      ArrayUtils.swap(longArray0, (int) (byte) (-26), 308, 2145223138);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-26L)}, longArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray1);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)50;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-1));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)50}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)50}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (-2014);
      shortArray0[4] = (short)180;
      shortArray0[5] = (short)6;
      shortArray0[6] = (short) (byte) (-1);
      shortArray0[7] = (short) (-1);
      shortArray0[8] = (short) (byte)50;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-2014), (short)180, (short)6, (short) (-1), (short) (-1), (short)50}, shortArray0);
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray2.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)50}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)50}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)50}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(3219);
      assertNotNull(mutableInt0);
      assertEquals(3219.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3219L, mutableInt0.longValue());
      assertEquals((byte) (-109), mutableInt0.byteValue());
      assertEquals("3219", mutableInt0.toString());
      assertEquals(3219, (int)mutableInt0.getValue());
      assertEquals(3219, (int)mutableInt0.toInteger());
      assertEquals(3219, mutableInt0.intValue());
      assertEquals((short)3219, mutableInt0.shortValue());
      assertEquals(3219.0F, mutableInt0.floatValue(), 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[12];
      charArray0[4] = 'T';
      charArray0[2] = 'T';
      charArray0[4] = 'T';
      int[] intArray0 = new int[4];
      intArray0[0] = 3219;
      intArray0[1] = (int) 'T';
      intArray0[1] = (int) 'T';
      intArray0[3] = (int) 'T';
      boolean boolean0 = ArrayUtils.contains(intArray0, (-5524));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {3219, 84, 0, 84}, intArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 1, 970, 0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)25022;
      shortArray0[1] = (short) (-281);
      shortArray0[2] = (short)25022;
      shortArray0[3] = (short)25022;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-281), (short)25022, (short)25022, (short)25022}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[0];
      String string0 = ArrayUtils.get(stringArray0, 550);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-3093));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-564);
      intArray0[1] = (-564);
      intArray0[2] = (-1);
      intArray0[5] = (-1);
      intArray0[4] = (int) (short) (-3093);
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      ArrayUtils.swap(charArray0, 2, (-2147146440), 1064);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'5', '5', '5', '5'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) '5';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-2147146440);
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-564));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 53L, (-1L), (-2147146440L)}, longArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.reverse((short[]) null, (-1), 2145390584);
      Double[] doubleArray1 = new Double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-99), (-1549));
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-99);
      longArray0[1] = (long) (byte) (-99);
      longArray0[2] = (long) (byte) (-99);
      longArray0[3] = (long) (byte) (-99);
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (long) (byte) (-123);
      longArray0[6] = (long) (-1549);
      longArray0[7] = (long) (byte) (-1);
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-3639L), (int) (byte) (-123));
      assertNotNull(bitSet1);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-99L), (-99L), (-99L), (-99L), (-1L), (-123L), (-1549L), (-1L)}, longArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-99L);
      objectArray0[2] = (Object) (-1549L);
      objectArray0[3] = (Object) (-99L);
      Short short0 = new Short((short)2941);
      assertNotNull(short0);
      assertEquals((short)2941, (short)short0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(objectArray0, (Object) short0, (-1773));
      assertNotNull(bitSet2);
      assertEquals(4, objectArray0.length);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-99L);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-99.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 55, 59, 55);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-123);
      shortArray0[2] = (short) (byte) (-99);
      shortArray0[3] = (short)2941;
      shortArray0[4] = (short) (byte) (-99);
      shortArray0[5] = (short)2941;
      shortArray0[6] = (short) (byte) (-99);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1385));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-123), (short) (-99), (short)2941, (short) (-99), (short)2941, (short) (-99)}, shortArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      Byte byte0 = new Byte((byte)119);
      assertNotNull(byte0);
      assertEquals((byte)119, (byte)byte0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Byte byte0 = new Byte((byte)120);
      assertNotNull(byte0);
      assertEquals((byte)120, (byte)byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte2 = new Byte((byte) (-21));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-21), (byte)byte2);
      
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-19);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-19), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-19)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[1] = '&';
      charArray0[2] = 'I';
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.removeElement((long[]) null, (long) (byte)0);
      assertNull(longArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 90;
      doubleArray0[1] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2876.3), (int) (short) (-19));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {90.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Byte[] byteArray1 = new Byte[5];
      byte byte0 = (byte) (-89);
      Byte byte1 = new Byte((byte) (-89));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-89), (byte)byte1);
      
      byteArray1[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-89), (byte)byte2);
      
      byteArray1[1] = byte2;
      Byte byte3 = new Byte((byte)10);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)10, (byte)byte3);
      
      byteArray1[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertEquals((byte) (-89), (byte)byte4);
      
      byteArray1[3] = byte4;
      Byte byte5 = new Byte((byte) (-41));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertEquals((byte) (-41), (byte)byte5);
      
      byteArray1[4] = byte5;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals(5, byteArray1.length);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(2826.2286130836105);
      assertNotNull(double0);
      assertEquals(2826.2286130836105, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1503.144831));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1503.144831), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(4, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(2826.2286130836105, (double)double2, 0.01);
      
      doubleArray0[2] = doubleArray0[1];
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1503.144831));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {2826.2286130836105, (-1503.144831), (-1503.144831), 0.0}, doubleArray1, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-1849.33349115), 36, (-858.13));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {2826.2286130836105, (-1503.144831), (-1503.144831), 0.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      Class<MutableInt[]> class0 = MutableInt[].class;
      MutableInt[] mutableIntArray1 = ArrayUtils.nullToEmpty(mutableIntArray0, class0);
      assertNotNull(mutableIntArray1);
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertSame(mutableIntArray0, mutableIntArray1);
      assertSame(mutableIntArray1, mutableIntArray0);
      
      ArrayUtils.swap((Object[]) mutableIntArray1, 36, (-3555), (-3555));
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertSame(mutableIntArray0, mutableIntArray1);
      assertSame(mutableIntArray1, mutableIntArray0);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, (-1977.51));
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {2826.2286130836105, (-1503.144831), (-1503.144831), 0.0, (-1977.51)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2826.2286130836105, (-1503.144831), (-1503.144831), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      AbstractMap.SimpleEntry<MutableInt, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<MutableInt, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 5);
      Character character0 = Character.valueOf('[');
      assertNotNull(character0);
      assertEquals('[', (char)character0);
      
      AbstractMap.SimpleEntry<MutableInt, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<MutableInt, Object>((MutableInt) null, character0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<MutableInt, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<MutableInt, Object>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      Byte byte0 = new Byte((byte) (-119));
      assertNotNull(byte0);
      assertEquals((byte) (-119), (byte)byte0);
      
      AbstractMap.SimpleEntry<MutableInt, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<MutableInt, Object>((MutableInt) null, byte0);
      assertNotNull(abstractMap_SimpleEntry2);
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<MutableInt, Object> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<MutableInt, Object>(abstractMap_SimpleEntry2);
      assertNotNull(abstractMap_SimpleEntry3);
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry3;
      AbstractMap.SimpleEntry<MutableInt, Object> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<MutableInt, Object>((MutableInt) null, abstractMap_SimpleEntry3);
      assertNotNull(abstractMap_SimpleEntry4);
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry0));
      
      Comparator<Map.Entry<Long, Short>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry4;
      AbstractMap.SimpleEntry<MutableInt, Object>[] abstractMap_SimpleEntryArray1 = (AbstractMap.SimpleEntry<MutableInt, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 8);
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      
      Comparator<Map.Entry<Long, Short>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      assertSame(comparator1, comparator0);
      
      abstractMap_SimpleEntryArray1[0] = abstractMap_SimpleEntry3;
      abstractMap_SimpleEntryArray1[1] = abstractMap_SimpleEntry2;
      abstractMap_SimpleEntryArray1[2] = abstractMap_SimpleEntry0;
      abstractMap_SimpleEntryArray1[3] = abstractMap_SimpleEntry2;
      abstractMap_SimpleEntryArray1[4] = abstractMap_SimpleEntry2;
      abstractMap_SimpleEntryArray1[5] = abstractMap_SimpleEntry0;
      abstractMap_SimpleEntryArray1[6] = abstractMap_SimpleEntry2;
      abstractMap_SimpleEntryArray1[7] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<MutableInt, Object>[] abstractMap_SimpleEntryArray2 = ArrayUtils.removeElements(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotNull(abstractMap_SimpleEntryArray2);
      assertEquals(5, abstractMap_SimpleEntryArray0.length);
      assertEquals(1, abstractMap_SimpleEntryArray2.length);
      assertEquals(8, abstractMap_SimpleEntryArray1.length);
      assertFalse(abstractMap_SimpleEntryArray0.equals((Object)abstractMap_SimpleEntryArray1));
      assertFalse(abstractMap_SimpleEntryArray2.equals((Object)abstractMap_SimpleEntryArray0));
      assertFalse(abstractMap_SimpleEntryArray2.equals((Object)abstractMap_SimpleEntryArray1));
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray2);
      assertNotSame(abstractMap_SimpleEntryArray2, abstractMap_SimpleEntryArray0);
      assertNotSame(abstractMap_SimpleEntryArray2, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray2);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) abstractMap_SimpleEntry0;
      objectArray0[2] = (Object) comparator1;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3);
      shortArray0[1] = (short)932;
      shortArray0[2] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3), (short)932, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      Character character1 = Character.valueOf('4');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('4', (char)character1);
      
      Character character2 = new Character('o');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('o', (char)character2);
      
      Boolean boolean1 = Boolean.valueOf("PH-3m");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "y'~u+/cHK@rSf$";
      stringArray0[1] = "PH-3m";
      stringArray0[2] = "java.lang.Byte";
      stringArray0[3] = "PH-3m";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(4, stringArray1.length);
      assertEquals(4, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = ',';
      charArray0[2] = '&';
      charArray0[3] = 'g';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'9', ',', '&', 'g'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.valueOf("");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 64;
      intArray0[1] = 690;
      intArray0[2] = (-14);
      intArray0[3] = 64;
      intArray0[4] = 55;
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-14));
      assertNotNull(long0);
      assertEquals((-14L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertNotNull(long1);
      assertEquals(9, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-14L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-2463L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-2463L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(0L);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long2));
      assertEquals(0L, (long)long4);
      
      longArray0[4] = long4;
      long long5 = 1L;
      Long long6 = new Long(1L);
      assertNotNull(long6);
      assertTrue(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertEquals(1L, (long)long6);
      
      longArray0[5] = long6;
      Long long7 = new Long(0L);
      assertNotNull(long7);
      assertTrue(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long1));
      assertTrue(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long0));
      assertEquals(0L, (long)long7);
      
      longArray0[6] = long7;
      Long long8 = new Long(long5);
      assertNotNull(long8);
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long4));
      assertTrue(long8.equals((Object)long6));
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long0));
      assertTrue(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long3));
      assertEquals(1L, (long)long8);
      
      longArray0[7] = long8;
      Long long9 = new Long(64);
      assertNotNull(long9);
      assertFalse(long9.equals((Object)long4));
      assertFalse(long9.equals((Object)long8));
      assertFalse(long9.equals((Object)long6));
      assertFalse(long9.equals((Object)long7));
      assertFalse(long9.equals((Object)long5));
      assertFalse(long9.equals((Object)long0));
      assertFalse(long9.equals((Object)long3));
      assertFalse(long9.equals((Object)long1));
      assertFalse(long9.equals((Object)long2));
      assertEquals(64L, (long)long9);
      
      longArray0[8] = long9;
      Long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) long5;
      doubleArray0[1] = (double) (-2463L);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1513.9622117003, 160);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-2463.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-3093));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-564);
      intArray0[1] = (-564);
      intArray0[2] = (-1);
      intArray0[5] = (-1);
      intArray0[4] = (int) (short) (-3093);
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      ArrayUtils.swap(charArray0, 2, (-2147146440), 1064);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'5', '5', '5', '5'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) '5';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-2147146440);
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-564));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 53L, (-1L), (-2147146440L)}, longArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-564);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-3093);
      floatArray0[4] = (float) (-2147146440L);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 2, 3);
      assertNotNull(bitSet0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-564.0F), (-1.0F), (-3093.0F), (-2.1471465E9F)}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1703.239F);
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-3787));
      assertNotNull(integer0);
      assertEquals((-3787), (int)integer0);
      
      Integer integer1 = new Integer((-3787));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-3787), (int)integer1);
      
      Integer integer2 = new Integer(77);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(77, (int)integer2);
      
      Integer integer3 = new Integer(77);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(77, (int)integer3);
      
      Integer integer4 = new Integer(15);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(15, (int)integer4);
      
      Integer integer5 = new Integer((-2085625101));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals((-2085625101), (int)integer5);
      
      Integer integer6 = new Integer(0);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertEquals(0, (int)integer6);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer7 = ArrayUtils.get(integerArray0, 3083);
      assertNull(integer7);
      assertEquals(0, integerArray0.length);
      
      Object object0 = null;
      // Undeclared exception!
      try { 
        BitSet.valueOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ArrayUtils.reverse(byteArray0, (-993), (int) (byte)1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '9';
      doubleArray0[1] = (double) (-993);
      doubleArray0[2] = (double) (-993);
      doubleArray0[3] = (double) (-993);
      doubleArray0[4] = (double) '9';
      doubleArray0[5] = (double) (-993);
      doubleArray0[6] = (double) '9';
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 32.0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {57.0, (-993.0), (-993.0), (-993.0), 57.0, (-993.0), 57.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(false);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(3219);
      assertNotNull(mutableInt0);
      assertEquals(3219.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-109), mutableInt0.byteValue());
      assertEquals(3219.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3219, (int)mutableInt0.getValue());
      assertEquals(3219, (int)mutableInt0.toInteger());
      assertEquals(3219L, mutableInt0.longValue());
      assertEquals("3219", mutableInt0.toString());
      assertEquals(3219, mutableInt0.intValue());
      assertEquals((short)3219, mutableInt0.shortValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[5];
      charArray0[4] = 'T';
      charArray0[2] = 'T';
      charArray0[4] = 'T';
      charArray0[4] = ')';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '\u0000';
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false}, booleanArray0));
      assertTrue(boolean0);
      
      ArrayUtils.shift(charArray0, 604, 604, 3219);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'T', '\u0000', ')'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '\\');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      Character character0 = new Character('X');
      assertNotNull(character0);
      assertEquals('X', (char)character0);
      
      Character character1 = new Character('O');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('O', (char)character1);
      
      Character character2 = new Character('X');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertEquals('X', (char)character2);
      
      Character character3 = new Character('5');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('5', (char)character3);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, 'T');
      assertNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-476), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -476, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-884);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-330);
      doubleArray0[1] = (double) (short) (-330);
      doubleArray0[2] = (double) (short) (-330);
      doubleArray0[3] = (double) (short) (-884);
      doubleArray0[4] = 342.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 342.0, (-330.0));
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-330.0), (-330.0), (-330.0), (-884.0), 342.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-62);
      ArrayUtils.shift(byteArray0, (int) (byte) (-26), 2525, 2);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-62), (byte) (-26), (byte)7}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte) (-26);
      ArrayUtils.swap(longArray0, (int) (byte) (-26), 308, 2145223138);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-26L)}, longArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (int) (byte)7, 46, (int) (short) (-884));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf((float[]) null, 214.24F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-9);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-9), (double) (byte) (-9));
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(doubleArray0, doubleArray1);
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = bitSet0.toLongArray();
      assertNotNull(longArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(doubleArray0, doubleArray1);
      
      int int1 = ArrayUtils.getLength((Object) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) (byte) (-9));
      assertNull(floatArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, Integer.MAX_VALUE, 0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-19), (byte)1, (byte) (-9)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean3);
      assertNotNull(boolean4);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf(true);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5);
      
      booleanArray0[5] = boolean5;
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) (short)122;
      floatArray0[1] = (-1330.725F);
      floatArray0[2] = (-1330.725F);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)16;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1321), (int) (byte)60);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-12), (byte)60, (byte)16}, byteArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-12), (byte)60, (byte)16}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)17;
      ArrayUtils.shift(shortArray0, (int) (byte)60);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)17}, shortArray0);
      
      ArrayUtils.shift(byteArray1, 128, (int) (short)17, (int) (byte)16);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-12), (byte)60, (byte)16}, byteArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-12), (byte)60, (byte)16}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 225.38152F;
      floatArray0[1] = (-2.0F);
      floatArray0[2] = 81.0F;
      int[] intArray0 = new int[2];
      intArray0[0] = (-4067);
      intArray0[1] = (-676);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -676, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-676);
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (double) 81;
      doubleArray0[3] = (double) 81;
      doubleArray0[4] = (double) 81;
      ArrayUtils.swap(doubleArray0, (-676), (-955));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-676.0), 100.0, 81.0, 81.0, 81.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[1] = "org.apache.commons.lang3.mutable.MutableInt";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String[] stringArray2 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray2);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray2.length);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1484.4553807), 2);
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-676.0), 100.0, 81.0, 81.0, 81.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (-676));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      ArrayUtils.swap((Object[]) stringArray2, 2, 1467, (-2));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray2.length);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 1467, 1220, 1467);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[2] = 'K';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '$';
      charArray0[6] = 'N';
      charArray0[7] = 'z';
      charArray0[8] = 'C';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'K', '$', '$', '$', 'N', 'z', 'C'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'K', '$', '$', '$', 'N', 'z', 'C'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'K';
      intArray0[1] = (int) '$';
      intArray0[2] = (int) 'z';
      intArray0[3] = (int) '$';
      intArray0[4] = (int) 'z';
      int int0 = ArrayUtils.indexOf(intArray0, 75, 532);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {75, 36, 122, 36, 122}, intArray0);
      assertEquals((-1), int0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      char[] charArray2 = new char[0];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      char[] charArray3 = ArrayUtils.addFirst(charArray2, 'C');
      assertNotNull(charArray3);
      assertEquals(0, charArray2.length);
      assertEquals(1, charArray3.length);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {'C'}, charArray3);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (-1L);
      longArray0[3] = (-2L);
      Double double0 = new Double((-1L));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) doubleArray0[0]);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[9];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, 267.0, 2143367094, (-1.5298000574111938));
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      ArrayUtils.swap((Object[]) doubleArray0, 32, 894);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray1, (double) (-2L));
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = (Float) (float)(-2L);
      floatArray0[1] = (Float) (float)(-1L);
      Float float0 = new Float((double) 226.01F);
      assertNotNull(float0);
      assertEquals(226.01F, (float)float0, 0.01F);
      
      floatArray0[2] = float0;
      floatArray0[3] = (Float) (float)(-1L);
      floatArray0[4] = (Float) (float)1L;
      Float float1 = new Float((double) 226.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(226.01F, (float)float1, 0.01F);
      
      doubleArray2[8] = (double) (float)float1;
      floatArray0[6] = (Float) (float)0L;
      Float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-3093));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-564);
      intArray0[1] = (-564);
      intArray0[2] = (-1);
      intArray0[5] = (-1);
      intArray0[4] = (int) (short) (-3093);
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      ArrayUtils.swap(charArray0, 2, (-2147146440), 1064);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'5', '5', '5', '5'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) '5';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-2147146440);
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-564));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 53L, (-1L), (-2147146440L)}, longArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short) (-2121), 45);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 51;
      ArrayUtils.reverse(longArray0, 1380, 1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {51L}, longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      ArrayUtils.shift(byteArray0, (int) (byte) (-9), (int) (byte) (-87), 2127781963);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-87)}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {51L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-87);
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((byte) (-9));
      assertNotNull(short0);
      assertEquals((short) (-9), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = ArrayUtils.get(shortArray0, (int)  (-87), short0);
      assertNotNull(short1);
      assertEquals(1, shortArray0.length);
      assertEquals((short) (-9), (short)short1);
      
      Object object0 = ArrayUtils.get(objectArray0, 2134, (Object) short1);
      assertNotNull(object0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, shortArray0.length);
      assertEquals((short) (-9), object0);
      
      ArrayUtils.shift(objectArray0, (-1));
      assertEquals(1, objectArray0.length);
      
      char[] charArray1 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray1);
      
      char[] charArray2 = ArrayUtils.subarray((char[]) null, 51, (int) shortArray0[0]);
      assertNull(charArray2);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1380;
      longArray0[1] = (long) (short)351;
      ArrayUtils.reverse(longArray0, (int) (short)351, (int) (short)351);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1380L, 351L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, (-1703), 2142350139, (-27));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, true, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.lang3.builder.ToStringStyle$NoClassNameToStringStyle";
      stringArray0[1] = "y'~u+/cHK@rSf$";
      stringArray0[2] = "java.lang.Byte";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'T'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+S4Y");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte)1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)26, (byte) (-44), (byte)125, (byte)73, (byte) (-85), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)26, (byte) (-44), (byte)125, (byte)73, (byte) (-85), (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      
      ArrayUtils.reverse((Object[]) booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean3);
      assertNotNull(boolean4);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf(true);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5);
      
      booleanArray0[5] = boolean5;
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) (short)122;
      floatArray0[1] = (-1330.725F);
      floatArray0[2] = (-1330.725F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1330.725F);
      floatArray0[5] = (float) (short)122;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)122;
      intArray0[1] = (int) (short)122;
      intArray0[2] = (int) (short)122;
      intArray0[3] = (int) (short)122;
      intArray0[5] = (int) (short)122;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1680));
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {122, 122, 122, 122, 0, 122}, intArray0);
      assertArrayEquals(new int[] {122, 122, 122, 122, 0, 122}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray1 = new boolean[0];
      boolean boolean6 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(boolean6);
      
      ArrayUtils.reverse((Object[]) booleanArray0);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[3] = (-1L);
      longArray0[4] = (-1720L);
      longArray0[6] = (-1076L);
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = 'o';
      longArray0[5] = (long) 'O';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {':', 'o', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {':', 'o', '\u0000'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1L), (-1720L), 79L, (-1076L), 0L, 0L}, longArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, (-1), (-1), (-1384));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1258);
      intArray0[1] = (-1);
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '}');
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'}', '}', '}'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-18L);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) '}';
      longArray0[3] = (long) '}';
      ArrayUtils.shift(longArray0, (-1));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 125L, 125L, (-18L)}, longArray0);
      
      ArrayUtils.shift(intArray0, 2144775598);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-1258), (-1)}, intArray0);
      
      ArrayUtils.reverse((byte[]) null, (int) (byte)5, (-890));
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 125L);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-18L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), 125L, 125L, (-18L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-324));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-1258), (-1)}, intArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-18L);
      doubleArray0[2] = (double) (byte)5;
      doubleArray0[3] = (double) '}';
      doubleArray0[4] = 100.0;
      doubleArray0[5] = (double) 2144775598;
      doubleArray0[6] = (double) '}';
      ArrayUtils.shift(doubleArray0, (-890));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-18.0), 5.0, 125.0, 100.0, 2.144775598E9, 125.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'}', '}', '}'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(boolean0);
      assertNotSame(charArray0, charArray1);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, (-1258));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-1258), (-1)}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray2);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray2.length);
      assertArrayEquals(new long[] {(-1L), 125L, 125L, (-18L)}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '`';
      charArray0[2] = ',';
      charArray0[4] = 'v';
      charArray0[5] = '0';
      charArray0[6] = 'I';
      charArray0[7] = '<';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'v');
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'<', '`', ',', '\u0000', 'v', '0', 'I', '<'}, charArray0);
      assertArrayEquals(new char[] {'<', '`', ',', '\u0000', '0', 'I', '<'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'v';
      floatArray0[1] = (float) 'I';
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      floatArray0[2] = (float) 'I';
      floatArray0[3] = (float) '0';
      floatArray0[4] = (float) '0';
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {73.0F, 73.0F, 48.0F, 48.0F, 118.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '<';
      longArray0[1] = (long) '\u0000';
      ArrayUtils.shift(longArray0, (-1455));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 60L}, longArray0);
      
      char[] charArray2 = ArrayUtils.subarray(charArray0, (-865), 0);
      assertNotNull(charArray2);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'<', '`', ',', '\u0000', 'v', '0', 'I', '<'}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-22);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-22);
      floatArray0[1] = (-1012.16F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-22.0F), (-1012.16F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-22.0F), (-1012.16F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-915), (-915));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-915);
      longArray0[0] = (long) (-915);
      longArray0[2] = (long) (-22);
      longArray0[3] = (long) (-22);
      longArray0[4] = (long) (-915);
      longArray0[5] = (-22L);
      longArray0[6] = (long) 1994;
      longArray0[7] = (long) 1994;
      longArray0[8] = (long) (-915);
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (-22));
      assertNotNull(longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-915L), 0L, (-22L), (-22L), (-915L), (-22L), 1994L, 1994L, (-915L), (-22L)}, longArray1);
      assertArrayEquals(new long[] {(-915L), 0L, (-22L), (-22L), (-915L), (-22L), 1994L, 1994L, (-915L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-1));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray0);
      assertNotNull(longArray2);
      assertEquals(10, longArray1.length);
      assertEquals(1, longArray2.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-915L), 0L, (-22L), (-22L), (-915L), (-22L), 1994L, 1994L, (-915L), (-22L)}, longArray1);
      assertArrayEquals(new long[] {(-22L)}, longArray2);
      assertArrayEquals(new long[] {(-915L), 0L, (-22L), (-22L), (-915L), (-22L), 1994L, 1994L, (-915L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      ArrayUtils.reverse(intArray0, (-20), 4088);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 4088;
      longArray0[2] = (long) 4088;
      longArray0[3] = 127L;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) (-20);
      longArray0[6] = (long) 2;
      longArray0[7] = (long) 2;
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-20);
      longArray1[1] = (long) 4088;
      longArray1[2] = (long) 2;
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotNull(longArray2);
      assertEquals(5, longArray2.length);
      assertEquals(8, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {4088L, 127L, 2L, 2L, 2L}, longArray2);
      assertArrayEquals(new long[] {2L, 4088L, 4088L, 127L, 2L, (-20L), 2L, 2L}, longArray0);
      assertArrayEquals(new long[] {(-20L), 4088L, 2L}, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-20);
      floatArray0[1] = (float) 4088;
      floatArray0[2] = (float) (-20);
      floatArray0[3] = (float) (-20);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-20.0F), 4088.0F, (-20.0F), (-20.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-20.0F), 4088.0F, (-20.0F), (-20.0F), (-20.0F), 4088.0F, (-20.0F), (-20.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) ':';
      floatArray0[1] = (float) 1202;
      floatArray0[2] = (float) ':';
      floatArray0[3] = (float) (short)932;
      floatArray0[4] = (float) 1202;
      floatArray0[5] = (float) 1202;
      floatArray0[6] = (float) ':';
      ArrayUtils.shift(floatArray0, (int) (short)2);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1202.0F, 58.0F, 58.0F, 1202.0F, 58.0F, 932.0F, 1202.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)14);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)122);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[9];
      long[] longArray0 = new long[1];
      longArray0[0] = (-203L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-203L), (int) (short)122);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-203L)}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Short short0 = new Short((short)116);
      assertNotNull(short0);
      assertEquals((short)116, (short)short0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 59;
      Double double0 = new Double((short)2941);
      assertNotNull(double0);
      assertEquals(2941.0, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2005, doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2005, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ArrayUtils.reverse(byteArray0, (int) (byte)1, (int) (byte)1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)1;
      objectArray0[1] = (Object) (byte)1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "java.lang.String");
      assertNotNull(stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[3];
      MockRandom mockRandom0 = new MockRandom((-32L));
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0;
      ArrayUtils.shift(objectArray0, (-1258));
      assertEquals(1, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) "I", 1592);
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 1792);
      assertNotNull(bitSet1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(intArray0, intArray1);
      assertNotSame(bitSet1, bitSet0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)9;
      shortArray0[4] = (short)100;
      shortArray0[5] = (short) (-141);
      shortArray0[6] = (short)2180;
      shortArray0[7] = (short)1018;
      shortArray0[8] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)5, (short)0, (short)9, (short)100, (short) (-141), (short)2180, (short)1018, (short) (-1)}, shortArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, 629, 1792);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = 'y';
      charArray0[4] = 'j';
      charArray0[5] = '>';
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '3';
      longArray0[1] = (long) 'j';
      longArray0[2] = (long) '>';
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {51L, 106L, 62L}, longArray0);
      assertArrayEquals(new long[] {51L, 106L, 51L, 106L, 62L, 62L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'T';
      longArray0[1] = (long) 'T';
      longArray0[3] = (long) 'T';
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 'T';
      longArray0[6] = (long) ')';
      longArray0[7] = (long) 'T';
      longArray0[8] = (long) 0;
      long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(18, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {84L, 84L, 0L, 84L, 1L, 84L, 41L, 84L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      float[] floatArray0 = new float[7];
      short[] shortArray0 = new short[2];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Double double0 = new Double(226.01F);
      assertNotNull(double0);
      assertEquals(226.00999450683594, (double)double0, 0.01);
      
      Double[] doubleArray0 = ArrayUtils.removeElement((Double[]) null, (Object) double0);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 226.01F;
      doubleArray1[1] = (double) ')';
      doubleArray1[2] = 469.5687;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 267.0, (-4086), 78.0);
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {226.00999450683594, 41.0, 469.5687}, doubleArray1, 0.01);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.swap((Object[]) null, 1288, 49);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 894;
      floatArray0[1] = (float) (-4086);
      floatArray0[2] = 226.01F;
      floatArray0[3] = (float) 49;
      floatArray0[4] = (float) 32;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {894.0F, (-4086.0F), 226.01F, 49.0F, 32.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null, (-1.0));
      assertNull(doubleArray2);
      
      Float float0 = new Float((-1082.45747));
      assertNotNull(float0);
      assertEquals((-1082.4575F), (float)float0, 0.01F);
      
      Float float1 = new Float(4320.893);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4320.893F, (float)float1, 0.01F);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray1, 291.5775);
      assertNotNull(doubleArray3);
      assertEquals(4, doubleArray3.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {291.5775, 226.00999450683594, 41.0, 469.5687}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {226.00999450683594, 41.0, 469.5687}, doubleArray1, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3287;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 139;
      doubleArray0[3] = (double) 342;
      doubleArray0[4] = (double) 139;
      doubleArray0[5] = (double) 139;
      doubleArray0[6] = (double) 139;
      doubleArray0[7] = (double) 139;
      doubleArray0[8] = (double) 342;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {3287.0, (-1.0), 139.0, 342.0, 139.0, 139.0, 139.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3287.0, (-1.0), 139.0, 342.0, 139.0, 139.0, 139.0, 139.0, 342.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-578.0223661), 139, (-702.1));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3287.0, (-1.0), 139.0, 342.0, 139.0, 139.0, 139.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertSame(doubleArray0, doubleArray1);
      
      int int1 = ArrayUtils.indexOf((char[]) null, ':', (-2290));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[3];
      doubleArray1[3] = (double) (-2290);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {0, (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {0, (-1), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {3287.0, (-1.0), 139.0, (-2290.0), 139.0, 139.0, 139.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3287.0, (-1.0), 139.0, (-2290.0), 139.0, 139.0, 139.0, 139.0, 342.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertSame(doubleArray1, doubleArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {0, (-1), (-1)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) ':';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-2290);
      longArray0[4] = (long) 139;
      longArray0[5] = (long) 342;
      longArray0[6] = (long) (-2290);
      longArray0[7] = (long) (-1);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3287, 1374);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), 58L, (-1L), (-2290L), 139L, 342L, (-2290L), (-1L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, 769, 769, 821);
      Byte byte0 = Byte.valueOf((byte)17);
      assertNotNull(byte0);
      assertEquals((byte)17, (byte)byte0);
      
      Byte byte1 = Byte.valueOf((byte) (-92));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-92), (byte)byte1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (int) (byte)17);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 821;
      doubleArray0[1] = (double) 2709;
      doubleArray0[2] = (-90.587941);
      doubleArray0[3] = (double) 821;
      doubleArray0[4] = (double) 821;
      doubleArray0[5] = (double) 821;
      doubleArray0[6] = (double) (byte) (-92);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1061), 821);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {821.0, 2709.0, (-90.587941), 821.0, 821.0, 821.0, (-92.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {821.0, 2709.0, (-90.587941), 821.0, 821.0, 821.0, (-92.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 82, 2146617377);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      boolean boolean0 = ArrayUtils.contains(charArray0, '*');
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'*', '*', '*'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)58;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)58}, byteArray0);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)58;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)512;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)58, (short)0, (short)512}, shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)512;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = 643.84F;
      floatArray0[4] = (float) (byte)58;
      floatArray0[5] = (float) (byte)58;
      floatArray0[6] = (float) (short)512;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {512.0F, 0.0F, 0.0F, 643.84F, 58.0F, 58.0F, 512.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (short)58);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)58}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = 'h';
      charArray0[2] = '>';
      charArray0[3] = 'K';
      charArray0[4] = ';';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '>');
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'.', 'h', '>', 'K', ';'}, charArray0);
      assertArrayEquals(new char[] {'.', 'h', 'K', ';'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)512;
      shortArray0[1] = (short)623;
      shortArray0[2] = (short) (-57);
      shortArray0[3] = (short)10;
      shortArray0[4] = (short) (-760);
      shortArray0[5] = (short) (-11036);
      shortArray0[6] = (short)122;
      shortArray0[7] = (short) (-5129);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)623, 0);
      assertNotNull(bitSet0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)512, (short)623, (short) (-57), (short)10, (short) (-760), (short) (-11036), (short)122, (short) (-5129)}, shortArray0);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)0;
      double[] doubleArray0 = new double[18];
      doubleArray0[4] = (double) (byte)110;
      ArrayUtils.shift(doubleArray0, (int) (byte)110);
      assertEquals(18, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray1, 1136);
      assertEquals(0, doubleArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)122, (int) (short)122, 0.7);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[13];
      intArray0[0] = (int) (short)122;
      intArray0[1] = 7;
      intArray0[2] = (int) (short)122;
      intArray0[3] = 7;
      intArray0[4] = (int) (short)122;
      intArray0[5] = (-1);
      intArray0[6] = 7;
      intArray0[7] = (int) (short)122;
      ArrayUtils.shift(intArray0, (-703), (int) (short)122, (-1204));
      assertEquals(13, intArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-703), 122);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertArrayEquals(new byte[] {(byte)61}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 122);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(byteArray0, 408, 0, 128);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[2] = (-20.83F);
      floatArray0[4] = (-20.83F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-20.83F);
      floatArray0[8] = (-1.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), 0.0F, 0.0F, (-20.83F), (-1.0F)}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray0, (-2103.6594F));
      assertNotNull(floatArray2);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray2.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), 0.0F, 0.0F, (-20.83F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), 0.0F, 0.0F, (-20.83F), (-1.0F)}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray1, (Object) null, 8);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), 0.0F, 0.0F, (-20.83F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertEquals((-1), int0);
      assertNotSame(floatArray0, floatArray2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)99;
      shortArray0[1] = (short) (-436);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)11;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)415;
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "c1u{Ob_:R7KzOaw}9:A");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)99;
      intArray0[1] = (int) (short)11;
      intArray0[2] = (int) (short) (-436);
      intArray0[3] = (int) (short)415;
      intArray0[4] = (int) (short)99;
      intArray0[5] = (int) (short)0;
      intArray0[6] = 2144389291;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2144389291, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = 643.84F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      long[] longArray0 = new long[2];
      longArray0[0] = 109L;
      longArray0[1] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, 692L, (-691));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {109L, (-1L)}, longArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 109L;
      doubleArray0[1] = 397.08;
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Double double1 = new Double((double) doubleArray0[1]);
      assertNotNull(double1);
      assertEquals(4, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 2826.2286130836105, (-874), (double) doubleArray0[1]);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2839;
      shortArray0[1] = (short) (-1053);
      ArrayUtils.shift(shortArray0, (-703), (-691), (int) (short)0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2839, (short) (-1053), (short)0}, shortArray0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((-3941L));
      assertNotNull(long0);
      assertEquals((-3941L), (long)long0);
      
      longArray0[0] = long0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (double) (short)26713, (int) (short) (-1053), 0.1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (short) (-1053));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1053.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(0.0F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (short)2839);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1053.0F), 0.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = 'K';
      charArray0[2] = 'r';
      charArray0[3] = '';
      charArray0[4] = 'S';
      charArray0[5] = '@';
      ArrayUtils.swap(charArray0, 1207, 47);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'^', 'K', 'r', '', 'S', '@'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-476);
      shortArray0[1] = (short)1692;
      shortArray0[0] = (short) (-154);
      shortArray0[3] = (short) (-5049);
      shortArray0[4] = (short) (-476);
      shortArray0[5] = (short) (-154);
      ArrayUtils.reverse(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-154), (short) (-476), (short) (-5049), (short)0, (short)1692, (short) (-154)}, shortArray0);
      
      Character character0 = Character.valueOf('|');
      assertNotNull(character0);
      assertEquals('|', (char)character0);
      
      Long long0 = ArrayUtils.get((Long[]) null, 3219);
      assertNull(long0);
      
      boolean boolean0 = ArrayUtils.isEquals(character0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = null;
      int int0 = ArrayUtils.indexOf((float[]) null, 214.24F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-19);
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-9);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (byte) (-9), (double) (byte) (-9));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = bitSet0.toLongArray();
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int[] intArray0 = new int[4];
      intArray0[0] = (-2145342587);
      intArray0[1] = 2;
      intArray0[0] = (-1);
      intArray0[3] = 2;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, (-930));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), 2, 0, 2}, intArray0);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte) (-37);
      Byte byte1 = new Byte((byte) (-37));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-37), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-37), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)13);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)13, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)64);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte)64, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)11);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte)11, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)125);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertEquals((byte)125, (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = Byte.valueOf((byte)43);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertEquals((byte)43, (byte)byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = Byte.valueOf((byte)76);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte6));
      assertEquals((byte)76, (byte)byte8);
      
      byteArray0[7] = byte8;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-37), (byte) (-37), (byte)13, (byte)64, (byte)11, (byte)125, (byte)43, (byte)76}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(3219);
      assertNotNull(mutableInt0);
      assertEquals((short)3219, mutableInt0.shortValue());
      assertEquals(3219L, mutableInt0.longValue());
      assertEquals(3219.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3219, mutableInt0.intValue());
      assertEquals(3219.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3219, (int)mutableInt0.getValue());
      assertEquals("3219", mutableInt0.toString());
      assertEquals((byte) (-109), mutableInt0.byteValue());
      assertEquals(3219, (int)mutableInt0.toInteger());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[5];
      charArray0[4] = 'T';
      charArray0[2] = 'T';
      charArray0[4] = 'T';
      int[] intArray0 = new int[4];
      intArray0[0] = 3219;
      intArray0[1] = (int) 'T';
      intArray0[2] = (int) 'T';
      intArray0[3] = (int) 'T';
      boolean boolean0 = ArrayUtils.contains(intArray0, (-5524));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {3219, 84, 84, 84}, intArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 1, 970, 84);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)25022;
      shortArray0[1] = (short) (-281);
      shortArray0[2] = (short)25022;
      shortArray0[3] = (short)25022;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-281), (short)25022, (short)25022, (short)25022}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      Double double0 = new Double((-1202.362443));
      assertNotNull(double0);
      assertEquals((-1202.362443), (double)double0, 0.01);
      
      Double double1 = new Double((short) (-1379));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1379.0), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = double0;
      doubleArray0[5] = double1;
      doubleArray0[6] = double0;
      doubleArray0[7] = double1;
      doubleArray0[8] = double0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      
      String string0 = ArrayUtils.toString((Object) doubleArray0[4], "7K|`mD8WO{VtQm!w");
      assertNotNull(string0);
      assertEquals(9, doubleArray0.length);
      assertEquals("-1202.362443", string0);
      
      Byte byte0 = new Byte((byte)24);
      assertNotNull(byte0);
      assertEquals((byte)24, (byte)byte0);
      
      Byte byte1 = new Byte((byte)24);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)24, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'S';
      intArray0[1] = 83;
      intArray0[2] = 97;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {83, 83, 97}, intArray0);
      assertFalse(boolean0);
      
      Long long0 = new Long((-18L));
      assertNotNull(long0);
      assertEquals((-18L), (long)long0);
      
      Long long1 = new Long(1295L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1295L, (long)long1);
      
      Long long2 = new Long(83);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(83L, (long)long2);
      
      int int0 = new Integer(83);
      assertEquals(83, int0);
      
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) 83;
      ArrayUtils.reverse(objectArray0, (-173), 83);
      assertEquals(11, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '|';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)104;
      ArrayUtils.shift(byteArray0, (int) (byte) (-30), (int) (byte)104, (int) (byte)104);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)104, (byte)78}, byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)78;
      ArrayUtils.swap(longArray0, (int) (byte) (-30), 242, 2);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {78L}, longArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)78;
      objectArray0[1] = (Object) 78L;
      objectArray0[2] = (Object) (byte) (-30);
      objectArray0[3] = (Object) 78L;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-30);
      shortArray0[1] = (short) (-1109);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte)104);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-30), (short) (-1109)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-30), (short) (-1109), (short)104}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertNotNull(bitSet0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)104, (byte)78}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-917);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-330);
      doubleArray0[1] = (double) (short) (-330);
      doubleArray0[2] = (double) (short) (-330);
      doubleArray0[3] = (double) (short) (-917);
      doubleArray0[4] = 342.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 342.0, (-330.0));
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-330.0), (-330.0), (-330.0), (-917.0), 342.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-62);
      ArrayUtils.shift(byteArray0, (int) (byte) (-26), 2525, (int) (short) (-917));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)9, (byte) (-62), (byte) (-26)}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte) (-62);
      ArrayUtils.swap(longArray0, (int) (byte) (-26), 308, 2145223138);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-62L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1136;
      intArray0[1] = 76;
      intArray0[1] = 1136;
      intArray0[3] = 76;
      intArray0[6] = 1136;
      intArray0[7] = 7;
      ArrayUtils.shift(intArray0, (-1204), 0, 1136);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1136, 1136, 0, 76, 0, 0, 1136, 7}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)50;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 1136);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)50}, byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)50}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1136;
      longArray0[1] = (long) (-1204);
      longArray0[2] = (long) 1136;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)50;
      shortArray0[1] = (short) (byte)50;
      shortArray0[2] = (short) (byte)61;
      ArrayUtils.shift(shortArray0, 8);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)50, (short)61, (short)50}, shortArray0);
      
      ArrayUtils.shift(byteArray0, (int) (short)50, 0, Integer.MAX_VALUE);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)50}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1136L;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1136.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1136.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short[] shortArray1 = new Short[1];
      shortArray1[0] = (Short) (short)50;
      Short[] shortArray2 = ArrayUtils.add(shortArray1, (Short) null);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1136;
      intArray0[1] = 76;
      intArray0[1] = 1136;
      intArray0[3] = 76;
      intArray0[6] = 76;
      intArray0[7] = 7;
      ArrayUtils.shift(intArray0, (-1204), 0, (-401));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1136, 1136, 0, 76, 0, 0, 76, 7}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)50;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 76);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)50}, byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)50}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1136;
      longArray0[1] = (long) (-1204);
      longArray0[2] = (long) 1136;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)50;
      shortArray0[1] = (short) (byte)50;
      shortArray0[2] = (short) (byte)61;
      ArrayUtils.shift(shortArray0, 8);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)50, (short)61, (short)50}, shortArray0);
      
      ArrayUtils.shift(byteArray0, (int) (short)50, 0, Integer.MAX_VALUE);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)50}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 346.91873F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {346.91873F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {346.91873F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short[] shortArray1 = new Short[1];
      shortArray1[0] = (Short) (short)50;
      Short[] shortArray2 = ArrayUtils.add(shortArray1, (Short) null);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Double double1 = new Double((double) doubleArray0[1]);
      assertNotNull(double1);
      assertEquals(4, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 2826.2286130836105, (-874), (double) doubleArray0[1]);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2839;
      shortArray0[1] = (short) (-1053);
      ArrayUtils.shift(shortArray0, (-703), (-691), (int) (short)0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2839, (short) (-1053), (short)0}, shortArray0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((-3941L));
      assertNotNull(long0);
      assertEquals((-3941L), (long)long0);
      
      longArray0[0] = long0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (double) (short)26713, (int) (short) (-1053), 0.1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.shift(booleanArray0, 12);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1380;
      longArray0[1] = (long) (short)351;
      ArrayUtils.reverse(longArray0, (int) (short)351, (int) (short)351);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1380L, 351L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, (-1703), 2142350139, (-27));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, true, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      Double double0 = new Double((-2679.9738936532913));
      assertNotNull(double0);
      assertEquals((-2679.9738936532913), (double)double0, 0.01);
      
      Double double1 = new Double(280.74576194084943);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(280.74576194084943, (double)double1, 0.01);
      
      Double double2 = new Double((-2679.9738936532913));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((-2679.9738936532913), (double)double2, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-109);
      intArray0[1] = (-1069);
      intArray0[2] = (-1069);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1069));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-109), (-1069), (-1069)}, intArray0);
      assertTrue(boolean0);
      
      ArrayUtils.shift(booleanArray0, (-109), 6, (-2001));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)25022;
      shortArray0[1] = (short)25022;
      shortArray0[2] = (short)889;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)25022, (short)889, (short)25022}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = new boolean[14];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      booleanArray1[5] = true;
      booleanArray1[7] = true;
      booleanArray1[8] = true;
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray1, false);
      assertNotNull(booleanArray2);
      assertEquals(14, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte) (-32);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)9);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)0, (byte) (-1), (byte)37, (byte) (-109), (byte) (-79), (byte)123, (byte) (-32)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)62, (byte)0, (byte) (-1), (byte)37, (byte)9, (byte) (-109), (byte) (-79), (byte)123, (byte) (-32)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[17];
      shortArray0[0] = (short) (byte)9;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(17, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'e';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'e';
      charArray1[1] = 'e';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'S', 'e'}, charArray0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray2 = ArrayUtils.removeElement(charArray0, '5');
      assertNotNull(charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray2.length);
      assertArrayEquals(new char[] {'S', 'e'}, charArray0);
      assertArrayEquals(new char[] {'S', 'e'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      ArrayUtils.reverse((float[]) null, 44, 44);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 44;
      doubleArray0[1] = (double) 'e';
      doubleArray0[2] = (double) 1260;
      doubleArray0[3] = (double) 'S';
      doubleArray0[4] = (double) 'S';
      doubleArray0[5] = (double) 'S';
      doubleArray0[6] = (double) 'S';
      doubleArray0[7] = (double) 'e';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1260, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1260, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[5];
      charArray0[4] = 'T';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', 'T'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Character character0 = new Character('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = new Character('T');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('T', (char)character1);
      
      Character character2 = new Character('@');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('@', (char)character2);
      
      Character character3 = Character.valueOf(',');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals(',', (char)character3);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character1;
      characterArray0[1] = character0;
      characterArray0[2] = character1;
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, ' ');
      assertNotNull(charArray2);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray2.length);
      assertArrayEquals(new char[] {'T', 'T', 'T'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)91;
      shortArray0[1] = (short)91;
      shortArray0[2] = (short) (-2160);
      shortArray0[3] = (short)91;
      shortArray0[4] = (short) (-2160);
      shortArray0[5] = (short)91;
      shortArray0[6] = (short)91;
      shortArray0[7] = (short)91;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)20572, (-1));
      assertNotNull(bitSet0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)91, (short) (-2160), (short)91, (short) (-2160), (short)91, (short)91, (short)91, (short)0}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-2160);
      longArray0[1] = (long) ' ';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (short)91;
      longArray0[4] = (long) ' ';
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (short)20572;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 49L);
      assertNotNull(bitSet1);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-2160L), 32L, (-1L), 91L, 32L, 0L, 0L, 20572L}, longArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-94)}, byteArray0);
      assertTrue(boolean0);
      
      Long long0 = new Long(3298L);
      assertNotNull(long0);
      assertEquals(3298L, (long)long0);
      
      Long long1 = new Long(1932L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1932L, (long)long1);
      
      Long long2 = new Long(3277);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(3277L, (long)long2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-94);
      intArray0[1] = (int) (byte) (-94);
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.shift(charArray0, 519, (-94), (-53));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 3277;
      floatArray0[1] = (float) (byte) (-94);
      floatArray0[2] = (float) (-94);
      floatArray0[3] = (float) 3277;
      floatArray0[4] = (float) 1932L;
      floatArray0[5] = (float) 1932L;
      floatArray0[6] = (float) (-94);
      floatArray0[7] = (float) (-53);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-94), 57);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {3277.0F, (-94.0F), (-94.0F), 3277.0F, 1932.0F, 1932.0F, (-94.0F), (-53.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {3277.0F, (-94.0F), (-94.0F), 3277.0F, 1932.0F, 1932.0F, (-94.0F), (-53.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-1063L);
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      ArrayUtils.shift(charArray0, (-1216));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', 'B'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[16];
      shortArray0[0] = (short) (byte)62;
      shortArray0[1] = (short) (byte)62;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(16, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Double double0 = new Double(280.74576194084943);
      assertNotNull(double0);
      assertEquals(280.74576194084943, (double)double0, 0.01);
      
      Double double1 = new Double(280.74576194084943);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(280.74576194084943, (double)double1, 0.01);
      
      Double double2 = new Double(969.66681);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(969.66681, (double)double2, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-3368);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1069));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-3368)}, intArray0);
      assertFalse(boolean0);
      
      ArrayUtils.shift(booleanArray0, 1, 1, (-157));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)25022;
      shortArray0[1] = (short)889;
      shortArray0[2] = (short)25022;
      shortArray0[3] = (short)1317;
      shortArray0[4] = (short)889;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)889, (short)25022, (short)1317, (short)889, (short)25022}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-3093);
      intArray0[1] = (int) (short) (-3093);
      intArray0[2] = (int) (short) (-3093);
      intArray0[3] = (int) (short) (-3093);
      intArray0[4] = (int) (short) (-3093);
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2954);
      intArray1[1] = (int) (short) (-3093);
      ArrayUtils.shift(intArray1, (-3093), (-3093), (-3093));
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-2954), (-3093)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1241), 5);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      assertArrayEquals(new byte[] {(byte)54}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)61;
      shortArray0[1] = (short) (byte)54;
      shortArray0[2] = (short) (byte)54;
      shortArray0[3] = (short) (-3093);
      ArrayUtils.shift(shortArray0, (-3093));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)54, (short)54, (short) (-3093), (short)61}, shortArray0);
      
      ArrayUtils.shift(byteArray0, 717, (int) (byte)54, 2137448677);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-20.83F);
      floatArray0[2] = (-1884.137F);
      floatArray0[3] = 1110.595F;
      floatArray0[4] = (-697.5627F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-697.5627F), (-2144021276));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-20.83F), (-1884.137F), 1110.595F, (-697.5627F)}, floatArray0, 0.01F);
      assertEquals(4, int0);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2144021276), (-2144021276));
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-92);
      shortArray0[1] = (short) (-2883);
      Float[] floatArray1 = new Float[1];
      floatArray1[0] = (Float) 1110.595F;
      Float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray1, (Float) (-20.83F));
      assertNotNull(floatArray2);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, true);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.toPrimitive((Object) "java.lang.Byte");
      assertNotNull(object1);
      assertEquals("java.lang.Byte", object1);
      
      objectArray0[1] = (Object) "java.lang.Byte";
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) "java.lang.Byte";
      objectArray1[1] = (Object) "java.lang.Byte";
      objectArray1[2] = (Object) "java.lang.Byte";
      objectArray1[3] = (Object) "java.lang.Byte";
      objectArray1[4] = object0;
      objectArray1[5] = (Object) "java.lang.Byte";
      objectArray1[6] = object0;
      Boolean boolean0 = Boolean.valueOf("jhFD1d>6G_");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object2 = ArrayUtils.get(objectArray1, 3627, (Object) boolean0);
      assertNotNull(object2);
      assertEquals(7, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(false, object2);
      assertNotSame(objectArray1, objectArray0);
      
      objectArray0[2] = object2;
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(3, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(boolean1);
      assertNotSame(objectArray0, objectArray1);
      
      boolean boolean2 = ArrayUtils.isSameLength(objectArray1, objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertTrue(boolean2 == boolean1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean2);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, 3627, (short)3002);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3627, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      
      short[] shortArray2 = new short[6];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (-19);
      shortArray2[1] = (short)0;
      shortArray2[2] = (short)0;
      shortArray2[3] = (short) (-19);
      shortArray2[4] = (short) (-19);
      shortArray2[5] = (short) (-19);
      short[] shortArray3 = ArrayUtils.addAll(shortArray1, shortArray2);
      assertNotNull(shortArray3);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertEquals(6, shortArray3.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-19), (short)0, (short)0, (short) (-19), (short) (-19), (short) (-19)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-19), (short)0, (short)0, (short) (-19), (short) (-19), (short) (-19)}, shortArray3);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray0.length);
      assertEquals(6, classArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2636);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2636), (short) (-2636)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-2636)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1168.646404916);
      doubleArray0[1] = 672.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1202.362443));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-1168.646404916), 672.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1168.646404916), 672.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = new Object[0];
      Long long0 = new Long(1216L);
      assertNotNull(long0);
      assertEquals(1216L, (long)long0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) long0);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(4, classArray1.length);
      assertEquals(4, classArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1734;
      shortArray0[1] = (short)3098;
      shortArray0[2] = (short) (-11351);
      shortArray0[3] = (short) (-2636);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)98;
      shortArray0[6] = (short)37;
      shortArray0[7] = (short)342;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(16, shortArray1.length);
      assertArrayEquals(new short[] {(short)1734, (short)3098, (short) (-11351), (short) (-2636), (short)0, (short)98, (short)37, (short)342}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = (-1063L);
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      ArrayUtils.shift(charArray0, (-1216));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', 'B'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)37);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)62, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)62, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)62;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)62;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)62, (short)0, (short)0, (short)0, (short)62}, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = new boolean[9];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[5] = true;
      booleanArray1[8] = true;
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray1, false);
      assertNotNull(booleanArray2);
      assertEquals(9, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte) (-32);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)9);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)0, (byte) (-1), (byte) (-1), (byte) (-109), (byte) (-79), (byte)123, (byte) (-32)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)62, (byte)0, (byte) (-1), (byte) (-1), (byte)9, (byte) (-109), (byte) (-79), (byte)123, (byte) (-32)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)9;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)9}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)37);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (-717);
      shortArray0[4] = (short) (byte)1;
      shortArray0[5] = (short) (byte)1;
      shortArray0[6] = (short) (byte)1;
      shortArray0[7] = (short) (byte)1;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short) (-717), (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'T';
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)92;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)92}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = (Character) 'T';
      characterArray0[1] = (Character) 'T';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      ArrayUtils.shift((float[]) null, (int) (byte)0);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((short)92);
      assertNotNull(integer0);
      assertEquals(92, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)92);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(92, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((short)92);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(92, (int)integer2);
      
      integerArray0[2] = integer2;
      try { 
        Integer.valueOf("org.apache.commons.lang3.mutable.MutableInt", (int) characterArray0[1]);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 84 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = new boolean[9];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[5] = true;
      booleanArray1[7] = true;
      booleanArray1[8] = true;
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray1, false);
      assertNotNull(booleanArray2);
      assertEquals(9, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte) (-32);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)9);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)0, (byte) (-1), (byte) (-1), (byte) (-109), (byte) (-79), (byte)123, (byte) (-32)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)62, (byte)0, (byte) (-1), (byte) (-1), (byte)9, (byte) (-109), (byte) (-79), (byte)123, (byte) (-32)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)9;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)9}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      float[] floatArray0 = new float[7];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4086);
      shortArray0[1] = (short)2;
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short)2);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-4086), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4086), (short)2, (short) (-4086), (short)2}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)3;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)20, (byte)68, (byte) (-89), (byte)3}, byteArray1);
      assertArrayEquals(new byte[] {(byte)20, (byte) (-52), (byte)68, (byte) (-89), (byte)3}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray2 = new short[7];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (byte) (-89);
      shortArray2[1] = (short) (byte) (-89);
      shortArray2[2] = (short)2;
      shortArray2[3] = (short) (byte)68;
      shortArray2[4] = (short)2;
      shortArray2[5] = (short) (byte)3;
      shortArray2[6] = (short)2;
      short[] shortArray3 = ArrayUtils.addAll(shortArray2, shortArray1);
      assertNotNull(shortArray3);
      assertEquals(7, shortArray2.length);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(11, shortArray3.length);
      assertArrayEquals(new short[] {(short) (-89), (short) (-89), (short)2, (short)68, (short)2, (short)3, (short)2}, shortArray2);
      assertArrayEquals(new short[] {(short) (-4086), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4086), (short)2, (short) (-4086), (short)2}, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      float[] floatArray0 = new float[7];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4086);
      shortArray0[1] = (short)2;
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short)2);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-4086), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4086), (short)2, (short) (-4086), (short)2}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)3;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 2);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)20, (byte) (-52), (byte) (-89), (byte)3}, byteArray1);
      assertArrayEquals(new byte[] {(byte)20, (byte) (-52), (byte)68, (byte) (-89), (byte)3}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray2 = new short[7];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (byte) (-89);
      shortArray2[1] = (short) (byte) (-89);
      shortArray2[2] = (short)101;
      shortArray2[3] = (short) (byte)68;
      shortArray2[4] = (short)2;
      shortArray2[5] = (short) (byte)3;
      shortArray2[6] = (short)2;
      short[] shortArray3 = ArrayUtils.addAll(shortArray2, shortArray1);
      assertNotNull(shortArray3);
      assertEquals(2, shortArray0.length);
      assertEquals(7, shortArray2.length);
      assertEquals(4, shortArray1.length);
      assertEquals(11, shortArray3.length);
      assertArrayEquals(new short[] {(short) (-4086), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-89), (short) (-89), (short)101, (short)68, (short)2, (short)3, (short)2}, shortArray2);
      assertArrayEquals(new short[] {(short) (-4086), (short)2, (short) (-4086), (short)2}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-1L));
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-4662);
      shortArray0[1] = (short) (-4662);
      shortArray0[2] = (short) (-4662);
      shortArray0[3] = (short) (-4662);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte) (-1);
      shortArray0[7] = (short) (-4662);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-4662), 1);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4662), (short) (-4662), (short) (-4662), (short) (-4662), (short) (-1), (short) (-1), (short) (-1), (short) (-4662)}, shortArray0);
      assertEquals(1, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-4662);
      intArray0[1] = (int) (short) (-4662);
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) (short) (-4662);
      intArray0[4] = 1;
      intArray0[5] = (int) (short) (-4662);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short) (-4662);
      intArray1[1] = (int) (short) (-4662);
      intArray1[2] = (int) (short) (-4662);
      intArray1[3] = 1;
      intArray1[4] = (int) (short) (-4662);
      boolean boolean4 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-4662), (-4662), (-1), (-4662), 1, (-4662)}, intArray0);
      assertArrayEquals(new int[] {(-4662), (-4662), (-4662), 1, (-4662)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean4);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)99);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      ArrayUtils.reverse(booleanArray0, 1072, 1072);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Character character0 = new Character('_');
      assertNotNull(character0);
      assertEquals('_', (char)character0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-43));
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-43)}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)48);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-43)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-43)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1072;
      ArrayUtils.shuffle(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1072L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1380;
      longArray0[1] = (long) (short)351;
      ArrayUtils.reverse(longArray0, (int) (short)351, (int) (short)351);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1380L, 351L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)89);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)89, (byte)6, (byte) (-123), (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-123), (byte) (-1)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) (byte) (-123), (int) (byte) (-123));
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, '}');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-917);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-330);
      doubleArray0[1] = (double) (short) (-330);
      doubleArray0[2] = (double) (short) (-330);
      doubleArray0[3] = (double) (short) (-917);
      doubleArray0[4] = 342.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 342.0, (-330.0));
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-330.0), (-330.0), (-330.0), (-917.0), 342.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-917);
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (-30), (int) (short) (-917));
      assertNotNull(bitSet1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-917)}, intArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-30);
      longArray0[1] = (-181L);
      longArray0[2] = 0L;
      longArray0[3] = (long) (-30);
      longArray0[4] = (long) 1824;
      longArray0[5] = 5411L;
      longArray0[6] = (long) (short) (-917);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1517L);
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1517L, (-30L), (-181L), 0L, (-30L), 1824L, 5411L, (-917L)}, longArray1);
      assertArrayEquals(new long[] {(-30L), (-181L), 0L, (-30L), 1824L, 5411L, (-917L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.shift((float[]) null, (int) (short) (-917), 14, (-830));
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = new boolean[9];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[5] = true;
      booleanArray1[7] = true;
      booleanArray1[8] = true;
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray1, false);
      assertNotNull(booleanArray2);
      assertEquals(9, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)62;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)9);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)0, (byte) (-1), (byte) (-1), (byte) (-109), (byte) (-79), (byte)123, (byte)62}, byteArray1);
      assertArrayEquals(new byte[] {(byte)62, (byte)0, (byte) (-1), (byte) (-1), (byte)9, (byte) (-109), (byte) (-79), (byte)123, (byte)62}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) (byte) (-109);
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) (byte)123;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = '|';
      charArray0[2] = 's';
      charArray0[3] = 'y';
      charArray0[4] = 'j';
      charArray0[5] = '5';
      charArray0[6] = '3';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'^', '|', 's', 'y', 'j', '5', '3'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 4034;
      intArray0[1] = (-485);
      intArray0[2] = 1214;
      intArray0[3] = (-1454);
      intArray0[4] = 1;
      intArray0[5] = 1386;
      intArray0[6] = (-2494);
      intArray0[7] = (-2051);
      int int0 = ArrayUtils.indexOf(intArray0, 113);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {4034, (-485), 1214, (-1454), 1, 1386, (-2494), (-2051)}, intArray0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-2494);
      longArray0[1] = (long) (-2494);
      longArray0[2] = 869L;
      longArray0[3] = (long) 1386;
      longArray0[4] = (long) 4034;
      longArray0[5] = (long) 1214;
      longArray0[6] = (long) (-485);
      longArray0[7] = (long) (-1454);
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (-1454));
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-2494L), (-2494L), 869L, 1386L, 4034L, 1214L, (-485L), (-1454L), (-1454L)}, longArray1);
      assertArrayEquals(new long[] {(-2494L), (-2494L), 869L, 1386L, 4034L, 1214L, (-485L), (-1454L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-485);
      objectArray0[1] = (Object) 869L;
      objectArray0[2] = (Object) 869L;
      objectArray0[3] = (Object) (-485);
      objectArray0[4] = (Object) 1386L;
      objectArray0[5] = (Object) (-2494L);
      ArrayUtils.shift(objectArray0, 1, 1129, 2);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-324);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-324)}, shortArray0);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((short) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short) (-1));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), (-1));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-324)}, shortArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Object[] objectArray0 = new Object[2];
      int int0 = 127;
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object0 = ArrayUtils.get(objectArray0, 127, (Object) boolean0);
      assertNotNull(object0);
      assertEquals(2, objectArray0.length);
      assertEquals(false, object0);
      
      objectArray0[0] = object0;
      char char0 = '3';
      Character character0 = new Character('3');
      assertNotNull(character0);
      assertTrue(character0.equals((Object)char0));
      assertEquals('3', (char)character0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object1);
      assertTrue(character0.equals((Object)char0));
      assertTrue(object1.equals((Object)char0));
      assertEquals('3', object1);
      
      objectArray0[1] = object1;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(objectArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = new boolean[9];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[5] = true;
      booleanArray1[7] = true;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 789.8144F;
      floatArray0[1] = (-925.582F);
      floatArray0[2] = 643.84F;
      floatArray0[3] = (-99.0F);
      floatArray0[4] = 80.9684F;
      floatArray0[5] = (-91.6383F);
      floatArray0[6] = (-61.63F);
      floatArray0[7] = (-71.0F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {789.8144F, (-925.582F), 643.84F, (-99.0F), 80.9684F, (-91.6383F), (-61.63F), (-71.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {789.8144F, (-925.582F), 643.84F, (-99.0F), 80.9684F, (-91.6383F), (-61.63F), (-71.0F)}, floatArray0, 0.01F);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = 0;
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[5];
      charArray0[4] = 'T';
      charArray0[2] = 'T';
      charArray0[4] = 'T';
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'T', '\u0000', 'T'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'T', '\u0000', 'T'}, charArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray1 = new Integer[9];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[1] = integer0;
      integerArray1[2] = integer0;
      integerArray1[3] = integer0;
      integerArray1[4] = integer0;
      integerArray1[5] = integer0;
      integerArray1[6] = integer0;
      integerArray1[7] = integer0;
      integerArray1[8] = integer0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray1);
      assertNotNull(intArray1);
      assertEquals(9, integerArray1.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.swap(floatArray1, int0, (-14));
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte) (-32);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-25));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-79), (byte)9, (byte) (-79), (byte) (-79), (byte) (-79), (byte)62, (byte) (-32)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-79), (byte)9, (byte) (-79), (byte) (-79), (byte) (-79), (byte) (-25), (byte)62, (byte) (-32)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 65.0F;
      floatArray0[1] = (float) (byte) (-79);
      floatArray0[2] = (-4636.79F);
      ArrayUtils.swap(floatArray0, (int) (byte) (-79), (-1035));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {65.0F, (-79.0F), (-4636.79F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ArrayUtils.swap((char[]) null, 93, (-228));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "', has a length less than 2";
      stringArray0[1] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[2] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[3] = "";
      stringArray0[4] = "=>";
      stringArray0[5] = "ePe";
      stringArray0[6] = "in0=5f?0";
      stringArray0[7] = "aq5Qp\"PD";
      stringArray0[8] = "v>Qy>]C`%Va";
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "aq5Qp\"PD");
      assertNotNull(stringArray1);
      assertEquals(9, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1136;
      intArray0[1] = 1136;
      intArray0[1] = 1136;
      intArray0[6] = 76;
      intArray0[7] = 7;
      ArrayUtils.shift(intArray0, (-1204), 0, (-401));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1136, 1136, 0, 0, 0, 0, 76, 7}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)50;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 76);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)50}, byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)50}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1136;
      longArray0[1] = (long) (-1204);
      longArray0[2] = (long) 1136;
      longArray0[3] = (long) 1136;
      longArray0[4] = (long) (byte)61;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1136L, (-1204L), 1136L, 1136L, 61L}, longArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)50;
      doubleArray0[1] = (double) (-401);
      doubleArray0[2] = (double) (-1204L);
      doubleArray0[3] = (double) (byte)61;
      ArrayUtils.swap(doubleArray0, (-753), 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {50.0, (-401.0), (-1204.0), 61.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (byte)61;
      floatArray0[2] = (float) 1136L;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 61.0F, 1136.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1136;
      intArray0[1] = 76;
      intArray0[1] = 1136;
      intArray0[3] = 76;
      intArray0[6] = 76;
      intArray0[7] = 7;
      ArrayUtils.shift(intArray0, (-1204), 0, (-401));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1136, 1136, 0, 76, 0, 0, 76, 7}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)50;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 76);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)50}, byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)50}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1136;
      longArray0[1] = (long) (-1204);
      longArray0[2] = (long) 1136;
      longArray0[3] = (long) 1136;
      longArray0[4] = (long) (byte)61;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1136L, (-1204L), 1136L, 1136L, 61L}, longArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)50;
      doubleArray0[1] = (double) (-401);
      doubleArray0[2] = (double) (-1204L);
      doubleArray0[3] = (double) (byte)61;
      ArrayUtils.swap(doubleArray0, (-753), 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {50.0, (-401.0), (-1204.0), 61.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (byte)61;
      floatArray0[2] = (float) 1136L;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 61.0F, 1136.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[2] = 'K';
      ArrayUtils.swap((float[]) null, (-1869), 88, 1394);
      Character character0 = Character.valueOf('q');
      assertNotNull(character0);
      assertEquals('q', (char)character0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) character0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], (-70));
      assertEquals(4, objectArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = ')';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z', 101);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'T', 'T', 'T', 'T', ')', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-37), 1526);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte) (-20);
      ArrayUtils.reverse(byteArray0, 2100799220, 2);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte) (-38), (byte) (-90), (byte)56, (byte)2, (byte)89, (byte) (-20)}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte) (-38), (byte) (-90), (byte)56, (byte)2, (byte)89, (byte) (-20)}, byteArray0);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 'T';
      objectArray0[1] = (Object) 'T';
      objectArray0[2] = (Object) ')';
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 'T';
      objectArray0[5] = (Object) 'T';
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) mutableInt0, (-966));
      assertNotNull(bitSet0);
      assertEquals(6, objectArray0.length);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ArrayUtils.swap((short[]) null, 93, (-831), 93);
      int int0 = (-2160);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 93;
      longArray0[1] = (long) (-2160);
      longArray0[2] = (long) 93;
      longArray0[3] = (long) (-2160);
      ArrayUtils.swap(longArray0, 1, 93, (-831));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {93L, (-2160L), 93L, (-2160L)}, longArray0);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short) (-3776), (-3396));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      byte byte0 = (byte) (-28);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-26);
      byte byte1 = (byte) (-105);
      int int2 = ArrayUtils.indexOf(byteArray0, (byte) (-105), (-3396));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-26), (byte)114, (byte) (-26)}, byteArray0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.5298000574111938);
      doubleArray0[1] = (-1.5298000574111938);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      ArrayUtils.reverse(byteArray0, (int) (byte)1, (int) (byte)1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-1)}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.5298F);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1130);
      shortArray0[1] = (short) (-1130);
      shortArray0[2] = (short) (-1130);
      shortArray0[3] = (short) (-1130);
      shortArray0[4] = (short) (-1130);
      shortArray0[5] = (short) (-1130);
      shortArray0[6] = (short) (-1130);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1435, (int) (short) (-1130));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1130), (short) (-1130), (short) (-1130), (short) (-1130), (short) (-1130), (short) (-1130), (short) (-1130)}, shortArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-38), 1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)114}, byteArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1130), (short) (-1130), (short) (-1130), (short) (-1130), (short) (-1130), (short) (-1130), (short) (-1130)}, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1130);
      intArray0[1] = (int) (short) (-1130);
      intArray0[2] = (-1);
      intArray0[3] = (int) (short) (-1130);
      int[] intArray1 = ArrayUtils.add(intArray0, 18688);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-1130), (-1130), (-1), (-1130)}, intArray0);
      assertArrayEquals(new int[] {(-1130), (-1130), (-1), (-1130), 18688}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = (-1.0F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-1));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)56;
      byte byte0 = (byte)84;
      byteArray0[3] = (byte) (-127);
      byte byte1 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-88);
      float[] floatArray1 = ArrayUtils.remove(floatArray0, (int) (byte)0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = new float[8];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 0;
      floatArray2[1] = (float) (byte)0;
      floatArray2[3] = (float) (byte)84;
      floatArray2[4] = (-1.0F);
      floatArray2[7] = (float) (byte)56;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray2, (-4086), 949.4F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4086, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (-22L);
      longArray0[1] = (-1L);
      longArray0[2] = 1L;
      longArray0[3] = (-2L);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-1717), 56);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)120;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-331);
      shortArray0[5] = (short) (-331);
      shortArray0[6] = (short) (-331);
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-944), (-2796));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)120, (short)2, (short)0, (short)0, (short) (-331), (short) (-331), (short) (-331)}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-331);
      doubleArray0[1] = (double) (short) (-331);
      doubleArray0[2] = (double) (short) (-944);
      doubleArray0[3] = (double) (-2L);
      doubleArray0[4] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-331.0), (-331.0), (-944.0), (-2.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-331.0), (-331.0), (-944.0), (-2.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-61);
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-61);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (byte) (-61);
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {(-61L), 0L, (-61L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-61L), 0L, (-61L), 0L, (-61L), 0L, (-61L), 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) mockRandom0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int int0 = 3287;
      ArrayUtils.shift((short[]) null, 139, 342, 3287);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int int1 = (-1287);
      char char0 = '8';
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      int int2 = ArrayUtils.lastIndexOf(charArray0, '_', (-1287));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      int int3 = 1;
      byte byte0 = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 1, (byte) (-1));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)57, (byte) (-1), (byte)57, (byte)57, (byte)57}, byteArray1);
      assertArrayEquals(new byte[] {(byte)57, (byte)57, (byte)57, (byte)57}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 643.84F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-4750.47F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 643.84F, 0.0F, 0.0F, (-1.0F), (-1.0F), (-4750.47F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((-1271.6054));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1271.6054), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ArrayUtils.toString((Object) double0, "7K|`mD8WO{VtQm!w");
      assertNotNull(string0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertEquals("0.0", string0);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)24);
      assertNotNull(byte0);
      assertEquals((byte)24, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)2);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)24, (byte)2}, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) double1);
      assertEquals(2, byteArray0.length);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)24;
      shortArray0[3] = (short) (byte)24;
      shortArray0[4] = (short) (byte)24;
      shortArray0[5] = (short) (byte)24;
      shortArray0[6] = (short) (byte)24;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)24);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)24, (short)24, (short)24, (short)24, (short)24}, shortArray0);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-100);
      byteArray0[6] = (byte)113;
      MockRandom mockRandom0 = new MockRandom((byte)113);
      assertNotNull(mockRandom0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-61);
      objectArray0[1] = (Object) (byte) (-61);
      objectArray0[2] = (Object) (byte) (-100);
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(3, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-100);
      doubleArray0[1] = (-1849.33349115);
      doubleArray0[2] = (double) (byte)113;
      doubleArray0[3] = 397.08;
      doubleArray0[4] = (double) (byte) (-100);
      doubleArray0[5] = (-391.4436940992);
      doubleArray0[6] = (double) (byte) (-61);
      doubleArray0[7] = (-1849.33349115);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-9), 7, 100.0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-100.0), (-1849.33349115), 113.0, 397.08, (-100.0), (-391.4436940992), (-61.0), (-1849.33349115)}, doubleArray0, 0.01);
      assertEquals(6, int0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-61));
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-9), (byte)0, (byte) (-61), (byte) (-100), (byte)0, (byte)113, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-9), (byte)0, (byte) (-100), (byte)0, (byte)113, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Character[] characterArray0 = new Character[2];
      char char0 = '';
      Character character0 = Character.valueOf('');
      assertNotNull(character0);
      assertEquals('', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertEquals('', (char)character1);
      
      characterArray0[1] = character1;
      boolean boolean2 = ArrayUtils.isArrayIndexValid(characterArray0, (-2144966495));
      assertEquals(2, characterArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 643.84F;
      ArrayUtils.swap((short[]) null, 93, (-831), 93);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 57, 1);
      assertNotNull(bitSet0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 643.84F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)3771);
      assertEquals((-1), int0);
      
      Double double0 = new Double((-239.422926));
      assertNotNull(double0);
      assertEquals((-239.422926), (double)double0, 0.01);
      
      Double double1 = new Double(3.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(3.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      Double double2 = new Double(643.84F);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(643.8400268554688, (double)double2, 0.01);
      
      doubleArray0[0] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1373.341576184));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {643.8400268554688}, doubleArray1, 0.01);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'i';
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      Long long2 = Long.getLong("Comparator should not be null.", long1);
      assertNotNull(long2);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      
      Long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertSame(longArray1, longArray0);
      
      Double double3 = new Double(0.7);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.7, (double)double3, 0.01);
      
      String string0 = ArrayUtils.toString((Object) double3, "u@sWNN%5");
      assertNotNull(string0);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals("0.7", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1380;
      longArray0[1] = (long) (short)351;
      ArrayUtils.reverse(longArray0, (int) (short)351, (int) (short)351);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1380L, 351L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Long long0 = new Long((-1703));
      assertNotNull(long0);
      assertEquals((-1703L), (long)long0);
      
      Long long1 = Long.getLong("Comparator should not be null.", long0);
      assertNotNull(long1);
      assertEquals((-1703L), (long)long1);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = long1;
      longArray1[1] = long1;
      Long long2 = new Long(1L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(1L, (long)long2);
      
      longArray1[2] = long2;
      longArray1[3] = (Long) 1380L;
      Long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Long long3 = new Long(0L);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertEquals(0L, (long)long3);
      
      String string0 = ArrayUtils.toString((Object) long3, "|Y>X");
      assertNotNull(string0);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1380;
      longArray0[1] = (long) (short)351;
      ArrayUtils.reverse(longArray0, (int) (short)351, (int) (short)351);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1380L, 351L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Long long0 = new Long((-1703));
      assertNotNull(long0);
      assertEquals((-1703L), (long)long0);
      
      Long long1 = Long.getLong("Comparator should not be null.", long0);
      assertNotNull(long1);
      assertEquals((-1703L), (long)long1);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = long1;
      longArray1[1] = long1;
      longArray1[2] = long1;
      longArray1[3] = (Long) 1380L;
      Long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertNotNull(longArray2);
      assertEquals(4, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      
      String string0 = ArrayUtils.toString((Object) long2, "Comparator should not be null.");
      assertNotNull(string0);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)0;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Boolean[] booleanArray1 = new Boolean[3];
      Boolean boolean0 = new Boolean("4)A)MHM6Q;");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("className");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray1[2] = boolean2;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      
      double[] doubleArray0 = new double[16];
      doubleArray0[1] = (double) (byte)0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(16, doubleArray0.length);
      
      ArrayUtils.shuffle((Object[]) booleanArray1);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, 769, 769, 821);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)24;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)24, (int) (byte) (-29));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-19), (byte) (-29), (byte) (-19), (byte)24}, byteArray0);
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (byte) (-19));
      assertNotNull(mutableInt0);
      assertEquals((-19L), mutableInt0.longValue());
      assertEquals((-19), mutableInt0.intValue());
      assertEquals((-19), (int)mutableInt0.toInteger());
      assertEquals((-19), (int)mutableInt0.getValue());
      assertEquals((byte) (-19), mutableInt0.byteValue());
      assertEquals((-19.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-19", mutableInt0.toString());
      assertEquals((short) (-19), mutableInt0.shortValue());
      assertEquals((-19.0F), mutableInt0.floatValue(), 0.01F);
      
      mutableInt0.add((Number) (byte)11);
      assertEquals((short) (-8), mutableInt0.shortValue());
      assertEquals((-8L), mutableInt0.longValue());
      assertEquals((-8.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-8", mutableInt0.toString());
      assertEquals((-8), mutableInt0.intValue());
      assertEquals((byte) (-8), mutableInt0.byteValue());
      assertEquals((-8), (int)mutableInt0.getValue());
      assertEquals((-8.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-8), (int)mutableInt0.toInteger());
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) mutableInt0, 18688);
      assertNotNull(bitSet0);
      assertEquals((short) (-8), mutableInt0.shortValue());
      assertEquals((-8L), mutableInt0.longValue());
      assertEquals((-8.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-8", mutableInt0.toString());
      assertEquals((-8), mutableInt0.intValue());
      assertEquals((byte) (-8), mutableInt0.byteValue());
      assertEquals((-8), (int)mutableInt0.getValue());
      assertEquals((-8.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-8), (int)mutableInt0.toInteger());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-51.0);
      doubleArray0[2] = 1103.6411;
      doubleArray0[3] = 909.2869;
      doubleArray0[4] = (-2100.0);
      doubleArray0[5] = (-932.0);
      doubleArray0[6] = 542.1569307212;
      doubleArray0[7] = (-940.140189633378);
      doubleArray0[8] = (-2178.3);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-1), 1103.6411);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte) (-37);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)99);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)122, (byte) (-6), (byte)17, (byte)80, (byte) (-1), (byte)48, (byte) (-26), (byte)114, (byte) (-37)}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 139, 342, 3287);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray3);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertSame(booleanArray3, booleanArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 342;
      intArray0[1] = 3047;
      ArrayUtils.shift((char[]) null, 342);
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-3093));
      assertEquals((-1), int0);
      
      ArrayUtils.swap(intArray0, (int) (short) (-541), (int) (short) (-541));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {342, 3047}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-60);
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)29);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-60)}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray3, (Random) mockRandom0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertSame(booleanArray3, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'h');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)91, (int) (short)2);
      assertNotNull(bitSet0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (-676.0F);
      floatArray0[2] = (float) ';';
      floatArray0[3] = (float) (short)2;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, (-676.0F), 59.0F, 2.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.swap((Object[]) characterArray0, (int) (short)91, (-1009));
      assertEquals(0, characterArray0.length);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((short)91);
      assertNotNull(long0);
      assertEquals(91L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)2);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(2L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((short)2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals(2L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = Long.getLong("q_Os+i>&s[wQ", 1L);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertEquals(1L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[0]);
      assertNotNull(long4);
      assertEquals(6, longArray0.length);
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertEquals(91L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((-1009));
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertEquals((-1009L), (long)long5);
      
      longArray0[5] = long5;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {91L, 2L, 2L, 1L, 91L, (-1009L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 127;
      intArray0[1] = (-63);
      intArray0[2] = (-63);
      intArray0[4] = (-63);
      intArray0[5] = 852;
      intArray0[6] = (-88);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-63));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {127, (-63), (-63), 0, (-63), 852, (-88)}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-63);
      longArray0[1] = (long) 2534;
      longArray0[2] = (long) (-88);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-88);
      longArray0[5] = (long) (-63);
      longArray0[6] = (long) (-63);
      longArray0[8] = (long) (-88);
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (-88));
      assertNotNull(longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), (-63L), 0L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), (-63L), 0L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (long) 0, (-125));
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), (-63L), 0L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), (-63L), 0L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals((-1), int0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 861L);
      assertNotNull(longArray2);
      assertEquals(10, longArray1.length);
      assertEquals(10, longArray2.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), (-63L), 0L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), (-63L), 0L, (-88L), (-88L)}, longArray2);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), (-63L), 0L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1994091957), (-63));
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {127, (-63), (-63), 0, (-63), 852, (-88)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) (-63);
      long[] longArray4 = ArrayUtils.addFirst(longArray3, 342L);
      assertNotNull(longArray4);
      assertEquals(1, longArray3.length);
      assertEquals(2, longArray4.length);
      assertArrayEquals(new long[] {(-63L)}, longArray3);
      assertArrayEquals(new long[] {342L, (-63L)}, longArray4);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray0));
      assertFalse(longArray4.equals((Object)longArray2));
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray4);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray4, longArray3);
      assertNotSame(longArray4, longArray1);
      assertNotSame(longArray4, longArray0);
      assertNotSame(longArray4, longArray2);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, 100.0, (double) (-1994091957));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double((-273.50969232681615));
      assertNotNull(double0);
      assertEquals((-273.50969232681615), (double)double0, 0.01);
      
      Double double1 = new Double((byte)0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      doubleArray0[5] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-273.50969232681615), 0.0, (-273.50969232681615), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Float float0 = new Float((-61.0F));
      assertNotNull(float0);
      assertEquals((-61.0F), (float)float0, 0.01F);
      
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float1;
      Float float2 = new Float(0.0F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[1] = float2;
      floatArray0[2] = float1;
      floatArray0[3] = float1;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-61.0F), (-61.0F)}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 139.0, 139.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-273.50969232681615), 0.0, (-273.50969232681615), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      
      Double[] doubleArray2 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)54;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)35, (byte)0, (byte)54, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)35, (byte)0, (byte)54, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte)35);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(7, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)35, (byte)0, (byte)54, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)35, (byte)0, (byte)54, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)35, (byte)0, (byte)54, (byte)0, (byte)35}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'n');
      assertEquals((-1), int0);
      
      ArrayUtils.swap(longArray0, (-2160), (-2160), (-287));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-287);
      doubleArray0[2] = (double) (-2160);
      doubleArray0[3] = (-991.2034911500001);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-2160);
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1L)}, longArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-1529);
      shortArray0[3] = (short)932;
      shortArray0[4] = (short)1125;
      shortArray0[5] = (short)2352;
      shortArray0[6] = (short) (-1269);
      shortArray0[7] = (short) (-4);
      ArrayUtils.shift(shortArray0, (int) (short) (-4));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1125, (short)2352, (short) (-1269), (short) (-4), (short)0, (short)2, (short) (-1529), (short)932}, shortArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0, (double) (short)932);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-287.0), (-2160.0), (-991.2034911500001), (-1.0), (-2160.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)102);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)102}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short) (-14);
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short) (-14), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1379), (short) (-14), (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 14, 61);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'o');
      assertNull(charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1136;
      intArray0[1] = (int) (short) (-14);
      intArray0[2] = (int) (short) (-1379);
      intArray0[3] = (int) (short)0;
      ArrayUtils.shift(intArray0, (int) (short) (-1379), (int) (short) (-14), 3066);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1136, (-14), (-1379), 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (-3527L);
      longArray0[2] = (-1076L);
      longArray0[3] = (-1L);
      longArray0[4] = (-1720L);
      longArray0[6] = (-1076L);
      longArray0[7] = 1530L;
      longArray0[5] = (-585L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, (-3527L), (-1076L), (-1L), (-1720L), (-585L), (-1076L), 1530L, 0L}, longArray0);
      assertEquals(3, int0);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (-1720L), (double) 1530L);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, 2477L, 511);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, (-3527L), (-1076L), (-1L), (-1720L), (-585L), (-1076L), 1530L, 0L}, longArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) (-1076L);
      Long long0 = Long.getLong("\"<");
      assertNull(long0);
      
      longArray1[1] = null;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertEquals(2, longArray2.length);
      assertEquals(2, longArray1.length);
      assertSame(longArray2, longArray1);
      assertSame(longArray1, longArray2);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3287;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 139;
      doubleArray0[3] = (double) 342;
      doubleArray0[4] = (double) 139;
      doubleArray0[5] = (double) 139;
      doubleArray0[6] = (double) 139;
      doubleArray0[7] = (double) 139;
      doubleArray0[8] = (double) 342;
      double[] doubleArray1 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-578.0223661), 139, (-702.1));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3287.0, (-1.0), 139.0, 342.0, 139.0, 139.0, 139.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals((-1), int0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int int1 = ArrayUtils.indexOf((char[]) null, ':', (-2290));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2290);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-2290), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-2290), (-1), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray2 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray2);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {(-2290), (-1), (-1)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      assertArrayEquals(new byte[] {(byte)32}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      float[] floatArray0 = new float[7];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2191.7376710391;
      doubleArray0[1] = (-4136.2819);
      doubleArray0[2] = 1588.5161;
      doubleArray0[3] = 100.0;
      ArrayUtils.swap(doubleArray0, (-676), 81);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2191.7376710391, (-4136.2819), 1588.5161, 100.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "NA";
      stringArray0[1] = "Cv`ZLoP/P\"V-k3%/";
      stringArray0[2] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[3] = "The type must not be null";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String[] stringArray2 = ArrayUtils.nullToEmpty(stringArray1);
      assertNotNull(stringArray2);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertEquals(4, stringArray2.length);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray2);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-676), 81);
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2191.7376710391, (-4136.2819), 1588.5161, 100.0}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-676);
      floatArray0[1] = (float) (-676);
      floatArray0[2] = (float) (-676);
      floatArray0[3] = (float) (-676);
      floatArray0[4] = (float) (-676);
      floatArray0[5] = (float) 81;
      floatArray0[6] = (float) 81;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-676.0F));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {81.0F, 81.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-676.0F), (-676.0F), (-676.0F), (-676.0F), (-676.0F), 81.0F, 81.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-676);
      intArray0[1] = (-676);
      intArray0[2] = (-676);
      intArray0[3] = 81;
      ArrayUtils.shift(intArray0, 81);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {81, (-676), (-676), (-676)}, intArray0);
      
      String string0 = ArrayUtils.toString((Object) "NA");
      assertNotNull(string0);
      assertEquals("NA", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-972));
      assertNotNull(integer0);
      assertEquals((-972), (int)integer0);
      
      Integer integer1 = new Integer((-2821));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2821), (int)integer1);
      
      Integer integer2 = new Integer(4);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(4, (int)integer2);
      
      Integer integer3 = Integer.valueOf((-2821));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((-2821), (int)integer3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[3] = 'x';
      charArray0[4] = '0';
      charArray0[5] = 'O';
      charArray0[6] = 'I';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', 'x', '0', 'O', 'I'}, charArray0);
      assertEquals(3, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '0';
      doubleArray0[3] = (double) '0';
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 3;
      ArrayUtils.shift(doubleArray0, 1136, (-4662), (-119));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {48.0, 0.0, 0.0, 48.0, 4.0, 3.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)86;
      ArrayUtils.swap(byteArray0, 4, (int) (byte)31, 2);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)31, (byte)31, (byte)0, (byte)90, (byte)0, (byte)86}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 139, 342, 3287);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray3);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 342;
      intArray0[1] = 3047;
      ArrayUtils.shift((char[]) null, 342);
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[8];
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null, (short) (-541));
      assertNull(shortArray1);
      
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 582;
      floatArray0[2] = (float) 342;
      floatArray0[3] = (float) 582;
      floatArray0[4] = (float) 3287;
      floatArray0[5] = (float) 3047;
      floatArray0[6] = (float) 342;
      floatArray0[7] = (float) 139;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 582.0F, 342.0F, 582.0F, 3287.0F, 3047.0F, 342.0F, 139.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 139.0F;
      doubleArray0[1] = (double) 342;
      doubleArray0[2] = (double) 3047;
      doubleArray0[3] = (double) 582;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 2647.33);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {139.0, 342.0, 3047.0, 582.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {139.0, 342.0, 3047.0, 582.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2695.9968F);
      floatArray0[1] = 1859.8734F;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) ')';
      intArray0[1] = (int) ')';
      intArray0[2] = (int) ')';
      intArray0[3] = (int) ')';
      intArray0[3] = (int) ')';
      intArray0[5] = (int) ')';
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeAll(intArray0, intArray1);
      assertNotNull(intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(6, intArray2.length);
      assertArrayEquals(new int[] {41, 41, 41, 41, 0, 41}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {41, 41, 41, 41, 0, 41}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = "', has a length less than 2";
      stringArray0[2] = "'^q43ZyB";
      stringArray0[3] = "D2]5JS!!ir};";
      stringArray0[4] = "java.lang.Byte";
      stringArray0[5] = "', has a length less than 2";
      stringArray0[6] = "Array element ";
      stringArray0[7] = "Xrx}t&";
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "org.apache.commons.lang3.mutable.MutableInt");
      assertNotNull(stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(41, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 41, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-20.83F);
      floatArray0[2] = (-1884.137F);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1884.137F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (-1.0);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1884.136962890625), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      ArrayUtils.swap(doubleArray0, 2, 2);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1884.136962890625), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[8] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, true, true, true}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-114);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)90, 2);
      assertNotNull(bitSet0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)90, (byte)6, (byte) (-121), (byte) (-114)}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-19);
      shortArray0[2] = (short) (-4086);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-19), (short) (-4086)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-19), (short) (-4086)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '&';
      charArray0[2] = 'I';
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.removeElement((long[]) null, (long) (byte)0);
      assertNull(longArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 90;
      doubleArray0[1] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2876.3), (int) (short) (-19));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {90.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2191.7376710391;
      doubleArray0[1] = (-4136.2819);
      doubleArray0[2] = 1588.5161;
      doubleArray0[3] = 100.0;
      ArrayUtils.swap(doubleArray0, (-676), 81);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2191.7376710391, (-4136.2819), 1588.5161, 100.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "NA";
      stringArray0[1] = "Cv`ZLoP/P\"V-k3%/";
      stringArray0[2] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[3] = "The type must not be null";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String[] stringArray2 = ArrayUtils.nullToEmpty(stringArray1);
      assertNotNull(stringArray2);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertEquals(4, stringArray2.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray1, stringArray2);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-676), 81);
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2191.7376710391, (-4136.2819), 1588.5161, 100.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-676);
      floatArray0[1] = (float) (-676);
      floatArray0[2] = (float) (-676);
      floatArray0[3] = (float) (-676);
      floatArray0[4] = (float) (-676);
      floatArray0[5] = (float) 81;
      floatArray0[6] = (float) 81;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-676.0F));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {81.0F, 81.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-676.0F), (-676.0F), (-676.0F), (-676.0F), (-676.0F), 81.0F, 81.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-676), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -676, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      float[] floatArray0 = new float[7];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4086);
      shortArray0[1] = (short)2;
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short)2);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, 767, 532);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) (-1));
      assertNotNull(floatArray2);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray2.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[2] = 'K';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '|';
      charArray0[6] = 'N';
      charArray0[7] = 'z';
      charArray0[8] = 'C';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'K', '$', '$', '|', 'N', 'z', 'C'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'K', '$', '$', '|', 'N', 'z', 'C'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'K';
      intArray0[1] = (int) '|';
      intArray0[2] = (int) 'z';
      intArray0[3] = (int) '$';
      intArray0[4] = (int) 'z';
      int int0 = ArrayUtils.indexOf(intArray0, 75, 532);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {75, 124, 122, 36, 122}, intArray0);
      assertEquals((-1), int0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-69.0337));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-69.0337), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertNotNull(double2);
      assertEquals(4, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-69.0337), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-69.0337));
      assertNotNull(double3);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((-69.0337), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-69.0337), (-69.0337), (-69.0337)}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 2826.2286130836105, (-874), (double) doubleArray0[1]);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-69.0337), (-69.0337), (-69.0337)}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2839;
      shortArray0[1] = (short) (-1053);
      shortArray0[2] = (short)26713;
      ArrayUtils.shift(shortArray0, (-703), (-691), (int) (short)26713);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2839, (short) (-1053), (short)26713}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short)1925;
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1925;
      shortArray1[1] = (short)26713;
      shortArray1[2] = (short)1925;
      shortArray1[3] = (short)1925;
      shortArray1[4] = (short)1925;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)1925, (short)26713, (short)1925, (short)1925, (short)1925}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertArrayEquals(new short[] {(short)1925, (short)26713, (short)1925, (short)1925, (short)1925}, shortArray1);
      assertArrayEquals(new short[] {(short)1925, (short)26713, (short)1925, (short)1925, (short)1925}, shortArray2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-19);
      shortArray0[2] = (short) (-4086);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-19), (short) (-4086)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-19), (short) (-4086)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '&';
      charArray0[2] = 'I';
      charArray0[3] = 'V';
      charArray0[5] = 'g';
      charArray0[6] = '6';
      charArray0[7] = '|';
      charArray0[8] = 'K';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {'/', '&', 'I', 'V', '\u0000', 'g', '6', '|', 'K'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'I';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {73.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      
      ArrayUtils.reverse((long[]) null);
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 2255L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-627.7315F);
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4086);
      shortArray0[1] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (int) (short) (-4086));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4086), (short)2}, shortArray0);
      assertEquals(1, int0);
      
      ArrayUtils.shift((Object[]) floatArray1, (int) (short)2, 165, (-1184));
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(4.0);
      assertNotNull(double0);
      assertEquals(4.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1.5);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.5, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.5);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(1.5, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-3368.39493));
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((-3368.39493), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double[] doubleArray1 = ArrayUtils.removeElements((Double[]) null, doubleArray0);
      assertNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.5298000574111938);
      doubleArray0[1] = (-2106.3);
      doubleArray0[2] = 397.08;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.5298000574111938), (-2106.3), 397.08, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, int0);
      
      long[] longArray0 = new long[1];
      doubleArray0[4] = (double) 4;
      int int1 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      intArray0[2] = 4;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {4, 0, 4}, intArray0);
      assertArrayEquals(new int[] {4, 0, 4, 4, 0, 4}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short) (-663);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)32, (short) (-663)}, shortArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-702.1), (-1), 1.0);
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.5298000574111938), (-2106.3), 397.08, 1.0, 4.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      Long[] longArray2 = new Long[0];
      Long[] longArray3 = ArrayUtils.nullToEmpty(longArray2);
      assertNotNull(longArray3);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte) (-14);
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-28), (int) (byte) (-99));
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11, (byte)18, (byte) (-48), (byte)3, (byte)50, (byte) (-106), (byte) (-1), (byte) (-99), (byte) (-14)}, byteArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = new boolean[9];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[5] = true;
      booleanArray1[7] = true;
      booleanArray1[8] = true;
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray1, false);
      assertNotNull(booleanArray2);
      assertEquals(9, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte) (-32);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)9);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-1), (byte) (-109), (byte) (-79), (byte)123, (byte) (-32)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-1), (byte)9, (byte) (-109), (byte) (-79), (byte)123, (byte) (-32)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-109);
      shortArray0[1] = (short) (byte)123;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte)123;
      shortArray0[4] = (short) (byte)9;
      shortArray0[5] = (short) (byte)9;
      shortArray0[6] = (short) (byte)123;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)79);
      assertNotNull(bitSet0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-109), (short)123, (short) (-1), (short)123, (short)9, (short)9, (short)123}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)122);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Double double0 = new Double((byte)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((short)122);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(122.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double1;
      doubleArray0[8] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {122.0, 0.0, 122.0, 0.0, 0.0, 0.0, 0.0, 122.0, 122.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) doubleArray0[8], 1237, (double) doubleArray0[6]);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {122.0, 0.0, 122.0, 0.0, 0.0, 0.0, 0.0, 122.0, 122.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (short)122;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (short)122;
      floatArray0[5] = (float) (short)122;
      float[] floatArray1 = ArrayUtils.insert((int) (byte)0, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 122.0F, 0.0F, 122.0F, 122.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)0;
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) (short)0);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[5];
      Float float2 = new Float((float) 0);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[0] = float2;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      Float float3 = new Float((double) floatArray0[1]);
      assertNotNull(float3);
      assertEquals(5, floatArray0.length);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) (short)0);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (-2147483648L);
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)1;
      longArray0[7] = (long) (short)0;
      longArray0[8] = (long) 0;
      ArrayUtils.swap(longArray0, (-177), (int) (short)1, 57);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-2147483648L), 0L, 0L, 1L, 0L, 0L, 0L}, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '4', 321);
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray3);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertSame(booleanArray3, booleanArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 342;
      intArray0[1] = 3047;
      ArrayUtils.shift((char[]) null, 342);
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-3093));
      assertEquals((-1), int0);
      
      ArrayUtils.swap(intArray0, (int) (short) (-541), (int) (short) (-541));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {342, 3047}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-60);
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-60));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-60)}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray3, (Random) mockRandom0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertSame(booleanArray3, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-606));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1908.084720006171);
      assertNotNull(double0);
      assertEquals(1908.084720006171, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1908.084720006171, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1429.9194097);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(1429.9194097, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Class<Double[]> class0 = Double[].class;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0, class0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(58L);
      assertNotNull(long0);
      assertEquals(58L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1399L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1399L, (long)long1);
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      ArrayUtils.reverse(intArray0, 229, (-3523));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      
      ArrayUtils.reverse(intArray1, 2147171572, 53);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = Character.valueOf('S');
      assertNotNull(character0);
      assertEquals('S', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('?');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('?', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('?');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertEquals('?', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('|');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertEquals('|', (char)character3);
      
      characterArray0[3] = character3;
      char char0 = 'F';
      Character character4 = Character.valueOf('F');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertEquals('F', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('\"');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char0));
      assertEquals('\"', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertNotNull(character6);
      assertTrue(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character5));
      assertEquals('F', (char)character6);
      
      characterArray0[6] = character6;
      char char1 = '(';
      Character character7 = Character.valueOf('(');
      assertNotNull(character7);
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      assertEquals('(', (char)character7);
      
      characterArray0[7] = character7;
      Character character8 = new Character('O');
      assertNotNull(character8);
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)char0));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)char1));
      assertEquals('O', (char)character8);
      
      characterArray0[8] = character8;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character6);
      assertNotNull(charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'S', '?', '?', '|', 'F', '\"', 'F', '(', 'O'}, charArray0);
      assertTrue(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character8));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)char1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character7));
      assertFalse(char0 == char1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '|';
      longArray0[1] = (long) char1;
      longArray0[2] = (long) (char)character5;
      longArray0[3] = (long) (char)character2;
      longArray0[4] = (long) char1;
      longArray0[5] = (long) (char)character1;
      longArray0[6] = (long) '|';
      int int0 = ArrayUtils.indexOf(longArray0, 125L);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {124L, 40L, 34L, 63L, 40L, 63L, 124L}, longArray0);
      assertEquals((-1), int0);
      
      Long long0 = new Long((long) character1);
      assertNotNull(long0);
      assertFalse(character1.equals((Object)character5));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character4));
      assertTrue(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character7));
      assertFalse(character1.equals((Object)char1));
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character3));
      assertFalse(character1.equals((Object)character6));
      assertFalse(character1.equals((Object)character8));
      assertEquals(63L, (long)long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object0);
      assertFalse(character1.equals((Object)character5));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character4));
      assertTrue(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character7));
      assertFalse(character1.equals((Object)char1));
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character3));
      assertFalse(character1.equals((Object)character6));
      assertFalse(character1.equals((Object)character8));
      assertEquals(63L, object0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(2825.13987876);
      assertNotNull(double0);
      assertEquals(2825.13987876, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1503.144831));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1503.144831), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(4, doubleArray0.length);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(2825.13987876, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      ArrayUtils.reverse((byte[]) null);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1952;
      shortArray0[1] = (short) (-564);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-3788);
      shortArray0[4] = (short)2328;
      shortArray0[5] = (short) (-325);
      shortArray0[6] = (short)1027;
      ArrayUtils.reverse(shortArray0, 128, (int) (short)1);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1952, (short) (-564), (short)1, (short) (-3788), (short)2328, (short) (-325), (short)1027}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1261L);
      longArray0[1] = (long) ' ';
      longArray0[2] = (-46L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {(-1261L), 32L, (-46L)}, longArray0);
      
      ArrayUtils.reverse((byte[]) null);
      boolean boolean0 = ArrayUtils.contains(booleanArray1, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) ' ';
      floatArray0[1] = (float) (-46L);
      floatArray0[2] = (float) ' ';
      floatArray0[3] = (float) ' ';
      floatArray0[4] = (float) 'T';
      floatArray0[5] = (float) ' ';
      floatArray0[6] = (float) 32L;
      floatArray0[7] = (float) (-1261L);
      floatArray0[8] = (float) (-46L);
      boolean boolean1 = ArrayUtils.contains(floatArray0, 271.40442F);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {32.0F, (-46.0F), 32.0F, 32.0F, 84.0F, 32.0F, 32.0F, (-1261.0F), (-46.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = 'a';
      charArray0[5] = '1';
      charArray0[6] = '1';
      charArray0[7] = '1';
      charArray0[8] = '1';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '+');
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'1', '1', '1', '1', 'a', '1', '1', '1', '1'}, charArray0);
      assertArrayEquals(new char[] {'1', '1', '1', '1', 'a', '1', '1', '1', '1'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-41);
      ArrayUtils.shift(byteArray0, (int) (byte)39);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-41)}, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'a';
      longArray0[1] = (long) (byte)39;
      longArray0[2] = (-196L);
      longArray0[3] = (long) (byte)1;
      longArray0[4] = (-1361L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 84L, 2494);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {97L, 39L, (-196L), 1L, (-1361L)}, longArray0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "@KM&O4H$}i");
      assertNull(stringArray0);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = (Character) '1';
      characterArray0[1] = (Character) '1';
      characterArray0[2] = (Character) '1';
      characterArray0[3] = (Character) '1';
      characterArray0[4] = (Character) '1';
      characterArray0[5] = (Character) '1';
      characterArray0[6] = (Character) '1';
      Character character0 = Character.valueOf('1');
      assertNotNull(character0);
      assertEquals('1', (char)character0);
      
      Character[] characterArray1 = ArrayUtils.addFirst(characterArray0, character0);
      assertNotNull(characterArray1);
      assertEquals(7, characterArray0.length);
      assertEquals(8, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[2] = boolean1;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)122;
      byteArray0[0] = (byte) (-75);
      longArray0[2] = (long) (byte) (-75);
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte) (-75);
      longArray0[5] = (long) (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-75), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -75, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Double double0 = new Double(1.5);
      assertNotNull(double0);
      assertEquals(1.5, (double)double0, 0.01);
      
      Double double1 = new Double((-1.0));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      
      Double double2 = new Double((-359.31049221858));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-359.31049221858), (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double2;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      boolean boolean1 = ArrayUtils.contains((int[]) null, 0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-157), 1, 0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2;
      shortArray0[2] = (short)118;
      shortArray0[3] = (short)2534;
      shortArray0[4] = (short) (-281);
      shortArray0[5] = (short)889;
      shortArray0[6] = (short) (-752);
      shortArray0[7] = (short)25022;
      shortArray0[8] = (short) (-7697);
      ArrayUtils.shuffle(shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)118, (short)2534, (short) (-281), (short)889, (short) (-752), (short)25022, (short) (-7697), (short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray1 = new char[9];
      charArray1[0] = '8';
      charArray1[1] = 'v';
      charArray1[2] = '5';
      charArray1[3] = 'x';
      charArray1[4] = 'm';
      charArray1[5] = '\'';
      charArray1[6] = 'D';
      charArray1[7] = '_';
      charArray1[8] = '$';
      int int0 = ArrayUtils.lastIndexOf(charArray1, 'U', (-863));
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'8', 'v', '5', 'x', 'm', '\'', 'D', '_', '$'}, charArray1);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-23);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)45, (byte) (-6), (byte) (-23)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)45, (byte) (-6), (byte) (-23)}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-1063L);
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'B', (int) (byte) (-75));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'B', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-2025.09F));
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-2025.09F)}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1286);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1321));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-1286), 0}, intArray0);
      assertArrayEquals(new int[] {(-1286), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      ArrayUtils.swap(charArray0, 811, (-1286), 2610);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'w'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = 'T';
      charArray0[2] = '*';
      charArray0[3] = ' ';
      ArrayUtils.swap(charArray0, 1399, 357, 1296);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {' ', 'T', '*', ' '}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) ' ';
      longArray0[1] = (-127L);
      longArray0[2] = (long) 1296;
      longArray0[3] = (long) ' ';
      longArray0[4] = 762L;
      longArray0[5] = (long) ' ';
      longArray0[6] = (-382L);
      longArray0[7] = (long) '*';
      longArray0[8] = (long) ' ';
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) 1399);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {32L, (-127L), 1296L, 32L, 762L, 32L, (-382L), 42L, 32L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      char char0 = 'T';
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('T');
      assertNotNull(character1);
      assertEquals('T', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertEquals('T', (char)character2);
      
      characterArray0[2] = character2;
      char char1 = 'N';
      Character character3 = Character.valueOf('N');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertEquals('N', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(char0);
      assertNotNull(character4);
      assertFalse(char0 == char1);
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char1));
      assertTrue(character4.equals((Object)char0));
      assertEquals('T', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('~');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char1));
      assertEquals('~', (char)character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'T', 'T', 'T', 'N', 'T', '~'}, charArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'N';
      doubleArray0[1] = (double) char0;
      doubleArray0[2] = (double) '~';
      doubleArray0[3] = (double) (char)character5;
      doubleArray0[4] = (double) char0;
      doubleArray0[5] = 1209.3287229707457;
      doubleArray0[6] = (double) '~';
      doubleArray0[7] = 1147.44471196009;
      doubleArray0[8] = (double) (char)character4;
      int int0 = ArrayUtils.indexOf(doubleArray0, 268.5298000574112);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {78.0, 84.0, 126.0, 126.0, 84.0, 1209.3287229707457, 126.0, 1147.44471196009, 84.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)24, (int) char1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(char1 == char0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (char)character4;
      longArray0[1] = (-4375L);
      longArray0[2] = (long) 'T';
      longArray0[3] = (long) char0;
      longArray0[4] = (long) (char)character4;
      ArrayUtils.shuffle(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-4375L), 84L, 84L, 84L, 84L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'n');
      assertEquals((-1), int0);
      
      ArrayUtils.swap(longArray0, (-2160), (-2160), (-287));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L}, longArray0);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-1130), (-2160));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-28);
      int int2 = ArrayUtils.indexOf(byteArray0, (byte)114, 2147);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)31, (byte) (-28)}, byteArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = ArrayUtils.insert(1136, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Double double0 = new Double(124.07763390000002);
      assertNotNull(double0);
      assertEquals(124.07763390000002, (double)double0, 0.01);
      
      Double double1 = new Double(0.7);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.7, (double)double1, 0.01);
      
      Double double2 = new Double(3195.0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(3195.0, (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double2;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2057.050259742928));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {3195.0, 0.7, 0.7}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3);
      shortArray0[1] = (short)932;
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      Character character1 = Character.valueOf('o');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('o', (char)character1);
      
      Character character2 = new Character('o');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertEquals('o', (char)character2);
      
      Boolean boolean0 = Boolean.valueOf("PH-3m");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = ':';
      charArray0[7] = ']';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {':', ':', ':', ':', ':', ':', ':', ']'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      Character character1 = Character.valueOf(']');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals(']', (char)character1);
      
      Character character2 = new Character(' ');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals(' ', (char)character2);
      
      Boolean boolean1 = Boolean.valueOf("+S4Y");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[2] = 'K';
      charArray0[3] = '$';
      charArray0[4] = '{';
      charArray0[5] = '|';
      charArray0[6] = 'N';
      charArray0[7] = 'z';
      charArray0[8] = 'C';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'$', '\u0000', 'K', '$', '{', '|', 'N', 'z', 'C'}, charArray0);
      assertArrayEquals(new char[] {'$', '\u0000', 'K', '$', '{', '|', 'N', 'z', 'C'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'N';
      intArray0[1] = (int) '$';
      intArray0[2] = (int) '$';
      intArray0[3] = (int) 'K';
      intArray0[4] = (-574);
      intArray0[5] = (int) '$';
      intArray0[6] = (int) 'z';
      intArray0[7] = (int) 'K';
      intArray0[8] = (int) 'z';
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {78, 36, 36, 75, (-574), 36, 122, 75, 122}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 139, 342, 3287);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray3);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 342;
      intArray0[1] = 3047;
      ArrayUtils.shift((char[]) null, 342);
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[8];
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null, (short) (-541));
      assertNull(shortArray1);
      
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 582;
      floatArray0[2] = (float) 342;
      floatArray0[3] = (float) 582;
      floatArray0[4] = (float) 3287;
      floatArray0[5] = (float) 3047;
      floatArray0[6] = (float) 342;
      floatArray0[7] = (float) 139;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 582.0F, 342.0F, 582.0F, 3287.0F, 3047.0F, 342.0F, 139.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 582.0F, 342.0F, 582.0F, 3287.0F, 3047.0F, 342.0F, 139.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf((char[]) null, '?', 9);
      assertEquals((-1), int0);
      
      short[] shortArray2 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (-1L);
      longArray0[2] = 1L;
      longArray0[3] = 1L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1L), 1L, 1L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 1L, 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = 226.01F;
      floatArray0[2] = (float) 1L;
      ArrayUtils.shift(floatArray0, 1202);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {226.01F, 1.0F, 1.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1202;
      intArray0[1] = 1202;
      intArray0[2] = 1202;
      intArray0[3] = 1202;
      intArray0[4] = 1202;
      intArray0[5] = 1202;
      intArray0[6] = 1202;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 1202);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1202, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (double) (short)2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2328, (double) (short)932);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      
      Class<MutableInt[]> class0 = MutableInt[].class;
      MutableInt[] mutableIntArray0 = ArrayUtils.nullToEmpty((MutableInt[]) null, class0);
      assertNotNull(mutableIntArray0);
      assertEquals(0, mutableIntArray0.length);
      
      ArrayUtils.swap((Object[]) mutableIntArray0, (int) (short)2, (-1564), (-1564));
      assertEquals(0, mutableIntArray0.length);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Integer integer0 = new Integer((short)1445);
      assertNotNull(integer0);
      assertEquals(1445, (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      int int0 = 1209;
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, 1209, (Integer) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1209, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-627.7315F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-627.7315F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray2 = new float[0];
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray2);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)122);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[2] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[3] = boolean2;
      Boolean boolean3 = Boolean.valueOf(false);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      booleanArray0[4] = boolean3;
      Boolean boolean4 = Boolean.valueOf(true);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4);
      
      booleanArray0[5] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5);
      
      booleanArray0[6] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6);
      
      booleanArray0[7] = boolean6;
      Boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(16, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)122;
      int int0 = ArrayUtils.indexOf(longArray0, (long) (short)122, 253);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {122L}, longArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray2 = ArrayUtils.add((boolean[]) null, (boolean) boolean0);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertFalse(boolean0.equals((Object)boolean6));
      assertFalse(boolean0.equals((Object)boolean4));
      assertFalse(boolean0.equals((Object)boolean2));
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2834;
      shortArray0[1] = (short) (-674);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)114;
      shortArray0[4] = (short)51;
      shortArray0[5] = (short)37;
      shortArray0[6] = (short)1187;
      shortArray0[7] = (short)3099;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2834);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)2834, (short) (-674), (short) (-1), (short)114, (short)51, (short)37, (short)1187, (short)3099}, shortArray0);
      assertArrayEquals(new short[] {(short) (-674), (short) (-1), (short)114, (short)51, (short)37, (short)1187, (short)3099}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)51);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3131;
      shortArray0[1] = (short) (-853);
      shortArray0[2] = (short)1421;
      shortArray0[3] = (short)9;
      shortArray0[4] = (short) (-184);
      shortArray0[5] = (short) (-1066);
      shortArray0[6] = (short)48;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-2547));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2547, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('a');
      assertNotNull(character0);
      assertEquals('a', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('1');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('1', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = ArrayUtils.get(characterArray0, 253);
      assertNull(character2);
      assertEquals(2, characterArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.reverse(shortArray0, (int) character1, 1056);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(character1.equals((Object)character0));
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'Q');
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'a', '1'}, charArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 1056;
      floatArray0[3] = (float) 253;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) 1056;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F));
      assertNotNull(bitSet0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1056.0F, 253.0F, 0.0F, 1056.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ArrayUtils.reverse(byteArray0, (-993), (int) (byte)1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '9';
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-109);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-109);
      shortArray0[4] = (short)180;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-109), (short) (-1), (short) (-1), (short) (-109), (short)180}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-1L));
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-4662);
      shortArray0[1] = (short) (-4662);
      shortArray0[2] = (short) (-4662);
      shortArray0[3] = (short) (-4662);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte) (-1);
      shortArray0[7] = (short) (-4662);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-4662), 1);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4662), (short) (-4662), (short) (-4662), (short) (-4662), (short) (-1), (short) (-1), (short) (-1), (short) (-4662)}, shortArray0);
      assertEquals(1, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-4662);
      intArray0[1] = (int) (short) (-4662);
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) (short) (-4662);
      intArray0[4] = 1;
      intArray0[5] = (int) (short) (-4662);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short) (-4662);
      intArray1[1] = (int) (short) (-4662);
      intArray1[2] = (int) (short) (-4662);
      intArray1[3] = 1;
      intArray1[4] = (int) (short) (-4662);
      boolean boolean4 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-4662), (-4662), (-1), (-4662), 1, (-4662)}, intArray0);
      assertArrayEquals(new int[] {(-4662), (-4662), (-4662), 1, (-4662)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean4);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)62;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)99);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)62}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)62}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = new boolean[9];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = true;
      booleanArray1[6] = false;
      booleanArray1[7] = true;
      booleanArray1[8] = true;
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray1, false);
      assertNotNull(booleanArray2);
      assertEquals(9, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte) (-32);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)9);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)0, (byte) (-1), (byte) (-1), (byte)9, (byte) (-109), (byte) (-79), (byte)123, (byte) (-32)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)62, (byte)0, (byte) (-1), (byte) (-1), (byte) (-109), (byte) (-79), (byte)123, (byte) (-32)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      ArrayUtils.shift(charArray0, (-1216));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', 'B'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)37);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)62, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)62, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte) (-16);
      shortArray0[3] = (short) (byte) (-16);
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)62;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-16), (short) (-16), (short)0, (short)62}, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, '_');
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-3093);
      intArray0[1] = (int) (short) (-3093);
      intArray0[2] = (int) (short) (-3093);
      intArray0[3] = (int) (short) (-3093);
      intArray0[4] = (int) (short) (-3093);
      intArray0[5] = (int) (short) (-3093);
      intArray0[6] = (int) (short) (-3093);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-3093), (-3093), (-3093), (-3093), (-3093), (-3093), (-3093)}, intArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = 'i';
      charArray0[2] = 'Z';
      charArray0[3] = 'q';
      charArray0[4] = 'd';
      charArray0[5] = ')';
      charArray0[6] = 'y';
      charArray0[7] = 'L';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'i');
      assertNotNull(charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'*', 'Z', 'q', 'd', ')', 'y', 'L'}, charArray1);
      assertArrayEquals(new char[] {'*', 'i', 'Z', 'q', 'd', ')', 'y', 'L'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = (Character) ')';
      characterArray0[1] = (Character) 'L';
      characterArray0[2] = (Character) 'i';
      characterArray0[3] = (Character) 'd';
      characterArray0[4] = (Character) 'q';
      characterArray0[5] = (Character) 'L';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(6, characterArray0.length);
      assertEquals(6, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'L';
      floatArray0[1] = (float) (-3093);
      floatArray0[2] = (float) 'd';
      ArrayUtils.swap(floatArray0, (-3093), 253, (-1552));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {76.0F, (-3093.0F), 100.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      int[] intArray0 = new int[3];
      MockRandom mockRandom0 = new MockRandom(1070L);
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0;
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(1, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) "I", 1592);
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-479.0F));
      assertNull(floatArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[0];
      double[] doubleArray0 = new double[0];
      LongStream longStream0 = mockRandom0.longs(772L);
      assertNotNull(longStream0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1994.7772231582644));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 46;
      intArray0[1] = 46;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {46, 46}, intArray0);
      assertTrue(boolean0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-1171));
      assertNull(object0);
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) mockRandom0);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1171);
      longArray0[1] = (long) 46;
      longArray0[2] = (long) 46;
      longArray0[3] = (long) 46;
      longArray0[4] = (long) 46;
      longArray0[5] = (long) 46;
      longArray0[6] = (long) 46;
      longArray0[7] = 32L;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      ArrayUtils.shuffle(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'Q'}, charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'Q';
      intArray0[1] = (int) 'Q';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {81, 81}, intArray0);
      assertArrayEquals(new int[] {81, 81}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'Q';
      longArray0[1] = 1L;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 81, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      long[] longArray0 = new long[2];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long[] longArray1 = ArrayUtils.clone((Long[]) null);
      assertNull(longArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-88), (byte)126, (byte) (-120), (byte) (-61), (byte) (-91), (byte)99, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.shift(byteArray1, (int) (byte) (-1), 2456, (int) (byte)126);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-88), (byte)126, (byte) (-120), (byte) (-61), (byte) (-91), (byte)99, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.shift(longArray0, 2724, (int) (byte)99, (-2146695000));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3287;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 139;
      doubleArray0[3] = (double) 342;
      doubleArray0[4] = (double) 139;
      doubleArray0[5] = (double) 139;
      doubleArray0[6] = (double) 139;
      doubleArray0[7] = (double) 139;
      doubleArray0[8] = (double) 342;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {3287.0, (-1.0), 139.0, 342.0, 139.0, 139.0, 139.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3287.0, (-1.0), 139.0, 342.0, 139.0, 139.0, 139.0, 139.0, 342.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-578.0223661), 139, (-702.1));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3287.0, (-1.0), 139.0, 342.0, 139.0, 139.0, 139.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertSame(doubleArray0, doubleArray1);
      
      int int1 = ArrayUtils.indexOf((char[]) null, ':', (-2290));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2290);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-2290), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-2290), (-1), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {3287.0, (-1.0), 139.0, 342.0, 139.0, 139.0, 139.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3287.0, (-1.0), 139.0, 342.0, 139.0, 139.0, 139.0, 139.0, 342.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {(-2290), (-1), (-1)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3269;
      doubleArray0[1] = (-1.0);
      doubleArray0[3] = (double) 342;
      doubleArray0[8] = (double) 342;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {3269.0, (-1.0), 0.0, 342.0, 0.0, 0.0, 0.0, 0.0, 342.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3269.0, (-1.0), 0.0, 342.0, 0.0, 0.0, 0.0, 0.0, 342.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 3269;
      longArray0[1] = (long) 342;
      longArray0[2] = (long) 342;
      longArray0[3] = 296L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 752L);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {3269L, 342L, 342L, 296L}, longArray0);
      assertArrayEquals(new long[] {3269L, 342L, 342L, 296L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 2119);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'd';
      charArray0[2] = 'H';
      charArray0[3] = 'z';
      charArray0[4] = 'K';
      charArray0[5] = '8';
      charArray0[6] = 'v';
      charArray0[7] = '[';
      charArray0[8] = 'z';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 3269, 342);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'f', 'd', 'H', 'z', 'K', '8', 'v', '[', 'z'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = '3';
      charArray0[4] = 's';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'T', 's', 's', '3', 's'}, charArray0);
      assertArrayEquals(new char[] {'T', 's', 's', '3', 's', 'T', 's', 's', '3', 's'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '3';
      intArray0[1] = (int) (short)2;
      intArray0[2] = 0;
      intArray0[3] = (int) (short)2;
      intArray0[4] = (int) 'T';
      intArray0[5] = (int) 'T';
      ArrayUtils.reverse(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {84, 84, 2, 0, 2, 51}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {84, 84, 2, 0, 2, 51}, intArray0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 3213L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)73;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-1));
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)89, (byte)53, (byte)1, (byte)65, (byte) (-119), (byte)42, (byte)107, (byte)0, (byte)73}, byteArray0);
      assertArrayEquals(new byte[] {(byte)89, (byte)53, (byte)1, (byte)65, (byte) (-119), (byte)42, (byte)107, (byte)0, (byte)73}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)1;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)65;
      floatArray0[3] = (float) (byte) (-119);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-603.50824F));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, 65.0F, (-119.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, 65.0F, (-119.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)89;
      intArray0[1] = (int) (byte)42;
      intArray0[2] = (int) (byte)65;
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte)53;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = (int) (byte)42;
      intArray0[7] = (int) (byte)65;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)42, 120);
      assertNotNull(bitSet0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {89, 42, 65, (-1), 53, 1, 42, 65}, intArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(':');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals(':', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = new Character[6];
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      characterArray1[0] = character1;
      characterArray1[1] = character0;
      characterArray1[2] = character0;
      Character character2 = Character.valueOf((char) character0);
      assertNotNull(character2);
      assertFalse(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('t', (char)character2);
      
      characterArray1[3] = character2;
      characterArray1[4] = character0;
      characterArray1[5] = character1;
      Character[] characterArray2 = ArrayUtils.addAll(characterArray0, characterArray1);
      assertNotNull(characterArray2);
      assertEquals(2, characterArray0.length);
      assertEquals(6, characterArray1.length);
      assertEquals(8, characterArray2.length);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertFalse(characterArray2.equals((Object)characterArray1));
      assertFalse(characterArray2.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray2);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray1, characterArray2);
      assertNotSame(characterArray2, characterArray1);
      assertNotSame(characterArray2, characterArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-84));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)117, (byte)112, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)117, (byte)112, (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-126);
      byteArray0[7] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      ArrayUtils.reverse(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-126), (byte)2, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = '|';
      charArray0[2] = 'i';
      charArray0[3] = 'y';
      charArray0[4] = 'j';
      charArray0[5] = '5';
      charArray0[6] = '3';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'^', '|', 'i', 'y', 'j', '5', '3'}, charArray0);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '|';
      charArray1[1] = '|';
      boolean boolean1 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'^', '|', 'i', 'y', 'j', '5', '3'}, charArray0);
      assertArrayEquals(new char[] {'|', '|'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)0;
      ArrayUtils.swap(shortArray0, (int) (short)1, 0, 12);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)1;
      intArray0[3] = 12;
      intArray0[4] = (int) (short)1;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-34));
      assertNotNull(byte0);
      assertEquals((byte) (-34), (byte)byte0);
      
      Byte byte1 = new Byte((byte)107);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)107, (byte)byte1);
      
      Byte byte2 = new Byte((byte)11);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)11, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-79));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-79), (byte)byte3);
      
      Byte byte4 = Byte.valueOf((byte)44);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)44, (byte)byte4);
      
      Byte byte5 = Byte.valueOf((byte)44);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte)44, (byte)byte5);
      
      Byte[] byteArray0 = new Byte[10];
      byteArray0[0] = byte3;
      byteArray0[1] = byte2;
      byteArray0[2] = byte1;
      byteArray0[3] = byte5;
      byteArray0[4] = byte4;
      byteArray0[5] = byte4;
      byteArray0[6] = byte4;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.52980006);
      doubleArray0[1] = (-1.52980006);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = ')';
      charArray0[5] = 'T';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z', 101);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'T', 'T', 'T', 'T', ')', 'T'}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-37), 1526);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte) (-20);
      ArrayUtils.reverse(byteArray0, 2100799220, 2);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte) (-38), (byte) (-90), (byte)56, (byte)2, (byte)89, (byte) (-20)}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte) (-38), (byte) (-90), (byte)56, (byte)2, (byte)89, (byte) (-20)}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = 1070L;
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockRandom0;
      ArrayUtils.shift(objectArray0, 2239);
      assertEquals(1, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], 2);
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2239;
      intArray0[1] = 2239;
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      charArray0[6] = 'Z';
      charArray0[7] = 'Z';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z', 2239);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'}, charArray0);
      assertEquals(7, int0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) 'Z';
      intArray1[1] = (int) 'Z';
      intArray1[2] = (int) 'Z';
      intArray1[3] = 7;
      ArrayUtils.reverse(intArray1, 2239, (-49));
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {90, 90, 90, 7}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1136;
      intArray0[1] = 1136;
      intArray0[1] = 1136;
      intArray0[3] = 76;
      intArray0[6] = 76;
      intArray0[7] = 7;
      ArrayUtils.shift(intArray0, (-1204), 0, (-401));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1136, 1136, 0, 76, 0, 0, 76, 7}, intArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1136;
      doubleArray0[1] = (double) 76;
      doubleArray0[2] = (double) 1136;
      doubleArray0[3] = (double) (-401);
      doubleArray0[4] = (double) 7;
      doubleArray0[5] = (double) (-1204);
      doubleArray0[6] = (double) 76;
      doubleArray0[7] = (double) 90;
      doubleArray0[8] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2253.772393539276), (-1204));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1136.0, 76.0, 1136.0, (-401.0), 7.0, (-1204.0), 76.0, 90.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 6639);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3929);
      shortArray0[1] = (short) (-3929);
      shortArray0[2] = (short)2998;
      shortArray0[3] = (short) (-3929);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 6639);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3929);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)2998;
      shortArray0[3] = (short)1352;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(6639, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6639, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1286);
      intArray0[1] = (-35);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1321));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-1286), (-35)}, intArray0);
      assertArrayEquals(new int[] {(-1286), (-35)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      boolean boolean3 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-75)}, byteArray0);
      assertTrue(boolean3);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)122;
      longArray0[1] = (long) (byte) (-75);
      longArray0[2] = (long) (byte) (-75);
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte) (-75);
      longArray0[5] = (long) (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-75), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -75, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-82)}, byteArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 3287;
      long[] longArray1 = ArrayUtils.insert(9, longArray0, (long[]) null);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {3287L}, longArray0);
      assertArrayEquals(new long[] {3287L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)71;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)22, (byte) (-121), (byte)97, (byte)1, (byte) (-61), (byte) (-80), (byte)0, (byte)71}, byteArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (byte)0;
      longArray1[1] = (long) (byte) (-61);
      longArray1[2] = (long) (byte)22;
      longArray1[3] = (long) (byte)0;
      longArray1[4] = (long) (byte) (-80);
      longArray1[5] = (long) (byte) (-80);
      longArray1[6] = (long) (byte) (-61);
      longArray1[7] = (long) 106;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(106, longArray0, longArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 106, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1379), (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-1379);
      longArray0[2] = (long) (short) (-1379);
      longArray0[4] = (long) (short)0;
      longArray0[6] = (long) (short) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1379L), (-1379L), 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-1379L);
      objectArray0[1] = (Object) (-1L);
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short) (-1);
      Object object0 = ArrayUtils.get((Object[]) null, (int) 0, (Object) 0);
      assertNotNull(object0);
      assertEquals((short)0, object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) 0L;
      ArrayUtils.shift(objectArray0, (int) (short) (-1));
      assertEquals(7, objectArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)6;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-29));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-31), (byte) (-29), (byte)2, (byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-29), (byte) (-1), (byte) (-31), (byte) (-29), (byte)2, (byte)6}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2191.7376710391;
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(2146235110);
      assertNotNull(integer0);
      assertEquals(2146235110, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 139, 342, 342);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray3);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 342;
      intArray0[1] = 3047;
      ArrayUtils.shift((char[]) null, 342);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 582;
      floatArray0[2] = (float) 342;
      floatArray0[3] = (float) 582;
      floatArray0[4] = (float) 139;
      floatArray0[5] = (float) 3047;
      floatArray0[6] = (float) 342;
      floatArray0[7] = (float) 139;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 582.0F, 342.0F, 582.0F, 139.0F, 3047.0F, 342.0F, 139.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 582.0F, 342.0F, 582.0F, 139.0F, 3047.0F, 342.0F, 139.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf((char[]) null, '?', 9);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 342.0F;
      doubleArray0[1] = (double) 342;
      doubleArray0[2] = (double) 582.0F;
      ArrayUtils.swap(doubleArray0, (int) (short) (-541), 342, 342);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {342.0, 342.0, 582.0}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 342;
      integerArray0[1] = (Integer) 3047;
      integerArray0[2] = (Integer) 3047;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1379), (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-1379);
      longArray0[2] = (long) (short) (-1379);
      ArrayUtils.swap(longArray0, (int) (short) (-1), (-728), (int) (short)0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1379L), (-1379L), 0L, 0L, 0L, 0L}, longArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-706), 321);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals((-1), int0);
      assertNotSame(shortArray0, shortArray1);
      
      ArrayUtils.reverse(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1379)}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '>', 1);
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'>', '>', '>'}, charArray0);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      Short[] shortArray2 = new Short[6];
      Short short0 = new Short((short) (-706));
      assertNotNull(short0);
      assertEquals((short) (-706), (short)short0);
      
      shortArray2[0] = short0;
      shortArray2[1] = (Short) (short) (-1);
      shortArray2[2] = (Short) (short)0;
      shortArray2[3] = (Short) (short)0;
      shortArray2[4] = (Short) (short)0;
      Short short1 = new Short((short) (-1));
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-1), (short)short1);
      
      shortArray2[5] = short1;
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Short[] shortArray3 = ArrayUtils.removeElement(shortArray2, (Object) long0);
      assertNotNull(shortArray3);
      assertEquals(6, shortArray2.length);
      assertEquals(6, shortArray3.length);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (-1650L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1650L));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1L, 0L, (-1650L)}, longArray0);
      assertEquals(2, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      Long[] longArray1 = ArrayUtils.addAll((Long[]) null, (Long[]) null);
      assertNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0, 1, 2);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, true}, booleanArray0));
      
      Character character0 = new Character('_');
      assertNotNull(character0);
      assertEquals('_', (char)character0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-702.1));
      assertNotNull(double0);
      assertEquals((-702.1), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2142.725271827549));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2142.725271827549), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(comparator0).compare(anyDouble() , anyDouble());
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0, comparator0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      float[] floatArray0 = new float[7];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4086);
      short short0 = (short)2;
      shortArray0[1] = (short)2;
      Integer[] integerArray0 = new Integer[4];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short)2);
      assertNotNull(intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 2, 2}, intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-4086), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4086), (short)2, (short) (-4086), (short)2}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-63);
      intArray0[2] = (-63);
      intArray0[4] = (-63);
      intArray0[5] = 852;
      intArray0[6] = (-88);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-63);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 1.5, 3, 100.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray1, 0.01);
      assertEquals(0, int0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, '\'', (-63));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {0, (-63), (-63), 0, (-63), 852, (-88)}, intArray0);
      assertArrayEquals(new int[] {0, (-63), (-63), 0, (-63), 852, (-88)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      double[] doubleArray3 = ArrayUtils.removeElements(doubleArray2, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray3.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-1125), (byte)121);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1125, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (-1L);
      Double double0 = new Double((-1L));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) doubleArray0[0]);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[9];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, 267.0, 2143367094, (-1.5298000574111938));
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.swap((Object[]) doubleArray0, 32, 876);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray1, (double) (-2L));
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = (Float) (float)(-2L);
      Float float0 = new Float((double) 226.01F);
      assertNotNull(float0);
      assertEquals(226.01F, (float)float0, 0.01F);
      
      floatArray0[4] = (Float) (float)1L;
      Float float1 = new Float((double) 226.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(226.01F, (float)float1, 0.01F);
      
      floatArray0[6] = (Float) (float)0L;
      Float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = 1L;
      longArray0[3] = (-2L);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2L);
      floatArray0[1] = 226.01F;
      floatArray0[2] = (float) 1L;
      Double double0 = new Double((-2.0F));
      assertNotNull(double0);
      assertEquals((-2.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) doubleArray0[0]);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[9];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, 267.0, (-4086), (-1.5298000574111938));
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      
      ArrayUtils.swap((Object[]) doubleArray0, 32, 894);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-2.0F), 226.01F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray1, (double) (-2L));
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray3.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Float[] floatArray1 = new Float[7];
      floatArray1[0] = (Float) 1.0F;
      floatArray1[1] = (Float) 1.0F;
      Float float0 = new Float((double) 226.01F);
      assertNotNull(float0);
      assertEquals(226.01F, (float)float0, 0.01F);
      
      floatArray1[2] = float0;
      floatArray1[3] = (Float) (-2.0F);
      floatArray1[4] = (Float) (-2.0F);
      Float float1 = new Float((double) 226.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(226.01F, (float)float1, 0.01F);
      
      floatArray1[5] = float1;
      floatArray1[6] = (Float) 226.01F;
      Float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)0;
      int[] intArray0 = new int[5];
      intArray0[0] = 8;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-177), 68);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.shift(intArray0, (-1011));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 8}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 8.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 8.0, 0.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1011);
      floatArray0[1] = (float) (-177);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1011.0F), (-177.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) floatArray1, (int) (byte)0, (int) (byte)0);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1011.0F), (-177.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-20.83F);
      floatArray0[2] = (-1884.137F);
      floatArray0[3] = 1110.595F;
      floatArray0[4] = (-697.5627F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-697.5627F), (-2144021276));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-20.83F), (-1884.137F), 1110.595F, (-697.5627F)}, floatArray0, 0.01F);
      assertEquals(4, int0);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2144021276), (-2144021276));
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-92);
      shortArray0[1] = (short) (-2883);
      shortArray0[2] = (short) (-728);
      shortArray0[3] = (short) (-1486);
      shortArray0[4] = (short)460;
      shortArray0[5] = (short)6;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)460, 1526);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-92), (short) (-2883), (short) (-728), (short) (-1486), (short)460, (short)6}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      ArrayUtils.shift(intArray0, (int) (short)6);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(2826.2286130836105);
      assertNotNull(double0);
      assertEquals(2826.2286130836105, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1503.144831));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1503.144831), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(4, doubleArray0.length);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(2826.2286130836105, (double)double2, 0.01);
      
      doubleArray0[2] = doubleArray0[1];
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1503.144831));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {2826.2286130836105, (-1503.144831), (-1503.144831), 0.0}, doubleArray1, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (-1849.33349115), 36, (-858.13));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {2826.2286130836105, (-1503.144831), (-1503.144831), 0.0}, doubleArray1, 0.01);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      Class<MutableInt[]> class0 = MutableInt[].class;
      MutableInt[] mutableIntArray1 = ArrayUtils.nullToEmpty(mutableIntArray0, class0);
      assertNotNull(mutableIntArray1);
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertSame(mutableIntArray0, mutableIntArray1);
      assertSame(mutableIntArray1, mutableIntArray0);
      
      ArrayUtils.swap((Object[]) mutableIntArray1, 36, (-3555), (-3555));
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertSame(mutableIntArray0, mutableIntArray1);
      assertSame(mutableIntArray1, mutableIntArray0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (-3527L);
      longArray0[2] = (-1076L);
      longArray0[3] = (-1L);
      longArray0[4] = (-1720L);
      longArray0[6] = (-1076L);
      longArray0[8] = (-585L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, (-3527L), (-1076L), (-1L), (-1720L), 0L, (-1076L), 0L, (-585L)}, longArray0);
      assertEquals(3, int0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[6] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(3, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short) (-411);
      shortArray0[2] = (short) (-459);
      shortArray0[3] = (short)97;
      shortArray0[5] = (short)279;
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-550L);
      longArray0[1] = (-3527L);
      longArray0[2] = (-1076L);
      longArray0[3] = (-1L);
      longArray0[4] = (-1720L);
      longArray0[5] = 1L;
      longArray0[6] = 678L;
      longArray0[7] = 1530L;
      longArray0[8] = (-585L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-550L), (-3527L), (-1076L), (-1L), (-1720L), 1L, 678L, 1530L, (-585L)}, longArray0);
      assertEquals(3, int0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(3, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(14, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2492;
      shortArray0[1] = (short) (-411);
      shortArray0[2] = (short) (-459);
      shortArray0[3] = (short)97;
      shortArray0[4] = (short) (-2337);
      shortArray0[5] = (short)279;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)97, (int) (short)97);
      assertNotNull(bitSet0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)2492, (short) (-411), (short) (-459), (short)97, (short) (-2337), (short)279}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2325.8568678728);
      doubleArray0[1] = (-528.0800653);
      doubleArray0[2] = 1825.704691594215;
      doubleArray0[3] = 349.912;
      doubleArray0[4] = 1053.65184;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 1672.88675522;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1053.65184, 321);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-2325.8568678728), (-528.0800653), 1825.704691594215, 349.912, 1053.65184, (-1.0), 1672.88675522}, doubleArray0, 0.01);
      assertEquals(4, int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      short short0 = (short) (-730);
      shortArray0[1] = (short) (-730);
      short short1 = (short) (-287);
      shortArray0[2] = (short) (-287);
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 837, (short) (-287));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 837, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(2825.13987876);
      assertNotNull(double0);
      assertEquals(2825.13987876, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1503.144831));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1503.144831), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(4, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(2825.13987876, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1503.144831));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {2825.13987876, (-1503.144831), 2825.13987876, 0.0}, doubleArray1, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (-1849.33349115), 36, (-858.13));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {2825.13987876, (-1503.144831), 2825.13987876, 0.0}, doubleArray1, 0.01);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short) (-1258);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)91, (short)4, (short) (-1258)}, shortArray0);
      assertArrayEquals(new short[] {(short)91, (short)4, (short) (-1258)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = 'J';
      charArray0[2] = '';
      charArray0[3] = 'A';
      charArray0[4] = 'Q';
      charArray0[5] = '<';
      charArray0[6] = '-';
      MockRandom mockRandom0 = new MockRandom(61L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'J', '', 'A', 'Q', '<', '-', 'z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      char char0 = ':';
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = ':';
      charArray0[7] = ']';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {':', ':', ':', ':', ':', ':', ':', ']'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertFalse(character0.equals((Object)char0));
      assertEquals('o', (char)character0);
      
      Character character1 = new Character(':');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertEquals(':', (char)character1);
      
      Character character2 = new Character(' ');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertEquals(' ', (char)character2);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = (Character) ':';
      characterArray0[3] = character2;
      characterArray0[4] = (Character) ':';
      characterArray0[5] = (Character) ':';
      characterArray0[6] = (Character) ':';
      characterArray0[7] = (Character) ':';
      Character character3 = Character.valueOf(':');
      assertNotNull(character3);
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals(':', (char)character3);
      
      characterArray0[8] = character3;
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray2);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray2.length);
      assertArrayEquals(new char[] {'o', ':', ':', ' ', ':', ':', ':', ':', ':'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)91, (-3857));
      assertNotNull(bitSet0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 1, 2310);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'i');
      assertEquals((-1), int0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(3306.5178F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3306.5178F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) 2310);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(2310.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 3306.5178F, 2310.0F}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1498;
      longArray0[1] = (long) 'i';
      longArray0[2] = (long) 'i';
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1498;
      longArray0[6] = (long) 64;
      long[] longArray1 = ArrayUtils.add(longArray0, 105L);
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1498L, 105L, 105L, 1L, 1L, 1498L, 64L, 105L}, longArray1);
      assertArrayEquals(new long[] {1498L, 105L, 105L, 1L, 1L, 1498L, 64L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 'i');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'i'}, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1498;
      intArray0[1] = (-1);
      intArray0[2] = (int) 'i';
      intArray0[3] = 1498;
      intArray0[4] = 75;
      int int1 = ArrayUtils.indexOf(intArray0, 1498, 1360);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1498, (-1), 105, 1498, 75}, intArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-126);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)52, (byte) (-87), (byte)2, (byte) (-126)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2032.1736;
      doubleArray0[1] = (-1125.703);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2920.0208;
      doubleArray0[4] = (-991.2034911500001);
      doubleArray0[5] = 2032.1736;
      doubleArray0[6] = 318.5582;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {2032.1736, (-1125.703), 0.0, 2920.0208, (-991.2034911500001), 2032.1736, 318.5582}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2103.6594F);
      floatArray0[2] = (-2535.9785F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-3808.8225F);
      floatArray0[5] = 143.91F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1944.053F;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-2103.6594F), (-2535.9785F), 1.0F, (-3808.8225F), 143.91F, 0.0F, 1944.053F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte) (-71);
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte) (-1), (byte) (-67), (byte) (-69), (byte) (-44), (byte) (-71)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (int) (byte)110);
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-4287.8890896));
      assertNotNull(double0);
      assertEquals((-4287.8890896), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1136);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1136.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((byte)0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-596.07331934));
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((-596.07331934), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[2]);
      assertNotNull(double4);
      assertEquals(8, doubleArray0.length);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals(0.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(32.0);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals(32.0, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-864.51));
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((-864.51), (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-363.492272074944));
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertEquals((-363.492272074944), (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, 9);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1258);
      intArray0[1] = (-1);
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '}');
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'}', '}', '}'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-18L);
      longArray0[2] = (long) '}';
      longArray0[3] = (long) '}';
      ArrayUtils.shift(longArray0, (-1));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 125L, 125L, (-18L)}, longArray0);
      
      ArrayUtils.shift(intArray0, 2144775598);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-1258), (-1)}, intArray0);
      
      ArrayUtils.reverse((byte[]) null, (int) (byte)5, (-890));
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 125L);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 125L, 125L, (-18L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-18L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-324));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-1258), (-1)}, intArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-18L);
      doubleArray0[2] = (double) (byte)5;
      doubleArray0[3] = (double) '}';
      doubleArray0[4] = 100.0;
      doubleArray0[5] = (double) 2144775598;
      doubleArray0[6] = (double) '}';
      ArrayUtils.shift(doubleArray0, (-890));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-18.0), 5.0, 125.0, 100.0, 2.144775598E9, 125.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1258);
      intArray0[1] = (-1);
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '}');
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'}', '}', '}'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-18L);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) '}';
      longArray0[3] = (long) '}';
      ArrayUtils.shift(longArray0, (-1));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 125L, 125L, (-18L)}, longArray0);
      
      ArrayUtils.shift(intArray0, 2144775598);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-1258), (-1)}, intArray0);
      
      ArrayUtils.reverse((byte[]) null, (int) (byte)5, (-890));
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 125L);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-18L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), 125L, 125L, (-18L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-324));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-1258), (-1)}, intArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '}';
      doubleArray0[1] = (double) (-18L);
      doubleArray0[2] = (double) (byte)5;
      doubleArray0[3] = (double) '}';
      doubleArray0[4] = 100.0;
      doubleArray0[5] = (double) 2144775598;
      doubleArray0[6] = (double) '}';
      ArrayUtils.shift(doubleArray0, (-890));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-18.0), 5.0, 125.0, 100.0, 2.144775598E9, 125.0, 125.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-69.0F);
      floatArray0[1] = (float) '@';
      floatArray0[2] = (float) ')';
      floatArray0[3] = (float) '@';
      floatArray0[4] = (float) 'g';
      floatArray0[5] = (float) '6';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-69.0F), 64.0F, 41.0F, 64.0F, 103.0F, 54.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = '3';
      charArray0[4] = 's';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'T', 's', 's', '3', 's'}, charArray0);
      assertArrayEquals(new char[] {'T', 's', 's', '3', 's', 'T', 's', 's', '3', 's'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '3';
      intArray0[1] = (int) (short)2;
      intArray0[2] = 0;
      intArray0[3] = (int) (short)2;
      intArray0[4] = (int) 'T';
      intArray0[5] = (int) 'T';
      ArrayUtils.reverse(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {84, 84, 2, 0, 2, 51}, intArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte) (-80);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)17, (-436));
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)7, (byte) (-70), (byte) (-24), (byte)38, (byte)87, (byte)17, (byte)0, (byte)56, (byte) (-80)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "long";
      stringArray0[1] = "iR";
      stringArray0[2] = "yes";
      stringArray0[3] = "J";
      stringArray0[4] = "4Mbm< {a-M?l D-!;`";
      stringArray0[5] = "java.lang.Byte";
      stringArray0[6] = "java.lang.Byte";
      boolean boolean0 = ArrayUtils.isNotEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2754L;
      int int0 = (-2294);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-2294), 2754L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2294, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 1, 2310);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'i');
      assertEquals((-1), int0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(3306.5178F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3306.5178F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) 2310);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(2310.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 3306.5178F, 2310.0F}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1498;
      longArray0[1] = (long) 'i';
      longArray0[2] = (long) 'i';
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1498;
      longArray0[6] = (long) 64;
      long[] longArray1 = ArrayUtils.add(longArray0, 105L);
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1498L, 105L, 105L, 1L, 1L, 1498L, 64L, 105L}, longArray1);
      assertArrayEquals(new long[] {1498L, 105L, 105L, 1L, 1L, 1498L, 64L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, 1498, 1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray1, 1498, 39L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1498, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((Object[]) shortArray0, comparator0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (-1650L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1650L));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1L, 0L, (-1650L)}, longArray0);
      assertEquals(2, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      Long[] longArray1 = ArrayUtils.addAll((Long[]) null, (Long[]) null);
      assertNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0, 1, 2);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, true}, booleanArray0));
      
      Character character0 = new Character('_');
      assertNotNull(character0);
      assertEquals('_', (char)character0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-702.1));
      assertNotNull(double0);
      assertEquals((-702.1), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2142.725271827549));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2142.725271827549), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyDouble() , anyDouble());
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0, comparator0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1379), (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[2] = (long) (short) (-1379);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, (-1379L), 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 14, 61);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '~');
      assertNull(charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1136;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short) (-1379);
      intArray0[3] = (int) (short)0;
      intArray0[4] = 76;
      ArrayUtils.shift(intArray0, (int) (short) (-1379), (int) (short)0, 3066);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1136, 0, (-1379), 0, 76}, intArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1095), 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      ArrayUtils.swap(intArray0, 0, 0, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      
      Long long0 = new Long((-2168L));
      assertNotNull(long0);
      assertEquals((-2168L), (long)long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[2] = long0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)7;
      ArrayUtils.swap(byteArray0, 160, 13, (-2772));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-71), (byte) (-99), (byte)7}, byteArray0);
      
      ArrayUtils.swap(intArray0, 1768, (int) (byte) (-39), (int) (byte) (-39));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = '.';
      charArray0[2] = 'e';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'2', '.', 'e'}, charArray0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "=GSP*k*";
      stringArray0[1] = "java.lang.Double";
      stringArray0[2] = "MGxh7^";
      String string0 = "\\u";
      stringArray0[3] = string0;
      stringArray0[4] = "E`2J]vawh/A% yH";
      stringArray0[5] = "<jA8`]B";
      stringArray0[6] = "org.apache.commons.lang3.mutable.MutableInt";
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2374), stringArray0, stringArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2374, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 675.771F;
      floatArray0[1] = (-5022.0F);
      floatArray0[2] = 2006.6F;
      floatArray0[3] = 84.0F;
      floatArray0[4] = 1061.0F;
      floatArray0[5] = 404.6928F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 91, 2);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {675.771F, (-5022.0F), 2006.6F, 84.0F, 1061.0F, 404.6928F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      String string0 = "java.lang.Byte";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.lang.Byte";
      stringArray0[1] = "java.lang.Byte";
      stringArray0[2] = "java.lang.Byte";
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-326), stringArray0, stringArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -326, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = 861L;
      longArray0[0] = 861L;
      long long1 = (-53L);
      longArray0[1] = (-53L);
      long long2 = (-42L);
      longArray0[2] = (-42L);
      long long3 = (-857L);
      longArray0[3] = (-857L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {861L, (-53L), (-42L), (-857L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      int int0 = 3114;
      intArray0[1] = 3114;
      intArray0[2] = (-691);
      intArray0[3] = 9;
      intArray0[4] = 62;
      intArray0[5] = 2065;
      int int1 = ArrayUtils.indexOf(intArray0, (-1740));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 3114, (-691), 9, 62, 2065}, intArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray3);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 342;
      intArray0[1] = 3047;
      ArrayUtils.shift((char[]) null, 342);
      int int0 = ArrayUtils.indexOf((char[]) null, '?', (int) '?');
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3047;
      doubleArray0[2] = (double) 3047;
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)850);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[2] = (-20.83F);
      floatArray0[4] = (-20.83F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1.0F;
      floatArray0[8] = (-1.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), 0.0F, 0.0F, 1.0F, (-1.0F)}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray0, (-2103.6594F));
      assertNotNull(floatArray2);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray2.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), 0.0F, 0.0F, 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), 0.0F, 0.0F, 1.0F, (-1.0F)}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray1, (Object) null, 8);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), 0.0F, 0.0F, 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertEquals((-1), int0);
      assertNotSame(floatArray0, floatArray2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)99;
      shortArray0[1] = (short) (-436);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)11;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)415;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-436);
      intArray0[1] = (int) (short) (-436);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -436, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1.0));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(139.0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(139.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((-1.0), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 139.0, (-1.0)}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 1502);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 99;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)7;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)48);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)75, (byte) (-92), (byte)7}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)0;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte) (-59);
      byteArray0[8] = (byte)0;
      Boolean[] booleanArray2 = new Boolean[3];
      Boolean boolean0 = new Boolean("4)A)MHM6Q;");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray2[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray2[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("className");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray2[2] = boolean2;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertNotNull(booleanArray3);
      assertEquals(3, booleanArray3.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      
      double[] doubleArray0 = new double[16];
      doubleArray0[1] = (double) (byte)0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(16, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) booleanArray2, 1444, 0, (-2180));
      assertEquals(3, booleanArray2.length);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-18);
      byteArray1[1] = (byte) (-18);
      byteArray1[2] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte) (-59), 1597);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-18), (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), int0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-479.0F));
      assertNull(floatArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[0];
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertSame(booleanArray1, booleanArray0);
      
      int int0 = 46;
      int[] intArray0 = new int[2];
      intArray0[0] = 46;
      intArray0[1] = 46;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {46, 46}, intArray0);
      assertTrue(boolean0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-1171));
      assertNull(object0);
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) mockRandom0);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-83);
      Byte byte1 = new Byte((byte) (-83));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-83), (byte)byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-83)}, byteArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 46;
      integerArray0[1] = (Integer) int0;
      integerArray0[2] = (Integer) 46;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 46);
      assertNotNull(intArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {46, 46, 46}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-63);
      intArray0[2] = (-63);
      intArray0[4] = (-63);
      intArray0[5] = 852;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-63));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, (-63), (-63), 0, (-63), 852, 0}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-63);
      longArray0[2] = (long) (-88);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-88);
      longArray0[5] = (long) (-63);
      longArray0[6] = (long) (-63);
      longArray0[7] = (long) 852;
      longArray0[8] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, (long) 0);
      assertNotNull(longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (long) 0, (-125));
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals((-1), int0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 861L);
      assertNotNull(longArray2);
      assertEquals(10, longArray1.length);
      assertEquals(10, longArray2.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, 0L, 0L}, longArray2);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1994091979), (-63));
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, (-63), (-63), 0, (-63), 852, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)87;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)103, (byte)87}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer[] integerArray0 = new Integer[3];
      intArray0[4] = (-63);
      integerArray0[2] = (Integer) (-63);
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)87);
      assertNotNull(intArray2);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray2.length);
      assertArrayEquals(new int[] {87, 87, (-63)}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-627.7315F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-627.7315F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4086);
      shortArray0[1] = (short)2;
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short)2);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-63);
      intArray0[2] = (-63);
      intArray0[4] = (-63);
      intArray0[5] = 852;
      intArray0[6] = (-88);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-63));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, (-63), (-63), 0, (-63), 852, (-88)}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-63);
      longArray0[2] = (long) (-88);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-88);
      longArray0[5] = (long) (-63);
      longArray0[6] = (long) (-63);
      longArray0[7] = (long) 852;
      longArray0[8] = (long) (-88);
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (-88));
      assertNotNull(longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (long) 0, (-125));
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals((-1), int0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 861L);
      assertNotNull(longArray2);
      assertEquals(10, longArray1.length);
      assertEquals(10, longArray2.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L), (-88L)}, longArray2);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1994091979), (-63));
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, (-63), (-63), 0, (-63), 852, (-88)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)87;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)103, (byte)87}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer[] integerArray0 = new Integer[3];
      intArray0[4] = (-63);
      integerArray0[1] = (Integer) (-63);
      integerArray0[2] = (Integer) (-63);
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)87);
      assertNotNull(intArray2);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray2.length);
      assertArrayEquals(new int[] {87, (-63), (-63)}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 127;
      intArray0[1] = (-63);
      intArray0[2] = (-63);
      intArray0[4] = (-63);
      intArray0[5] = 852;
      intArray0[6] = (-88);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-63));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {127, (-63), (-63), 0, (-63), 852, (-88)}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-63);
      longArray0[2] = (long) (-88);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-88);
      longArray0[5] = (long) (-63);
      longArray0[6] = (long) (-63);
      longArray0[7] = (long) 852;
      longArray0[8] = (long) (-88);
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (-88));
      assertNotNull(longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (long) 0, (-125));
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals((-1), int0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 861L);
      assertNotNull(longArray2);
      assertEquals(10, longArray1.length);
      assertEquals(10, longArray2.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L), (-88L)}, longArray2);
      assertArrayEquals(new long[] {(-63L), 0L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1994091957), (-63));
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {127, (-63), (-63), 0, (-63), 852, (-88)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)87;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)103, (byte)87}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-63);
      integerArray0[1] = (Integer) (-63);
      integerArray0[2] = (Integer) (-63);
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)87);
      assertNotNull(intArray2);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray2.length);
      assertArrayEquals(new int[] {(-63), (-63), (-63)}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 675.771F;
      floatArray0[1] = (-5022.0F);
      floatArray0[2] = 2006.6F;
      floatArray0[3] = 84.0F;
      floatArray0[4] = 1061.0F;
      floatArray0[5] = 404.6928F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 91, 2);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {675.771F, (-5022.0F), 2006.6F, 84.0F, 1061.0F, 404.6928F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)15604;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)10);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)15604}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.swap(booleanArray0, 1382, 1382);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true}, booleanArray0));
      
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) false;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) true;
      booleanArray1[7] = (Boolean) true;
      booleanArray1[8] = (Boolean) true;
      Boolean boolean0 = Boolean.valueOf("V");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray1, boolean0);
      assertNotNull(booleanArray2);
      assertEquals(4, booleanArray2.length);
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1382;
      floatArray0[1] = (float) 1382;
      floatArray0[2] = (float) 1382;
      floatArray0[3] = (float) 1382;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 1382;
      floatArray0[6] = (float) 1382;
      floatArray0[7] = (float) 1382;
      floatArray0[8] = (float) 1382;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1699), Integer.MAX_VALUE);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {1382.0F, 1382.0F, 1382.0F, 1382.0F, 0.0F, 1382.0F, 1382.0F, 1382.0F, 1382.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1382.0F, 1382.0F, 1382.0F, 1382.0F, 0.0F, 1382.0F, 1382.0F, 1382.0F, 1382.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-100);
      byteArray0[6] = (byte)113;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      ArrayUtils.swap((int[]) null, 386, 2145902290);
      double[] doubleArray0 = new double[0];
      boolean boolean2 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean2);
      
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.removeElement((int[]) null, 463);
      assertNull(intArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, 386, 3287.0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) 386);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = '6';
      charArray0[2] = '0';
      charArray0[3] = 'O';
      charArray0[4] = 'x';
      charArray0[5] = '5';
      charArray0[6] = '6';
      charArray0[7] = '=';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'V', '6', '0', 'O', 'x', '5', '6', '='}, charArray0);
      assertEquals(4, int0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) '5';
      doubleArray0[2] = (double) '6';
      doubleArray0[3] = (double) 'x';
      doubleArray0[4] = (double) '=';
      doubleArray0[5] = (double) '0';
      doubleArray0[6] = (double) '0';
      doubleArray0[7] = (double) '6';
      doubleArray0[8] = (double) (short)2;
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (short)932, 2103657451, 54.0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 53.0, 54.0, 120.0, 61.0, 48.0, 48.0, 54.0, 2.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'n');
      assertEquals((-1), int0);
      
      ArrayUtils.swap(longArray0, (-2160), (-2160), (-287));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L}, longArray0);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-1130), (-2160));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-28);
      int int2 = ArrayUtils.indexOf(byteArray0, (byte)114, 2147);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)31, (byte) (-28)}, byteArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, 9);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {9}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1130);
      shortArray1[1] = (short) (byte)114;
      shortArray1[2] = (short) (byte)31;
      shortArray1[3] = (short) (byte)31;
      ArrayUtils.reverse(shortArray1, (-1), (int) (byte)114);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)31, (short)31, (short)114, (short) (-1130)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1258);
      shortArray0[1] = (short)101;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1258), (short)101}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1258), (short)101}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)101;
      doubleArray0[1] = (double) (short)101;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)101);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1258), (short)101}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(1, int0);
      assertNotSame(shortArray0, shortArray1);
      
      Double double0 = new Double(643.8400268554688);
      assertNotNull(double0);
      assertEquals(643.8400268554688, (double)double0, 0.01);
      
      Double double1 = new Double((-2661.211465));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2661.211465), (double)double1, 0.01);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = Character.valueOf('S');
      assertNotNull(character0);
      assertEquals('S', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('?');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('?', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('?');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertEquals('?', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('|');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertEquals('|', (char)character3);
      
      characterArray0[3] = character3;
      char char0 = 'F';
      Character character4 = Character.valueOf('F');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertEquals('F', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('\"');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character4));
      assertEquals('\"', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)character4));
      assertEquals('F', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf('(');
      assertNotNull(character7);
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)char0));
      assertEquals('(', (char)character7);
      
      characterArray0[7] = character7;
      Character character8 = new Character('O');
      assertNotNull(character8);
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)char0));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character1));
      assertEquals('O', (char)character8);
      
      characterArray0[8] = character8;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character6);
      assertNotNull(charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'S', '?', '?', '|', 'F', '\"', 'F', '(', 'O'}, charArray0);
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character8));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character7));
      assertTrue(character6.equals((Object)character4));
      
      Double double0 = new Double(557.647);
      assertNotNull(double0);
      assertEquals(557.647, (double)double0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) double0, 5740);
      assertEquals(9, characterArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      ArrayUtils.swap(intArray0, 0, 0, 6);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      
      Long long0 = new Long((-2168L));
      assertNotNull(long0);
      assertEquals((-2168L), (long)long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[2] = long0;
      byte[] byteArray0 = new byte[11];
      byteArray0[6] = (byte) (-39);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)7;
      ArrayUtils.swap(byteArray0, 160, 13, (-2772));
      assertEquals(11, byteArray0.length);
      
      ArrayUtils.swap(intArray0, 1768, (int) (byte) (-39), (int) (byte) (-39));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = '.';
      charArray0[2] = 'e';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'2', '.', 'e'}, charArray0);
      
      Float float0 = new Float(1129.921);
      assertNotNull(float0);
      assertEquals(1129.921F, (float)float0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) float0, 256);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'2', '.', 'e'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short short0 = (short)101;
      Short short1 = new Short((short)101);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)101, (short)short1);
      
      shortArray0[0] = short1;
      Integer integer0 = Integer.valueOf((-3078));
      assertNotNull(integer0);
      assertEquals((-3078), (int)integer0);
      
      Short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (Object) integer0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (-3078));
      assertNull(floatArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) short0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3078));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {101}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      mutableInt0.subtract(0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[3] = (double) 0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 0, '/');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'/'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (int) '/';
      intArray0[3] = 0;
      intArray0[4] = (int) '/';
      intArray0[5] = (int) '/';
      intArray0[6] = 0;
      intArray0[7] = (int) '/';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 47);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 47, 0, 47, 47, 0, 47}, intArray0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 226.01F;
      doubleArray0[1] = (double) ')';
      doubleArray0[2] = 469.5687;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 267.0, (-4086), 78.0);
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {226.00999450683594, 41.0, 469.5687}, doubleArray0, 0.01);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1711);
      longArray0[1] = (long) (-1711);
      longArray0[3] = (long) ')';
      longArray0[4] = 1155L;
      longArray0[5] = (long) ')';
      ArrayUtils.swap(longArray0, 1, 894);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1711L), (-1711L), 0L, 41L, 1155L, 41L}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) ')';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {41.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.5298000574111938);
      doubleArray0[1] = (-2106.3);
      doubleArray0[2] = 397.08;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 397.08);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.5298000574111938), (-2106.3), 397.08, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2;
      int int1 = ArrayUtils.indexOf(longArray0, 2L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2L}, longArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 2}, intArray0);
      assertArrayEquals(new int[] {0, 0, 2, 0, 0, 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short) (-651);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)32, (short) (-651)}, shortArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = new BitSet((short)32);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Long[] longArray2 = new Long[0];
      Long[] longArray3 = ArrayUtils.nullToEmpty(longArray2);
      assertNotNull(longArray3);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 127;
      intArray0[1] = (-63);
      intArray0[2] = (-63);
      intArray0[4] = (-63);
      intArray0[5] = 852;
      intArray0[6] = (-88);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-63));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {127, (-63), (-63), 0, (-63), 852, (-88)}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-63);
      longArray0[1] = (long) 2534;
      longArray0[2] = (long) (-88);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-88);
      longArray0[5] = (long) (-63);
      longArray0[6] = (long) (-63);
      longArray0[7] = (long) 852;
      longArray0[8] = (long) (-88);
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (-88));
      assertNotNull(longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (long) 0, (-125));
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals((-1), int0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 861L);
      assertNotNull(longArray2);
      assertEquals(10, longArray1.length);
      assertEquals(10, longArray2.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L), (-88L)}, longArray2);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), (-63L), 852L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1994091957), (-63));
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {127, (-63), (-63), 0, (-63), 852, (-88)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1379), (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short) (-1379);
      objectArray0[2] = (Object) (short) (-1);
      objectArray0[3] = (Object) (short) (-1379);
      objectArray0[4] = (Object) (short) (-1379);
      objectArray0[5] = (Object) (short) (-1379);
      objectArray0[6] = (Object) (short)0;
      objectArray0[7] = (Object) (short) (-1);
      ArrayUtils.shift(objectArray0, (int) (short)0);
      assertEquals(8, objectArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst((byte[]) null, (byte)6);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)6}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1379), (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-1379);
      longArray0[2] = (long) (short) (-1379);
      longArray0[4] = (long) (short)0;
      longArray0[6] = (long) (short) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1379L), (-1379L), 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-1379L);
      objectArray0[1] = (Object) (-1L);
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short) (-1);
      Object object0 = ArrayUtils.get(objectArray0, 2641, objectArray0[0]);
      assertNotNull(object0);
      assertEquals(7, objectArray0.length);
      assertEquals((-1379L), object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) 0L;
      ArrayUtils.shift(objectArray0, (int) (short) (-1));
      assertEquals(7, objectArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)6;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-29));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-123), (byte) (-29), (byte)2, (byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-29), (byte) (-1), (byte) (-123), (byte) (-29), (byte)2, (byte)6}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1589.8365));
      assertNotNull(double0);
      assertEquals((-1589.8365), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1503.144831));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1503.144831), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      String string0 = ArrayUtils.get((String[]) null, 3744, "FORY_Rd+*T");
      assertNotNull(string0);
      assertEquals("FORY_Rd+*T", string0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertEquals((byte)0, object0);
      
      boolean boolean1 = ArrayUtils.isSameType(double0, object0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) doubleArray0[0], 3744);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) doubleArray0[0];
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (-987.2025647);
      doubleArray1[6] = (-1503.144831);
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, 3715.721);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1589.8365), 0.0, 0.0, (-987.2025647), (-1503.144831), 3715.721}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1589.8365), 0.0, 0.0, (-987.2025647), (-1503.144831)}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = 'a';
      charArray0[5] = '1';
      charArray0[6] = '1';
      charArray0[7] = '1';
      charArray0[8] = '1';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '+');
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'1', '1', '1', '1', 'a', '1', '1', '1', '1'}, charArray0);
      assertArrayEquals(new char[] {'1', '1', '1', '1', 'a', '1', '1', '1', '1'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-41);
      ArrayUtils.shift(byteArray0, (int) (byte)39);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-41)}, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'a';
      longArray0[1] = (long) (byte)39;
      longArray0[2] = (-196L);
      longArray0[3] = (long) (byte)1;
      longArray0[4] = (-1359L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 84L, 2494);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {97L, 39L, (-196L), 1L, (-1359L)}, longArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-20.83F);
      floatArray0[2] = (-1884.137F);
      floatArray0[3] = 1110.595F;
      floatArray0[4] = (-697.5627F);
      int int0 = (-2144021276);
      int int1 = ArrayUtils.indexOf(floatArray0, (-697.5627F), (-2144021276));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-20.83F), (-1884.137F), 1110.595F, (-697.5627F)}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2144021276), (-2144021276));
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[0];
      int int2 = (-940);
      ArrayUtils.swap(charArray0, (-2144021276), 4, (-940));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Double double0 = new Double((-697.5627F));
      assertNotNull(double0);
      assertEquals((-697.5626831054688), (double)double0, 0.01);
      
      Double double1 = new Double((-809.0068309459461));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-809.0068309459461), (double)double1, 0.01);
      
      Double double2 = new Double((-20.83F));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-20.829999923706055), (double)double2, 0.01);
      
      // Undeclared exception!
      try { 
        Double.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)0;
      int[] intArray0 = new int[5];
      intArray0[0] = 8;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {8, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {8, 0, 0, 0, 0, 8, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = 'q';
      charArray0[2] = '0';
      ArrayUtils.swap(charArray0, 0, 8, 0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'C', 'q', '0'}, charArray0);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(191.32515);
      assertNotNull(double0);
      assertEquals(191.32515, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1.5);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.5, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      // Undeclared exception!
      try { 
        Double.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)0;
      int[] intArray0 = new int[5];
      intArray0[0] = 8;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {8, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {8, 0, 0, 0, 0, 8, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = 'q';
      charArray0[2] = '0';
      ArrayUtils.swap(charArray0, 0, 8, 0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'O', 'q', '0'}, charArray0);
      
      Double[] doubleArray0 = new Double[9];
      double double0 = 191.32515;
      Double double1 = new Double(191.32515);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(191.32515, (double)double1, 0.01);
      
      doubleArray0[0] = double1;
      Double double2 = new Double(1.5);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(1.5, (double)double2, 0.01);
      
      doubleArray0[1] = double2;
      Double double3 = new Double(0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[2] = double3;
      // Undeclared exception!
      try { 
        Double.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.5298000574111938);
      doubleArray0[1] = (-2106.3);
      doubleArray0[2] = 397.08;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.5298000574111938), (-2106.3), 397.08, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 4;
      int int1 = ArrayUtils.indexOf(longArray0, 4L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {4L}, longArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      intArray0[2] = 4;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {4, 0, 4}, intArray0);
      assertArrayEquals(new int[] {4, 0, 4, 4, 0, 4}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short) (-651);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)32, (short) (-651)}, shortArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-702.1), (-1), 1.0);
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.5298000574111938), (-2106.3), 397.08, 1.0, 1.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Long[] longArray2 = new Long[0];
      Long[] longArray3 = ArrayUtils.nullToEmpty(longArray2);
      assertNotNull(longArray3);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-627.7315F);
      doubleArray0[1] = 0.7;
      doubleArray0[2] = (double) (-627.7315F);
      doubleArray0[3] = 124.07763390000002;
      doubleArray0[4] = (double) (-627.7315F);
      doubleArray0[5] = (double) (-627.7315F);
      doubleArray0[6] = (double) (-627.7315F);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.5, 124.07763390000002);
      assertNotNull(bitSet0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-627.7315063476562), 0.7, (-627.7315063476562), 124.07763390000002, (-627.7315063476562), (-627.7315063476562), (-627.7315063476562)}, doubleArray0, 0.01);
      assertEquals(4, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1567.6771186), 5312.6125857749);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      mutableInt0.setValue((Number) 0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      mutableInt0.subtract(0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[3] = (double) 0;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)838;
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)128;
      shortArray0[3] = (short)2266;
      shortArray0[4] = (short) (-1066);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)838, (short)3, (short)128, (short)2266, (short) (-1066)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (short) (-1066));
      assertNotNull(bitSet0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-2140896273));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray0));
      assertEquals(1, int0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.getValue());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1567.6771186), 5312.6125857749);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      mutableInt0.setValue((Number) 0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.getValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      mutableInt0.subtract(0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.getValue());
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[3] = (double) 0;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)838;
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)128;
      shortArray0[3] = (short)2271;
      shortArray0[4] = (short) (-1066);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)838, (short)3, (short)128, (short)2271, (short) (-1066)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (short) (-1066));
      assertNotNull(bitSet0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-82)}, byteArray0);
      assertTrue(boolean0);
      
      Long long0 = new Long(3298L);
      assertNotNull(long0);
      assertEquals(3298L, (long)long0);
      
      Long long1 = new Long(1952L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1952L, (long)long1);
      
      Long long2 = new Long(3287);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(3287L, (long)long2);
      
      Long long3 = new Long(1952L);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals(1952L, (long)long3);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-82)}, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-82)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      
      ArrayUtils.shift(byteArray0, 970, 3287, 248);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-82)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 3287;
      longArray0[1] = 3298L;
      longArray0[2] = (long) (byte) (-82);
      longArray0[3] = (long) 248;
      longArray0[4] = (long) 248;
      longArray0[5] = (long) 248;
      longArray0[6] = (long) (byte) (-82);
      longArray0[7] = (long) 248;
      longArray0[8] = (long) 3287;
      ArrayUtils.shift(longArray0, 3287, 3287, 3287);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {3287L, 3298L, (-82L), 248L, 248L, 248L, (-82L), 248L, 3287L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'n');
      assertEquals((-1), int0);
      
      ArrayUtils.swap(longArray0, (-2160), (-2160), (-287));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-287);
      doubleArray0[2] = (double) (-2160);
      doubleArray0[3] = (-991.2034911500001);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-2160);
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1L)}, longArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-1529);
      shortArray0[3] = (short)932;
      shortArray0[4] = (short)1125;
      shortArray0[5] = (short)2352;
      shortArray0[6] = (short) (-1269);
      shortArray0[7] = (short) (-4);
      ArrayUtils.shift(shortArray0, (int) (short) (-4));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1125, (short)2352, (short) (-1269), (short) (-4), (short)0, (short)2, (short) (-1529), (short)932}, shortArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)47;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)34, (byte)1, (byte)118, (byte) (-22), (byte)27, (byte)95, (byte)2, (byte)47}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)321;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1399);
      shortArray0[3] = (short)8;
      shortArray0[4] = (short) (-23381);
      shortArray0[5] = (short)838;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-17233);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)321, (short) (-1), (short) (-1399), (short)8, (short) (-23381), (short)838, (short) (-1), (short) (-17233)}, shortArray0);
      assertArrayEquals(new short[] {(short)321, (short) (-1), (short) (-1399), (short)8, (short) (-23381), (short)838, (short) (-1), (short) (-17233)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (int) (short) (-3093);
      ArrayUtils.swap((short[]) null, (-2564), 12, (-1711));
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-80));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, 'Z');
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = 'k';
      charArray0[2] = 'K';
      charArray0[3] = 'c';
      charArray0[4] = '{';
      charArray0[5] = '|';
      charArray0[6] = 'N';
      charArray0[7] = 'z';
      charArray0[8] = 'C';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'$', 'k', 'K', 'c', '{', '|', 'N', 'z', 'C'}, charArray0);
      assertArrayEquals(new char[] {'$', 'k', 'K', 'c', '{', '|', 'N', 'z', 'C'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'S';
      intArray0[1] = 83;
      intArray0[2] = 97;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {83, 83, 97}, intArray0);
      assertFalse(boolean0);
      
      Long long0 = new Long((-18L));
      assertNotNull(long0);
      assertEquals((-18L), (long)long0);
      
      Long long1 = new Long(1295L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1295L, (long)long1);
      
      Long long2 = new Long(83);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(83L, (long)long2);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'm');
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'S', 'S'}, charArray0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 83;
      ArrayUtils.reverse(objectArray0, (-173), (-1));
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toArray((Short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 64;
      intArray0[1] = 690;
      intArray0[2] = 0;
      intArray0[3] = (-3094);
      intArray0[4] = 55;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {64, 690, 0, (-3094), 55}, intArray0);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertNotNull(long1);
      assertEquals(9, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      
      longArray0[2] = long2;
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'A');
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((Object[]) null, 64, 2774);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (double) 0;
      char[] charArray0 = new char[0];
      char char0 = ':';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, ':');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {':'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int0 = Integer.MAX_VALUE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)20;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.5298000574111938);
      doubleArray0[1] = (-1.5298000574111938);
      doubleArray0[2] = 397.08;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.5298000574111938), (-1.5298000574111938), 397.08, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 4;
      int int1 = ArrayUtils.indexOf(longArray0, 4L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {4L}, longArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      intArray0[2] = 4;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {4, 0, 4}, intArray0);
      assertArrayEquals(new int[] {4, 0, 4, 4, 0, 4}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1608.6823016511125;
      doubleArray0[2] = 2168.7928514826;
      doubleArray0[3] = 1192.0;
      doubleArray0[4] = (-940.140189633378);
      doubleArray0[5] = 90.144;
      doubleArray0[6] = (-1602.3105348984);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 1608.6823016511125, 2168.7928514826, 1192.0, (-940.140189633378), 90.144, (-1602.3105348984)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)109;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)43;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1702, byteArray0, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1702, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-74));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)25, (byte) (-103), (byte)20, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-74), (byte) (-35), (byte)25, (byte) (-103), (byte)20, (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      int int0 = 3287;
      ArrayUtils.shift((short[]) null, 139, 342, 3287);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 139;
      doubleArray0[1] = (double) 139;
      doubleArray0[0] = (double) 3287;
      Character character0 = new Character('1');
      assertNotNull(character0);
      assertEquals('1', (char)character0);
      
      Character character1 = new Character('8');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('8', (char)character1);
      
      Character character2 = new Character(';');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals(';', (char)character2);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character2;
      Character character3 = new Character(';');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals(';', (char)character3);
      
      characterArray0[1] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character2);
      assertNotNull(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertArrayEquals(new char[] {';', ';'}, charArray0);
      assertTrue(character2.equals((Object)character3));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(55, booleanArray1, booleanArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = ':';
      charArray0[7] = ']';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {':', ':', ':', ':', ':', ':', ':', ']'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      Character character1 = new Character(':');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals(':', (char)character1);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = (Character) ':';
      characterArray0[3] = (Character) ':';
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) ':';
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) characterArray0[3]);
      assertNotNull(longArray1);
      assertEquals(9, characterArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {58L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift((Object[]) characterArray0, (int) (short)932);
      assertEquals(9, characterArray0.length);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertSame(shortArray2, shortArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) characterArray0[3]);
      assertNull(object0);
      assertEquals(9, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      ArrayUtils.swap(intArray0, 0, 0, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      
      Long long0 = new Long((-2168L));
      assertNotNull(long0);
      assertEquals((-2168L), (long)long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[2] = long0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)7;
      ArrayUtils.swap(byteArray0, 160, 13, (-2772));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-71), (byte) (-99), (byte)7}, byteArray0);
      
      ArrayUtils.swap(intArray0, 1768, (int) (byte) (-39), (int) (byte) (-39));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = '.';
      charArray0[2] = 'e';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'2', '.', 'e'}, charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2403.96F);
      floatArray0[1] = (float) (-2772);
      floatArray0[2] = (float) (byte) (-71);
      floatArray0[3] = (float) '.';
      floatArray0[4] = (float) (byte) (-99);
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (-1678.4775F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 312.3267F);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-2403.96F), (-2772.0F), (-71.0F), 46.0F, (-99.0F), 2.0F, 0.0F, (-1678.4775F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1258);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1053);
      shortArray0[1] = (short)26713;
      shortArray0[2] = (short)26713;
      shortArray0[3] = (short)26713;
      shortArray0[4] = (short)26713;
      shortArray0[5] = (short)26713;
      ArrayUtils.shift(shortArray0, 2, 1045, (-1258));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1053), (short)26713, (short)26713, (short)26713, (short)26713, (short)26713}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1053);
      doubleArray0[1] = (double) (short)26713;
      doubleArray0[2] = (double) (short)26713;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 26713.0, (int) (short)26713, 544.965857);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1053.0), 26713.0, 26713.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-78);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)104;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)121);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)35, (byte)36, (byte) (-78), (byte)0, (byte)7, (byte)75, (byte)104}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte)108);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      byte byte0 = (byte)54;
      Byte byte1 = new Byte((byte)54);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)54, (byte)byte1);
      
      Byte byte2 = new Byte((byte)54);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)54, (byte)byte2);
      
      Byte byte3 = new Byte((byte)54);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)54, (byte)byte3);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte2;
      byteArray0[1] = byte2;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54, (byte)54, (byte)54, (byte)54, (byte)54}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-627.7315F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'p';
      charArray0[2] = ',';
      charArray0[3] = '@';
      charArray0[4] = 's';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'|', 'p', ',', '@', 's'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 643.84F;
      ArrayUtils.swap((short[]) null, 93, (-831), 93);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 57, 1);
      assertNotNull(bitSet0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 643.84F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)3771);
      assertEquals((-1), int0);
      
      Double double0 = new Double((-239.422926));
      assertNotNull(double0);
      assertEquals((-239.422926), (double)double0, 0.01);
      
      Double double1 = new Double(3.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(3.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      Double double2 = new Double(643.84F);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(643.8400268554688, (double)double2, 0.01);
      
      doubleArray0[0] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1373.341576184));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {643.8400268554688}, doubleArray1, 0.01);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'i';
      charArray0[2] = 'u';
      charArray0[3] = '|';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'1', 'i', 'u', '|'}, charArray0);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 643.84F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)116;
      Byte byte1 = new Byte((byte)116);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)116, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)116, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)2);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)2, (byte)byte3);
      
      byteArray0[2] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)116, (byte)116, (byte)2}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 127;
      intArray0[1] = (-63);
      intArray0[2] = (-63);
      intArray0[4] = 1155;
      intArray0[5] = 852;
      intArray0[6] = (-88);
      boolean boolean0 = ArrayUtils.contains(intArray0, 1155);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {127, (-63), (-63), 0, 1155, 852, (-88)}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-63);
      longArray0[1] = (long) 2534;
      longArray0[2] = (long) (-88);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-88);
      longArray0[5] = (long) (-63);
      longArray0[6] = (long) 1155;
      longArray0[7] = (long) 852;
      longArray0[8] = (long) (-88);
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (-88));
      assertNotNull(longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (long) 0, (-125));
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals((-1), int0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 861L);
      assertNotNull(longArray2);
      assertEquals(10, longArray1.length);
      assertEquals(10, longArray2.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L), (-88L)}, longArray1);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L), (-88L)}, longArray2);
      assertArrayEquals(new long[] {(-63L), 2534L, (-88L), 0L, (-88L), (-63L), 1155L, 852L, (-88L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-63), 471);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 139, 342, 3287);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 139;
      doubleArray0[0] = (double) 3287;
      doubleArray0[3] = (double) 139;
      doubleArray0[4] = (double) 342;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {3287.0, 139.0, 0.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3287.0, 139.0, 0.0, 139.0, 342.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 3287.0, 351, (-3422.441669361555));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {3287.0, 139.0, 0.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3287.0, 139.0, 0.0, 139.0, 342.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, ':', 351);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 342;
      intArray0[1] = (-1);
      intArray0[2] = 351;
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {342, (-1), 351, (-1)}, intArray1);
      assertArrayEquals(new int[] {342, (-1), 351, (-1)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3287.0, 139.0, 0.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3287.0, 139.0, 0.0, 139.0, 342.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-27), (byte)3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -27, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Double double1 = new Double((double) doubleArray0[1]);
      assertNotNull(double1);
      assertEquals(4, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 2826.2286130836105, (-874), (double) doubleArray0[1]);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2839;
      shortArray0[1] = (short) (-1053);
      ArrayUtils.shift(shortArray0, (-703), (int) (short)2839, (int) (short)0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2839, (short) (-1053), (short)0}, shortArray0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((-3941L));
      assertNotNull(long0);
      assertEquals((-3941L), (long)long0);
      
      longArray0[0] = long0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (double) (short)26713, (int) (short) (-1053), 0.1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)351;
      shortArray0[1] = (short) (-476);
      shortArray0[2] = (short)1692;
      shortArray0[3] = (short)351;
      shortArray0[4] = (short) (-1830);
      shortArray0[5] = (short)3;
      shortArray0[6] = (short)13;
      shortArray0[7] = (short) (-5049);
      ArrayUtils.shift(shortArray0, (int) (short) (-476));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1830), (short)3, (short)13, (short) (-5049), (short)351, (short) (-476), (short)1692, (short)351}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1136;
      intArray0[1] = 76;
      intArray0[1] = 1136;
      intArray0[3] = 76;
      intArray0[6] = 76;
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 76);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-1379);
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1379L), 0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-1379L);
      objectArray0[1] = (Object) (-1L);
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short) (-1);
      objectArray0[5] = (Object) 0L;
      objectArray0[6] = (Object) 0L;
      ArrayUtils.shift(objectArray0, (int) (short) (-1));
      assertEquals(7, objectArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1372.62316359203);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (-3422.441669361555);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-408.60934));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1372.62316359203), (-1.0), 0.0, 1.0, 0.0, (-3422.441669361555)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-627.7315F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-627.7315F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4086);
      shortArray0[1] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)4, (int) (short) (-4086));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4086), (short)2}, shortArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((Object[]) floatArray1, (int) (short)2, 165, (-1184));
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-627.7315F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 51;
      ArrayUtils.reverse(longArray0, 1380, 1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {51L}, longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte) (-9), (int) (byte)0, 2127781963);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {51L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)0;
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((byte) (-9));
      assertNotNull(short0);
      assertEquals((short) (-9), (short)short0);
      
      Short short1 = ArrayUtils.get(shortArray0, (int) 0, short0);
      assertNull(short1);
      assertEquals(1, shortArray0.length);
      
      Object object0 = ArrayUtils.get(objectArray0, 2134, (Object) null);
      assertNull(object0);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, (-1));
      assertEquals(1, objectArray0.length);
      
      short[] shortArray1 = new short[3];
      shortArray1[0] = (short) (byte)0;
      shortArray1[1] = (short) (byte) (-9);
      shortArray1[2] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray1, (short)979);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-9), (short)0}, shortArray1);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'K');
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 51L;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) 51L;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 1);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 51.0F, 0.0F, 0.0F, 51.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 51.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = 643.84F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-2695.9968F);
      floatArray0[6] = (-4750.47F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 643.84F, 0.0F, 0.0F, (-1.0F), (-2695.9968F), (-4750.47F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((-1.0F));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      
      Double double2 = new Double((-1271.6054));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-1271.6054), (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double1;
      doubleArray0[0] = double2;
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = 1L;
      longArray0[3] = (-2L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2L));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1L), 1L, (-2L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-2L);
      floatArray0[1] = 226.01F;
      floatArray0[2] = (float) 1L;
      Double double0 = new Double((-2.0F));
      assertNotNull(double0);
      assertEquals((-2.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 267.0, (-4086), (-1.5298000574111938));
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      ArrayUtils.swap((Object[]) doubleArray0, 32, 894);
      assertEquals(1, doubleArray0.length);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray2);
      assertEquals(4, longArray2.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L), 1L, (-2L)}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Long[] longArray0 = ArrayUtils.addAll((Long[]) null, (Long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'm', 2365);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      long long0 = 1L;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      Long long1 = new Long(1L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      
      Long[] longArray0 = new Long[9];
      longArray0[0] = long1;
      longArray0[1] = long1;
      longArray0[2] = long1;
      Long long2 = new Long(long0);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertEquals(1L, (long)long2);
      
      longArray0[3] = long2;
      longArray0[4] = long1;
      longArray0[5] = long1;
      longArray0[6] = long1;
      longArray0[7] = long1;
      longArray0[8] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1258);
      intArray0[1] = (-1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'v');
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'v', 'v', 'v'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[20];
      longArray0[0] = (-18L);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 'v';
      longArray0[3] = (long) 'v';
      ArrayUtils.shift(longArray0, (-1));
      assertEquals(20, longArray0.length);
      
      ArrayUtils.shift(intArray0, 2144775598);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-1258), (-1)}, intArray0);
      
      ArrayUtils.reverse((byte[]) null, (int) (byte)5, (-890));
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1884.136962890625));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((byte[]) null, (byte)112, 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(20, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      char char0 = ':';
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = ':';
      charArray0[7] = ']';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {':', ':', ':', ':', ':', ':', ':', ']'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertFalse(character0.equals((Object)char0));
      assertEquals('o', (char)character0);
      
      Character character1 = new Character(':');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals(':', (char)character1);
      
      Character character2 = new Character(' ');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertEquals(' ', (char)character2);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = (Character) ':';
      characterArray0[3] = character2;
      characterArray0[4] = (Character) ':';
      characterArray0[5] = (Character) ':';
      characterArray0[6] = (Character) ':';
      characterArray0[7] = (Character) ':';
      Character character3 = Character.valueOf(':');
      assertNotNull(character3);
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals(':', (char)character3);
      
      characterArray0[8] = character3;
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray2);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray2.length);
      assertArrayEquals(new char[] {'o', ':', ':', ' ', ':', ':', ':', ':', ':'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) characterArray0[4]);
      assertNotNull(long1);
      assertEquals(9, characterArray0.length);
      assertFalse(long1.equals((Object)long0));
      assertEquals(58L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((short)932);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(932L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) character0);
      assertNotNull(long3);
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)char0));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals(111L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-915L));
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertEquals((-915L), (long)long4);
      
      longArray0[4] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short)2);
      assertNotNull(longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 58L, 932L, 111L, (-915L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      ArrayUtils.swap(intArray0, 0, 0, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      
      Long long0 = new Long((-2168L));
      assertNotNull(long0);
      assertEquals((-2168L), (long)long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[2] = long0;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-71);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[2]);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {(-2168L), (-2168L), (-2168L)}, longArray1);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int0 = mockRandom1.nextInt(703);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0, int0);
      assertNotSame(mockRandom1, mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom1.ints(1136, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 100;
      Integer integer0 = new Integer(100);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(100, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2561));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-2561), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertEquals((-1), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("The type must not be null", (-455));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((-455), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      assertNotNull(integer4);
      assertEquals(6, integerArray0.length);
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertEquals((-455), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1324);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals(1324, (int)integer5);
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {100, (-2561), (-1), (-455), (-455), 1324}, intArray0);
      
      Long[] longArray0 = new Long[8];
      Long long0 = new Long((-18L));
      assertNotNull(long0);
      assertEquals((-18L), (long)long0);
      
      Long long1 = Long.getLong("The type must not be null", long0);
      assertNotNull(long1);
      assertEquals((-18L), (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((-18L));
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertEquals((-18L), (long)long2);
      
      longArray0[1] = long2;
      Long long3 = Long.getLong("The type must not be null");
      assertNull(long3);
      
      longArray0[2] = null;
      Long long4 = new Long((long) integerArray0[1]);
      assertNotNull(long4);
      assertEquals(6, integerArray0.length);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertEquals((-2561L), (long)long4);
      
      longArray0[3] = long4;
      Long long5 = new Long(int0);
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long1));
      assertEquals(100L, (long)long5);
      
      longArray0[4] = long5;
      Long long6 = new Long((-1720L));
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertEquals((-1720L), (long)long6);
      
      longArray0[5] = long6;
      Long long7 = new Long((long) integerArray0[3]);
      assertNotNull(long7);
      assertEquals(6, integerArray0.length);
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long5));
      assertEquals((-455L), (long)long7);
      
      longArray0[6] = long7;
      Long long8 = new Long((long) integerArray0[5]);
      assertNotNull(long8);
      assertEquals(6, integerArray0.length);
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long6));
      assertFalse(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long4));
      assertEquals(1324L, (long)long8);
      
      longArray0[7] = long8;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1720L));
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-18L), (-18L), (-1720L), (-2561L), 100L, (-1720L), (-455L), 1324L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-22);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-22);
      floatArray0[1] = (-1012.16F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-22.0F), (-1012.16F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-22.0F), (-1012.16F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-915), (-915));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-915);
      longArray0[0] = (long) (-915);
      longArray0[2] = (long) (-22);
      longArray0[3] = (long) (-22);
      longArray0[4] = (long) (-915);
      longArray0[5] = (-22L);
      longArray0[6] = (long) (-83);
      longArray0[7] = (long) (-83);
      longArray0[8] = (long) (-915);
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (-22));
      assertNotNull(longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-915L), 0L, (-22L), (-22L), (-915L), (-22L), (-83L), (-83L), (-915L), (-22L)}, longArray1);
      assertArrayEquals(new long[] {(-915L), 0L, (-22L), (-22L), (-915L), (-22L), (-83L), (-83L), (-915L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), (-1549));
      assertNotNull(bitSet0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-1)}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray1, (long) (byte) (-123), (int) (byte) (-123));
      assertNotNull(bitSet1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-915L), 0L, (-22L), (-22L), (-915L), (-22L), (-83L), (-83L), (-915L), (-22L)}, longArray1);
      assertArrayEquals(new long[] {(-915L), 0L, (-22L), (-22L), (-915L), (-22L), (-83L), (-83L), (-915L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(longArray1, longArray0);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(longArray0, longArray1);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-83L);
      objectArray0[2] = (Object) (-915L);
      objectArray0[3] = (Object) (-915L);
      objectArray0[4] = (Object) (-22);
      objectArray0[5] = (Object) (byte) (-123);
      BitSet bitSet2 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], 526);
      assertNotNull(bitSet2);
      assertEquals(6, objectArray0.length);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.swap(doubleArray0, (-1098), (-2294), (-2146338544));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-3);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)119);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-21), (byte)90, (byte) (-21), (byte) (-3)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-21), (byte)90, (byte) (-21), (byte) (-3)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((short[]) null, (int) (byte)119, (int) (byte) (-21), (-2145182452));
      int[] intArray0 = new int[2];
      intArray0[0] = (-2145182452);
      intArray0[1] = (int) (byte) (-3);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 139, 342, 3287);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 139;
      doubleArray0[1] = (double) 139;
      doubleArray0[2] = (double) 3287;
      doubleArray0[3] = (double) 139;
      doubleArray0[4] = (double) 342;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {139.0, 139.0, 3287.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {139.0, 139.0, 3287.0, 139.0, 342.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 139.0, 351, (-3422.441669361555));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {139.0, 139.0, 3287.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {139.0, 139.0, 3287.0, 139.0, 342.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, ':', 3047);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      ArrayUtils.swap(doubleArray1, (-1), (-227));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {139.0, 139.0, 3287.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {139.0, 139.0, 3287.0, 139.0, 342.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1994091957);
      intArray0[1] = 1380;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1093, 0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-1994091957), 1380, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 53, (-1994091957));
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "X:*in@4:Oz6K]c");
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1380, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2410);
      int int0 = 0;
      intArray0[1] = (-2410);
      intArray0[2] = (-4531);
      int int1 = 18;
      int int2 = ArrayUtils.indexOf(intArray0, 18, 78);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-2410), (-2410), (-4531)}, intArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = '~';
      charArray0[2] = 'r';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2410, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)0;
      ArrayUtils.swap(shortArray0, (int) (short)1, 0, 12);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, 1, 1}, intArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = ':';
      charArray0[7] = ']';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {':', ':', ':', ':', ':', ':', ':', ']'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      Character character1 = new Character(':');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals(':', (char)character1);
      
      Character character2 = new Character('o');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('o', (char)character2);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = (Character) ':';
      characterArray0[3] = character2;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)932, (short)2, (short)932, (short)2}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) ':';
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) character2);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {58L}, longArray0);
      assertArrayEquals(new long[] {58L}, longArray1);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift((Object[]) characterArray0, (int) (short)932);
      assertEquals(9, characterArray0.length);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) characterArray0[3]);
      assertNull(object0);
      assertEquals(9, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = 2146326598;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short) (-1379);
      intArray0[4] = (int) (short) (-1379);
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short)0;
      intArray0[8] = (int) (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 121, 2146326598);
      assertNotNull(bitSet0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 2146326598, 0, (-1379), (-1379), 0, 0, 0, (-1)}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      Long long0 = new Long((-1281L));
      assertNotNull(long0);
      assertEquals((-1281L), (long)long0);
      
      ArrayUtils.hashCode((Object) long0);
      Float float0 = new Float(100.0);
      assertNotNull(float0);
      assertEquals(100.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-353.7851558));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-353.78516F), (float)float1, 0.01F);
      
      Float float2 = new Float((double) (-1379));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1379.0F), (float)float2, 0.01F);
      
      Float[] floatArray0 = ArrayUtils.removeAllOccurrences((Float[]) null, float1);
      assertNull(floatArray0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Double double0 = new Double(280.74576194084943);
      assertNotNull(double0);
      assertEquals(280.74576194084943, (double)double0, 0.01);
      
      Double double1 = new Double(280.74576194084943);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(280.74576194084943, (double)double1, 0.01);
      
      Double double2 = new Double(969.66681);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(969.66681, (double)double2, 0.01);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1069));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      
      ArrayUtils.shift(booleanArray0, 1, 1, (-157));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)889;
      shortArray0[2] = (short) (-8);
      shortArray0[3] = (short)1317;
      shortArray0[4] = (short)889;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)889, (short) (-8), (short)1317, (short)889, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.5298F);
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.5298F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-1));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.5298F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      Double double0 = new Double(1.5);
      assertNotNull(double0);
      assertEquals(1.5, (double)double0, 0.01);
      
      Double double1 = new Double((-1.0));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      
      Double double2 = new Double((-359.31049221858));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-359.31049221858), (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double2;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      boolean boolean1 = ArrayUtils.contains((int[]) null, (-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-157), 1, 2231);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-1613);
      shortArray0[2] = (short)118;
      shortArray0[3] = (short)2534;
      shortArray0[4] = (short) (-281);
      shortArray0[5] = (short)889;
      shortArray0[6] = (short) (-752);
      shortArray0[7] = (short)25022;
      shortArray0[8] = (short) (-7697);
      ArrayUtils.shuffle(shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1613), (short)118, (short)2534, (short) (-281), (short)889, (short) (-752), (short)25022, (short) (-7697), (short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-4662);
      ArrayUtils.shift(booleanArray0, (int) (short) (-4662), (int) (short)52, (int) (short)52);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4662)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-1.0);
      doubleArray0[1] = (-2106.3);
      doubleArray0[2] = (-408.60934);
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 2494);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 1;
      intArray0[2] = 2494;
      intArray0[3] = 2494;
      int int0 = ArrayUtils.indexOf(intArray0, (-499), (-499));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {32, 1, 2494, 2494}, intArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2106.3), (-408.60934), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      ArrayUtils.reverse(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 127;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 127;
      floatArray0[5] = (float) (-572);
      floatArray0[6] = (float) 0;
      floatArray0[7] = 666.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 840, (-572));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {127.0F, 0.0F, 0.0F, 0.0F, 127.0F, (-572.0F), 0.0F, 666.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, '\"');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\"'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '`';
      charArray0[2] = ',';
      charArray0[3] = 'N';
      charArray0[4] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, 0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      
      // Undeclared exception!
      try { 
        bitSet1.clear((-6399), 18688);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < 0: -6399
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'I');
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'I', 'I'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = (float) 51;
      floatArray0[3] = (float) 'I';
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 'I';
      longArray0[2] = (long) (-1455);
      longArray0[3] = (long) 'I';
      longArray0[4] = (-2892L);
      longArray0[5] = (long) 51;
      ArrayUtils.shift(longArray0, (-1));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {73L, (-1455L), 73L, (-2892L), 51L, (-1L)}, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (int) 'I';
      intArray0[2] = (int) 'I';
      intArray0[3] = (-1455);
      intArray0[4] = (-2145453499);
      intArray0[5] = (int) 'I';
      ArrayUtils.shift(intArray0, (-1));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {73, 73, (-1455), (-2145453499), 73, (-1)}, intArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)5;
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, (-4848));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100, (byte)2, (byte)76, (byte)5}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 2494);
      assertEquals(0, objectArray0.length);
      
      Short[] shortArray0 = new Short[8];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)0, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)0);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)0, (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short)44);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short)44, (short)short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short(short0);
      assertNotNull(short4);
      assertTrue(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short0));
      assertEquals((short)0, (short)short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short) (-281));
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertEquals((short) (-281), (short)short5);
      
      shortArray0[4] = short5;
      Short short6 = new Short((short)76);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short2));
      assertEquals((short)76, (short)short6);
      
      shortArray0[5] = short6;
      Short short7 = new Short((short) (-369));
      assertNotNull(short7);
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short2));
      assertEquals((short) (-369), (short)short7);
      
      shortArray0[6] = short7;
      Short short8 = new Short((short)76);
      assertNotNull(short8);
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short5));
      assertTrue(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short4));
      assertFalse(short8.equals((Object)short3));
      assertEquals((short)76, (short)short8);
      
      shortArray0[7] = short8;
      Short short9 = new Short((short)76);
      assertNotNull(short9);
      assertFalse(short9.equals((Object)short0));
      assertTrue(short9.equals((Object)short6));
      assertFalse(short9.equals((Object)short5));
      assertFalse(short9.equals((Object)short4));
      assertFalse(short9.equals((Object)short1));
      assertFalse(short9.equals((Object)short2));
      assertFalse(short9.equals((Object)short3));
      assertFalse(short9.equals((Object)short7));
      assertTrue(short9.equals((Object)short8));
      assertEquals((short)76, (short)short9);
      
      Short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, short9);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(short9.equals((Object)short0));
      assertTrue(short9.equals((Object)short6));
      assertFalse(short9.equals((Object)short5));
      assertFalse(short9.equals((Object)short4));
      assertFalse(short9.equals((Object)short1));
      assertFalse(short9.equals((Object)short2));
      assertFalse(short9.equals((Object)short3));
      assertFalse(short9.equals((Object)short7));
      assertTrue(short9.equals((Object)short8));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Short[] shortArray0 = new Short[4];
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      ArrayUtils.shuffle((Object[]) shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(119.49170231866538);
      assertNotNull(double0);
      assertEquals(119.49170231866538, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1503.144831));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1503.144831), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      String string0 = ArrayUtils.get((String[]) null, 3744, "FORY_Rd+*T");
      assertNotNull(string0);
      assertEquals("FORY_Rd+*T", string0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertEquals((byte)0, object0);
      
      boolean boolean1 = ArrayUtils.isSameType(double0, object0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) doubleArray0[0], 3744);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)0;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short) (-1);
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 0L, (-1L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      ArrayUtils.shift(floatArray0, (int) (short) (-324));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      char[] charArray1 = ArrayUtils.insert((int) (short)0, charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U'}, charArray1);
      assertArrayEquals(new char[] {'U', 'U'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1112.133F;
      floatArray0[1] = 3660.4827F;
      floatArray0[2] = 1475.2F;
      floatArray0[3] = 151.77F;
      floatArray0[4] = (-603.50824F);
      floatArray0[5] = (-697.5627F);
      ArrayUtils.shift(floatArray0, (-629), (-629), 162);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1112.133F, 3660.4827F, 1475.2F, 151.77F, (-603.50824F), (-697.5627F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = (-1063L);
      int[] intArray0 = new int[1];
      intArray0[0] = 62;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 62, 1824);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {62}, intArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1063L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1063L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[19];
      floatArray0[0] = (float) 1824;
      floatArray0[1] = (float) 1824;
      ArrayUtils.shift(floatArray0, 62, 5621, (-292));
      assertEquals(19, floatArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) null, (Object) bitSet0, (-643));
      assertNotNull(bitSet1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {62}, intArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 1.5;
      doubleArray0[0] = 557.647;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {557.647, 1.5, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 1.5;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 57.0F;
      ArrayUtils.shift(floatArray0, 1202);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {57.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = 'O';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2361), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2361, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = 1L;
      longArray0[3] = (-2L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2L));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1L), 1L, (-2L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-2L);
      floatArray0[1] = 226.01F;
      floatArray0[2] = (float) 1L;
      Double double0 = new Double((-2.0F));
      assertNotNull(double0);
      assertEquals((-2.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) doubleArray0[0]);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, 267.0, (-4086), (-1.5298000574111938));
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.swap((Object[]) doubleArray0, 32, 894);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-702.1));
      assertNotNull(double0);
      assertEquals((-702.1), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1125.7702643);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1125.7702643, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertNotNull(double2);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(1125.7702643, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.1);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.1, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-238.05114));
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((-238.05114), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double[] doubleArray1 = ArrayUtils.toArray(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-900);
      shortArray0[1] = (short)2;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1465);
      intArray0[1] = (int) (short)2;
      intArray0[2] = (int) (short)2;
      intArray0[3] = (int) (short)2;
      intArray0[4] = (int) (short) (-900);
      intArray0[5] = (int) (short)2;
      intArray0[6] = (int) (short)2;
      intArray0[7] = (-1131);
      intArray0[8] = (int) (short)2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1498;
      floatArray0[6] = (float) 1498;
      floatArray0[2] = (float) 1498;
      floatArray0[3] = (float) 1498;
      floatArray0[4] = (float) 1498;
      floatArray0[6] = (float) 1498;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1498, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1498, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1498;
      floatArray0[1] = (float) 1498;
      floatArray0[2] = (float) 1498;
      floatArray0[3] = (float) 1498;
      floatArray0[4] = (float) 1498;
      floatArray0[5] = (float) 1498;
      floatArray0[6] = (float) 1498;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1498, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1498, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1930.6999559;
      doubleArray0[1] = 1910.4;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1884.136962890625);
      doubleArray0[4] = 139.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 540.97025;
      doubleArray0[7] = (-98.5);
      doubleArray0[8] = (-1218.765557579688);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1930.6999559, 1910.4);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1930.6999559, 1910.4, 0.0, (-1884.136962890625), 139.0, 0.0, 540.97025, (-98.5), (-1218.765557579688)}, doubleArray0, 0.01);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-702.1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-702.1), (-2707.46349115));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-702.1)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      ArrayUtils.swap(floatArray0, 1056, 1056, 321);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      Double[] doubleArray1 = new Double[8];
      Double double0 = new Double(1056);
      assertNotNull(double0);
      assertEquals(1056.0, (double)double0, 0.01);
      
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) (-702.1);
      doubleArray1[2] = (Double) (-702.1);
      doubleArray1[3] = (Double) (-702.1);
      doubleArray1[4] = (Double) (-702.1);
      doubleArray1[5] = (Double) (-702.1);
      doubleArray1[6] = (Double) (-702.1);
      doubleArray1[7] = (Double) (-702.1);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (-702.1));
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {1056.0, (-702.1), (-702.1), (-702.1), (-702.1), (-702.1), (-702.1), (-702.1)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = 'p';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 108, 'B');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 108, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)122, (int) (short)122, 0.7);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Class<MutableInt[]> class0 = MutableInt[].class;
      MutableInt[] mutableIntArray0 = ArrayUtils.nullToEmpty((MutableInt[]) null, class0);
      assertNotNull(mutableIntArray0);
      assertEquals(0, mutableIntArray0.length);
      
      ArrayUtils.swap((Object[]) booleanArray0, 2, (-1), (-1));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1136;
      intArray0[1] = 76;
      intArray0[1] = 1136;
      intArray0[3] = 76;
      Class<MutableInt[]> class0 = MutableInt[].class;
      MutableInt[] mutableIntArray0 = ArrayUtils.nullToEmpty((MutableInt[]) null, class0);
      assertNotNull(mutableIntArray0);
      assertEquals(0, mutableIntArray0.length);
      
      ArrayUtils.swap((Object[]) mutableIntArray0, 7, 76, (-1));
      assertEquals(0, mutableIntArray0.length);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      ArrayUtils.swap(longArray0, (-2169), (-2169), (-287));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-28);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)114, 2147);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)31, (byte) (-28)}, byteArray0);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((double) (-2169), 643.8400268554688);
      assertNotNull(doubleStream0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, 9);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {9}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray2);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "v5za_yiU";
      stringArray0[1] = "java.lang.String";
      stringArray0[2] = "#K:k;O<y";
      stringArray0[3] = "0#){P|]/";
      stringArray0[4] = "";
      stringArray0[5] = "V39*TWIg";
      stringArray0[6] = "L";
      Class<String[]> class0 = String[].class;
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0, class0);
      assertNotNull(stringArray1);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '`';
      charArray0[2] = ',';
      charArray0[3] = 'N';
      charArray0[4] = 'v';
      charArray0[5] = '0';
      charArray0[6] = 'I';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'v');
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'<', '`', ',', 'N', 'v', '0', 'I', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'<', '`', ',', 'N', '0', 'I', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'v';
      floatArray0[1] = (float) 'I';
      floatArray0[2] = (float) 'I';
      floatArray0[3] = (float) '0';
      floatArray0[4] = (float) '0';
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {73.0F, 73.0F, 48.0F, 48.0F, 118.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 2;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 2.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-564);
      ArrayUtils.swap(intArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, (-564)}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-564);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1291L);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-564L)}, longArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'l', Integer.MAX_VALUE);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-564L)}, longArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 1291L;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1621.047F));
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, 1291.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1621.047F), 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, 1291.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 643.84F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-2695.9968F);
      floatArray0[6] = (-4750.47F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 643.84F, 0.0F, 0.0F, (-1.0F), (-2695.9968F), (-4750.47F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((-1.0F));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      
      Double double2 = new Double((-1271.6054));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-1271.6054), (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double1;
      doubleArray0[1] = double2;
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ArrayUtils.toString((Object) double1, "7K|`mD8WO{VtQm!w");
      assertNotNull(string0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertEquals("-1.0", string0);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)24;
      Byte byte1 = new Byte((byte)24);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)24, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)2;
      Byte byte3 = new Byte((byte)2);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)2, (byte)byte3);
      
      byteArray0[1] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)24, (byte)2}, byteArray1);
      
      boolean boolean2 = ArrayUtils.contains((long[]) null, (long) (byte)24);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)24;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = (int) byte2;
      intArray0[6] = (int) byte0;
      intArray0[7] = (int) (byte)2;
      intArray0[8] = (int) byte0;
      int[] intArray1 = ArrayUtils.add(intArray0, 2);
      assertNotNull(intArray1);
      assertEquals(10, intArray1.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {2, 24, 2, 2, Integer.MAX_VALUE, 2, 24, 2, 24, 2}, intArray1);
      assertArrayEquals(new int[] {2, 24, 2, 2, Integer.MAX_VALUE, 2, 24, 2, 24}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = 1L;
      int int0 = ArrayUtils.indexOf((char[]) null, 'S', (-1151));
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2L);
      doubleArray0[3] = (-1099.2503695179819);
      doubleArray0[4] = (double) (-2L);
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) (-1L);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-2.0), (-1099.2503695179819), (-2.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf((int[]) null, (-1151));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-20.83F);
      floatArray0[2] = (-1884.137F);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[2];
      intArray0[0] = (-1069);
      intArray0[1] = 1981;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-1069), 1981}, intArray0);
      assertArrayEquals(new int[] {(-1069), 1981}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-20.83F);
      doubleArray1[1] = (double) (-1884.137F);
      doubleArray1[2] = (double) (-1.0F);
      doubleArray1[3] = (double) (-1884.137F);
      doubleArray1[4] = (double) (-1069);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-20.829999923706055), (-1884.136962890625), (-1.0), (-1884.136962890625), (-1069.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1069), 1981}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      
      ArrayUtils.shift(floatArray0, (-1));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-20.83F), (-1884.137F), 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 139, 342, 3287);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 139;
      doubleArray0[1] = (double) 139;
      doubleArray0[0] = (double) 3287;
      doubleArray0[3] = (double) 139;
      doubleArray0[4] = (double) 342;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {3287.0, 139.0, 0.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3287.0, 139.0, 0.0, 139.0, 342.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 3287.0, 351, (-3422.441669361555));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {3287.0, 139.0, 0.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3287.0, 139.0, 0.0, 139.0, 342.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, ':', 3047);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3047;
      intArray0[1] = (-1);
      intArray0[2] = 351;
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {3047, (-1), 351, (-1)}, intArray1);
      assertArrayEquals(new int[] {3047, (-1), 351, (-1)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3287.0, 139.0, 0.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3287.0, 139.0, 0.0, 139.0, 342.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '`';
      charArray0[2] = ',';
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-864);
      shortArray0[1] = (short)281;
      shortArray0[2] = (short) (-864);
      shortArray0[3] = (short) (-473);
      shortArray0[4] = (short) (-2085);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2085));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-864), (short)281, (short) (-864), (short) (-473), (short) (-2085)}, shortArray0);
      assertEquals(4, int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'N';
      intArray0[1] = (int) (short) (-473);
      intArray0[2] = (int) (short) (-473);
      intArray0[3] = (int) '<';
      intArray0[4] = 4;
      intArray0[5] = 4;
      intArray0[6] = (int) (short) (-864);
      ArrayUtils.swap(intArray0, 2147187736, (int) (short) (-2085));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {78, (-473), (-473), 60, 4, 4, (-864)}, intArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-473);
      objectArray0[1] = (Object) 4;
      objectArray0[2] = (Object) (short)281;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(objectArray0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2695.9968F);
      floatArray0[1] = 1859.8734F;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 397.08;
      doubleArray0[1] = (-2501.12363487);
      doubleArray0[2] = 397.08;
      doubleArray0[3] = (double) 1859.8734F;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-171.33696409059777);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {397.08, (-2501.12363487), 397.08, 1859.8734130859375, 1.0, (-171.33696409059777)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-1L));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-123), (-1549));
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-123);
      longArray0[1] = (long) (byte) (-123);
      longArray0[2] = (long) (byte) (-123);
      longArray0[3] = (long) (byte) (-123);
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (long) (byte) (-123);
      longArray0[6] = (long) (-1549);
      longArray0[7] = (long) (byte) (-1);
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-3639L), (int) (byte) (-123));
      assertNotNull(bitSet1);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-123L), (-123L), (-123L), (-123L), (-1L), (-123L), (-1549L), (-1L)}, longArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)97;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertNotNull(bitSet0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-124), (byte) (-1), (byte)97}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)11;
      objectArray0[1] = (Object) (byte) (-124);
      Short short0 = new Short((byte) (-124));
      assertNotNull(short0);
      assertEquals((short) (-124), (short)short0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) short0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, 769, 769, 821);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)24;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)24, (int) (byte) (-29));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte) (-29), (byte)11, (byte)24}, byteArray0);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)24);
      assertNotNull(bitSet0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte) (-29), (byte)11, (byte)24}, byteArray0);
      assertEquals(5, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3287;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 139;
      doubleArray0[3] = (double) 342;
      doubleArray0[4] = (double) 139;
      doubleArray0[5] = (double) 139;
      doubleArray0[6] = (double) 139;
      doubleArray0[7] = (double) 139;
      doubleArray0[8] = (double) 342;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {3287.0, (-1.0), 139.0, 342.0, 139.0, 139.0, 139.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3287.0, (-1.0), 139.0, 342.0, 139.0, 139.0, 139.0, 139.0, 342.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-578.0223661), 139, (-702.1));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3287.0, (-1.0), 139.0, 342.0, 139.0, 139.0, 139.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertSame(doubleArray0, doubleArray1);
      
      int int1 = ArrayUtils.indexOf((char[]) null, ':', (-2290));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3287.0, (-1.0), 139.0, 342.0, 139.0, 139.0, 139.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertSame(doubleArray0, doubleArray1);
      
      ArrayUtils.swap(doubleArray0, (-112), (-3123));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3287.0, (-1.0), 139.0, 342.0, 139.0, 139.0, 139.0, 139.0, 342.0}, doubleArray0, 0.01);
      assertSame(doubleArray0, doubleArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray2, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertTrue(boolean1 == boolean0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(boolean1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short)1925;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = new short[5];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)1925;
      ArrayUtils.shuffle(shortArray2);
      assertEquals(5, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)1925}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf(false);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.valueOf(true);
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6);
      
      booleanArray0[5] = boolean6;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)122;
      floatArray0[1] = (-1330.725F);
      floatArray0[2] = (-1330.725F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1330.725F);
      floatArray0[5] = (float) (short)122;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1330.725F), (-1330.725F), (-1.0F), (-1330.725F), 122.0F, 122.0F}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)622);
      assertNotNull(short0);
      assertEquals((short)622, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1894));
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-1894), (short)short1);
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.addFirst(shortArray0, short0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(short0.equals((Object)short1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = boolean0;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = boolean0;
      boolean boolean7 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-627.7315F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-627.7315F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-19);
      Short[] shortArray1 = new Short[3];
      shortArray1[0] = (Short) (short) (-19);
      shortArray1[1] = (Short) (short) (-19);
      floatArray0[4] = (float) (short) (-19);
      Short short0 = new Short((short) (-2150));
      assertNotNull(short0);
      assertEquals((short) (-2150), (short)short0);
      
      Short[] shortArray2 = ArrayUtils.addFirst(shortArray1, short0);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true}, booleanArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 2324L;
      longArray0[1] = 1L;
      longArray0[2] = (-1L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = ArrayUtils.addAll((Boolean[]) null, (Boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)41;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {41.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(longArray0, (int) (byte) (-86), (int) (byte)0, (int) (byte) (-86));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {2324L, 1L, (-1L), 0L, 0L, 0L, 0L}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)41;
      ArrayUtils.swap(shortArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)41}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-104), object0);
      assertNotNull(object1);
      assertEquals(2, objectArray0.length);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[0] = object1;
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertEquals(2, objectArray0.length);
      assertSame(object0, object1);
      assertSame(object0, object2);
      assertSame(object1, object0);
      assertSame(object1, object2);
      assertSame(object2, object0);
      assertSame(object2, object1);
      
      objectArray0[1] = object2;
      int int0 = ArrayUtils.indexOf(objectArray0, object0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, int0);
      assertSame(object0, object1);
      assertSame(object0, object2);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-3811.40142472796));
      assertNotNull(double0);
      assertEquals((-3811.40142472796), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1.0));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-3811.40142472796));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((-3811.40142472796), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.5);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(1.5, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-3811.40142472796), (-1.0), (-3811.40142472796), 1.5}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = ']';
      charArray0[2] = 'q';
      charArray0[3] = '';
      charArray0[4] = '%';
      charArray0[5] = '@';
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '@';
      charArray1[1] = '';
      charArray1[2] = ']';
      charArray1[3] = ']';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'#', ']', 'q', '', '%', '@'}, charArray0);
      assertArrayEquals(new char[] {'@', '', ']', ']'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'e';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'e';
      charArray1[1] = 'e';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'S', 'e'}, charArray0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int0 = 44;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(44, intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)12;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-26));
      assertNotNull(bitSet0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)12}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      bitSet0.set((int) (byte)12);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)12}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(13, bitSet0.length());
      assertEquals("{12}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      byte[] byteArray1 = bitSet0.toByteArray();
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)12}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)16}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(13, bitSet0.length());
      assertEquals("{12}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'e';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'e';
      charArray1[1] = 'e';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'S', 'e'}, charArray0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(44, intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray2 = ArrayUtils.removeElement(charArray0, '5');
      assertNotNull(charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray2.length);
      assertArrayEquals(new char[] {'S', 'e'}, charArray0);
      assertArrayEquals(new char[] {'S', 'e'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, 44, 44);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 44;
      doubleArray0[1] = (double) 'e';
      doubleArray0[2] = (double) 1260;
      doubleArray0[3] = (double) 'S';
      doubleArray0[4] = (double) 'S';
      doubleArray0[5] = (double) 'S';
      doubleArray0[6] = (double) 'S';
      doubleArray0[7] = (double) 'e';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1260, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1260, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[2] = (short) (-324);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short) (-324)}, shortArray0);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((short) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), (-1));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short) (-324)}, shortArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'Q';
      charArray0[2] = 'r';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '@');
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'-', 'Q', 'r'}, charArray0);
      assertArrayEquals(new char[] {'-', 'Q', 'r'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+S4Y");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      charArray0[5] = ' ';
      charArray0[6] = ' ';
      charArray0[7] = '5';
      ArrayUtils.swap(charArray0, (-2147146440), (int) (short) (-1025), 55);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {' ', ' ', '\u0000', ' ', ' ', ' ', ' ', '5'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (-1L));
      assertFalse(boolean1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2147146440);
      intArray0[1] = (int) ' ';
      intArray0[2] = (int) ' ';
      intArray0[3] = (int) ' ';
      intArray0[4] = (int) ' ';
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = (int) ' ';
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-2147146440), 32, 32, 32, 32, Integer.MAX_VALUE, 32}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ' ');
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {' ', ' ', '\u0000', ' ', ' ', ' ', ' ', '5'}, charArray0);
      assertArrayEquals(new char[] {' ', '\u0000', ' ', ' ', ' ', ' ', '5'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = 'e';
      charArray0[2] = ':';
      charArray0[3] = '}';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\\', 'e', ':', '}'}, charArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) 'e';
      objectArray0[3] = (Object) ':';
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'e';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'e';
      charArray1[1] = 'e';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'S', 'e'}, charArray0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int0 = 44;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(44, intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray2 = ArrayUtils.removeElement(charArray0, '5');
      assertNotNull(charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray2.length);
      assertArrayEquals(new char[] {'S', 'e'}, charArray0);
      assertArrayEquals(new char[] {'S', 'e'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, 44, 44);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 44;
      doubleArray0[1] = (double) 'e';
      doubleArray0[2] = (double) 1260;
      doubleArray0[3] = (double) 'S';
      doubleArray0[4] = (double) 'S';
      doubleArray0[5] = (double) 'S';
      doubleArray0[6] = (double) 'S';
      doubleArray0[7] = (double) 'e';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1260, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1260, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2410);
      intArray0[1] = 0;
      intArray0[2] = (-4531);
      int int0 = ArrayUtils.indexOf(intArray0, (-1), 78);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-2410), 0, (-4531)}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1919.05F);
      floatArray0[1] = (-603.50824F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 1709.9F;
      floatArray0[5] = 253.0F;
      ArrayUtils.shift(floatArray0, 1434);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1919.05F), (-603.50824F), 0.0F, (-1.0F), 1709.9F, 253.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3075), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3075, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2695.9968F);
      floatArray0[1] = 1859.8734F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1803.3973F);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {(-2695.9968F), 1859.8734F, 0.0F, 1.0F, (-1803.3973F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.insert(2127961069, floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(5, floatArray2.length);
      assertArrayEquals(new float[] {(-2695.9968F), 1859.8734F, 0.0F, 1.0F, (-1803.3973F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2695.9968F), 1859.8734F, 0.0F, 1.0F, (-1803.3973F)}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)951;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short) (-1), (short)951}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short) (-1), (short)951, (short)2, (short)2, (short) (-1), (short)951}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.5298000574111938);
      doubleArray0[1] = (-2106.3);
      doubleArray0[2] = 397.08;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.5298000574111938), (-2106.3), 397.08, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 4;
      int int1 = ArrayUtils.indexOf(longArray0, 4L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {4L}, longArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      intArray0[1] = 0;
      intArray0[2] = 4;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {4, 0, 4}, intArray0);
      assertArrayEquals(new int[] {4, 0, 4, 4, 0, 4}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[7] = ']';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      Character character1 = new Character('\u0000');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('\u0000', (char)character1);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = (Character) '\u0000';
      characterArray0[3] = (Character) '\u0000';
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '\u0000';
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) characterArray0[3]);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(9, characterArray0.length);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.shift((Object[]) characterArray0, (int) (short)932);
      assertEquals(9, characterArray0.length);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) characterArray0[3]);
      assertNull(object0);
      assertEquals(9, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '4';
      charArray0[2] = 'C';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'5', '4', 'C'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      ArrayUtils.swap(longArray0, (-287), (-287), (-287));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[3];
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'n';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'n');
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'I', 'n'}, charArray0);
      assertEquals(1, int0);
      
      ArrayUtils.swap(longArray0, 8, (-287), (int) (byte)31);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L}, longArray0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)2, 12);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      ArrayUtils.swap(objectArray0, (-439), (-1), (-439));
      assertEquals(3, objectArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '7';
      charArray0[2] = 'q';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)20;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (long) (short)20;
      longArray0[3] = (long) (short)20;
      longArray0[4] = (long) (short) (-1);
      longArray0[5] = (long) (short)20;
      longArray0[6] = (long) (short)20;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 20L);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1L), 20L, 20L, (-1L), 20L, 20L}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 20L;
      ArrayUtils.shift(floatArray0, (int) (short) (-324));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {20.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)20, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 20, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = 1L;
      longArray0[3] = (-2L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2L));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1L), 1L, (-2L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-2L);
      floatArray0[1] = 226.01F;
      floatArray0[2] = (float) 1L;
      ArrayUtils.shift(floatArray0, 1202);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {226.01F, 1.0F, (-2.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'O';
      charArray0[2] = 'q';
      charArray0[3] = 'S';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2361), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2361, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = (-1063L);
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1063L), 2, 1.5);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[3] = 's';
      charArray0[4] = 'T';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'.', '.', '\u0000', 's', 'T'}, charArray0);
      assertArrayEquals(new char[] {'.', '.', '\u0000', 's', 'T', '.', '.', '\u0000', 's', 'T'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '.';
      doubleArray0[1] = (double) 's';
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {46.0, 115.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      char[] charArray0 = new char[5];
      long[] longArray0 = new long[2];
      longArray0[0] = 2511L;
      long[] longArray1 = ArrayUtils.add(longArray0, 3475L);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {2511L, 0L}, longArray0);
      assertArrayEquals(new long[] {2511L, 0L, 3475L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte)42;
      ArrayUtils.reverse(byteArray0, 251, 122);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)65, (byte) (-1), (byte)126, (byte)54, (byte) (-5), (byte)72, (byte)98, (byte)42}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (int) (byte) (-5));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(5, objectArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-564);
      ArrayUtils.swap(intArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, (-564)}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-564);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1291L);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-564L)}, longArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'l', Integer.MAX_VALUE);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-14);
      shortArray0[1] = (short)932;
      shortArray0[2] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-14), (short)932, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Character character0 = Character.valueOf('4');
      assertNotNull(character0);
      assertEquals('4', (char)character0);
      
      Character character1 = new Character('o');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('o', (char)character1);
      
      Boolean boolean1 = Boolean.valueOf("PH-3m");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[2] = boolean1;
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)122, (int) (short)122, 0.7);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Class<MutableInt[]> class0 = MutableInt[].class;
      MutableInt[] mutableIntArray0 = ArrayUtils.nullToEmpty((MutableInt[]) null, class0);
      assertNotNull(mutableIntArray0);
      assertEquals(0, mutableIntArray0.length);
      
      ArrayUtils.swap((Object[]) booleanArray0, 2, (-1), (-1));
      assertEquals(8, booleanArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) (short)122;
      double[] doubleArray3 = ArrayUtils.subarray(doubleArray2, (int) (short)122, (int) (short)122);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {2.0, 122.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 2);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.hashCode((Object) "=48z~2.1hb.");
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertArrayEquals(new char[] {'x'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)932;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)932}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = '6';
      charArray0[2] = '0';
      charArray0[3] = 'O';
      charArray0[4] = 'x';
      charArray0[5] = '5';
      charArray0[6] = 'k';
      charArray0[7] = 'I';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'V', '6', '0', 'O', 'x', '5', 'k', 'I'}, charArray0);
      assertEquals(4, int0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'x';
      longArray0[1] = (long) '6';
      longArray0[2] = (long) 'O';
      longArray0[3] = (long) 'k';
      ArrayUtils.swap(longArray0, (-287), (int) (short)932, (-2160));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {120L, 54L, 79L, 107L}, longArray0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1500, (-3180));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)932}, shortArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.5298000574111938);
      doubleArray0[1] = (-1.5298000574111938);
      doubleArray0[2] = 397.08;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = 'A';
      charArray0[2] = '&';
      charArray0[3] = 'A';
      ArrayUtils.reverse(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'A', '&', 'A', '&'}, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 'A';
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 65.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 65.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) (-1.5298000574111938);
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, (boolean[]) null);
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '&';
      longArray0[1] = (long) '&';
      longArray0[2] = (long) 'A';
      Float[] floatArray2 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray2);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertArrayEquals(new float[] {1.0F, 65.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.5298000574111938);
      doubleArray0[1] = (-2106.3);
      doubleArray0[2] = 397.08;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = 'A';
      charArray0[2] = '&';
      charArray0[3] = 'A';
      ArrayUtils.reverse(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'A', '&', 'A', '&'}, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 'A';
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 65.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 65.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) (-1.5298000574111938);
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, (boolean[]) null);
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '&';
      longArray0[1] = (long) '&';
      longArray0[2] = (long) 'A';
      ArrayUtils.swap(longArray0, (-1674), (-1674), (-4662));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {38L, 38L, 65L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      char[] charArray0 = new char[2];
      Character character0 = new Character('\u0000');
      assertNotNull(character0);
      assertEquals('\u0000', (char)character0);
      
      Character character1 = new Character('i');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('i', (char)character1);
      
      Character character2 = Character.valueOf('=');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('=', (char)character2);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'i');
      assertNotNull(charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-862), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -862, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1258);
      intArray0[1] = (-1);
      Character character0 = new Character('}');
      assertNotNull(character0);
      assertEquals('}', (char)character0);
      
      Character character1 = new Character('m');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('m', (char)character1);
      
      Character character2 = new Character('m');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('m', (char)character2);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      Character character3 = new Character('m');
      assertNotNull(character3);
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertEquals('m', (char)character3);
      
      characterArray0[1] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '}');
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'}', 'm'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-862), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -862, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)0, 8);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 68;
      ArrayUtils.shift(intArray0, (int) (byte)0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {68}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 68;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 68;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {68.0F, 0.0F, 68.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) floatArray1, (-177), 2146992016);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {68.0F, 0.0F, 68.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-69.0337));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-69.0337), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      Double double2 = new Double((-69.0337));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((-69.0337), (double)double2, 0.01);
      
      doubleArray0[3] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-69.0337), 0.0, (-69.0337)}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 2826.2286130836105, (-845), (double) doubleArray0[1]);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-69.0337), 0.0, (-69.0337)}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2839;
      shortArray0[1] = (short) (-1053);
      shortArray0[2] = (short)26713;
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object[] objectArray1 = new Object[9];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = object0;
      objectArray1[1] = object0;
      objectArray1[2] = object0;
      objectArray1[3] = object0;
      objectArray1[4] = object0;
      objectArray1[5] = object0;
      objectArray1[6] = object0;
      objectArray1[7] = object0;
      objectArray1[8] = object0;
      Object object1 = ArrayUtils.get(objectArray1, (-2146873046));
      assertNull(object1);
      assertEquals(9, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      
      objectArray0[1] = null;
      ArrayUtils.swap(objectArray0, 2, (-1148), (-1218));
      assertEquals(2, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)0;
      int[] intArray0 = new int[5];
      intArray0[0] = 8;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-177), 68);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.shift(intArray0, (-177));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 8, 0}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (-177);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-177.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) floatArray1, (int) (byte)0, (int) (byte)0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-177.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 1.5;
      doubleArray0[0] = 557.647;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {557.647, 1.5, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 1.5;
      doubleArray1[1] = (Double) 557.647;
      doubleArray1[2] = (Double) 0.0;
      Double double0 = new Double(557.647);
      assertNotNull(double0);
      assertEquals(557.647, (double)double0, 0.01);
      
      doubleArray1[3] = double0;
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = (Double) 1.5;
      doubleArray1[6] = (Double) 557.647;
      doubleArray1[7] = (Double) 0.0;
      doubleArray1[8] = (Double) 557.647;
      Double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, (Object) doubleArray1[7]);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-4086), (double) (-4086));
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {557.647, 1.5, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      ArrayUtils.swap((Object[]) doubleArray1, 100, 32);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-19);
      shortArray0[2] = (short) (-4086);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-19), (short) (-4086)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-19), (short) (-4086)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '&';
      charArray0[2] = 'I';
      charArray0[3] = 'V';
      charArray0[5] = 'g';
      charArray0[6] = '6';
      charArray0[7] = '|';
      charArray0[8] = 'K';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {'/', '&', 'I', 'V', '\u0000', 'g', '6', '|', 'K'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'I';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {73.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 3306, (-4810), (-4810));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Short short0 = new Short((short)263);
      assertNotNull(short0);
      assertEquals((short)263, (short)short0);
      
      // Undeclared exception!
      try { 
        BitSet.valueOf((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = 51;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 51);
      assertNotNull(bitSet0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      objectArray0[0] = null;
      Object object2 = ArrayUtils.get(objectArray0, 0);
      assertNull(object2);
      assertEquals(2, objectArray0.length);
      
      objectArray0[1] = null;
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertNotNull(bitSet1);
      assertEquals(2, objectArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(2, bitSet1.cardinality());
      assertEquals(2, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 1}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(51);
      assertNotNull(long0);
      assertEquals(51L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(32L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(32L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-127L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-127L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(1L);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals(1L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-1237L));
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertEquals((-1237L), (long)long4);
      
      longArray0[4] = long4;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 51);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = '|';
      charArray0[2] = 'N';
      charArray0[3] = 'Q';
      charArray0[4] = 'a';
      charArray0[5] = 'd';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertArrayEquals(new char[] {'S', '|', 'N', 'Q', 'a', 'd'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) float0);
      assertEquals(1, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-564);
      intArray0[2] = (-1);
      intArray0[5] = (-1);
      intArray0[4] = (int) (short) (-3093);
      intArray0[5] = (-1);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((double) (-3093), (double) (-564));
      assertNotNull(doubleStream0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1763);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {(-564), 0, (-1), 0, (-3093), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-564), 0, (-1), 0, (-3093), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, (-3093));
      assertNotNull(intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray2.length);
      assertArrayEquals(new int[] {(-564), 0, (-1), 0, (-3093), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-564), 0, (-1), 0, (-1)}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)122);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)122;
      intArray0[1] = (-564);
      intArray0[2] = (-564);
      intArray0[3] = (-564);
      ArrayUtils.swap(intArray0, (-740), (-564));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {122, (-564), (-564), (-564)}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 122;
      doubleArray0[2] = (double) (short)122;
      doubleArray0[3] = (double) 122;
      doubleArray0[4] = (double) (-564);
      boolean boolean3 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {122.0, 0.0, 122.0, 122.0, (-564.0)}, doubleArray0, 0.01);
      assertFalse(boolean3);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 122;
      integerArray0[1] = (Integer) (-564);
      integerArray0[2] = (Integer) 122;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, (Integer[]) null);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {122.0, 0.0, 122.0, 122.0, (-564.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {122.0, 0.0, 122.0, 122.0, (-564.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      Integer[] integerArray2 = new Integer[1];
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      integerArray2[0] = (Integer) (-564);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray2);
      assertNotNull(intArray1);
      assertEquals(1, integerArray2.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {(-564)}, intArray1);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 122);
      assertNotNull(intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray2.length);
      assertArrayEquals(new int[] {122, (-564), (-564), (-564)}, intArray0);
      assertArrayEquals(new int[] {(-564), (-564), (-564)}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 122;
      floatArray0[1] = (float) (-564);
      floatArray0[2] = (float) (-564);
      floatArray0[3] = (float) (-740);
      floatArray0[4] = (float) (int)integerArray0[2];
      floatArray0[5] = (float) (short)122;
      ArrayUtils.reverse(floatArray0, (int) integerArray0[0], (-1));
      assertEquals(3, integerArray0.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {122.0F, (-564.0F), (-564.0F), (-740.0F), 122.0F, 122.0F}, floatArray0, 0.01F);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 576L;
      longArray0[1] = 0L;
      longArray0[2] = (-4153L);
      longArray0[3] = 0L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {576L, 0L, (-4153L), 0L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-753), (-753));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 576L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 576L;
      floatArray0[3] = (float) 576L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) (-4153L);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {576.0F, 0.0F, 576.0F, 576.0F, 0.0F, (-4153.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      ArrayUtils.swap(doubleArray0, (-1388), 121);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean3 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf((float[]) null, 214.24F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-9);
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) (byte) (-9));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2191.7376710391;
      doubleArray0[1] = (-4136.2819);
      doubleArray0[2] = 1588.5161;
      doubleArray0[3] = 100.0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "NA";
      stringArray0[1] = "Cv`ZLoP/P\"V-k3%/";
      stringArray0[2] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[3] = "The type must not be null";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String[] stringArray2 = ArrayUtils.nullToEmpty(stringArray1);
      assertNotNull(stringArray2);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertEquals(4, stringArray2.length);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray2);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[5] = (float) 81;
      floatArray0[6] = (float) 81;
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      Character character1 = Character.valueOf('*');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('*', (char)character1);
      
      Character character2 = new Character('o');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('o', (char)character2);
      
      Boolean boolean0 = Boolean.valueOf("S");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'o';
      intArray0[1] = (int) (short)932;
      intArray0[2] = (int) 'o';
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {111, 932, 111, 0}, intArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1703.239F);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-1703.239F);
      Double double0 = new Double((-1703.239F));
      assertNotNull(double0);
      assertEquals((-1703.239013671875), (double)double0, 0.01);
      
      objectArray0[3] = (Object) (-1703.239F);
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(6, objectArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Zv\u0002fz`^vH(uSe");
      assertNotNull(stringArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[5] = 0;
      ArrayUtils.swap(intArray0, 0, (-564));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)52;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (-287));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-62), (byte) (-128), (byte)106, (byte)49, (byte)116, (byte) (-107), (byte)52}, byteArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals(0, object1);
      
      objectArray0[3] = object1;
      MutableInt mutableInt1 = new MutableInt(0);
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0, (int)mutableInt1.getValue());
      
      objectArray0[4] = (Object) mutableInt1;
      int int0 = mutableInt1.getAndAdd(0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(0, int0);
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0, (int)mutableInt1.getValue());
      assertNotSame(mutableInt1, mutableInt0);
      
      ArrayUtils.shift(objectArray0, 0, (-1287), 0);
      assertEquals(5, objectArray0.length);
      
      ArrayUtils.shift((short[]) null, 0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(2825.13987876);
      assertNotNull(double0);
      assertEquals(2825.13987876, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = '1';
      charArray0[2] = '9';
      charArray0[3] = ']';
      charArray0[4] = 'F';
      charArray0[5] = ';';
      charArray0[6] = '^';
      charArray0[7] = 'h';
      int int0 = ArrayUtils.indexOf(charArray0, 'F');
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'3', '1', '9', ']', 'F', ';', '^', 'h'}, charArray0);
      assertEquals(4, int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) ';';
      floatArray0[1] = (float) 'h';
      floatArray0[2] = (float) '^';
      floatArray0[3] = (float) '3';
      floatArray0[4] = (float) 'h';
      floatArray0[5] = (float) ']';
      floatArray0[6] = (float) ';';
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {59.0F, 104.0F, 94.0F, 51.0F, 104.0F, 93.0F, 59.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {59.0F, 104.0F, 94.0F, 51.0F, 104.0F, 93.0F, 59.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      ArrayUtils.reverse(intArray0, (-1), 4088);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 127;
      intArray0[1] = (-63);
      intArray0[2] = (-63);
      ArrayUtils.reverse(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-63), (-63), 127}, intArray0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1379), (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-1379);
      longArray0[2] = (long) (short) (-1379);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short) (-1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-1379L);
      objectArray0[1] = (Object) (-1L);
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short) (-1);
      Object object0 = ArrayUtils.get(objectArray0, 2641, objectArray0[0]);
      assertNotNull(object0);
      assertEquals(7, objectArray0.length);
      assertEquals((-1379L), object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) 0L;
      ArrayUtils.shift(objectArray0, (int) (short) (-1));
      assertEquals(7, objectArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-1379);
      intArray0[2] = (-1);
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short) (-1379);
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short) (-1379);
      intArray0[7] = (int) (short)0;
      ArrayUtils.reverse(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, (-1379), 0, (-1379), 0, (-1), (-1379), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1604);
      shortArray0[1] = (short) (-912);
      Double double0 = new Double(536.0);
      assertNotNull(double0);
      assertEquals(536.0, (double)double0, 0.01);
      
      Double double1 = new Double(2832.5054);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2832.5054, (double)double1, 0.01);
      
      Double double2 = new Double(90.0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(90.0, (double)double2, 0.01);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (int) (short) (-912));
      assertFalse(boolean0);
      
      ArrayUtils.shift((boolean[]) null, (-3368), (-572), (-2708));
      ArrayUtils.shuffle(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-912), (short)0, (short) (-1604)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'n');
      assertEquals((-1), int0);
      
      ArrayUtils.swap(longArray0, (-2160), (-2160), (-287));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L}, longArray0);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-1130), (-2160));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-28);
      int int2 = ArrayUtils.indexOf(byteArray0, (byte)114, 2147);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)31, (byte) (-28)}, byteArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((double) (-2160), 643.8400268554688);
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, 9);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {9}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray1, (int) (byte)31);
      assertNotNull(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {9}, intArray1);
      assertArrayEquals(new int[] {9}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '`';
      charArray0[2] = ',';
      charArray0[3] = 'N';
      charArray0[4] = 'v';
      charArray0[5] = '0';
      charArray0[6] = 'I';
      charArray0[7] = '<';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'v');
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'<', '`', ',', 'N', 'v', '0', 'I', '<'}, charArray0);
      assertArrayEquals(new char[] {'<', '`', ',', 'N', '0', 'I', '<'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'v';
      objectArray0[1] = (Object) '<';
      objectArray0[2] = (Object) 'v';
      objectArray0[3] = (Object) '0';
      objectArray0[4] = (Object) '`';
      objectArray0[5] = (Object) 'v';
      objectArray0[6] = (Object) 'I';
      ArrayUtils.shift(objectArray0, (-510));
      assertEquals(7, objectArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)105;
      shortArray0[1] = (short) (-458);
      shortArray0[2] = (short)27264;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) ',';
      intArray0[1] = (int) '`';
      intArray0[2] = (int) (short)27264;
      intArray0[3] = (int) '`';
      intArray0[4] = (int) 'v';
      intArray0[5] = (int) 'I';
      intArray0[6] = (int) (short) (-458);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 27264, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      ArrayUtils.swap((char[]) null, 93, (-228));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "', has a length less than 2";
      stringArray0[1] = "org.apache.commons.lang3.mutable.MutableInt";
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1795);
      shortArray0[1] = (short)1507;
      shortArray0[2] = (short)1311;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1795);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1795, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-991.2034911500001);
      doubleArray0[1] = (-1873.07151);
      doubleArray0[2] = 824.62;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-917.0), (-2556.3076974450137));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-991.2034911500001), (-1873.07151), 824.62}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = null;
      int int0 = ArrayUtils.indexOf((float[]) null, 214.24F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-9);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-9), (double) (byte) (-9));
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = bitSet0.toLongArray();
      assertNotNull(longArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(doubleArray0, doubleArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-1711), 3771, (-1711));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, 214.24F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-9);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-9), (-2640.043155789793));
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1703.239F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1703.239F);
      doubleArray0[1] = (double) (-1703.239F);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0));
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1703.239013671875), (-1703.239013671875)}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Integer integer0 = new Integer((-254));
      assertNotNull(integer0);
      assertEquals((-254), (int)integer0);
      
      BitSet bitSet1 = (BitSet)ArrayUtils.toPrimitive((Object) bitSet0);
      assertNotNull(bitSet1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1703.239013671875), (-1703.239013671875)}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertSame(bitSet0, bitSet1);
      assertSame(bitSet1, bitSet0);
      
      MutableInt mutableInt0 = new MutableInt(2103657451);
      assertNotNull(mutableInt0);
      assertEquals((byte) (-21), mutableInt0.byteValue());
      assertEquals("2103657451", mutableInt0.toString());
      assertEquals(2103657451, mutableInt0.intValue());
      assertEquals(2.10365747E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2103657451, (int)mutableInt0.toInteger());
      assertEquals((short)17387, mutableInt0.shortValue());
      assertEquals(2103657451, (int)mutableInt0.getValue());
      assertEquals(2.103657451E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2103657451L, mutableInt0.longValue());
      
      int int0 = mutableInt0.addAndGet((-2916));
      assertEquals(2103654535, int0);
      assertEquals(2103654535, (int)mutableInt0.getValue());
      assertEquals("2103654535", mutableInt0.toString());
      assertEquals(2103654535, (int)mutableInt0.toInteger());
      assertEquals(2.103654535E9, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-121), mutableInt0.byteValue());
      assertEquals((short)14471, mutableInt0.shortValue());
      assertEquals(2103654535L, mutableInt0.longValue());
      assertEquals(2103654535, mutableInt0.intValue());
      assertEquals(2.10365453E9F, mutableInt0.floatValue(), 0.01F);
      
      int int1 = mutableInt0.getAndAdd((-254));
      assertTrue(int1 == int0);
      assertEquals(2103654535, int1);
      assertEquals(2103654281, (int)mutableInt0.getValue());
      assertEquals(2103654281, (int)mutableInt0.toInteger());
      assertEquals((byte) (-119), mutableInt0.byteValue());
      assertEquals(2.103654281E9, mutableInt0.doubleValue(), 0.01);
      assertEquals("2103654281", mutableInt0.toString());
      assertEquals((short)14217, mutableInt0.shortValue());
      assertEquals(2103654281, mutableInt0.intValue());
      assertEquals(2.10365427E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2103654281L, mutableInt0.longValue());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) bitSet0;
      ArrayUtils.shift(objectArray0, (-254), (-6), (-1287));
      assertEquals(1, objectArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '=';
      charArray0[2] = ';';
      charArray0[3] = '~';
      charArray0[4] = '*';
      charArray0[5] = '$';
      charArray0[6] = 'i';
      charArray0[7] = '?';
      charArray0[8] = 'F';
      int int2 = ArrayUtils.indexOf(charArray0, '?', (-254));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'[', '=', ';', '~', '*', '$', 'i', '?', 'F'}, charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7, int2);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1703.239F);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-1703.239F);
      Double double0 = new Double((-1703.239F));
      assertNotNull(double0);
      assertEquals((-1703.239013671875), (double)double0, 0.01);
      
      objectArray0[3] = (Object) (-1703.239F);
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(6, objectArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Zv\u0002fz`^vH(uSe");
      assertNotNull(stringArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[5] = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[2] = '<';
      charArray0[3] = '7';
      charArray0[4] = ',';
      charArray0[5] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'N', 3047);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'L', '\u0000', '<', '7', ',', 'L'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1703.239F);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-1703.239F);
      Double double0 = new Double((-1703.239F));
      assertNotNull(double0);
      assertEquals((-1703.239013671875), (double)double0, 0.01);
      
      objectArray0[3] = (Object) (-1703.239F);
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(6, objectArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Zv\u0002fz`^vH(uSe");
      assertNotNull(stringArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[5] = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = 'W';
      charArray0[2] = '<';
      charArray0[3] = '7';
      charArray0[4] = ',';
      charArray0[5] = 'V';
      int int0 = ArrayUtils.indexOf(charArray0, 'N', 3047);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'L', 'W', '<', '7', ',', 'V'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      int int0 = 3287;
      ArrayUtils.shift((short[]) null, 139, 342, 3287);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) ':';
      intArray0[1] = 342;
      intArray0[2] = 3287;
      intArray0[3] = 139;
      intArray0[4] = 342;
      int int1 = (-1921);
      intArray0[5] = (-1921);
      intArray0[6] = (-1944);
      intArray0[7] = 139;
      ArrayUtils.swap(intArray0, 19, (-1921));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {58, 342, 3287, 139, 342, (-1921), (-1944), 139}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 3287;
      floatArray0[1] = (float) 58;
      floatArray0[2] = (float) 342;
      floatArray0[3] = (float) 3287;
      floatArray0[4] = (float) 3287;
      floatArray0[5] = (float) (-1944);
      floatArray0[6] = (float) 3287;
      floatArray0[7] = (float) 3287;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 19, 1.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'M';
      charArray0[2] = '3';
      charArray0[3] = 's';
      charArray0[4] = 'T';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'a', 'M', '3', 's', 'T'}, charArray0);
      assertArrayEquals(new char[] {'a', 'M', '3', 's', 'T', 'a', 'M', '3', 's', 'T'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'a';
      doubleArray0[1] = (double) 's';
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {97.0, 115.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals(0, object1);
      
      objectArray0[3] = object1;
      MutableInt mutableInt1 = new MutableInt(0);
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("0", mutableInt1.toString());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      
      objectArray0[4] = (Object) mutableInt1;
      int int0 = mutableInt1.getAndAdd(0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(0, int0);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("0", mutableInt1.toString());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      assertNotSame(mutableInt1, mutableInt0);
      
      ArrayUtils.shift(objectArray0, 0, 1418, 0);
      assertEquals(5, objectArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 1418;
      floatArray0[6] = (float) 1418;
      int int1 = mutableInt1.decrementAndGet();
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals("-1", mutableInt1.toString());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((-1L), mutableInt1.longValue());
      assertNotSame(mutableInt1, mutableInt0);
      
      floatArray0[7] = (float) 0;
      floatArray0[8] = 2893.0237F;
      int int2 = ArrayUtils.indexOf(floatArray0, (-1.0F), 1418);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1418.0F, 1418.0F, 0.0F, 2893.0237F}, floatArray0, 0.01F);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.5298000574111938);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1803.3973F);
      floatArray0[1] = (-1803.3973F);
      floatArray0[2] = (-1803.3973F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1803.3973F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {(-1803.3973F), (-1803.3973F), (-1803.3973F), 1.0F, (-1803.3973F), 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-3093));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short short0 = (short)0;
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-3093));
      assertNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false, false}, booleanArray0));
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)96;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-917);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-362);
      doubleArray0[1] = (double) (short) (-362);
      doubleArray0[2] = (double) (short) (-362);
      doubleArray0[3] = (double) (short) (-917);
      doubleArray0[4] = 342.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 342.0, (-362.0));
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-362.0), (-362.0), (-362.0), (-917.0), 342.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-917);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-362);
      doubleArray0[1] = (double) (short) (-362);
      doubleArray0[3] = (double) (short) (-917);
      doubleArray0[4] = 342.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 342.0, (-362.0));
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-362.0), (-362.0), 0.0, (-917.0), 342.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (-1650L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1650L));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1L, 0L, (-1650L)}, longArray0);
      assertEquals(2, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'T', Integer.MAX_VALUE);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'l', 'l', 'l'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 127;
      intArray0[1] = (-63);
      intArray0[2] = (-147);
      intArray0[3] = (-18);
      intArray0[4] = (-63);
      intArray0[5] = 852;
      intArray0[6] = (-88);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-63));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {127, (-63), (-147), (-18), (-63), 852, (-88)}, intArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-147);
      floatArray0[1] = (float) (-63);
      floatArray0[2] = (float) (-147);
      floatArray0[3] = (float) 127;
      floatArray0[4] = (float) (-63);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1012.16F));
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-147.0F), (-63.0F), (-147.0F), 127.0F, (-63.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1012.16F), (-147.0F), (-63.0F), (-147.0F), 127.0F, (-63.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2534, (-83));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-147);
      longArray0[1] = (long) 2534;
      longArray0[2] = (long) (-88);
      longArray0[3] = (long) (-18);
      longArray0[4] = (long) (-88);
      longArray0[5] = (long) (-63);
      longArray0[6] = (long) (-63);
      longArray0[7] = (long) 852;
      longArray0[8] = (long) (-88);
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (-88));
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertArrayEquals(new long[] {(-147L), 2534L, (-88L), (-18L), (-88L), (-63L), (-63L), 852L, (-88L)}, longArray0);
      assertArrayEquals(new long[] {(-147L), 2534L, (-88L), (-18L), (-88L), (-63L), (-63L), 852L, (-88L), (-88L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (long) (-18), (-147));
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertArrayEquals(new long[] {(-147L), 2534L, (-88L), (-18L), (-88L), (-63L), (-63L), 852L, (-88L)}, longArray0);
      assertArrayEquals(new long[] {(-147L), 2534L, (-88L), (-18L), (-88L), (-63L), (-63L), 852L, (-88L), (-88L)}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals((-1), int0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = '=';
      ArrayUtils.shuffle(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'=', 'Q'}, charArray0);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-1650), 0);
      assertNull(floatArray0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'Q';
      charArray1[1] = '=';
      charArray1[2] = 'Q';
      charArray1[3] = 'Q';
      charArray1[4] = '=';
      charArray1[5] = '=';
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, '1');
      assertNotNull(charArray2);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray2.length);
      assertArrayEquals(new char[] {'Q', '=', 'Q', 'Q', '=', '='}, charArray1);
      assertArrayEquals(new char[] {'Q', '=', 'Q', 'Q', '=', '='}, charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-41);
      ArrayUtils.shift(byteArray0, (int) (byte)1);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-1), (byte)9, (byte)1, (byte)0, (byte)0, (byte)39}, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)32;
      longArray0[1] = (long) 'Q';
      longArray0[2] = (long) (-1650);
      longArray0[3] = (long) '=';
      longArray0[4] = (long) (byte)39;
      longArray0[5] = (long) (byte)1;
      longArray0[6] = (long) (-1650);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 109L, 251);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {32L, 81L, (-1650L), 61L, 39L, 1L, (-1650L)}, longArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = (-1063L);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1216);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1216), 1824);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1216)}, intArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1063L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1063L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1824;
      floatArray0[1] = (float) 1824;
      ArrayUtils.shift(floatArray0, (-1216), 5621, (-292));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1824.0F, 1824.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = (-1063L);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1824;
      floatArray0[1] = (float) 1824;
      ArrayUtils.shift(floatArray0, (-1231), 5621, (-292));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1824.0F, 1824.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (-3509);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)52;
      shortArray0[3] = (short)1936;
      shortArray0[4] = (short)118;
      shortArray0[5] = (short) (-1321);
      shortArray0[6] = (short)100;
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)900;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-9), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -9, Length: 18
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short)1925;
      shortArray0[0] = (short)1925;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(49, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2032.1736;
      doubleArray0[1] = (-1125.703);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2920.0208;
      doubleArray0[4] = (-991.2034911500001);
      doubleArray0[5] = 2446.829611799026;
      doubleArray0[6] = 318.5582;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {2032.1736, (-1125.703), 0.0, 2920.0208, (-991.2034911500001), 2446.829611799026, 318.5582}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.5298000574111938);
      doubleArray0[1] = (-2106.3);
      doubleArray0[2] = 397.08;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.5298000574111938), (-2106.3), 397.08, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 4;
      int int1 = ArrayUtils.indexOf(longArray0, 4L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {4L}, longArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = 1L;
      longArray0[3] = (-2L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2L));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1L), 1L, (-2L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2L);
      floatArray0[1] = 226.01F;
      floatArray0[2] = (float) 1L;
      Double double0 = new Double((-2.0F));
      assertNotNull(double0);
      assertEquals((-2.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) doubleArray0[0]);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, 267.0, (-4086), (-1.5298000574111938));
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      ArrayUtils.swap((Object[]) doubleArray0, 32, 894);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-2.0F), 226.01F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.5298F);
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-51);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)0;
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = '|';
      charArray0[6] = 'K';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(14, charArray1.length);
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K', '|', '\u0000', 'K'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.5298F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-19);
      shortArray0[2] = (short) (-4086);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-19), (short) (-4086)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-19), (short) (-4086)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '&';
      charArray0[2] = 'I';
      charArray0[3] = 'V';
      charArray0[5] = 'g';
      charArray0[6] = '6';
      charArray0[7] = '|';
      charArray0[8] = 'K';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(18, charArray1.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'/', '&', 'I', 'V', '\u0000', 'g', '6', '|', 'K'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'I';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {73.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)65;
      byte byte0 = (byte)69;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-77);
      ArrayUtils.shift(byteArray0, (int) (byte)1, (-862), (int) (byte)69);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)65, (byte)69, (byte)27, (byte)1, (byte) (-77)}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'N', (-1041));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((byte)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)27);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)27, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((byte)65);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)65, (short)short2);
      
      shortArray0[2] = short2;
      try { 
        Short.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      ArrayUtils.swap(shortArray0, (int) (short)1, 0, 12);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, true, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = '&';
      ArrayUtils.reverse(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'&', 'A'}, charArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '&';
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 'A';
      floatArray0[3] = (float) 'A';
      floatArray0[4] = (float) (short)1;
      floatArray0[5] = (float) (short)1;
      floatArray0[6] = (float) 12;
      floatArray0[7] = 1.0F;
      floatArray0[8] = (float) (short)1;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertArrayEquals(new float[] {38.0F, 0.0F, 65.0F, 65.0F, 1.0F, 1.0F, 12.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {38.0F, 0.0F, 65.0F, 65.0F, 1.0F, 1.0F, 12.0F, 1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = 'I';
      charArray0[4] = '&';
      ArrayUtils.reverse(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'&', 'I', '&', '&', '&'}, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 'I';
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (-1));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 73.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 73.0F, (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '&';
      intArray0[1] = 11;
      intArray0[2] = (int) '&';
      intArray0[3] = (int) '&';
      intArray0[4] = (-1);
      intArray0[5] = (int) '&';
      intArray0[6] = (int) '&';
      intArray0[7] = (int) 'I';
      intArray0[8] = (int) '&';
      ArrayUtils.shift(intArray0, 9, 38, 38);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {38, 11, 38, 38, (-1), 38, 38, 73, 38}, intArray0);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3);
      shortArray0[1] = (short)932;
      shortArray0[2] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3), (short)932, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Character character0 = Character.valueOf('4');
      assertNotNull(character0);
      assertEquals('4', (char)character0);
      
      Boolean boolean1 = Boolean.valueOf("PH-3m");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray1);
      
      ArrayUtils.swap((boolean[]) null, (int) (byte)0, (int) (byte)0);
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = 'p';
      charArray0[2] = '4';
      charArray0[3] = '4';
      ArrayUtils.reverse(charArray0, (int) (short) (-3), (-922));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'4', 'p', '4', '4'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, 214.24F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-9);
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (byte) (-1));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.5298F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.5298F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 0);
      assertNull(intArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = (-815L);
      longArray0[2] = (long) (-1);
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      longArray0[5] = (-1L);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) 0;
      longArray0[8] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-815L));
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-815L), (-1L), (-1L), (-1L), (-1L), (-1L), 0L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L), 0L, (-1L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (double) 0L, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, (-949), 55);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -949, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[24];
      charArray0[4] = 'T';
      charArray0[2] = 'T';
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '.';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'3', '.', '3', '3', '3', '3'}, charArray0);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)95);
      assertNotNull(byte0);
      assertEquals((byte)95, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-49));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-49), (byte)byte1);
      
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)95, (byte) (-49)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[2] = 's';
      charArray0[3] = 'y';
      charArray0[4] = 's';
      charArray0[5] = '5';
      charArray0[6] = '5';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'^', '\u0000', 's', 'y', 's', '5', '5'}, charArray0);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[2] = 'K';
      charArray0[3] = '\u001C';
      charArray0[4] = '\u001C';
      charArray0[5] = '\u001C';
      charArray0[6] = 'N';
      charArray0[7] = 'z';
      charArray0[8] = 'K';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'K', '\u001C', '\u001C', '\u001C', 'N', 'z', 'K'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'K', '\u001C', '\u001C', '\u001C', 'N', 'z', 'K'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      int[] intArray0 = new int[6];
      intArray0[1] = (int) '\u001C';
      intArray0[2] = (int) 'z';
      intArray0[3] = (int) '\u001C';
      intArray0[4] = (int) 'z';
      int int0 = ArrayUtils.indexOf(intArray0, 0, 532);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 28, 122, 28, 122, 0}, intArray0);
      assertEquals((-1), int0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) '\u001C');
      assertNotNull(string0);
      assertEquals("\u001C", string0);
      
      char[] charArray2 = new char[0];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      char[] charArray3 = ArrayUtils.addFirst(charArray2, '\u001C');
      assertNotNull(charArray3);
      assertEquals(0, charArray2.length);
      assertEquals(1, charArray3.length);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {'\u001C'}, charArray3);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 643.84F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-2695.9968F);
      floatArray0[6] = (-4750.47F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 643.84F, 0.0F, 0.0F, (-1.0F), (-2695.9968F), (-4750.47F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((-1.0F));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      
      Double double2 = new Double((-1271.6054));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-1271.6054), (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double1;
      doubleArray0[1] = double2;
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ArrayUtils.toString((Object) double1, "7K|`mD8WO{VtQm!w");
      assertNotNull(string0);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals("-1.0", string0);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)24);
      assertNotNull(byte0);
      assertEquals((byte)24, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)2);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)24, (byte)2}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-100);
      byteArray0[6] = (byte)113;
      MockRandom mockRandom0 = new MockRandom((byte)113);
      assertNotNull(mockRandom0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      mockRandom0.nextBytes(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)2}, byteArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[3] = 0;
      intArray0[2] = 382;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[7] = (int) (byte) (-61);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte) (-119), (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 382, 0, 0, 0, 0, (-61)}, intArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.hashCode((Object) mockRandom0);
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[2] = float0;
      Float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (Float) null);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Short short0 = new Short((short) (-1125));
      assertNotNull(short0);
      assertEquals((short) (-1125), (short)short0);
      
      ArrayUtils.hashCode((Object) short0);
      Float float0 = new Float((-3456.76151));
      assertNotNull(float0);
      assertEquals((-3456.7615F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = null;
      floatArray0[1] = float0;
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-100);
      byteArray0[6] = (byte)113;
      MockRandom mockRandom0 = new MockRandom((byte)113);
      assertNotNull(mockRandom0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      mockRandom0.nextBytes(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)3}, byteArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 382;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = 72;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = 0;
      intArray0[7] = (int) (byte) (-61);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte) (-119), (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 382, 0, 72, 0, 0, (-61)}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      ArrayUtils.hashCode((Object) mockRandom0);
      Float[] floatArray0 = new Float[3];
      Float float1 = new Float((double) (byte)0);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[0] = float1;
      Float float2 = new Float((-211.99));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-211.99F), (float)float2, 0.01F);
      
      floatArray0[1] = float2;
      Float float3 = new Float(0.0);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      
      floatArray0[2] = float3;
      Float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (Float) null);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-3093));
      assertEquals((-1), int0);
      
      Double double0 = new Double((-837.9058191405768));
      assertNotNull(double0);
      assertEquals((-837.9058191405768), (double)double0, 0.01);
      
      Double double1 = new Double((-886.3573076900446));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-886.3573076900446), (double)double1, 0.01);
      
      Double double2 = new Double(1586.7);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(1586.7, (double)double2, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-1.0));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, 1498, 1498);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 1);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Double double0 = new Double((-88.0));
      assertNotNull(double0);
      assertEquals((-88.0), (double)double0, 0.01);
      
      Double double1 = new Double(640.6725459);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(640.6725459, (double)double1, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) (-1L));
      assertNull(doubleArray0);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-88.0);
      doubleArray1[1] = (double) (-1L);
      doubleArray1[2] = (double) 1498;
      doubleArray1[3] = 640.6725459;
      doubleArray1[4] = (-88.0);
      doubleArray1[5] = (double) 1498;
      doubleArray1[6] = 823.51034839092;
      doubleArray1[7] = 640.6725459;
      doubleArray1[8] = (double) 1;
      int[] intArray0 = new int[5];
      intArray0[0] = 1498;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1498;
      intArray0[4] = 1498;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1498, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-1L));
      byte[] byteArray0 = new byte[3];
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (-811.0662675614);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) (-1L);
      int[] intArray0 = new int[3];
      intArray0[0] = (-5815);
      intArray0[1] = (-2146873046);
      intArray0[2] = 3290;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3290, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[4] = 401;
      intArray0[1] = 401;
      intArray0[2] = 401;
      intArray0[3] = 401;
      intArray0[4] = 401;
      intArray0[5] = 401;
      intArray0[6] = 401;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(401, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 401, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2106.3);
      doubleArray0[2] = (-408.60934);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)19;
      shortArray0[1] = (short)19;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)24);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)19, (short)19}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-1L));
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-1);
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      byteArray0[2] = (byte) (-1);
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0}, byteArray0);
      
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte) (-1);
      boolean boolean4 = ArrayUtils.contains(shortArray1, (short)19);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean4);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (int) (short) (-3093);
      intArray0[2] = (int) (short) (-3093);
      intArray0[3] = (int) (short) (-3093);
      intArray0[4] = (int) (short) (-3093);
      intArray0[5] = (int) (short) (-3093);
      intArray0[6] = (int) (short) (-3093);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, (-3093), (-3093), (-3093), (-3093), (-3093), (-3093)}, intArray0);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[6];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(6, characterArray0.length);
      assertEquals(6, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'L';
      floatArray0[1] = (float) (-3093);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-82);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-51), (byte) (-82), (byte) (-1), (byte) (-51), (byte) (-82)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-51), (byte) (-82)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      ArrayUtils.shift((Object[]) characterArray1, (int) (byte) (-1));
      assertEquals(6, characterArray0.length);
      assertEquals(6, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      ArrayUtils.reverse(floatArray0, (int) (byte) (-1), 413);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3093.0F), 76.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1379.0F);
      floatArray0[2] = 830.4F;
      floatArray0[3] = (-404.93F);
      floatArray0[4] = (-1642.0F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = 856.56F;
      floatArray0[7] = 256.1F;
      floatArray0[8] = (-514.7108F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-514.7108F), 256.1F, 856.56F, 1.0F, (-1642.0F), (-404.93F), 830.4F, (-1379.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertEquals(8, bitSet0.cardinality());
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      ArrayUtils.reverse(floatArray0, 0, (-359));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-22);
      longArray0[1] = (long) (-22);
      longArray0[2] = (long) (-22);
      longArray0[3] = (long) (-22);
      longArray0[4] = (long) (-22);
      ArrayUtils.swap(longArray0, (-1711), (-22));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-22L), (-22L), (-22L), (-22L), (-22L)}, longArray0);
      
      short[] shortArray0 = new short[5];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)83;
      ArrayUtils.reverse(byteArray0, 97, 97);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)22, (byte)83}, byteArray0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-4368));
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2259;
      shortArray0[2] = (short)1037;
      shortArray0[3] = (short)1423;
      shortArray0[4] = (short)1076;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2259, (short)1037, (short)1423, (short)1076}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(0, int0);
      assertNotSame(shortArray0, shortArray1);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((short)1423);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1423.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-22));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 1423.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      int[] intArray0 = new int[25];
      intArray0[3] = 0;
      long[] longArray0 = new long[5];
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      ArrayUtils.swap(longArray0, (-1711), 0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0L;
      floatArray0[3] = (float) (-1711);
      floatArray0[5] = (float) 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)115, (int) (short)2);
      assertNotNull(bitSet0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-18), (-831));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-18), (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      Float float0 = new Float((float) (byte)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertNotNull(mutableInt0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals((byte)0, mutableInt0.byteValue());
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-18);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-18)}, shortArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      mutableInt0.add((Number) 0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals((byte)0, mutableInt0.byteValue());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mutableInt0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], 1603);
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'M';
      charArray0[3] = 's';
      charArray0[4] = 'T';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', 'M', '\u0000', 's', 'T'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'M', '\u0000', 's', 'T', '\u0000', 'M', '\u0000', 's', 'T'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1325.0748F;
      floatArray0[1] = (-965.06586F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2288.7F;
      floatArray0[4] = 96.0F;
      floatArray0[5] = (-1276.2627F);
      floatArray0[6] = (-433.5003F);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 2468, (float) 2468);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2468, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1703.239F);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-1703.239F);
      Double double0 = new Double((-1703.239F));
      assertNotNull(double0);
      assertEquals((-1703.239013671875), (double)double0, 0.01);
      
      objectArray0[3] = (Object) (-1703.239F);
      int int0 = 0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Zv\u0002fz`^vH(uSe");
      assertNotNull(stringArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[5] = 0;
      ArrayUtils.swap(intArray0, 0, (-564));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-1967), (-248.556F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1967, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1110.595F;
      floatArray0[1] = (-425.1663F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1475.2F;
      floatArray0[4] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2791.234F);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1110.595F, (-425.1663F), 0.0F, 1475.2F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1258);
      intArray0[1] = (-1);
      intArray0[2] = (-2592);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-1258), (-1), (-2592)}, intArray0);
      assertArrayEquals(new int[] {(-1258), (-1), (-2592)}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2592);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1258);
      long long0 = 1627L;
      MockRandom mockRandom0 = new MockRandom(1627L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs((-815L), (long) (-1258), (long) (-2592));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      short[] shortArray0 = new short[4];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)7, 248);
      assertNotNull(bitSet0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)108;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)16);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)63, (byte)67, (byte)98, (byte) (-49), (byte)48, (byte)16, (byte)24, (byte)11, (byte)108}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)11;
      doubleArray0[1] = (double) (short)7;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1017.981);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {11.0, 7.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {11.0, 7.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-676);
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (double) 81;
      doubleArray0[3] = (double) 81;
      doubleArray0[4] = (double) 81;
      ArrayUtils.swap(doubleArray0, (-676), (-955));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-676.0), 100.0, 81.0, 81.0, 81.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[1] = "org.apache.commons.lang3.mutable.MutableInt";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String[] stringArray2 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray2);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray2.length);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1484.4553807), 2);
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-676.0), 100.0, 81.0, 81.0, 81.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (-676));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      ArrayUtils.swap((Object[]) stringArray2, 2, 1467, (-22));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray2.length);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf((float[]) null, 214.24F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-9);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-9), (-2624.3728205485077));
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) (byte) (-9));
      assertNull(floatArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, Integer.MAX_VALUE, (int) (byte)2);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte) (-9)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[2] = 'K';
      charArray0[3] = '&';
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = (Character) '&';
      characterArray0[1] = (Character) '&';
      Character character0 = Character.valueOf('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      characterArray0[3] = character0;
      characterArray0[5] = (Character) 'K';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(7, characterArray0.length);
      assertEquals(7, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-51)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-51), (byte) (-51)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, ')');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'a'}, charArray0);
      assertArrayEquals(new char[] {')', 'a'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 656;
      intArray0[1] = (int) ')';
      intArray0[2] = (int) ')';
      intArray0[3] = (int) 'a';
      intArray0[4] = (int) 'a';
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {656, 41, 41, 97, 97}, intArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(55, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '\\');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, '~', 0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(charArray0, 'm', 128);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-42);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)1, (int) (byte)1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-42)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertEquals("{2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte) (-42);
      byte[] byteArray3 = ArrayUtils.addAll(byteArray2, byteArray1);
      assertNotNull(byteArray3);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-42)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-42)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-42)}, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) 'm';
      longArray0[2] = (long) (byte) (-42);
      longArray0[3] = (long) (-1);
      int int2 = ArrayUtils.indexOf(longArray0, (long) (byte) (-42), (int) (byte)1);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1L, 109L, (-42L), (-1L)}, longArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, int2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'm';
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (-124.24869);
      doubleArray0[4] = (double) (byte) (-42);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 397.08);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {109.0, 0.0, (-1.0), (-124.24869), (-42.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {109.0, 0.0, (-1.0), (-124.24869), (-42.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      Double double1 = new Double(139.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(139.0, (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      Double double2 = new Double((-1.0));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((-1.0), (double)double2, 0.01);
      
      doubleArray0[3] = double2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1379), (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-1379);
      longArray0[2] = (long) (short) (-1379);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1379L), (-1379L), 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 14, 61);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '~');
      assertNull(charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1136;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short) (-1379);
      intArray0[3] = (int) (short)0;
      intArray0[4] = 76;
      ArrayUtils.shift(intArray0, (int) (short) (-1379), (int) (short)0, 3066);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1136, 0, (-1379), 0, 76}, intArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)8);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-479.0F));
      assertNull(floatArray0);
      
      MockRandom mockRandom0 = new MockRandom(35L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(35L, 1503, 1505);
      assertNotNull(intStream0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-4662);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)52, 2969);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4662)}, shortArray0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[1] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[2] = "org.apache.commons.lang3.ArrayUtils";
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2066, stringArray0, stringArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2066, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ArrayUtils.reverse(byteArray0, (-993), (int) (byte)1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '9';
      doubleArray0[1] = (double) (-993);
      doubleArray0[3] = (double) (-993);
      doubleArray0[4] = (double) '9';
      doubleArray0[6] = (double) '9';
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) '9');
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {57.0, (-993.0), 0.0, (-993.0), 57.0, 0.0, 57.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 643.84F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-2695.9968F);
      floatArray0[6] = (-4750.47F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 643.84F, 0.0F, 0.0F, (-1.0F), (-2695.9968F), (-4750.47F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((-1.0F));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      
      Double double2 = new Double((-1271.6054));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-1271.6054), (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double1;
      doubleArray0[1] = double2;
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 643.84F;
      doubleArray1[1] = (-606.6);
      doubleArray1[2] = (double) (-2695.9968F);
      doubleArray1[3] = (double) 0.0F;
      doubleArray1[4] = 1.0;
      boolean boolean2 = ArrayUtils.contains(doubleArray1, (double) 643.84F);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {643.8400268554688, (-606.6), (-2695.996826171875), 0.0, 1.0}, doubleArray1, 0.01);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 1498, 1498, 1086);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(4025);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(4025, byteBuffer0.limit());
      assertEquals(4025, byteBuffer0.remaining());
      assertEquals(4025, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4025 cap=4025]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      float[] floatArray0 = new float[3];
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 0.0F;
      Double double0 = new Double((-1703.239F));
      assertNotNull(double0);
      assertEquals((-1703.239013671875), (double)double0, 0.01);
      
      objectArray0[3] = (Object) 0.0F;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Zv\u0002fz`^vH(uSe");
      assertNotNull(stringArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1703.239F);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-1703.239F);
      Double double0 = new Double((-1703.239F));
      assertNotNull(double0);
      assertEquals((-1703.239013671875), (double)double0, 0.01);
      
      objectArray0[3] = (Object) (-1703.239F);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Zv\u0002fz`^vH(uSe");
      assertNotNull(stringArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[5] = 0;
      ArrayUtils.swap(intArray0, 0, (-564));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = 1070L;
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockRandom0;
      ArrayUtils.shift(objectArray0, 2239);
      assertEquals(1, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], 2);
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2239;
      intArray0[1] = 2239;
      intArray0[2] = 2239;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2239, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '`';
      charArray0[2] = ',';
      charArray0[3] = 'N';
      charArray0[4] = 'v';
      charArray0[5] = '0';
      charArray0[6] = 'I';
      charArray0[7] = '<';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'v');
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'<', '`', ',', 'N', 'v', '0', 'I', '<'}, charArray0);
      assertArrayEquals(new char[] {'<', '`', ',', 'N', '0', 'I', '<'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'v';
      floatArray0[1] = (float) 'I';
      floatArray0[2] = (float) 'I';
      floatArray0[3] = (float) '0';
      floatArray0[4] = (float) '0';
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {73.0F, 73.0F, 48.0F, 48.0F, 118.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '<';
      longArray0[1] = (long) 'N';
      ArrayUtils.shift(longArray0, (-1455));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {78L, 60L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = 'v';
      charArray0[3] = '0';
      charArray0[4] = 'v';
      charArray0[5] = '0';
      charArray0[6] = '<';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'I');
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'0', '0', 'v', '0', 'v', '0', '<'}, charArray0);
      assertArrayEquals(new char[] {'0', '0', 'v', '0', 'v', '0', '<'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '0';
      floatArray0[1] = (float) '<';
      floatArray0[2] = (float) '0';
      floatArray0[3] = (float) 'I';
      floatArray0[4] = (float) '<';
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {60.0F, 48.0F, 73.0F, 60.0F, 48.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = (long) '0';
      longArray0[2] = (long) 'I';
      longArray0[3] = (long) 'v';
      ArrayUtils.shift(longArray0, (-1455));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {118L, (-1L), 48L, 73L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = '=';
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-1650), (int) 'Q');
      assertNull(floatArray0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '=';
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)15604);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[7];
      long long0 = (-1L);
      Long long1 = new Long((-1L));
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((-1L));
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals((-1L), (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((-1650));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertEquals((-1650L), (long)long3);
      
      longArray0[2] = long3;
      Long long4 = Long.getLong("java.lang.String", (Long) long0);
      assertNotNull(long4);
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertEquals((-1L), (long)long4);
      
      longArray0[3] = long4;
      Long long5 = new Long((-1650));
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertEquals((-1650L), (long)long5);
      
      longArray0[4] = long5;
      Long long6 = new Long((-918L));
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long4));
      assertEquals((-918L), (long)long6);
      
      longArray0[5] = long6;
      Long long7 = new Long(long0);
      assertNotNull(long7);
      assertTrue(long7.equals((Object)long1));
      assertTrue(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long5));
      assertTrue(long7.equals((Object)long2));
      assertTrue(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long3));
      assertEquals((-1L), (long)long7);
      
      longArray0[6] = long7;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1650L), (-1L), (-1650L), (-918L), (-1L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      Integer integer0 = new Integer((short)2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer((-31));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-31), (int)integer1);
      
      Integer integer2 = new Integer((short)2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(2, (int)integer2);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[2] = integer2;
      integerArray0[3] = integer2;
      integerArray0[4] = integer2;
      integerArray0[6] = integer0;
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 7, integerArray0[1]);
      assertNotNull(integerArray1);
      assertEquals(9, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Long long0 = new Long((short)2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '2', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      Integer integer0 = new Integer((short)2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer((-31));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-31), (int)integer1);
      
      Integer integer2 = new Integer((short)2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2, (int)integer2);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[0] = integer0;
      integerArray0[2] = integer2;
      integerArray0[3] = integer2;
      integerArray0[4] = integer2;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 7, integerArray0[1]);
      assertNotNull(integerArray1);
      assertEquals(9, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((short)2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) integerArray0[4]);
      assertNotNull(long1);
      assertEquals(8, integerArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(2L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(853L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(853L, (long)long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {2L, 2L, 853L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[2] = (-20.83F);
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      ArrayUtils.shift(charArray0, 582);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'B'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '?';
      charArray1[1] = '?';
      charArray1[2] = 'B';
      charArray1[3] = 'B';
      int int0 = ArrayUtils.indexOf(charArray1, 'W', (-1204));
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'?', '?', 'B', 'B'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), int0);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 582, (-1), 9);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      int int0 = (-1391);
      Object object0 = ArrayUtils.get(objectArray0, (-1391));
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[0] = null;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1379), (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-1379);
      longArray0[2] = (long) (short) (-1379);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1379L), (-1379L), 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 14, 61);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '~');
      assertNull(charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1136;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short) (-1379);
      intArray0[3] = (int) (short)0;
      intArray0[4] = 76;
      ArrayUtils.shift(intArray0, (int) (short) (-1379), (int) (short)0, 3066);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1136, 0, (-1379), 0, 76}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 2360);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2360, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), (-1549));
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-1), 114, 1.5);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 73, 73);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Long long0 = new Long(39L);
      assertNotNull(long0);
      assertEquals(39L, (long)long0);
      
      Long[] longArray0 = new Long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 2166);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2166, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 1.5;
      doubleArray0[3] = 557.647;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.5, 1.5, 0.0, 557.647}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 1.5;
      doubleArray1[1] = (Double) 1.5;
      doubleArray1[2] = (Double) 557.647;
      Double double0 = new Double(1.5);
      assertNotNull(double0);
      assertEquals(1.5, (double)double0, 0.01);
      
      doubleArray1[3] = double0;
      doubleArray1[4] = (Double) 557.647;
      doubleArray1[5] = (Double) 1.5;
      doubleArray1[6] = (Double) 1.5;
      doubleArray1[7] = (Double) 557.647;
      doubleArray1[8] = (Double) 1.5;
      Double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, (Object) doubleArray1[7]);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      int int0 = 2310;
      long long0 = 1245L;
      MockRandom mockRandom0 = new MockRandom(1245L);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      long long1 = mockRandom1.nextLong();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      assertNotSame(mockRandom1, mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom1.doubles(0L);
      assertNotNull(doubleStream0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) mockRandom1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1379), (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-1379);
      longArray0[2] = (long) (short) (-1379);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1379L), (-1379L), 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 14, 61);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '~');
      assertNull(charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1136;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short) (-1379);
      intArray0[3] = (int) (short)0;
      intArray0[4] = 76;
      ArrayUtils.shift(intArray0, (int) (short) (-1379), (int) (short)0, 3066);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1136, 0, (-1379), 0, 76}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1379);
      doubleArray0[1] = (double) 1136;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) (-1379L);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1379.0), 1136.0, 0.0, (-1379.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1379.0), 1136.0, 0.0, (-1379.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[4];
      intArray0[0] = 583;
      intArray0[1] = (-3300);
      intArray0[2] = (-1584);
      intArray0[3] = 2146160590;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146160590, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '`';
      charArray0[2] = ',';
      charArray0[3] = 'N';
      charArray0[4] = 'v';
      charArray0[5] = '0';
      charArray0[6] = 'I';
      charArray0[7] = 'n';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'v');
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'<', '`', ',', 'N', 'v', '0', 'I', 'n'}, charArray0);
      assertArrayEquals(new char[] {'<', '`', ',', 'N', '0', 'I', 'n'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'v';
      objectArray0[1] = (Object) '`';
      objectArray0[2] = (Object) 'v';
      objectArray0[3] = (Object) '0';
      objectArray0[4] = (Object) '`';
      objectArray0[5] = (Object) 'v';
      objectArray0[6] = (Object) 'I';
      ArrayUtils.shift(objectArray0, (-510));
      assertEquals(7, objectArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '0';
      floatArray0[1] = (float) '`';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1006.1F), (-510));
      assertNotNull(bitSet0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {48.0F, 96.0F}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)46;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'I';
      intArray0[1] = (int) (byte)3;
      intArray0[2] = (int) '`';
      intArray0[3] = (int) 'n';
      intArray0[4] = (int) '<';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 110, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      Float float0 = new Float(129.927F);
      assertNotNull(float0);
      assertEquals(129.927F, (float)float0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) float0, (-306));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = 'N';
      charArray0[2] = '~';
      charArray0[3] = 'M';
      charArray0[4] = 'v';
      charArray0[5] = 'D';
      charArray0[2] = ':';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'8', 'N', ':', 'M', 'v', 'D', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character[] characterArray0 = new Character[8];
      Character character0 = new Character('^');
      assertNotNull(character0);
      assertEquals('^', (char)character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = (Character) 'v';
      Character character1 = new Character('8');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('8', (char)character1);
      
      charArray0[2] = (char) character1;
      characterArray0[3] = (Character) 'v';
      characterArray0[4] = (Character) 'M';
      characterArray0[5] = (Character) '8';
      Character character2 = new Character('(');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('(', (char)character2);
      
      characterArray0[6] = character2;
      characterArray0[7] = (Character) 'v';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, 'v');
      assertNotNull(charArray2);
      assertEquals(8, charArray2.length);
      assertEquals(8, characterArray0.length);
      assertArrayEquals(new char[] {'^', 'v', 'v', 'v', 'M', '8', '(', 'v'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(2825.13987876);
      assertNotNull(double0);
      assertEquals(2825.13987876, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1503.144831));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1503.144831), (double)double1, 0.01);
      
      doubleArray0[0] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(4, doubleArray0.length);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((-1503.144831), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1503.144831));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1503.144831), (-1503.144831), (-1503.144831), 0.0}, doubleArray1, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (-1849.33349115), 36, (-858.13));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1503.144831), (-1503.144831), (-1503.144831), 0.0}, doubleArray1, 0.01);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((short)1);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((short)1);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      DoubleStream doubleStream0 = mockRandom1.doubles();
      assertNotNull(doubleStream0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      mockRandom0.setSeed(32L);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      DoubleStream doubleStream0 = mockRandom1.doubles(3443L);
      assertNotNull(doubleStream0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      mockRandom1.setSeed(3443L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = 3443L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1L, 3443L}, longArray0);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {1L, 3443L}, longArray0);
      assertArrayEquals(new long[] {1L, 3443L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = '6';
      charArray0[2] = '0';
      charArray0[3] = 'O';
      charArray0[4] = 'x';
      charArray0[5] = '5';
      charArray0[6] = '6';
      charArray0[7] = 'I';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'V', '6', '0', 'O', 'x', '5', '6', 'I'}, charArray0);
      assertEquals(4, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      mockRandom0.setSeed(3443L);
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 4;
      longArray0[1] = (long) 'x';
      longArray0[2] = (long) 'x';
      longArray0[3] = (long) (byte) (-1);
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {4L, 120L, 120L, (-1L)}, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {4L, 120L, 120L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {4L, 120L, 120L, (-1L)}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-783L);
      ArrayUtils.reverse(longArray0, 1380, 51);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-783L)}, longArray0);
      
      ArrayUtils.shift(booleanArray0, 51, (-1703), (-155));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) (-783L);
      objectArray0[3] = (Object) (-783L);
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (-783L);
      objectArray1[1] = (Object) true;
      // Undeclared exception!
      try { 
        ByteBuffer.allocate((-1703));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = '6';
      charArray0[2] = '0';
      charArray0[3] = 'O';
      charArray0[4] = 'x';
      charArray0[5] = '5';
      charArray0[6] = '6';
      charArray0[7] = 'I';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'V', '6', '0', 'O', 'x', '5', '6', 'I'}, charArray0);
      assertEquals(4, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(3443L);
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-78);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)2);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)66, (byte)1, (byte) (-96), (byte)2, (byte) (-78)}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1379), (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-1379);
      longArray0[2] = (long) (short) (-1379);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1379L), (-1379L), 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-1379L);
      objectArray0[1] = (Object) (-1L);
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short) (-1);
      Object object0 = ArrayUtils.get(objectArray0, 2641, objectArray0[0]);
      assertNotNull(object0);
      assertEquals(7, objectArray0.length);
      assertEquals((-1379L), object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) 0L;
      ArrayUtils.shift(objectArray0, (int) (short) (-1));
      assertEquals(7, objectArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short) (-1);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = 643.84F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-2695.9968F);
      floatArray0[6] = (-4750.47F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 643.84F, 0.0F, 0.0F, (-1.0F), (-2695.9968F), (-4750.47F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((-1.0F));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      
      Double double2 = new Double((-1271.6054));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-1271.6054), (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double1;
      doubleArray0[1] = double2;
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1223;
      intArray0[1] = (-111);
      intArray0[2] = (-898);
      intArray0[3] = (-63);
      intArray0[4] = 5;
      intArray0[5] = 2145589923;
      intArray0[6] = (-971);
      intArray0[7] = (-956);
      ArrayUtils.shuffle(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-111), (-898), (-63), 5, 2145589923, (-971), (-956), 1223}, intArray0);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      shortArray0[1] = (short)932;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert((int) (short)2, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)932;
      objectArray0[3] = (Object) (short)932;
      objectArray0[2] = (Object) (short)932;
      objectArray0[3] = (Object) (short)932;
      objectArray0[4] = (Object) (short)932;
      objectArray0[5] = (Object) 0L;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[4], 0);
      assertEquals(6, objectArray0.length);
      assertEquals(0, int0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Double double1 = new Double((double) doubleArray0[1]);
      assertNotNull(double1);
      assertEquals(4, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 2826.2286130836105, (-874), (double) doubleArray0[1]);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2839;
      shortArray0[1] = (short) (-1053);
      ArrayUtils.shift(shortArray0, (-703), (int) (short)2839, (int) (short)0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2839, (short) (-1053), (short)0}, shortArray0);
      
      Long long0 = new Long((-3941L));
      assertNotNull(long0);
      assertEquals((-3941L), (long)long0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (double) (short)26713, (int) (short) (-1053), 0.1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Arguments cannot both be null";
      stringArray0[1] = ">sk}ZIO";
      stringArray0[2] = "org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle";
      stringArray0[3] = "\u0005FAP%QY4}<N@|c*";
      Double double0 = new Double(1799.09);
      assertNotNull(double0);
      assertEquals(1799.09, (double)double0, 0.01);
      
      Double double1 = new Double(1799.09);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1799.09, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1799.09, 1799.09, 1799.09}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (-1849.33349115), (-710), (-1626.95));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1799.09, 1799.09, 1799.09}, doubleArray1, 0.01);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1703.239F);
      short[] shortArray0 = new short[0];
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-1703.239F);
      Double double0 = new Double((-1703.239F));
      assertNotNull(double0);
      assertEquals((-1703.239013671875), (double)double0, 0.01);
      
      objectArray0[3] = (Object) (-1703.239F);
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(6, objectArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Zv\u0002fz`^vH(uSe");
      assertNotNull(stringArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[5] = 0;
      ArrayUtils.swap(intArray0, 0, (-564));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-3093));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-564);
      intArray0[1] = (-564);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (int) (short) (-3093);
      ArrayUtils.swap(intArray0, (-1), (-564));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-564), (-564), (-1), (-1), (-3093), 0}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-22);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-22);
      floatArray0[1] = (-1012.16F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-22.0F), (-1012.16F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-22.0F), (-1012.16F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-915), (-915));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-915);
      longArray0[0] = (long) (-915);
      longArray0[2] = (long) (-22);
      longArray0[3] = (long) (-22);
      longArray0[4] = (long) (-915);
      longArray0[5] = (-564L);
      longArray0[6] = (long) (-83);
      longArray0[7] = (long) (-83);
      longArray0[8] = (long) (-915);
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (-22));
      assertNotNull(longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-915L), 0L, (-22L), (-22L), (-915L), (-564L), (-83L), (-83L), (-915L), (-22L)}, longArray1);
      assertArrayEquals(new long[] {(-915L), 0L, (-22L), (-22L), (-915L), (-564L), (-83L), (-83L), (-915L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      float[] floatArray0 = new float[7];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[5];
      ArrayUtils.shift((Object[]) floatArray1, (int) (short)0, 165, (-1184));
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray2);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2, 2);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = 1569L;
      longArray0[3] = 1L;
      long[] longArray1 = ArrayUtils.add(longArray0, (-564L));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {1L, 0L, 1569L, 1L}, longArray0);
      assertArrayEquals(new long[] {1L, 0L, 1569L, 1L, (-564L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 5397.297F;
      floatArray0[3] = 1805.08F;
      floatArray0[4] = (-660.0F);
      floatArray0[5] = 16.041F;
      floatArray0[6] = 1.0F;
      MockRandom mockRandom0 = new MockRandom(1245L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 5397.297F, 1805.08F, (-660.0F), 16.041F, 1.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1245L;
      longArray0[1] = 1245L;
      longArray0[2] = 1245L;
      longArray0[3] = 1245L;
      longArray0[4] = 1245L;
      longArray0[5] = 1245L;
      longArray0[6] = 1245L;
      longArray0[7] = 1245L;
      ArrayUtils.shift(longArray0, 1627);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {1245L, 1245L, 1245L, 1245L, 1245L, 1245L, 1245L, 1245L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-22);
      intArray0[3] = (-22);
      intArray0[4] = (-22);
      intArray0[5] = (-22);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-22), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -22, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 0;
      intArray0[2] = 401;
      intArray0[3] = 401;
      intArray0[4] = 401;
      intArray0[5] = 401;
      intArray0[6] = 401;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(401, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 401, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-50);
      intArray0[1] = (-50);
      intArray0[2] = (-50);
      intArray0[3] = (-50);
      intArray0[4] = (-50);
      intArray0[5] = (-50);
      intArray0[6] = (-50);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-50), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -50, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (-1L);
      longArray0[1] = (-1L);
      longArray0[3] = (-2L);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2L);
      floatArray0[1] = 226.01F;
      floatArray0[2] = (float) 1L;
      Double double0 = new Double((-2.0F));
      assertNotNull(double0);
      assertEquals((-2.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) doubleArray0[0]);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 51;
      ArrayUtils.reverse(longArray0, 1380, 1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {51L}, longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte) (-9), (int) (byte)0, 2127781963);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'y');
      assertEquals((-1), int0);
      
      ArrayUtils.swap(longArray0, 96, 0, (int) (byte)0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {51L}, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (byte) (-61);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte) (-61);
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1, 267);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short) (-61), (short)1, (short)0, (short) (-61)}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-61), (short)0, (short)1, (short) (-61), (short)1}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      Character character0 = new Character('x');
      assertNotNull(character0);
      assertEquals('x', (char)character0);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1379), (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-1379);
      longArray0[2] = (long) (short) (-1379);
      ArrayUtils.swap(longArray0, (int) (short) (-1), (-728), (int) (short)0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1379L), (-1379L), 0L, 0L, 0L, 0L}, longArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-706), 321);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals((-1), int0);
      assertNotSame(shortArray0, shortArray1);
      
      ArrayUtils.reverse(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1379)}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Character character0 = new Character('>');
      assertNotNull(character0);
      assertEquals('>', (char)character0);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-116);
      shortArray0[1] = (short) (-116);
      shortArray0[2] = (short) (-116);
      shortArray0[3] = (short) (-116);
      ArrayUtils.reverse(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-116), (short) (-116), (short) (-116), (short) (-116)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-24L);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'n');
      assertEquals((-1), int0);
      
      ArrayUtils.swap(longArray0, (-2160), (-2160), (-287));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-24L), 0L, 0L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[3];
      ArrayUtils.swap(longArray0, 703, 0, 703);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-24L), 0L, 0L, 0L}, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short) (-706);
      shortArray0[3] = (short) (-706);
      shortArray0[4] = (short) (-706);
      int int1 = ArrayUtils.indexOf(shortArray0, (short)232, (int) (short) (-706));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-706), (short) (-706), (short) (-706)}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-706), (short) (-706), (short) (-706), (short)0, (short)0}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, ' ', 1181);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-100);
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)0;
      ArrayUtils.shift(byteArray0, 0, (int) (byte)113, (int) (byte)0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-9), (byte)0, (byte) (-61), (byte) (-100), (byte)0, (byte)113, (byte)2, (byte)0}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'y');
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'y';
      ArrayUtils.swap(longArray0, (int) (byte)2, (-1), 267);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {121L, 0L, 0L}, longArray0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1, (int) (byte) (-63));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-9), (byte)0, (byte) (-61), (byte) (-100), (byte)0, (byte)113, (byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-9), (byte)0, (byte) (-61), (byte) (-100), (byte)0, (byte)113, (byte)2, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-61);
      floatArray0[1] = (float) (byte) (-61);
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) 0;
      int int2 = ArrayUtils.indexOf(floatArray0, (-1621.047F));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-61.0F), (-61.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '`';
      charArray0[2] = ',';
      charArray0[3] = 'N';
      ArrayUtils.swap((int[]) null, (-740), (-740));
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.removeElement((int[]) null, 2073);
      assertNull(intArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-740);
      floatArray0[1] = (float) ',';
      floatArray0[2] = (float) 'N';
      floatArray0[3] = 57.0F;
      floatArray0[4] = (float) ',';
      floatArray0[5] = (float) ',';
      floatArray0[6] = (float) '`';
      floatArray0[7] = (float) 2073;
      ArrayUtils.reverse(floatArray0, (-740), (-508));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-740.0F), 44.0F, 78.0F, 57.0F, 44.0F, 44.0F, 96.0F, 2073.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-22);
      longArray0[2] = (long) (-22);
      longArray0[3] = (long) (-22);
      longArray0[4] = (long) (-22);
      ArrayUtils.swap(longArray0, (-1711), (-22));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-22L), 0L, (-22L), (-22L), (-22L)}, longArray0);
      
      short[] shortArray0 = new short[5];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)83;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-4368));
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      shortArray0[0] = (short) (byte)83;
      int[] intArray0 = new int[5];
      intArray0[0] = 97;
      intArray0[1] = 97;
      intArray0[2] = (int) (short)83;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)22;
      ArrayUtils.swap(intArray0, (-22), 97);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {97, 97, 83, 0, 22}, intArray0);
      
      Double double0 = new Double(100.0);
      assertNotNull(double0);
      assertEquals(100.0, (double)double0, 0.01);
      
      Float float0 = new Float((double) (short)83);
      assertNotNull(float0);
      assertEquals(83.0F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) double0, (Object) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[2] = (-20.83F);
      floatArray0[8] = (-1449.6759F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1855.0007F);
      floatArray0[6] = (-164.28104F);
      floatArray0[7] = 1.0F;
      floatArray0[8] = (-1.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), 0.0F, 0.0F, (-1855.0007F), (-164.28104F), 1.0F, (-1.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-3754);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-501);
      intArray0[3] = (-18);
      intArray0[4] = 2445;
      intArray0[5] = (-63);
      intArray0[6] = 870;
      intArray0[7] = 0;
      intArray0[8] = 2513;
      ArrayUtils.swap(intArray0, 870, 11);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-3754), Integer.MAX_VALUE, (-501), (-18), 2445, (-63), 870, 0, 2513}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)54);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3561.441669361555;
      doubleArray0[3] = (-940.140189633378);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3561.441669361555, 0.0, (-940.140189633378)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3561.441669361555, 0.0, (-940.140189633378), 0.0, 3561.441669361555, 0.0, (-940.140189633378)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 139, 342, 342);
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray3);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 342;
      floatArray0[1] = (float) 139;
      floatArray0[2] = (float) 342;
      floatArray0[3] = (float) 3047;
      floatArray0[4] = (float) 342;
      floatArray0[5] = (float) 342;
      floatArray0[6] = (float) 342;
      floatArray0[7] = (float) 342;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {342.0F, 139.0F, 342.0F, 3047.0F, 342.0F, 342.0F, 342.0F, 342.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[3] = 's';
      charArray0[4] = 'T';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'.', '.', '\u0000', 's', 'T'}, charArray0);
      assertArrayEquals(new char[] {'.', '.', '\u0000', 's', 'T', '.', '.', '\u0000', 's', 'T'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '.';
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {46.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-19);
      shortArray0[2] = (short) (-4086);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-19), (short) (-4086)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-19), (short) (-4086)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '&';
      charArray0[2] = 'I';
      charArray0[3] = 'V';
      charArray0[4] = '@';
      charArray0[5] = 'g';
      charArray0[6] = '6';
      charArray0[7] = '|';
      charArray0[8] = 'K';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(18, charArray1.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'/', '&', 'I', 'V', '@', 'g', '6', '|', 'K'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1445;
      Integer integer0 = new Integer((-2617));
      assertNotNull(integer0);
      assertEquals((-2617), (int)integer0);
      
      Integer integer1 = new Integer((-2617));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2617), (int)integer1);
      
      Integer integer2 = new Integer((-63));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-63), (int)integer2);
      
      Integer integer3 = new Integer((-1302));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-1302), (int)integer3);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer integer4 = ArrayUtils.get(integerArray0, (-2969));
      assertNull(integer4);
      assertEquals(1, integerArray0.length);
      
      Long long0 = new Long(39L);
      assertNotNull(long0);
      assertEquals(39L, (long)long0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-63);
      intArray0[1] = (int) (short)1445;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      Integer integer0 = new Integer((short)2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer((short)932);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(932, (int)integer1);
      
      Integer integer2 = new Integer((short)2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2, (int)integer2);
      
      Integer integer3 = new Integer(1);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(1, (int)integer3);
      
      Integer integer4 = Integer.getInteger((String) null, integer3);
      assertNotNull(integer4);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(1, (int)integer4);
      
      Integer integer5 = new Integer(2145589923);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals(2145589923, (int)integer5);
      
      Integer integer6 = new Integer((-1285));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals((-1285), (int)integer6);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer4;
      Integer integer7 = new Integer(2145589923);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertEquals(2145589923, (int)integer7);
      
      integerArray0[1] = integer7;
      integerArray0[2] = integer3;
      integerArray0[3] = integer5;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integerArray0[3]);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)932;
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = 'J';
      charArray0[4] = '/';
      charArray0[5] = '/';
      charArray0[6] = '/';
      charArray0[7] = '/';
      charArray0[8] = '/';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (int) (short)932, '/');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 932, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = ')';
      charArray0[5] = 'T';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z', 101);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'T', 'T', 'T', 'T', ')', 'T'}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-37), 1526);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Object[] objectArray0 = new Object[5];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'Z';
      doubleArray0[1] = (double) 1526;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) ')';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 0, (-2145071125));
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {90.0, 1526.0, (-1.0), 41.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      long[] longArray0 = bitSet0.toLongArray();
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new double[] {90.0, 1526.0, (-1.0), 41.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      Character character0 = new Character('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      Character character1 = new Character('i');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('i', (char)character1);
      
      Character character2 = new Character('I');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertEquals('I', (char)character2);
      
      Character character3 = new Character(';');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertEquals(';', (char)character3);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'E');
      assertNotNull(charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-862), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -862, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      Float float0 = new Float(129.927F);
      assertNotNull(float0);
      assertEquals(129.927F, (float)float0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) float0, (-306));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = 'N';
      charArray0[2] = '~';
      charArray0[3] = 'M';
      charArray0[4] = 'v';
      charArray0[5] = 'D';
      charArray0[2] = ':';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'8', 'N', ':', 'M', 'v', 'D', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character[] characterArray0 = new Character[8];
      Character character0 = new Character('^');
      assertNotNull(character0);
      assertEquals('^', (char)character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = (Character) 'v';
      Character character1 = new Character('8');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('8', (char)character1);
      
      characterArray0[2] = character1;
      characterArray0[3] = (Character) 'v';
      characterArray0[4] = (Character) 'M';
      characterArray0[5] = (Character) ':';
      Character character2 = new Character('(');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('(', (char)character2);
      
      characterArray0[6] = character2;
      characterArray0[7] = (Character) 'v';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, 'v');
      assertNotNull(charArray2);
      assertEquals(8, charArray2.length);
      assertEquals(8, characterArray0.length);
      assertArrayEquals(new char[] {'^', 'v', '8', 'v', 'M', ':', '(', 'v'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = 2118;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (-280.0501536865644);
      doubleArray0[0] = (double) 2118;
      doubleArray0[3] = 1194.50878624;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2118, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2118, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2337L;
      longArray0[1] = 1L;
      longArray0[2] = (-1L);
      ArrayUtils.swap(longArray0, 0, 0, 0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2337L, 1L, (-1L)}, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-86), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -86, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      long[] longArray0 = new long[23];
      longArray0[0] = (-25L);
      longArray0[1] = 1070L;
      longArray0[3] = (-1121L);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(23, longArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1121L);
      doubleArray0[1] = (double) 1070L;
      doubleArray0[2] = (double) 1070L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-1121L);
      doubleArray0[5] = (double) (-25L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)64;
      ArrayUtils.shift(byteArray0, 1625, (int) (byte)0, 1625);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)64}, byteArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-25L);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-1121L);
      floatArray0[3] = (float) (-25L);
      floatArray0[4] = 0.0F;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1121.0F), (-25.0F), 0.0F, (-25.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.swap(booleanArray0, 1382, 1382);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-226.8696);
      doubleArray0[1] = (double) 1382;
      ArrayUtils.shift(doubleArray0, 1382);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-226.8696), 1382.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(1382);
      assertNotNull(integer0);
      assertEquals(1382, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = (-1063L);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1216);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1216), 1824);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1216)}, intArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 1824);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1063L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1824L, 0L, (-1063L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-479.0F));
      assertNull(floatArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 2494);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2494;
      intArray0[1] = (-1552);
      intArray0[2] = 2494;
      intArray0[3] = 32;
      intArray0[4] = 2494;
      intArray0[5] = 2494;
      intArray0[6] = 2494;
      intArray0[7] = 1;
      int int0 = ArrayUtils.indexOf(intArray0, 2494, (-1396));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2494, (-1552), 2494, 32, 2494, 2494, 2494, 1}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-34);
      boolean boolean0 = ArrayUtils.isEquals(mockRandom0, mockRandom0);
      assertTrue(boolean0);
      
      byteArray0[1] = (byte)0;
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      byteArray0[2] = (byte) (-119);
      mockRandom0.nextBytes(byteArray0);
      assertEquals(12, byteArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte) (-119);
      intArray0[4] = 1505;
      intArray0[5] = (int) (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1, 0);
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1, 0, 1, (-119), 1505, 1}, intArray0);
      assertEquals(3, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 2, 5}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)26713;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)26713, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)26713, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 104;
      intArray0[1] = (-2145325371);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {104, (-2145325371)}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-2145325371));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {104, (-2145325371)}, intArray0);
      assertArrayEquals(new int[] {104}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      Double double0 = new Double(4432.0);
      assertNotNull(double0);
      assertEquals(4432.0, (double)double0, 0.01);
      
      Double double1 = new Double(1.5);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.5, (double)double1, 0.01);
      
      Double double2 = new Double((-359.31049221858));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-359.31049221858), (double)double2, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 49;
      boolean boolean0 = ArrayUtils.contains(intArray0, 49);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {49, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'n');
      assertEquals((-1), int0);
      
      ArrayUtils.swap(longArray0, (-2160), (-2160), (-287));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L}, longArray0);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-1130), (-2160));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-28);
      int int2 = ArrayUtils.indexOf(byteArray0, (byte)114, 2147);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-26), (byte)31, (byte) (-28)}, byteArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, 9);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {9}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[2] = (-20.83F);
      floatArray0[4] = (-20.83F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-20.83F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), 0.0F, 0.0F, (-20.83F), 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray0, (-2103.6594F));
      assertNotNull(floatArray2);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray2.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), 0.0F, 0.0F, (-20.83F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), 0.0F, 0.0F, (-20.83F), 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray1, (Object) null, 8);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-20.83F), 0.0F, (-20.83F), 0.0F, 0.0F, (-20.83F), 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertEquals((-1), int0);
      assertNotSame(floatArray0, floatArray2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)99;
      shortArray0[1] = (short) (-436);
      ArrayUtils.shuffle(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-436), (short)0, (short)0, (short)0, (short)0, (short)99}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-82)}, byteArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-82);
      intArray0[1] = (int) (byte) (-82);
      intArray0[2] = 3300;
      intArray0[3] = (int) (byte) (-82);
      ArrayUtils.shift(intArray0, (int) (byte) (-82), 0, Integer.MAX_VALUE);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-82), (-82), 3300, (-82)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (int) (short) (-3093), 2012611504, 321);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)50, 4818);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)50}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)61;
      longArray0[1] = (long) (-1204);
      longArray0[2] = (long) (short) (-3093);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {61L, (-1204L), (-3093L)}, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2012611504;
      doubleArray0[1] = (double) (-401);
      doubleArray0[2] = (double) 4818;
      doubleArray0[3] = (double) 321;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 7;
      ArrayUtils.swap(doubleArray0, (int) (short) (-3093), (int) (byte)50);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2.012611504E9, (-401.0), 4818.0, 321.0, 1.0, 7.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, (-508));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1379), (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 14, 61);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '~');
      assertNull(charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1136;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short) (-1379);
      intArray0[3] = (int) (short)0;
      ArrayUtils.shift(intArray0, (int) (short) (-1379), (int) (short)0, 3066);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1136, 0, (-1379), 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 99;
      long[] longArray0 = new long[17];
      longArray0[1] = (long) 99;
      longArray0[2] = (long) 99;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1374, (-28));
      assertNotNull(longArray1);
      assertEquals(17, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      ArrayUtils.shift(intArray0, (-718));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 99}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(99, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 139, 342, 3287);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      int int0 = ArrayUtils.indexOf((char[]) null, ':', 3047);
      assertEquals((-1), int0);
      
      boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray3);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertSame(booleanArray3, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      short short0 = (short) (-3093);
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-3093));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = new Object[8];
      int int1 = (-595);
      Integer integer0 = new Integer((-595));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-595), (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 342.0, 342.0);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-3093));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 342.0, 342.0);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = 1070L;
      longArray0[2] = (-4092L);
      longArray0[3] = (-1121L);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 1070L, (-4092L), (-1121L)}, longArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1121L);
      doubleArray0[1] = (double) 1070L;
      doubleArray0[2] = (double) 1070L;
      doubleArray0[3] = (double) (-4092L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) 1070L;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertArrayEquals(new double[] {(-1121.0), 1070.0, 1070.0, (-4092.0), (-1.0), (-1.0), 1070.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-1121L);
      objectArray0[1] = (Object) 1070.0;
      objectArray0[2] = (Object) (-1.0);
      objectArray0[3] = (Object) 1070.0;
      objectArray0[4] = (Object) 1070L;
      objectArray0[5] = (Object) (-1.0);
      objectArray0[6] = (Object) 1070.0;
      objectArray0[7] = (Object) 1070.0;
      objectArray0[8] = (Object) (-4092L);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[2], 534);
      assertEquals(9, objectArray0.length);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1445;
      shortArray0[1] = (short) (-1025);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-4662), 3892);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1445, (short) (-1025)}, shortArray0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.lang3.ArrayUtils";
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2139, stringArray0, stringArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2139, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-972));
      assertNotNull(integer0);
      assertEquals((-972), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2821));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2821), (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 4;
      Integer integer2 = new Integer(4);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(4, (int)integer2);
      
      integerArray0[2] = integer2;
      integerArray0[3] = (Integer) int0;
      Integer integer3 = Integer.valueOf((-2821));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals((-2821), (int)integer3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = 'k';
      charArray0[2] = 'x';
      charArray0[3] = 'I';
      charArray0[4] = '0';
      charArray0[5] = 'O';
      charArray0[6] = 'I';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '1');
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'1', 'k', 'x', 'I', '0', 'O', 'I'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '0';
      doubleArray0[1] = (double) (int)integerArray0[1];
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) '0';
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 0;
      ArrayUtils.shift(doubleArray0, 1136, (-4662), (-119));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {48.0, (-2821.0), 4.0, 48.0, 4.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)56;
      ArrayUtils.swap(byteArray0, 4, (int) (byte)31, 2);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-108), (byte) (-88), (byte)90, (byte) (-88), (byte)56}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-2821));
      assertNotNull(integer0);
      assertEquals((-2821), (int)integer0);
      
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-658));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-658), (int)integer1);
      
      integerArray0[2] = integer1;
      integerArray0[3] = integerArray0[2];
      Integer integer2 = new Integer((-658));
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-658), (int)integer2);
      
      char[] charArray0 = new char[12];
      charArray0[0] = '1';
      charArray0[2] = 'x';
      charArray0[3] = 'I';
      charArray0[4] = '0';
      charArray0[5] = 'O';
      charArray0[6] = 'I';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '1');
      assertEquals(12, charArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '0';
      doubleArray0[1] = (double) (int)integerArray0[1];
      doubleArray0[2] = (double) (int)integerArray0[3];
      doubleArray0[3] = (double) '0';
      doubleArray0[4] = (double) (-658);
      doubleArray0[5] = (double) 0;
      ArrayUtils.shift(doubleArray0, 1136, (-4662), (-119));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {48.0, (-2821.0), (-658.0), 48.0, (-658.0), 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)56;
      ArrayUtils.swap(byteArray0, (-658), (int) (byte) (-108), 2);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-108), (byte) (-108), (byte)72, (byte) (-108), (byte)56}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-972));
      assertNotNull(integer0);
      assertEquals((-972), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2821));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2821), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-658));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-658), (int)integer2);
      
      integerArray0[2] = integer2;
      integerArray0[3] = integerArray0[2];
      Integer integer3 = new Integer((-658));
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-658), (int)integer3);
      
      char[] charArray0 = new char[12];
      charArray0[0] = '1';
      charArray0[2] = 'x';
      charArray0[3] = 'I';
      charArray0[4] = '0';
      charArray0[5] = 'O';
      charArray0[6] = 'I';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '1');
      assertEquals(12, charArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '0';
      doubleArray0[1] = (double) (int)integerArray0[1];
      doubleArray0[2] = (double) (int)integerArray0[3];
      doubleArray0[3] = (double) '0';
      doubleArray0[4] = (double) (-658);
      doubleArray0[5] = (double) 0;
      ArrayUtils.shift(doubleArray0, 1136, (-4662), (-119));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {48.0, (-2821.0), (-658.0), 48.0, (-658.0), 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)56;
      ArrayUtils.swap(byteArray0, (-658), (int) (byte) (-108), 2);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-108), (byte) (-108), (byte)72, (byte) (-108), (byte)56}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1379);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1379), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1379), (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 14, 61);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '~');
      assertNull(charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1136;
      intArray0[1] = (int) (short)0;
      Long long0 = new Long(1136);
      assertNotNull(long0);
      assertEquals(1136L, (long)long0);
      
      Long long1 = new Long((short)0);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      Long long2 = new Long((short)0);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      
      Long long3 = new Long((short) (-1));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertEquals((-1L), (long)long3);
      
      Long[] longArray0 = ArrayUtils.clone((Long[]) null);
      assertNull(longArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toArray((Short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 64;
      intArray0[1] = 690;
      intArray0[2] = 0;
      intArray0[3] = (-3094);
      intArray0[4] = 55;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {64, 690, 0, (-3094), 55}, intArray0);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertNotNull(long1);
      assertEquals(9, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-2463L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-2463L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(0L);
      assertNotNull(long4);
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long2));
      assertEquals(0L, (long)long4);
      
      longArray0[4] = long4;
      long long5 = 1L;
      Long long6 = new Long(1L);
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long2));
      assertTrue(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long4));
      assertEquals(1L, (long)long6);
      
      longArray0[5] = long6;
      Long long7 = new Long(0L);
      assertNotNull(long7);
      assertTrue(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long6));
      assertTrue(long7.equals((Object)long1));
      assertTrue(long7.equals((Object)long2));
      assertTrue(long7.equals((Object)long4));
      assertEquals(0L, (long)long7);
      
      longArray0[6] = long7;
      Long long8 = new Long(long5);
      assertNotNull(long8);
      assertFalse(long8.equals((Object)long4));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long1));
      assertTrue(long8.equals((Object)long6));
      assertTrue(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long0));
      assertEquals(1L, (long)long8);
      
      longArray0[7] = long8;
      Long long9 = new Long((-3094));
      assertNotNull(long9);
      assertFalse(long9.equals((Object)long7));
      assertFalse(long9.equals((Object)long8));
      assertFalse(long9.equals((Object)long6));
      assertFalse(long9.equals((Object)long0));
      assertFalse(long9.equals((Object)long5));
      assertFalse(long9.equals((Object)long1));
      assertFalse(long9.equals((Object)long4));
      assertFalse(long9.equals((Object)long3));
      assertFalse(long9.equals((Object)long2));
      assertEquals((-3094L), (long)long9);
      
      longArray0[8] = long9;
      Long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.5298F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.5298F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-1));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.5298F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      Double double0 = new Double(1.5);
      assertNotNull(double0);
      assertEquals(1.5, (double)double0, 0.01);
      
      Double double1 = new Double((-1.0));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      
      Double double2 = new Double((-359.31049221858));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-359.31049221858), (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double2;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'G');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'G'}, charArray0);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      int int1 = ArrayUtils.hashCode((Object) boolean2);
      assertFalse(int1 == int0);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      ArrayUtils.swap((long[]) null, 995, 995, 32);
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1380;
      longArray0[0] = (long) (short)351;
      ArrayUtils.reverse(longArray0, (int) (short)351, (int) (short)351);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {351L, 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-58);
      ArrayUtils.shift(byteArray0, 881, 831, (-1935));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte) (-58)}, byteArray0);
      
      ArrayUtils.swap(longArray0, (int) (byte)0, 68, 323);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {351L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      shortArray0[1] = short0;
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      short[] shortArray1 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (-1), (int) (short) (-1));
      assertNotNull(bitSet0);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.shuffle((Object[]) shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = '6';
      charArray0[2] = '0';
      charArray0[3] = 'O';
      charArray0[4] = 'x';
      charArray0[5] = '5';
      charArray0[6] = 'k';
      charArray0[7] = 'I';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'V', '6', '0', 'O', 'x', '5', 'k', 'I'}, charArray0);
      assertEquals(4, int0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'x';
      longArray0[1] = (long) '6';
      longArray0[2] = (long) 'O';
      longArray0[3] = (long) 'k';
      ArrayUtils.swap(longArray0, (-287), (int) (short)932, (-2160));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {120L, 54L, 79L, 107L}, longArray0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1500, (-3180));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 643.84F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-2695.9968F);
      floatArray0[6] = (-4750.47F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 643.84F, 0.0F, 0.0F, (-1.0F), (-2695.9968F), (-4750.47F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = '*';
      charArray0[2] = '`';
      charArray0[3] = 'I';
      charArray0[4] = 's';
      charArray0[5] = '*';
      charArray0[6] = 'g';
      charArray0[7] = '-';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 's');
      assertNotNull(charArray1);
      assertEquals(9, charArray1.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'s', 'q', '*', '`', 'I', 's', '*', 'g', '-'}, charArray1);
      assertArrayEquals(new char[] {'q', '*', '`', 'I', 's', '*', 'g', '-'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)41;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-90), 1088);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-77), (byte)41}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-100);
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)4, (int) (byte)0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-9), (byte)0, (byte) (-61), (byte) (-100), (byte)0, (byte)113, (byte)2, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Integer integer0 = new Integer(222);
      assertNotNull(integer0);
      assertEquals(222, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurrences((Integer[]) null, integer0);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      Float float0 = new Float(129.927F);
      assertNotNull(float0);
      assertEquals(129.927F, (float)float0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) float0, (-306));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = 'N';
      charArray0[2] = '~';
      charArray0[3] = 'M';
      charArray0[4] = 'r';
      charArray0[5] = 'D';
      charArray0[6] = ':';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'8', 'N', '~', 'M', 'r', 'D', ':'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-479.0F));
      assertNull(floatArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[0];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1994.7772231582644));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2496;
      intArray0[1] = 46;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2496, 46}, intArray0);
      assertTrue(boolean0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-1171));
      assertNull(object0);
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) mockRandom0);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1286);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1321));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-1286), 0}, intArray0);
      assertArrayEquals(new int[] {(-1286), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1286);
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0]);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1286, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNotNull(object0);
      assertEquals(7, objectArray0.length);
      assertEquals(false, object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertNotNull(bitSet0);
      assertEquals(7, objectArray0.length);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) true;
      objectArray1[1] = (Object) true;
      objectArray1[2] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray1[3] = object1;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray1);
      assertEquals(4, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean0);
      assertNotSame(objectArray1, objectArray0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) "b=kJ{YL2KEN$'^2", intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1703.239F);
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-1703.239F);
      objectArray0[1] = (Object) (-1703.239F);
      objectArray0[2] = (Object) (-1703.239F);
      objectArray0[3] = (Object) (-1703.239F);
      objectArray0[4] = (Object) (-1703.239F);
      objectArray0[5] = (Object) (-1703.239F);
      objectArray0[6] = (Object) (-1703.239F);
      objectArray0[7] = (Object) (-1703.239F);
      floatArray0[0] = (-1703.239F);
      Object object0 = ArrayUtils.get(objectArray0, 1037);
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(9, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2106.3);
      doubleArray0[2] = (-408.60934);
      doubleArray0[3] = (-901.13067713);
      doubleArray0[4] = (-2795.1);
      doubleArray0[5] = (-2106.3);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 5149.889356698469);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-2106.3), (-408.60934), (-901.13067713), (-2795.1), (-2106.3)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-2106.3), (-408.60934), (-901.13067713), (-2795.1), (-2106.3)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 46;
      intArray0[1] = 2496;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {46, 2496}, intArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-2106.3);
      objectArray0[1] = (Object) 46;
      Object object0 = ArrayUtils.get(objectArray0, 50);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = null;
      boolean boolean1 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertEquals(3, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)0;
      ArrayUtils.swap(shortArray0, (int) (short)1, (-36), 12);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 643.84F;
      floatArray0[2] = 643.84F;
      floatArray0[3] = 0.0F;
      long[] longArray0 = new long[5];
      longArray0[0] = (-815L);
      longArray0[1] = (-815L);
      longArray0[2] = (-815L);
      longArray0[3] = (-815L);
      longArray0[4] = (-815L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2524L));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-815L), (-815L), (-815L), (-815L), (-815L)}, longArray0);
      assertArrayEquals(new long[] {(-815L), (-815L), (-815L), (-815L), (-815L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1.0, 2146922800);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1380;
      longArray0[1] = (long) (short)351;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 351L);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {1380L, 351L}, longArray0);
      assertArrayEquals(new long[] {1380L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1994091957);
      intArray0[1] = 1380;
      intArray0[2] = 1380;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1093, (-53));
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-1994091957), 1380, 1380}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 53, (-1994091957));
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.5298F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.5298F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-1));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)56, (byte)84, (byte) (-127), (byte)0, (byte) (-88), (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-127);
      longArray0[1] = (-815L);
      longArray0[2] = (long) (byte) (-127);
      longArray0[3] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-127L), (-815L), (-127L)}, longArray1);
      assertArrayEquals(new long[] {(-127L), (-815L), (-127L), (-1L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-51);
      doubleArray0[1] = (double) (-1.5298F);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (byte) (-88);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte) (-88);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-940.140189633378), 90);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-51.0), (-1.5298000574111938), 0.0, (-88.0), 0.0, 0.0, (-88.0)}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[1];
      boolean boolean2 = ArrayUtils.contains(longArray0, (long) (short)122);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 51);
      assertNotNull(bitSet0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = bitSet0.previousSetBit(51);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals((-1), int0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      objectArray0[0] = null;
      Object object2 = ArrayUtils.get(objectArray0, 0);
      assertNull(object2);
      assertEquals(2, objectArray0.length);
      
      objectArray0[1] = null;
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertNotNull(bitSet1);
      assertEquals(2, objectArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(2, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(2, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 1}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = 'n';
      charArray0[2] = '|';
      charArray0[3] = 'H';
      charArray0[4] = 'S';
      charArray0[5] = 'A';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '&');
      assertNotNull(charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {']', 'n', '|', 'H', 'S', 'A'}, charArray1);
      assertArrayEquals(new char[] {']', 'n', '|', 'H', 'S', 'A'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 576;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-2368));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 576}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 576}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-2368));
      assertNotNull(integer0);
      assertEquals((-2368), (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 576;
      integerArray0[2] = (Integer) Integer.MAX_VALUE;
      integerArray0[3] = (Integer) 576;
      integerArray0[4] = (Integer) Integer.MAX_VALUE;
      integerArray0[5] = (Integer) 576;
      integerArray0[6] = (Integer) 576;
      Integer integer1 = Integer.valueOf((-2407));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2407), (int)integer1);
      
      integerArray0[7] = integer1;
      integerArray0[8] = (Integer) Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[4] = boolean0;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.removeAllOccurences((int[]) null, 8);
      assertNull(intArray2);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) 8);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1258);
      shortArray0[1] = (short)101;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1258), (short)101}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1258), (short)101}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)101;
      doubleArray0[1] = (double) (short)101;
      byte[] byteArray0 = new byte[1];
      MockRandom mockRandom0 = new MockRandom((-2164L));
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2848L));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = mockRandom0.nextInt((int) (short) (-1258));
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        mockRandom0.ints((int) (byte)0, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1258);
      shortArray0[1] = (short)101;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1258), (short)101}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1258), (short)101}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)101;
      doubleArray0[1] = (double) (short)101;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-1258), (int) (short) (-1258));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {101.0, 101.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      MockRandom mockRandom0 = new MockRandom((-2164L));
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      int int1 = mockRandom0.nextInt(600);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2848L));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      // Undeclared exception!
      try { 
        mockRandom0.nextInt(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = '6';
      charArray0[2] = '0';
      charArray0[3] = 'O';
      charArray0[4] = 'x';
      charArray0[5] = '5';
      charArray0[6] = '6';
      charArray0[7] = 'I';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'V', '6', '0', 'O', 'x', '5', '6', 'I'}, charArray0);
      assertEquals(4, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(3443L);
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Arguments cannot both be null";
      stringArray0[1] = ">sk}ZIO";
      stringArray0[2] = "org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle";
      stringArray0[3] = "\u0005FAP%QY4}<N@|c*";
      stringArray0[4] = "Array and element cannot both be null";
      stringArray0[5] = "";
      stringArray0[6] = "FORY_Rd+*T";
      stringArray0[7] = "";
      stringArray0[8] = "r'y>";
      String string0 = ArrayUtils.get(stringArray0, 4115, "");
      assertNotNull(string0);
      assertEquals(9, stringArray0.length);
      assertEquals("", string0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      boolean boolean0 = ArrayUtils.isSameType("", byte0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = '';
      charArray0[2] = 'v';
      charArray0[3] = '8';
      charArray0[4] = 'q';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'R', '', 'v', '8', 'q'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[4] = boolean0;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.reverse(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((-1356), longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[4] = boolean1;
      boolean[] booleanArray1 = new boolean[8];
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = boolean0;
      booleanArray1[4] = true;
      booleanArray1[5] = false;
      booleanArray1[6] = boolean0;
      booleanArray1[7] = boolean0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray1, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null, 2310, 1498);
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 1, 2310);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'i');
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'i';
      floatArray0[1] = (float) 1498;
      floatArray0[2] = (float) 1498;
      floatArray0[3] = (float) 2310;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (-4342.222F);
      floatArray0[7] = (float) 1;
      floatArray0[8] = (float) 1;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {105.0F, 1498.0F, 1498.0F, 2310.0F, 1.0F, (-4342.222F), 0.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {105.0F, 1498.0F, 1498.0F, 2310.0F, 1.0F, (-4342.222F), 0.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1445;
      shortArray0[1] = (short) (-1025);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-4662), 3892);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1445, (short) (-1025)}, shortArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)1445;
      floatArray0[1] = (-3002.0F);
      floatArray0[2] = (float) (short) (-4662);
      floatArray0[3] = (float) (short) (-4662);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1703.239F));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {1445.0F, (-3002.0F), (-4662.0F), (-4662.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1445.0F, (-3002.0F), (-4662.0F), (-4662.0F), (-1703.239F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)932;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {932L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert((int) (short)2, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)2;
      objectArray0[1] = (Object) (short)2;
      objectArray0[2] = (Object) (short)2;
      objectArray0[3] = (Object) (short)2;
      objectArray0[4] = (Object) (short)932;
      objectArray0[5] = (Object) 932L;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[4], 0);
      assertEquals(6, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1503.144831));
      assertNotNull(double0);
      assertEquals((-1503.144831), (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      String string0 = ArrayUtils.get((String[]) null, 3744, "FORY_Rd+*T");
      assertNotNull(string0);
      assertEquals("FORY_Rd+*T", string0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertEquals((byte)0, object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) doubleArray0[0], 3744);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '4';
      charArray0[2] = 'C';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'5', '4', 'C'}, charArray0);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) '5';
      objectArray0[1] = (Object) '4';
      objectArray0[2] = (Object) 'C';
      objectArray0[3] = (Object) '4';
      objectArray0[4] = (Object) '4';
      objectArray0[5] = (Object) 'C';
      objectArray0[6] = (Object) '4';
      objectArray0[7] = (Object) '4';
      Object object0 = ArrayUtils.toPrimitive(objectArray0[7]);
      assertNotNull(object0);
      assertEquals(9, objectArray0.length);
      assertEquals('4', object0);
      
      objectArray0[8] = object0;
      Class<Object[]> class0 = Object[].class;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0, class0);
      assertNotNull(objectArray1);
      assertEquals(9, objectArray1.length);
      assertEquals(9, objectArray0.length);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[2]);
      assertEquals(9, objectArray0.length);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toArray((Short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 64;
      intArray0[1] = 690;
      intArray0[2] = 0;
      intArray0[3] = (-3094);
      intArray0[4] = 55;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {64, 690, 0, (-3094), 55}, intArray0);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertNotNull(long1);
      assertEquals(9, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      long long2 = 0L;
      Long long3 = new Long(0L);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertEquals(0L, (long)long3);
      
      longArray0[2] = long3;
      Long long4 = new Long((-2463L));
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertEquals((-2463L), (long)long4);
      
      longArray0[3] = long4;
      Long long5 = new Long(0L);
      assertNotNull(long5);
      assertTrue(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long1));
      assertEquals(0L, (long)long5);
      
      longArray0[4] = long5;
      long long6 = 1L;
      Long long7 = new Long(1L);
      assertNotNull(long7);
      assertTrue(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long2));
      assertEquals(1L, (long)long7);
      
      longArray0[5] = long7;
      Long long8 = new Long(0L);
      assertNotNull(long8);
      assertTrue(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long6));
      assertFalse(long8.equals((Object)long4));
      assertTrue(long8.equals((Object)long3));
      assertTrue(long8.equals((Object)long5));
      assertTrue(long8.equals((Object)long1));
      assertTrue(long8.equals((Object)long2));
      assertEquals(0L, (long)long8);
      
      longArray0[6] = long8;
      Long long9 = new Long(long6);
      assertNotNull(long9);
      assertFalse(long6 == long2);
      assertFalse(long9.equals((Object)long2));
      assertFalse(long9.equals((Object)long0));
      assertTrue(long9.equals((Object)long6));
      assertFalse(long9.equals((Object)long3));
      assertFalse(long9.equals((Object)long5));
      assertTrue(long9.equals((Object)long7));
      assertFalse(long9.equals((Object)long1));
      assertFalse(long9.equals((Object)long8));
      assertFalse(long9.equals((Object)long4));
      assertEquals(1L, (long)long9);
      
      longArray0[7] = long9;
      Long long10 = new Long((-3094));
      assertNotNull(long10);
      assertFalse(long10.equals((Object)long4));
      assertFalse(long10.equals((Object)long0));
      assertFalse(long10.equals((Object)long6));
      assertFalse(long10.equals((Object)long9));
      assertFalse(long10.equals((Object)long8));
      assertFalse(long10.equals((Object)long7));
      assertFalse(long10.equals((Object)long2));
      assertFalse(long10.equals((Object)long3));
      assertFalse(long10.equals((Object)long5));
      assertFalse(long10.equals((Object)long1));
      assertEquals((-3094L), (long)long10);
      
      longArray0[8] = long10;
      Long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray1, (Object) long2);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(long2 == long6);
      assertEquals(6, int0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer((short)122);
      assertNotNull(integer0);
      assertEquals(122, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) integer0, (-891));
      assertEquals(8, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-4374);
      shortArray0[1] = (short) (-1005);
      shortArray0[2] = (short) (-2915);
      shortArray0[3] = (short)122;
      shortArray0[4] = (short) (-21562);
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-4374);
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-4374), (short) (-1005), (short) (-2915), (short)122, (short) (-21562)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4374)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1005), (short) (-2915), (short)122, (short) (-21562)}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      mockRandom0.nextBytes(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-34);
      intArray0[1] = 0;
      intArray0[2] = (int) (short)1445;
      intArray0[3] = (int) (byte) (-34);
      intArray0[4] = (int) (byte)1;
      intArray0[5] = (int) (byte) (-34);
      intArray0[6] = (int) (byte)1;
      intArray0[7] = (int) (byte)1;
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1445;
      shortArray0[1] = (short) (byte) (-34);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)1445, (short) (-34)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-1063L);
      longArray0[2] = 1680L;
      longArray0[3] = (-2992L);
      longArray0[4] = 1483L;
      longArray0[5] = (-3135L);
      longArray0[6] = (-1158L);
      longArray0[7] = (-1129L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1063L), 1680L, (-2992L), 1483L, (-3135L), (-1158L), (-1129L)}, longArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2622);
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-2622);
      shortArray1[1] = (short) (-2622);
      shortArray1[2] = (short) (-2622);
      shortArray1[3] = (short) (-2622);
      shortArray1[4] = (short) (-2622);
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray2.length);
      assertEquals(1, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {(short) (-2622)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2622), (short) (-2622), (short) (-2622), (short) (-2622), (short) (-2622)}, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)27;
      ArrayUtils.swap(shortArray0, (int) (short)1, 13, 12);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)27}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-627.7315F);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)3339;
      shortArray0[2] = (short) (-1);
      ArrayUtils.swap(shortArray0, 454, 0, 454);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)3339, (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1110.595F;
      floatArray0[1] = (-425.1663F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1475.2F;
      floatArray0[4] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2791.234F);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1110.595F, (-425.1663F), 0.0F, 1475.2F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (-1), 3011, 3011);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ArrayUtils.reverse(byteArray0, (-993), (int) (byte)1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1475.2F;
      floatArray0[1] = (float) (byte)1;
      floatArray0[2] = 2791.234F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2791.234F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1475.2F, 1.0F, 2791.234F}, floatArray0, 0.01F);
      assertEquals(2, int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, (-1638), (-1638), (int) (byte)1);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, (-508));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-972));
      assertNotNull(integer0);
      assertEquals((-972), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2821));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2821), (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 4;
      Integer integer2 = new Integer(4);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertEquals(4, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(4);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals(4, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf((-2821));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals((-2821), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(852);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertEquals(852, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-31));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertEquals((-31), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-847));
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertEquals((-847), (int)integer7);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 0, (Integer) int0);
      assertNotNull(integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      ArrayUtils.swap(booleanArray0, 0, (int) integerArray0[5], 11);
      assertEquals(8, integerArray0.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true}, booleanArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-627.7315F);
      floatArray0[1] = (-5.0338287F);
      floatArray0[3] = 1.0F;
      ArrayUtils.swap(floatArray0, 586, 586);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-627.7315F), (-5.0338287F), 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = '0';
      charArray0[2] = 's';
      charArray0[3] = 'K';
      charArray0[4] = 'L';
      charArray0[5] = '\'';
      charArray0[7] = 'L';
      charArray0[8] = 'A';
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-627.7315F);
      floatArray0[1] = (-5.0338287F);
      floatArray0[3] = 1.0F;
      ArrayUtils.swap(floatArray0, 586, 586);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-627.7315F), (-5.0338287F), 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = '0';
      charArray0[2] = 's';
      charArray0[3] = 'K';
      charArray0[4] = 'L';
      charArray0[5] = '\'';
      charArray0[6] = '5';
      charArray0[7] = 'L';
      charArray0[8] = 'A';
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)0;
      ArrayUtils.swap(shortArray0, (int) (short)1, 0, (int) (short)0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F, 57);
      assertNotNull(bitSet0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-1711), 3771, (-1711));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, 214.24F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-9);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-9), 2);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte) (-9)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-564);
      intArray0[2] = (-1);
      intArray0[5] = (-1);
      intArray0[4] = (int) (short) (-3093);
      intArray0[5] = (-1);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((double) (-3093), (double) (-564));
      assertNotNull(doubleStream0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1763);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {(-564), 0, (-1), 0, (-3093), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-564), 0, (-1), 0, (-3093), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 1763;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (short) (-3093);
      ArrayUtils.shift(doubleArray0, 5489, (-3504), 1763);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 1763.0, (-1.0), (-1.0), (-1.0), (-3093.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)0;
      ArrayUtils.swap(shortArray0, (int) (short)1, 0, 12);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)8;
      ArrayUtils.swap(byteArray0, 764, (-195));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)63, (byte) (-25), (byte) (-45), (byte)1, (byte) (-118), (byte)8}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)0;
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) (byte)110;
      ArrayUtils.shift(doubleArray0, (int) (byte)110);
      assertEquals(18, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1258);
      intArray0[1] = (-1);
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '}');
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'}', '}', '}'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-18L);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) '}';
      longArray0[3] = (long) '}';
      ArrayUtils.shift(longArray0, (-1));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 125L, 125L, (-18L)}, longArray0);
      
      ArrayUtils.shift(intArray0, 2144775598);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-1258), (-1)}, intArray0);
      
      ArrayUtils.reverse((byte[]) null, (int) (byte)5, (-890));
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 125L);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-18L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), 125L, 125L, (-18L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-324));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-1258), (-1)}, intArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-18L);
      doubleArray0[2] = (double) (byte)5;
      doubleArray0[3] = (double) '}';
      doubleArray0[5] = (double) 2144775598;
      doubleArray0[6] = (double) '}';
      ArrayUtils.shift(doubleArray0, (-890));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-18.0), 5.0, 125.0, 0.0, 2.144775598E9, 125.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1));
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, (-1258), (-1)}, intArray0);
      assertArrayEquals(new int[] {0, (-1258)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.swap((byte[]) null, 72, 2144775598, (-1));
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) mutableInt0);
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      
      objectArray0[0] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      Object object2 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object2);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      Object object3 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object3);
      
      objectArray0[2] = null;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object4 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object4);
      assertEquals(0, object4);
      
      objectArray0[3] = object4;
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertNotNull(mutableInt1);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      
      objectArray0[4] = (Object) mutableInt1;
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '4';
      charArray0[2] = ',';
      charArray0[3] = '%';
      charArray0[4] = '8';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '%', 4);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'B', '4', ',', '%', '8'}, charArray0);
      assertEquals(3, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 3, (byte)57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-972));
      assertNotNull(integer0);
      assertEquals((-972), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2821));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2821), (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 4;
      Integer integer2 = new Integer(4);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(4, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(4);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertEquals(4, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf((-2821));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertEquals((-2821), (int)integer4);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = 'k';
      charArray0[2] = 'x';
      charArray0[3] = 'I';
      charArray0[4] = '0';
      charArray0[5] = 'O';
      charArray0[6] = 'I';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '1');
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'1', 'k', 'x', 'I', '0', 'O', 'I'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '0';
      doubleArray0[1] = (double) (int)integerArray0[1];
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) '0';
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 0;
      ArrayUtils.shift(doubleArray0, 1136, (-4662), (-119));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {48.0, (-2821.0), 4.0, 48.0, 4.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)56;
      ArrayUtils.swap(byteArray0, 4, (int) (byte)14, 2);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-108), (byte) (-88), (byte)90, (byte)14, (byte)56}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.5298000574111938);
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '|');
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'S', 'S'}, charArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(doubleArray0, 4, (-287), 3);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.5298000574111938), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)31;
      ArrayUtils.swap(byteArray0, (-1), 965, (-3043));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-13), (byte)1, (byte)31, (byte)90, (byte)90, (byte)90, (byte)31}, byteArray0);
      
      Byte[] byteArray1 = new Byte[8];
      byteArray1[0] = (Byte) (byte)90;
      byteArray1[1] = (Byte) (byte)90;
      byteArray1[2] = (Byte) (byte)1;
      Byte byte0 = new Byte((byte) (-13));
      assertNotNull(byte0);
      assertEquals((byte) (-13), (byte)byte0);
      
      byteArray1[3] = byte0;
      try { 
        Byte.decode("o-~wyXiawX9&Yv&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"o-~wyXiawX9&Yv&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      Integer integer0 = new Integer((short)2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer((-31));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-31), (int)integer1);
      
      Integer integer2 = new Integer((short)2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(2, (int)integer2);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[0] = integer0;
      integerArray0[2] = integer2;
      integerArray0[3] = integer2;
      integerArray0[4] = integer2;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 7, integerArray0[1]);
      assertNotNull(integerArray1);
      assertEquals(9, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      short[] shortArray0 = new short[0];
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-127));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      long[] longArray0 = new long[23];
      longArray0[0] = (-25L);
      longArray0[1] = 1070L;
      longArray0[2] = (-4092L);
      longArray0[3] = (-1121L);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(23, longArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1121L);
      doubleArray0[1] = (double) 1070L;
      doubleArray0[2] = (double) 1070L;
      doubleArray0[3] = (double) (-4092L);
      doubleArray0[4] = (double) (-1121L);
      doubleArray0[5] = (double) (-25L);
      doubleArray0[6] = (double) 1070L;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertArrayEquals(new double[] {(-1121.0), 1070.0, 1070.0, (-4092.0), (-1121.0), (-25.0), 1070.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)51);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-4092L);
      objectArray0[1] = (Object) (-1121L);
      objectArray0[2] = (Object) 1070L;
      objectArray0[3] = (Object) 1070L;
      objectArray0[4] = (Object) 1070L;
      objectArray0[5] = (Object) 1070.0;
      objectArray0[6] = (Object) bitSet0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-4092', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-324);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short) (-324)}, shortArray0);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      
      Integer integer3 = mutableInt0.getValue();
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(0, (int)integer3);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      
      integerArray0[3] = integer3;
      Integer integer4 = mutableInt0.getValue();
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertEquals(0, (int)integer4);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)int0));
      assertEquals(0, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1302));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertEquals((-1302), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((short) (-1));
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertEquals((-1), (int)integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int0);
      assertNotNull(integer8);
      assertTrue(integer8.equals((Object)int0));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer5));
      assertTrue(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer4));
      assertEquals(0, (int)integer8);
      
      integerArray0[8] = integer8;
      Integer integer9 = ArrayUtils.get(integerArray0, 1856);
      assertNull(integer9);
      assertEquals(9, integerArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short) (-324);
      intArray0[3] = (-1302);
      intArray0[4] = (-1);
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      char[] charArray0 = new char[2];
      Character character0 = new Character('\u0000');
      assertNotNull(character0);
      assertEquals('\u0000', (char)character0);
      
      Character character1 = new Character('i');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('i', (char)character1);
      
      Character character2 = new Character('O');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('O', (char)character2);
      
      ArrayUtils.shift(booleanArray0, 1, (-27), (-27));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      String[] stringArray0 = new String[6];
      stringArray0[3] = "The Array must not be null";
      stringArray0[5] = "y'~u+/cHK@rSf$";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 51;
      ArrayUtils.reverse(longArray0, 1380, 1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {51L}, longArray0);
      
      ArrayUtils.shift((boolean[]) null, 1498, 1498, 1086);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(4025);
      assertNotNull(byteBuffer0);
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4025 cap=4025]", byteBuffer0.toString());
      assertEquals(4025, byteBuffer0.capacity());
      assertEquals(4025, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(4025, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      
      ArrayUtils.reverse(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {51L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+S4Y");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      charArray0[5] = ' ';
      charArray0[6] = ' ';
      charArray0[7] = '5';
      ArrayUtils.swap(charArray0, (-2147146440), (int) (short) (-1025), 55);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {' ', ' ', '\u0000', ' ', ' ', ' ', ' ', '5'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (-1L));
      assertFalse(boolean1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2147146440);
      intArray0[1] = (int) ' ';
      intArray0[2] = (int) ' ';
      intArray0[3] = (int) ' ';
      intArray0[4] = (int) ' ';
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = (int) '5';
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-2147146440), 32, 32, 32, 32, Integer.MAX_VALUE, 53}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1634L);
      longArray0[2] = 32L;
      longArray0[3] = (-1L);
      longArray0[4] = (-108L);
      ArrayUtils.reverse(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-108L), (-1L), 32L, (-1634L), (-1L)}, longArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)382;
      shortArray0[1] = (short)15;
      shortArray0[2] = (short) (-61);
      shortArray0[3] = (short)73;
      shortArray0[4] = (short) (-249);
      shortArray0[5] = (short) (-864);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)2456);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)382, (short)15, (short) (-61), (short)73, (short) (-249), (short) (-864)}, shortArray0);
      assertArrayEquals(new short[] {(short)382, (short)15, (short) (-61), (short)73, (short) (-249), (short) (-864)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 6639);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 4860L;
      longArray0[1] = (-3528L);
      longArray0[2] = 372L;
      longArray0[3] = 9L;
      ArrayUtils.reverse(longArray0, 840, 840);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {4860L, (-3528L), 372L, 9L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 1810, 4410, 4410);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-19);
      shortArray0[2] = (short) (-4086);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-19), (short) (-4086)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-19), (short) (-4086)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      long[] longArray1 = ArrayUtils.insert((int) (short)0, (long[]) null, (long[]) null);
      assertNull(longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-783L);
      int int0 = 1380;
      ArrayUtils.reverse(longArray0, 1380, 51);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-783L)}, longArray0);
      
      int int1 = (-155);
      ArrayUtils.shift(booleanArray0, 51, (-1699), (-155));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) (-783L);
      objectArray0[3] = (Object) (-783L);
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (-783L);
      objectArray1[1] = (Object) false;
      // Undeclared exception!
      try { 
        ByteBuffer.allocate((-1699));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-45);
      byte byte0 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte1 = (byte)73;
      byteArray0[4] = (byte)73;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)73);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 73, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(2825.13987876);
      assertNotNull(double0);
      assertEquals(2825.13987876, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1503.144831));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1503.144831), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      String string0 = ArrayUtils.get((String[]) null, 3744, "FORY_Rd+*T");
      assertNotNull(string0);
      assertEquals("FORY_Rd+*T", string0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertEquals((byte)0, object0);
      
      boolean boolean1 = ArrayUtils.isSameType(double0, object0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) doubleArray0[0], 3744);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-3093));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-564);
      intArray0[1] = (-564);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (int) (short) (-3093);
      intArray0[5] = (-1);
      ArrayUtils.swap(intArray0, (-1), (-564));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-564), (-564), (-1), (-1), (-3093), (-1)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      int[] intArray0 = new int[3];
      long[] longArray0 = new long[17];
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (-28));
      assertNotNull(longArray1);
      assertEquals(17, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1136;
      intArray0[1] = 76;
      ArrayUtils.swap(intArray0, 76, 76);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1136, 76, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) mockRandom0, (Object) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      ArrayUtils.swap(intArray0, 0, 0, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 2;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '2', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short)1925;
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1925;
      ArrayUtils.shuffle(shortArray1);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)1925}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      char[] charArray0 = new char[2];
      Character character0 = new Character('\u0000');
      assertNotNull(character0);
      assertEquals('\u0000', (char)character0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1779.357328863);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.1);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-1779.357328863)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.1, (-1779.357328863)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 557.647;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.5, 0.0, 0.0, 557.647}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(111, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      char[] charArray0 = new char[2];
      Character character0 = new Character('\u0000');
      assertNotNull(character0);
      assertEquals('\u0000', (char)character0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1779.357328863);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1779.357328863));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-1779.357328863)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1779.357328863), (-1779.357328863)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2409.342F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-3093.0F));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {2409.342F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3093.0F), 2409.342F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-1711), 3771, (-1711));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, 214.24F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-9);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-9), 2);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-9)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1394.1466F);
      floatArray0[2] = (-917.8933F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-882.3104F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1720.88F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 256.21982F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-1394.1466F), (-917.8933F), (-1.0F), (-882.3104F), 0.0F, (-1720.88F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {256.21982F, 0.0F, (-1394.1466F), (-917.8933F), (-1.0F), (-882.3104F), 0.0F, (-1720.88F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      float[] floatArray0 = new float[7];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[2];
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray2);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray2.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-20.83F);
      floatArray0[3] = (-1449.6759F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1856.685F);
      floatArray0[6] = (-164.28104F);
      floatArray0[7] = 1.0F;
      floatArray0[8] = (-1.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-20.83F), (-1449.6759F), 0.0F, (-1856.685F), (-164.28104F), 1.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2059.24042898573;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 4.0;
      doubleArray0[3] = (-2.0);
      doubleArray0[4] = (-2014.634943138);
      int int0 = ArrayUtils.indexOf(doubleArray0, 2059.24042898573);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2059.24042898573, 1.0, 4.0, (-2.0), (-2014.634943138)}, doubleArray0, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      ArrayUtils.shift(objectArray0, (-1184), (-1184), (-1184));
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals(0, object1);
      
      objectArray0[3] = object1;
      MutableInt mutableInt1 = new MutableInt(0);
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("0", mutableInt1.toString());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      
      objectArray0[4] = (Object) mutableInt1;
      int int0 = mutableInt1.getAndAdd(0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(0, int0);
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("0", mutableInt1.toString());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      assertNotSame(mutableInt1, mutableInt0);
      
      ArrayUtils.shift(objectArray0, 0, (-1287), 0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-627.7315F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-414.84F);
      floatArray0[3] = 1.0F;
      ArrayUtils.swap(floatArray0, 1600, 1600);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-627.7315F), (-1.0F), (-414.84F), 1.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, 120);
      assertNull(object1);
      assertEquals(2, objectArray0.length);
      
      objectArray0[1] = null;
      ArrayUtils.shift(objectArray0, 2503, 120, 838);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) mutableInt0);
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      
      objectArray0[0] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      
      Object object2 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object2);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      
      Object object3 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object3);
      
      objectArray0[2] = null;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object4 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object4);
      assertEquals(0, object4);
      
      objectArray0[3] = object4;
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertNotNull(mutableInt1);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt1.byteValue());
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      
      objectArray0[4] = (Object) mutableInt1;
      ArrayUtils.shift(objectArray0, 0, (-1287), 0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      long[] longArray0 = new long[0];
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.insert(14, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-1L));
      mockRandom0.setSeed((-1L));
      byte[] byteArray0 = new byte[3];
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      String[] stringArray0 = ArrayUtils.toArray((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)101);
      assertNotNull(short0);
      assertEquals((short)101, (short)short0);
      
      shortArray0[0] = short0;
      Integer integer0 = Integer.valueOf((-3078));
      assertNotNull(integer0);
      assertEquals((-3078), (int)integer0);
      
      Short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (Object) integer0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (-3078));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short)1944;
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1944;
      ArrayUtils.shuffle(shortArray1);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)1944}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      MutableInt mutableInt0 = new MutableInt((-1730));
      assertNotNull(mutableInt0);
      assertEquals((-1730), (int)mutableInt0.getValue());
      assertEquals("-1730", mutableInt0.toString());
      assertEquals((byte)62, mutableInt0.byteValue());
      assertEquals((-1730), (int)mutableInt0.toInteger());
      assertEquals((short) (-1730), mutableInt0.shortValue());
      assertEquals((-1730L), mutableInt0.longValue());
      assertEquals((-1730), mutableInt0.intValue());
      assertEquals((-1730.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1730.0), mutableInt0.doubleValue(), 0.01);
      
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurences(mutableIntArray0, mutableInt0);
      assertNotNull(mutableIntArray1);
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertEquals((-1730), (int)mutableInt0.getValue());
      assertEquals("-1730", mutableInt0.toString());
      assertEquals((byte)62, mutableInt0.byteValue());
      assertEquals((-1730), (int)mutableInt0.toInteger());
      assertEquals((short) (-1730), mutableInt0.shortValue());
      assertEquals((-1730L), mutableInt0.longValue());
      assertEquals((-1730), mutableInt0.intValue());
      assertEquals((-1730.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1730.0), mutableInt0.doubleValue(), 0.01);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = 1070L;
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockRandom0;
      ArrayUtils.shift(objectArray0, 2239);
      assertEquals(1, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], 2239);
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-2695.9968F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1944.053F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1132.0F);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-2695.9968F), 0.0F, 1944.053F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 127, 'I');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-2695.9968F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1944.053F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1944.053F);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-2695.9968F), 0.0F, 1944.053F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-77);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-90), (int) (byte) (-77));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-77), (byte)41, (byte) (-77), (byte) (-90), (byte) (-90), (byte) (-77), (byte) (-77), (byte) (-77)}, byteArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-2834.4375F);
      floatArray0[2] = (-93.14F);
      floatArray0[3] = (-2025.09F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 815.8157F;
      floatArray0[7] = 1056.0F;
      floatArray0[8] = 448.99548F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2834.4375F), (-308));
      assertNotNull(bitSet0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-2834.4375F), (-93.14F), (-2025.09F), 0.0F, (-1.0F), 815.8157F, 1056.0F, 448.99548F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1606.0;
      doubleArray0[1] = (-98.5);
      doubleArray0[2] = 1.5;
      doubleArray0[3] = 100.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1514.0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1606.0, (-98.5), 1.5, 100.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2106.3);
      doubleArray0[2] = (-408.60934);
      doubleArray0[3] = (-901.13067713);
      doubleArray0[4] = (-2795.1);
      doubleArray0[5] = 1.5;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 5149.889356698469);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-2106.3), (-408.60934), (-901.13067713), (-2795.1), 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-2106.3), (-408.60934), (-901.13067713), (-2795.1), 1.5}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 139, 0, 0);
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+S4Y");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) (short)1445);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1445.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1445;
      shortArray0[1] = (short) (-1025);
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("+S4Y");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = 'T';
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.valueOf(", Length: ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(", Length: ");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf((boolean) boolean0);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(false);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf(", Length: ");
      assertNotNull(boolean6);
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.valueOf(", Length: ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(", Length: ");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean0);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(false);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf(", Length: ");
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = (-493L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (-4407L);
      longArray0[5] = (-1246L);
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      int int0 = 90;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 90);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 2147483647L;
      longArray0[1] = (long) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 1722);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1722, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[5];
      charArray0[4] = 'T';
      charArray0[2] = 'T';
      charArray0[4] = 'T';
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.insert((-583), floatArray1, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1264.2206F);
      floatArray0[3] = (-5240.5273F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-3016.98F);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1264.2206F), (-5240.5273F), 1.0F, 0.0F, (-3016.98F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = ',';
      charArray0[2] = '&';
      charArray0[3] = 'g';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'9', ',', '&', 'g'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) ',';
      intArray0[1] = (int) 'g';
      intArray0[2] = (int) 'g';
      intArray0[3] = (int) '9';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 103, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 0);
      assertNotNull(bitSet0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals("{0, 1, 2, 4}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)4, (int) (byte)4);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)4}, byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-479.0F));
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-479.0F);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-479.0F);
      doubleArray0[3] = (double) (-479.0F);
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int int0 = 1505;
      // Undeclared exception!
      try { 
        mockRandom0.ints(0L, 1505, 1505);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      Integer integer0 = new Integer((short)2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer((-31));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-31), (int)integer1);
      
      Integer integer2 = new Integer((short)2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(2, (int)integer2);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[0] = integer0;
      integerArray0[2] = integer2;
      integerArray0[3] = integer2;
      integerArray0[4] = integer2;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 7, integerArray0[1]);
      assertNotNull(integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 576;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1865);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 576}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 576}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Long[] longArray0 = ArrayUtils.addAll((Long[]) null, (Long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 0, Integer.MAX_VALUE);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false}, booleanArray0));
      
      Character character0 = new Character('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
  }

  @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      Double[] doubleArray0 = null;
      Double[] doubleArray1 = ArrayUtils.clone((Double[]) null);
      assertNull(doubleArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = 'T';
      charArray0[2] = 'W';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'%', 'T', 'W'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      long long0 = 61L;
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      long long1 = 2629L;
      // Undeclared exception!
      try { 
        mockRandom0.doubles((double) 0L, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = 1L;
      longArray0[3] = (-2L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2L));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1L), 1L, (-2L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotNull(charArray2);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(3, charArray2.length);
      assertArrayEquals(new char[] {']', ']', ']'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {']', ']', ']'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Character character0 = new Character('8');
      assertNotNull(character0);
      assertEquals('8', (char)character0);
      
      Character character1 = Character.valueOf('>');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('>', (char)character1);
      
      Character character2 = new Character('l');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('l', (char)character2);
      
      Boolean boolean0 = Boolean.valueOf("+S4Y");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-440);
      shortArray0[1] = (short) (-200);
      shortArray0[2] = (short)3;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)3);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-440), (short) (-200), (short)3}, shortArray0);
      assertArrayEquals(new short[] {(short)3, (short) (-440), (short) (-200), (short)3}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, (int) (short) (-200), (int) (short) (-200), 4733);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-1), (-259));
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-3232));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-440), (short) (-200), (short)3}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean0);
      assertNotSame(shortArray0, shortArray1);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1925;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(49, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-100);
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ArrayUtils.shift(byteArray0, 0, (int) (byte)113, (int) (byte)0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-9), (byte)0, (byte) (-61), (byte) (-100), (byte)0, (byte)113, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      short[] shortArray0 = new short[0];
      short short0 = (short)0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Short[] shortArray2 = new Short[7];
      Short short1 = new Short((short)1520);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1520, (short)short1);
      
      Short short2 = new Short((short) (-3915));
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short) (-3915), (short)short2);
      
      shortArray2[1] = short2;
      Short short3 = new Short((short)0);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertEquals((short)0, (short)short3);
      
      shortArray2[2] = short3;
      Short short4 = new Short(short0);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertEquals((short)0, (short)short4);
      
      shortArray2[3] = short4;
      Short short5 = new Short((byte)0);
      assertNotNull(short5);
      assertTrue(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short4));
      assertEquals((short)0, (short)short5);
      
      shortArray2[4] = short3;
      Short short6 = new Short((short) (-597));
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short2));
      assertEquals((short) (-597), (short)short6);
      
      shortArray2[5] = short6;
      Short short7 = new Short((short)0);
      assertNotNull(short7);
      assertTrue(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short2));
      assertTrue(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short6));
      assertTrue(short7.equals((Object)short5));
      assertTrue(short7.equals((Object)short3));
      assertEquals((short)0, (short)short7);
      
      shortArray2[6] = short7;
      Short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray2);
      assertNotNull(shortArray3);
      assertEquals(7, shortArray3.length);
      assertEquals(7, shortArray2.length);
      assertSame(shortArray3, shortArray2);
      assertSame(shortArray2, shortArray3);
  }

  @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)0;
      ArrayUtils.shift(byteArray0, 0, (int) (byte)113, (int) (byte)0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-9), (byte)0, (byte) (-61), (byte) (-100), (byte)99, (byte)113, (byte)2, (byte)0}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      short[] shortArray0 = new short[0];
      short short0 = (short)0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Short[] shortArray2 = new Short[7];
      Short short1 = new Short((short)1520);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1520, (short)short1);
      
      shortArray2[0] = short1;
      Short short2 = new Short((short) (-3915));
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short) (-3915), (short)short2);
      
      shortArray2[1] = short2;
      Short short3 = new Short((short)0);
      assertNotNull(short3);
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short)0, (short)short3);
      
      shortArray2[2] = short3;
      Short short4 = new Short(short0);
      assertNotNull(short4);
      assertTrue(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertEquals((short)0, (short)short4);
      
      shortArray2[3] = short4;
      Short short5 = new Short((byte)99);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertEquals((short)99, (short)short5);
      
      shortArray2[4] = short5;
      Short short6 = new Short((short) (-597));
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short2));
      assertEquals((short) (-597), (short)short6);
      
      shortArray2[5] = short6;
      Short short7 = new Short((short)0);
      assertNotNull(short7);
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short2));
      assertTrue(short7.equals((Object)short4));
      assertTrue(short7.equals((Object)short3));
      assertTrue(short7.equals((Object)short0));
      assertEquals((short)0, (short)short7);
      
      shortArray2[6] = short7;
      Short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray2);
      assertNotNull(shortArray3);
      assertEquals(7, shortArray3.length);
      assertEquals(7, shortArray2.length);
      assertSame(shortArray3, shortArray2);
      assertSame(shortArray2, shortArray3);
  }

  @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)932;
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)932, (short)2}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-627.7315F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-414.84F);
      floatArray0[3] = 1.0F;
      ArrayUtils.swap(floatArray0, 586, 586);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-627.7315F), (-1.0F), (-414.84F), 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)99;
      shortArray0[4] = (short) (-3031);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)1600;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertNotNull(bitSet0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)99, (short) (-3031), (short)2, (short)1600}, shortArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      Short short0 = new Short((short) (-149));
      assertNotNull(short0);
      assertEquals((short) (-149), (short)short0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-149);
      floatArray0[1] = (float) (short) (-149);
      floatArray0[2] = (float) (short) (-149);
      floatArray0[3] = (float) (short) (-149);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-3642.66F), 11);
      assertNotNull(bitSet0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-149.0F), (-149.0F), (-149.0F), (-149.0F)}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) short0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1680);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1680)}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1703.239F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-961.197F));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1703.239F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1703.239F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[0];
      short short0 = (short)397;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)397, (int) (short)397);
      assertNotNull(bitSet0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-1703.239F);
      Double double0 = new Double((-1703.239F));
      assertNotNull(double0);
      assertEquals((-1703.239013671875), (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) double0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
