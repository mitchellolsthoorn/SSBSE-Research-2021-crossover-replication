/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:06:53 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[2] = (-1426L);
      longArray0[3] = 9L;
      longArray0[0] = 51L;
      longArray0[5] = 0L;
      longArray0[6] = 3758L;
      longArray0[7] = 0L;
      longArray0[8] = 129L;
      int int0 = ArrayUtils.indexOf(longArray0, 410L);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {51L, 0L, (-1426L), 9L, 0L, 0L, 3758L, 0L, 129L}, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Long[] longArray1 = new Long[1];
      longArray1[0] = (Long) 0L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-1L));
      assertEquals(1, longArray2.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertNotSame(longArray2, longArray0);
      
      int[] intArray0 = new int[0];
      int int1 = ArrayUtils.indexOf(intArray0, (-1501));
      assertEquals((-1), int1);
      assertEquals(0, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[9];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(9, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      byte byte0 = (byte)2;
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-127), 633);
      assertEquals((-1), int0);
      assertEquals(12, byteArray0.length);
      
      char char0 = 'b';
      Character character0 = Character.valueOf('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('b');
      assertEquals('b', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)2);
      assertNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-70));
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'b';
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) 633;
      doubleArray0[3] = (double) (byte) (-70);
      doubleArray0[4] = (double) (byte)2;
      doubleArray0[5] = (double) 'i';
      doubleArray0[6] = (double) (byte) (-127);
      doubleArray0[7] = (double) (byte)2;
      doubleArray0[8] = (double) (byte)2;
      ArrayUtils.shift(doubleArray0, (int) (byte) (-38), 2958, 2356);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {633.0, (-70.0), 2.0, 105.0, (-127.0), 2.0, 2.0, 98.0, 2.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (int) (byte)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      short[] shortArray0 = new short[5];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.5;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[3] = 1.5;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertEquals(9, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.5, 0.0, 0.0, 1.5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5, 1.5}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[17];
      intArray0[3] = (int) (short)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)102);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[3];
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)102);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      longArray0[0] = 886L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (byte)102;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)102;
      intArray1[1] = (int) (short)0;
      intArray1[2] = (int) (short)0;
      intArray1[3] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 102, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 491L;
      longArray0[1] = 598L;
      longArray0[2] = (-2143L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 426, 426);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {491L, 598L, (-2143L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(426);
      assertEquals(426, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte)67);
      assertEquals((byte)67, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = ' ';
      charArray0[2] = '/';
      charArray0[3] = 'h';
      ArrayUtils.shift(charArray0, 122);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'/', 'h', '=', ' '}, charArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-3220.6643F);
      floatArray0[1] = (float) '/';
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-3220.6643F), 47.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3220.6643F), 47.0F, (-1.0F)}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      Double[] doubleArray1 = new Double[6];
      Double double0 = new Double(0.1);
      assertEquals(0.1, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double((-540.0));
      assertEquals((-540.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray1[1] = double1;
      Double double2 = new Double((-1.0F));
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray1[2] = double2;
      Double double3 = new Double((-1.0F));
      assertEquals((-1.0), (double)double3, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray1[3] = double3;
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      
      doubleArray1[4] = double4;
      Double double5 = new Double((-3220.6643F));
      assertEquals((-3220.664306640625), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotNull(double5);
      
      doubleArray1[5] = double5;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)1;
      floatArray0[1] = (float) (byte)59;
      floatArray0[2] = (-819.243F);
      floatArray0[3] = (float) (byte)102;
      floatArray0[4] = (float) (byte)1;
      floatArray0[5] = (float) (byte)101;
      floatArray0[6] = (float) (byte) (-36);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)1);
      assertEquals(4, int0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 59.0F, (-819.243F), 102.0F, 1.0F, 101.0F, (-36.0F)}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte)1);
      assertEquals(0, int1);
      assertEquals(1, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[9];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(9, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      byte[] byteArray0 = new byte[12];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-127), 633);
      assertEquals((-1), int0);
      assertEquals(12, byteArray0.length);
      
      Character character0 = Character.valueOf('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('b');
      assertEquals('b', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      char char0 = 'i';
      Character character2 = Character.valueOf('i');
      assertEquals('i', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character2;
      char[] charArray0 = Character.toChars((int) (byte)0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) char0;
      doubleArray0[2] = 2191.8558253516358;
      doubleArray0[3] = (double) 633;
      doubleArray0[5] = (double) 633;
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, (int) (byte)0, 1.5);
      assertEquals(0, int1);
      assertEquals(6, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 105.0, 2191.8558253516358, 633.0, 0.0, 633.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short[] shortArray0 = new short[1];
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[4] = (-73);
      intArray0[5] = (-73);
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, (-73), (-73), 0}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-73);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2803.5469402453023, (int) (short)0);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-73.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      char[] charArray1 = ArrayUtils.add(charArray0, 'c');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)18;
      shortArray0[0] = (short) (byte)122;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)18, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte)18);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {18.0, (-73.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-73.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, true);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1965);
      ArrayUtils.swap(shortArray0, Integer.MAX_VALUE, (-833));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1965)}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)944);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1965)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1965), (short)944}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short) (-1965);
      objectArray0[1] = (Object) (short) (-1965);
      objectArray0[2] = (Object) (short) (-1965);
      objectArray0[3] = (Object) (short) (-1965);
      objectArray0[4] = (Object) (short) (-1965);
      objectArray0[5] = (Object) (short) (-1965);
      objectArray0[6] = (Object) (short) (-1965);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "B");
      assertEquals(7, objectArray0.length);
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2617.4087554;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) (short)944;
      doubleArray0[3] = (-2137.4169921875);
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1548.38027585895, 2024.89718964);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2617.4087554, 2.147483647E9, 944.0, (-2137.4169921875), 2.147483647E9}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 76.0;
      doubleArray0[1] = 112.0;
      doubleArray0[2] = (-3630.80066424836);
      doubleArray0[3] = 258.9125308629482;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      int[] intArray0 = new int[7];
      intArray0[5] = 2145603252;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 2145603252, 0}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-110);
      ArrayUtils.shift((float[]) null, 1178);
      byte byte0 = (byte)90;
      Byte byte1 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = (Byte) (byte) (-110);
      byteArray1[1] = byte2;
      byteArray1[2] = (Byte) (byte) (-110);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-26));
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)90, (byte) (-110)}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short(byte0);
      assertEquals((short)90, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)90}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Character character0 = Character.valueOf('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('K');
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'K');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(characterArray0);
      assertEquals(0, characterArray0.length);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'K';
      floatArray0[1] = (float) 'K';
      floatArray0[2] = 2646.0F;
      floatArray0[3] = (float) 'K';
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {75.0F, 75.0F, 2646.0F, 75.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'K';
      ArrayUtils.swap(intArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, 2);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {75}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)74, (-836));
      assertEquals(1, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "The String did not match either specified value");
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'p';
      charArray0[2] = 'O';
      charArray0[3] = '7';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character character0 = new Character('O');
      assertEquals('O', (char)character0);
      assertNotNull(character0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-1511);
      intArray0[1] = (int) (short) (-1511);
      intArray0[2] = (int) 'y';
      intArray0[3] = (int) (short) (-1511);
      intArray0[4] = (int) 'O';
      intArray0[5] = (int) (short) (-1511);
      intArray0[6] = (int) (short) (-1511);
      intArray0[7] = (int) (short) (-1511);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1511), (-1511), 121, (-1511), 79, (-1511), (-1511), (-1511)}, intArray0);
      
      ArrayUtils.shift(intArray0, (-1511));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1511), (-1511), (-1511), 121, (-1511), 79, (-1511), (-1511)}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertEquals(8, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-1511), (-1511), (-1511), 121, (-1511), 79, (-1511), (-1511)}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-403);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-403);
      shortArray0[6] = (short)2015;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      shortArray0[6] = (short) (-403);
      intArray0[2] = (int) (short)0;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(4, intArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-403), (short)0, (short)0, (short)0, (short) (-403), (short) (-403), (short)0}, shortArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short) (-403), (short)0, (short)0, (short)0, (short) (-403), (short) (-403), (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-23);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)59);
      assertEquals(6, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-119), (byte)59, (byte)81, (byte) (-23), (byte)59}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-119), (byte)59, (byte)81, (byte) (-23)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character character0 = new Character('z');
      assertEquals('z', (char)character0);
      assertNotNull(character0);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4901;
      doubleArray0[1] = (double) 'z';
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1060;
      shortArray0[1] = (short)0;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short)0;
      long[] longArray0 = new long[2];
      longArray0[0] = (-4079L);
      longArray0[1] = (long) 4901;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-4079L), 4901L}, longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-86));
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte)36}, byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte)36}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray2 = ArrayUtils.toPrimitive((Integer[]) null, (int) (byte)36);
      assertNull(intArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength("org.apache.commons.lang3.StringUtils");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = " is not a valid number.";
      stringArray0[1] = "java.lang.String";
      stringArray0[2] = ", Length: ";
      stringArray0[3] = "{}";
      stringArray0[4] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[5] = "LZZyGY]oI3K}/";
      stringArray0[6] = "B86L(";
      stringArray0[7] = "vwMobt+";
      String string0 = ArrayUtils.get(stringArray0, (-832), " is not a valid number.");
      assertEquals(" is not a valid number.", string0);
      assertEquals(8, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = ArrayUtils.toString((Object) " is not a valid number.");
      assertEquals(" is not a valid number.", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isEquals(double0, double0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean2);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean3 = ArrayUtils.contains(doubleArray0, 0.0);
      assertFalse(boolean3);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte)112;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 100, (int) (byte)112);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)112, (byte) (-117), (byte) (-117), (byte)112, (byte)112, (byte) (-117), (byte) (-117), (byte)112}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 547, 1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (byte)112, 0);
      assertEquals(0, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) double0, (-2573));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-128);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Character character0 = new Character(';');
      assertEquals(';', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'S');
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 3);
      assertEquals(3, int0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte) (-128);
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) 'S';
      floatArray0[3] = (float) 3;
      floatArray0[4] = (-1655.0F);
      floatArray0[5] = (float) (byte) (-128);
      floatArray0[6] = (-1398.8F);
      floatArray0[7] = (float) (byte) (-127);
      floatArray0[8] = (float) 3;
      int int1 = ArrayUtils.indexOf(floatArray0, (float) (byte) (-128), 340);
      assertEquals((-1), int1);
      assertEquals(9, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-128.0F), 3.0F, 83.0F, 3.0F, (-1655.0F), (-128.0F), (-1398.8F), (-127.0F), 3.0F}, floatArray0, 0.01F);
      
      char[] charArray1 = ArrayUtils.clone((char[]) null);
      assertNull(charArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(8, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)29;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)29;
      objectArray0[1] = (Object) (byte)29;
      objectArray0[2] = (Object) false;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      short[] shortArray0 = new short[17];
      shortArray0[0] = (short) (-1511);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) (short) (-1511);
      objectArray0[5] = (Object) false;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, objectArray1.length);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1572L);
      longArray1[1] = (long) (short) (-1511);
      longArray1[2] = (long) (short) (-1511);
      longArray1[3] = (long) (short) (-1511);
      longArray1[4] = (-1L);
      int int0 = ArrayUtils.lastIndexOf(longArray1, (-2151L), 0);
      assertEquals((-1), int0);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1572L), (-1511L), (-1511L), (-1511L), (-1L)}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertTrue(boolean0);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1572L), (-1511L), (-1511L), (-1511L), (-1L)}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertEquals(17, shortArray0.length);
      
      ArrayUtils.swap(booleanArray0, (int) (short) (-1511), (-1), (int) (short)0);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, false);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals(5, bitSet0.cardinality());
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertEquals(5, longArray2.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-1572L), (-1511L), (-1511L), (-1511L), (-1L)}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(17, shortArray0.length);
      assertEquals(17, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.shift(shortArray0, 2146314631, (int) (short) (-1511), 2146314631);
      assertEquals(17, shortArray0.length);
      
      Character character0 = Character.valueOf('v');
      assertEquals('v', (char)character0);
      assertNotNull(character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertEquals('v', object0);
      assertNotNull(object0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'k';
      int[] intArray0 = new int[5];
      intArray0[0] = 2146314631;
      intArray0[1] = (-476);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 2144517510;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146314631, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      ArrayUtils.swap(byteArray0, 1, 1, (-592));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-128)}, byteArray0);
      
      Double double0 = new Double((-409.2736269));
      assertEquals((-409.2736269), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-4410.61752));
      assertEquals((-4410.61752), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((-540.0));
      assertEquals((-540.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(458.82857965515);
      assertEquals(458.82857965515, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double3;
      Double double4 = new Double(1608.49992965242);
      assertEquals(1608.49992965242, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      
      doubleArray0[1] = double4;
      doubleArray0[2] = double1;
      doubleArray0[3] = double3;
      doubleArray0[4] = double0;
      doubleArray0[5] = double2;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1107.06F;
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '<');
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray1 = ArrayUtils.addFirst((float[]) null, 1107.06F);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1107.06F}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, 'l', (-2129129085));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)36;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)36}, byteArray0);
      assertArrayEquals(new byte[] {(byte)36}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Integer integer0 = new Integer((-2129129085));
      assertEquals((-2129129085), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-333));
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (-2129129085), (-1848));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1848);
      doubleArray0[1] = (double) 1107.06F;
      doubleArray0[2] = (double) '<';
      doubleArray0[3] = 0.0;
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1848.0), 1107.06005859375, 60.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)102;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)59;
      objectArray0[1] = (Object) (byte)59;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      ArrayUtils.shift(objectArray0, (int) (byte)102, (int) (byte)102, (int) (byte) (-36));
      assertEquals(3, objectArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-36);
      doubleArray0[1] = (double) 3136;
      doubleArray0[2] = (double) (byte) (-36);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte)59);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-36.0), 3136.0, (-36.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {59.0, (-36.0), 3136.0, (-36.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = '&';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {' ', '&'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)102;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {102.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1097, floatArray1, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1097, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[2] = (-73);
      intArray0[5] = (-73);
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ArrayUtils.shift(byteArray0, (int) (byte)100, (-93), (-93));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)100);
      assertEquals((short)100, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = new short[5];
      shortArray1[0] = (short)0;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      short[] shortArray3 = ArrayUtils.removeElements(shortArray2, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray3);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)3570;
      doubleArray0[4] = (double) (byte)100;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'G';
      floatArray0[1] = (float) (byte)100;
      floatArray0[2] = (float) (short)shortArray0[0];
      floatArray0[3] = (float) 'O';
      ArrayUtils.swap(floatArray0, (-773), 4, (int) (short)0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {71.0F, 100.0F, 100.0F, 79.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, 127);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {100.0F, 100.0F, 79.0F, 71.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3570.0, 0.0, 100.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-2137.417F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2417.4536F));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2137.417F), (-2137.417F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2137.417F), (-2137.417F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-2137.417F), (-2137.417F)}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3204.845F);
      doubleArray0[2] = (-3630.80066424836);
      doubleArray0[0] = (double) (-3204.845F);
      doubleArray0[4] = (double) (-2137.417F);
      doubleArray0[5] = 112.0;
      doubleArray0[6] = (-3630.80066424836);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3204.844970703125), 0.0, (-3630.80066424836), 0.0, (-2137.4169921875), 112.0, (-3630.80066424836)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2143);
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)1894);
      assertFalse(boolean1);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-2143)}, shortArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-127);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-72));
      assertEquals(3, int0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-3), (byte)45, (byte) (-72), (byte)121, (byte) (-127)}, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-127);
      longArray0[1] = (long) 3;
      longArray0[2] = (long) (-540);
      longArray0[3] = (long) (byte) (-88);
      longArray0[4] = (long) (byte) (-127);
      longArray0[5] = (long) (byte) (-3);
      longArray0[6] = (long) (short)1894;
      longArray0[7] = (long) (byte) (-3);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (int) (byte)121);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 121, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[2] = (int) (short) (-1511);
      intArray0[5] = (int) (short) (-1511);
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-1511), 0, 0, (-1511), (-1511)}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      char[] charArray1 = ArrayUtils.add(charArray0, 'c');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 609.6759F;
      floatArray0[1] = (float) 'c';
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (byte) (-1);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (short) (-1511);
      floatArray0[6] = (float) 109;
      floatArray0[7] = (float) 'c';
      ArrayUtils.swap(floatArray0, (-1), 0, (-1511));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {609.6759F, 99.0F, 0.0F, (-1.0F), 0.0F, (-1511.0F), 109.0F, 99.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, 0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {609.6759F, 99.0F, 0.0F, (-1.0F), 0.0F, (-1511.0F), 109.0F, 99.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '4';
      long[] longArray0 = new long[4];
      longArray0[0] = (-1955L);
      longArray0[1] = (long) (-1287);
      longArray0[2] = (long) '4';
      longArray0[3] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1955L), 0);
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1955L), (-1287L), 52L, 1L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-1955L);
      floatArray0[2] = (float) (-1287L);
      floatArray0[3] = (float) (-1955L);
      floatArray0[4] = (float) (-1955L);
      floatArray0[5] = (float) (-1955L);
      floatArray0[6] = (float) (-1287L);
      floatArray0[7] = (float) 1L;
      floatArray0[8] = (float) 52L;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 268);
      assertEquals((-1), int0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1955.0F), (-1287.0F), (-1955.0F), (-1955.0F), (-1955.0F), (-1287.0F), 1.0F, 52.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 268;
      intArray0[2] = (int) '4';
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (int) '4';
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertTrue(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 268, 52, 0, 0, 52}, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-17);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)74, (byte)31, (byte) (-17)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)74, (byte)31, (byte) (-17)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-74);
      shortArray0[1] = (short) (byte) (-128);
      shortArray0[2] = (short)48;
      ArrayUtils.shift(shortArray0, (-5), 29, (-174));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short) (-74), (short) (-128), (short)48}, shortArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)14;
      ArrayUtils.reverse(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)1, (byte)26, (byte)14, (byte) (-47), (byte)26, (byte)26, (byte)26, (byte)26}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) longArray0, (Object[]) longArray0);
      assertTrue(boolean1);
      assertEquals(0, longArray0.length);
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) null, 14);
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = 'K';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-174), (int) (byte) (-128));
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {' ', 'K'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-403);
      shortArray0[2] = (short)2015;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-73);
      shortArray0[6] = (short)2015;
      shortArray0[7] = (short) (-1352);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      shortArray0[6] = (short) (-73);
      intArray0[2] = (int) (short) (-73);
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1879.0F, (int) (short) (-1352));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 98L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-73);
      longArray0[3] = (long) (short) (-73);
      ArrayUtils.swap(longArray0, (-5289), (-1));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {98L, 0L, (-73L), (-73L)}, longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-73L);
      floatArray0[1] = (float) (-5289);
      floatArray0[2] = (float) (short) (-73);
      floatArray0[3] = (float) 98L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 105.0F);
      assertEquals(4, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-73.0F), (-5289.0F), (-73.0F), 98.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      ArrayUtils.shift(intArray0, (int) (short)0, (int) (short) (-1352), 2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-73), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 491L;
      longArray0[1] = 598L;
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 116.9901F, (-2454));
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)43);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = 3131L;
      longArray0[4] = (-4536L);
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertTrue(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 0L, 3131L, (-4536L)}, longArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 3131L;
      floatArray0[2] = (float) (-4536L);
      floatArray0[3] = (float) 0L;
      floatArray0[4] = 51.0F;
      floatArray0[5] = (float) 1L;
      floatArray0[6] = (float) (-4536L);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-140.8164F));
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 3131.0F, (-4536.0F), 0.0F, 51.0F, 1.0F, (-4536.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 3131.0F, (-4536.0F), 0.0F, 51.0F, 1.0F, (-4536.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 3131L;
      doubleArray0[2] = (double) (-4536L);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-4536L);
      doubleArray0[5] = (double) (-4536.0F);
      int int0 = ArrayUtils.indexOf(doubleArray0, 2455.000252, (-3966), 0.0);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3131.0, (-4536.0), 0.0, (-4536.0), (-4536.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 1.0F;
      objectArray0[2] = (Object) (-4536.0);
      objectArray0[3] = (Object) (-4536.0F);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "B|%KDuE:njW=spE|c");
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2074);
      shortArray0[1] = (short) (-2074);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)65;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)65, 1);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2074), (short) (-2074), (short)0, (short)65}, shortArray0);
      
      double[] doubleArray0 = new double[16];
      doubleArray0[1] = (double) (-2137.417F);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (-2137.417F);
      doubleArray0[2] = (double) 1;
      doubleArray0[5] = (double) (short)0;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short) (-2074);
      objectArray0[1] = (Object) (short) (-2074);
      objectArray0[2] = (Object) 0.0;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1988.18007711), (-5636));
      assertEquals((-1), int1);
      assertEquals(16, doubleArray0.length);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (short) (-2074);
      floatArray0[3] = (float) (short) (-2074);
      floatArray0[4] = (-302.64F);
      floatArray0[5] = (float) (-1);
      int int2 = ArrayUtils.lastIndexOf(floatArray0, 116.9901F, (int) (short)0);
      assertEquals((-1), int2);
      assertEquals(6, floatArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-2074.0F), (-2074.0F), (-302.64F), (-1.0F)}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)65);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)65;
      intArray0[1] = (-16);
      intArray0[2] = (int) (short)0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {65, (-16), 0}, intArray0);
      assertArrayEquals(new int[] {65, (-16), 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Double double0 = new Double((-162.56485199600456));
      assertEquals((-162.56485199600456), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isEquals(double0, double0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 4165;
      intArray0[1] = 97;
      intArray0[2] = (-1333);
      double[] doubleArray0 = new double[0];
      boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      short[] shortArray0 = new short[2];
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)112;
      byteArray0[8] = (byte)112;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short)0, (int) (byte)1);
      assertEquals(1, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)112, (byte)112, (byte)112, (byte)112, (byte)112, (byte)112, (byte)112}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (short)0;
      longArray1[1] = (long) 4165;
      longArray1[2] = (long) 4165;
      longArray1[3] = (long) (byte)1;
      longArray1[4] = (long) (byte)112;
      longArray1[5] = (long) (byte)112;
      longArray1[6] = (long) (byte)1;
      ArrayUtils.reverse(longArray1, 1, 0);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 4165L, 4165L, 1L, 112L, 112L, 1L}, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[17];
      boolean boolean0 = ArrayUtils.contains(intArray0, 665);
      assertFalse(boolean0);
      assertEquals(17, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-38L);
      longArray0[1] = (long) 0;
      longArray0[2] = (-1L);
      ArrayUtils.shift(longArray0, 0, 3613, (-620));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-38L), 0L}, longArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)9364;
      shortArray0[1] = (short)89;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)9364;
      shortArray0[4] = (short) (-3084);
      shortArray0[5] = (short) (-2091);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)9364, (short)89, (short)1, (short)9364, (short) (-3084), (short) (-2091)}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)9364, (short)89, (short)1, (short)9364, (short) (-3084), (short) (-2091)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = 'p';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'm');
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'p'}, charArray1);
      assertArrayEquals(new char[] {'m', 'p'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (int) (byte)0, (-53), (-53));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)100);
      assertEquals((short)100, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short)100, (short)short1);
      assertEquals(3, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[2] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte)0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)100, (short)100, (short)100}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) shortArray0[2]);
      assertEquals(100.0, (double)double1, 0.01);
      assertEquals(3, shortArray0.length);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 100.0, 1.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'B';
      charArray0[2] = '%';
      charArray0[3] = 'U';
      charArray0[4] = '+';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'a', 'B', '%', 'U', '+'}, charArray0);
      
      try { 
        Long.valueOf("Arguments cannot both be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Arguments cannot both be null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1107.06F;
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '<');
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, 'l', (-2129129085));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)36);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36}, byteArray0);
      assertArrayEquals(new byte[] {(byte)36}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-333));
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 970;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-101));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-101)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-101)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Character character0 = Character.valueOf('>');
      assertEquals('>', (char)character0);
      assertNotNull(character0);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-101)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-101);
      shortArray0[1] = (short) (byte) (-101);
      shortArray0[2] = (short) (byte) (-101);
      shortArray0[4] = (short) (byte) (-101);
      shortArray0[4] = (short) (byte) (-101);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-101), (short) (-101), (short) (-101), (short)0, (short) (-101)}, shortArray0);
      
      ArrayUtils.swap(byteArray0, (int) (short) (-101), 2402, 2145481646);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-101)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      int[] intArray0 = new int[4];
      intArray0[0] = 755;
      intArray0[1] = 755;
      intArray0[2] = 0;
      intArray0[3] = 0;
      ArrayUtils.swap(intArray0, 3, 1957, 755);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {755, 755, 0, 0}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-2137.417F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(false);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean3;
      booleanArray0[1] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = (-2331);
      intArray0[3] = 102;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2331);
      floatArray0[1] = (float) 102;
      floatArray0[2] = (float) 102;
      floatArray0[3] = (float) 102;
      floatArray0[4] = (float) (-2331);
      floatArray0[6] = (float) 102;
      floatArray0[7] = (float) 102;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2331.0F), 102.0F, 102.0F, 102.0F, (-2331.0F), 0.0F, 102.0F, 102.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2331.0F), 102.0F, 102.0F, 102.0F, (-2331.0F), 0.0F, 102.0F, 102.0F}, floatArray0, 0.01F);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift((double[]) null, 102, (-2331), 102);
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      short[] shortArray0 = new short[5];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[6] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.insert((int) (short)0, doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.swap((Object[]) null, 127, 127, (int) (short)0);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) 127;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 127;
      longArray0[7] = (long) (short)0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)0, (int) (short)0);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 127L, 2L, 127L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.swap(longArray0, (-2245), 71);
      assertEquals(8, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 127L, 2L, 127L, 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[7];
      ArrayUtils.shift(charArray0, (-835));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-0.008644982746291207);
      doubleArray0[2] = (double) 'h';
      doubleArray0[3] = (double) 'f';
      doubleArray0[4] = (double) (-835);
      doubleArray0[5] = (-0.008644982746291207);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-469.678840742903), (-499.98945));
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-0.008644982746291207), 0.0, 104.0, 102.0, (-835.0), (-0.008644982746291207)}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      byte[] byteArray0 = new byte[3];
      ArrayUtils.shift(byteArray0, 265);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'z');
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'z'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-0.008644982746291207), (-835.0), 102.0, 104.0, 0.0, (-0.008644982746291207)}, doubleArray0, 0.01);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf("^fv2KRm,Y");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 265;
      intArray0[1] = (int) 'h';
      intArray0[2] = (int) 'f';
      intArray0[3] = 265;
      intArray0[4] = (-835);
      intArray0[5] = (-835);
      intArray0[6] = 265;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {265, 104, 102, 265, (-835), (-835), 265}, intArray0);
      assertArrayEquals(new int[] {265, 104, 102, 265, (-835), (-835), 265}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = 3131L;
      longArray0[4] = (-4536L);
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertTrue(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 0L, 3131L, (-4536L)}, longArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 3131L;
      floatArray0[2] = (float) (-4536L);
      floatArray0[3] = (float) 0L;
      floatArray0[4] = 51.0F;
      ArrayUtils.reverse(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 51.0F, 0.0F, (-4536.0F), 3131.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[9];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(9, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-127), 633);
      assertEquals((-1), int0);
      assertEquals(12, byteArray0.length);
      
      Character character0 = Character.valueOf('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('b');
      assertEquals('b', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      char char0 = 'i';
      Character character2 = Character.valueOf('i');
      assertEquals('i', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character2;
      char[] charArray0 = Character.toChars((int) (byte)2);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u0002'}, charArray0);
      
      ArrayUtils.swap((Object[]) characterArray0, (int) (byte) (-127), (int) (byte)2, (int) (byte) (-127));
      assertEquals(1, characterArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) char0;
      doubleArray0[2] = 2191.8558253516358;
      doubleArray0[3] = (double) 633;
      doubleArray0[4] = (double) 'i';
      doubleArray0[5] = (double) 633;
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (byte)2, (int) (byte)2, 1.5);
      assertEquals((-1), int1);
      assertEquals(6, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {2.0, 105.0, 2191.8558253516358, 633.0, 105.0, 633.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1511);
      intArray0[4] = 0;
      intArray0[4] = 2173;
      intArray0[6] = 2;
      int int0 = ArrayUtils.indexOf(intArray0, 1455, 0);
      assertEquals((-1), int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1511), 0, 0, 0, 2173, 0, 2, 0}, intArray0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) (-1511);
      integerArray0[2] = (Integer) (-1511);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-1511), (-1511)}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 2;
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {2L, 0L}, longArray0);
      
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-1);
      intArray2[1] = 1932;
      intArray2[2] = (-1375);
      intArray2[3] = 1455;
      intArray2[4] = (-1375);
      intArray2[5] = (int) integerArray0[1];
      intArray2[6] = 0;
      int[] intArray3 = ArrayUtils.removeElements(intArray1, intArray2);
      assertEquals(3, integerArray0.length);
      assertEquals(1, intArray3.length);
      assertEquals(3, intArray1.length);
      assertEquals(7, intArray2.length);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {(-1511)}, intArray3);
      assertArrayEquals(new int[] {0, (-1511), (-1511)}, intArray1);
      assertArrayEquals(new int[] {(-1), 1932, (-1375), 1455, (-1375), (-1511), 0}, intArray2);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) 0L;
      longArray1[1] = (Long) 2L;
      longArray1[2] = (Long) 0L;
      longArray1[3] = (Long) 2L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-3353L));
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 2L, 0L, 2L}, longArray2);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 1705, (-513));
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1375);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 2;
      longArray0[7] = (long) (-1375);
      longArray0[8] = (long) 1705;
      ArrayUtils.reverse(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {1705L, (-1375L), 2L, (-1L), 2L, 2L, 2L, (-1L), (-1375L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[17];
      intArray0[1] = 101;
      intArray0[2] = (-4);
      intArray0[3] = (-1283);
      intArray0[5] = 1328;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1283), (-4));
      assertEquals(17, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.swap(intArray1, (-1), (int) (byte)118, (int) (byte)118);
      assertEquals(17, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 755;
      floatArray0[1] = 346.4067F;
      floatArray0[2] = (float) 101;
      floatArray0[3] = (float) (byte)118;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 101;
      floatArray0[6] = (float) 101;
      floatArray0[7] = (float) (-1883);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {755.0F, 346.4067F, 101.0F, 118.0F, 0.0F, 101.0F, 101.0F, (-1883.0F)}, floatArray0, 0.01F);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-670.3156F));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'o';
      ArrayUtils.swap(intArray0, (-1294), 1470, 98);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {111.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)102;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)3191;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short)102, (short)1, (short)3191}, shortArray0);
      assertArrayEquals(new short[] {(short)102, (short)1, (short)3191}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Short short0 = new Short((short) (-414));
      assertEquals((short) (-414), (short)short0);
      assertNotNull(short0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) short0, 98);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      ArrayUtils.reverse((long[]) null, 68, (-4479));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1399;
      doubleArray0[1] = (double) (-955L);
      doubleArray0[2] = (-2498.3597);
      doubleArray0[3] = (double) (byte)9;
      doubleArray0[4] = (double) (byte)9;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1223.34);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1399.0, (-955.0), (-2498.3597), 9.0, 9.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1399.0, (-955.0), (-2498.3597), 9.0, 9.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 1399, (int) (byte)9, (int) (byte)9);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)9;
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {9.0}, doubleArray0, 0.01);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'o';
      charArray1[1] = 'w';
      charArray1[2] = '6';
      charArray1[3] = 'W';
      charArray1[4] = '(';
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, '');
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'o', 'w', '6', 'W', '('}, charArray1);
      assertArrayEquals(new char[] {'o', 'w', '6', 'W', '('}, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Character character0 = Character.valueOf('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) 't';
      floatArray0[2] = (float) (-4184);
      floatArray0[4] = (float) (-4184);
      floatArray0[5] = (float) 't';
      floatArray0[6] = (float) (-4184);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-4184));
      assertEquals(6, int0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 116.0F, (-4184.0F), 0.0F, (-4184.0F), 116.0F, (-4184.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[0] = 't';
      boolean boolean0 = ArrayUtils.contains(charArray0, '<');
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'t', '\u0000'}, charArray0);
      
      ArrayUtils.reverse(charArray0, (-4184), 6);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 't'}, charArray0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (-4184));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-73));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1511);
      ArrayUtils.reverse(intArray0, (int) (short) (-1511), (-2820));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1511)}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-55);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)2, (byte)78, (byte)36, (byte) (-30), (byte) (-55)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)2, (byte)78, (byte)36, (byte) (-30), (byte) (-55)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      int int0 = 1;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte) (-51);
      objectArray0[1] = (Object) boolean0;
      Integer integer0 = new Integer((-2820));
      assertEquals((-2820), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray1, (Object) boolean1);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0, (-864), (-864));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[1] = 'p';
      charArray0[2] = '}';
      charArray0[3] = '~';
      charArray0[4] = 'a';
      charArray0[5] = 'U';
      charArray0[6] = 'z';
      charArray0[7] = ']';
      charArray0[8] = 'X';
      ArrayUtils.swap(charArray0, (-864), (int) (byte)9, 2758);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'@', 'p', '}', '~', 'a', 'U', 'z', ']', 'X'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2483L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      int[] intArray0 = new int[7];
      intArray0[0] = (-2819);
      intArray0[1] = 12;
      intArray0[2] = (int) 'F';
      intArray0[3] = (-2819);
      intArray0[4] = (int) 'F';
      intArray0[5] = (int) 'F';
      intArray0[6] = (int) 'F';
      ArrayUtils.reverse(intArray0, (-1), 722);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {70, 70, 70, (-2819), 70, 12, (-2819)}, intArray0);
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 76.0;
      doubleArray0[1] = 112.0;
      doubleArray0[2] = (-3630.80066424836);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-4228);
      floatArray0[1] = (float) (-4228);
      floatArray0[2] = (float) (-4228);
      floatArray0[3] = (float) (-4228);
      floatArray0[4] = (float) (-4228);
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) (-4228);
      ArrayUtils.shift(floatArray0, (-4228));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-4228.0F), (-4228.0F), (-4228.0F), (-4228.0F), (-4228.0F), 1.0F, (-4228.0F)}, floatArray0, 0.01F);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)90;
      Byte byte1 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-26));
      assertEquals((byte) (-26), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)90, (byte)90, (byte) (-26)}, byteArray1);
      
      Random.setNextRandom(1330);
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)1455);
      assertEquals((short)1455, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((byte)90);
      assertEquals((short)90, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-2759));
      assertEquals((short) (-2759), (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1006, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1006, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("J:M!av_785Gd,ck8-");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[8];
      booleanArray0[0] = boolean0;
      Boolean boolean2 = Boolean.valueOf("J:M!av_785Gd,ck8-");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean0;
      booleanArray0[7] = boolean1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) 761, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 761, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4643.0);
      doubleArray0[1] = (-4643.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-4643.0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-4643.0), (-4643.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Character character0 = Character.valueOf(':');
      assertEquals(':', (char)character0);
      assertNotNull(character0);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-101);
      shortArray0[1] = (short) (byte) (-101);
      shortArray0[2] = (short)128;
      shortArray0[3] = (short) (byte) (-101);
      shortArray0[4] = (short) (byte) (-101);
      shortArray0[5] = (short) (byte) (-101);
      shortArray0[6] = (short) (byte)124;
      shortArray0[7] = (short) (byte)124;
      shortArray0[8] = (short) (byte)124;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-101), (short) (-101), (short)128, (short) (-101), (short) (-101), (short) (-101), (short)124, (short)124, (short)124}, shortArray0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = Integer.valueOf((int) (short) (-101));
      assertEquals((-101), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short) (-101));
      assertEquals((-101), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((short)128);
      assertEquals(128, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((short)128);
      assertEquals(128, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2392));
      assertEquals((-2392), (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1799));
      assertEquals((-1799), (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(6, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 1705, (-513));
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1375);
      longArray0[1] = (long) (-1);
      int[] intArray2 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray2);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, (-1L), (-1375L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 851.3628172468533;
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-854.44719217671);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1303.0095991, 38);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {851.3628172468533, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      doubleArray0[5] = (double) (-1);
      intArray0[1] = 38;
      intArray0[2] = 38;
      intArray0[3] = 38;
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      ArrayUtils.shift(intArray0, 98);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, 38, 38, 38, 0, (-1)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {851.3628172468533, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), (-1.0)}, doubleArray0, 0.01);
      
      Random.setNextRandom((-1));
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, 0, (double) 0);
      assertEquals(9, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = Short.valueOf((short)2272);
      assertEquals((short)2272, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short short1 = (short)6;
      Short short2 = new Short((short)6);
      assertEquals((short)6, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short)6);
      assertEquals((short)6, (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2272, (short)6, (short)6}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short)2);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)2272, (short)6, (short)6}, shortArray1);
      assertArrayEquals(new short[] {(short)2272, (short)6, (short)6}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1303.0095991;
      doubleArray3[1] = 224.9065637795;
      doubleArray3[2] = (double) 38;
      doubleArray3[3] = 1303.0095991;
      doubleArray3[4] = (double) short1;
      doubleArray3[5] = (double) short1;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray2, doubleArray3);
      assertFalse(boolean1);
      assertEquals(9, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1303.0095991, 224.9065637795, 38.0, 1303.0095991, 6.0, 6.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-112);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-112));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-112)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((short) (-112));
      assertEquals((-112), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "The type must not be null";
      stringArray0[1] = "/U";
      stringArray0[2] = "OK!9}\"3WfO9";
      stringArray0[3] = "XUO[w<I&%`";
      stringArray0[4] = "java.lang.String";
      stringArray0[5] = "The type must not be null";
      stringArray0[6] = " in an array of ";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "The type must not be null");
      assertEquals(7, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)21;
      shortArray0[1] = (short)21;
      shortArray0[2] = (short)21;
      shortArray0[3] = (short) (-17618);
      shortArray0[4] = (short)21;
      shortArray0[5] = (short)21;
      shortArray0[6] = (short)21;
      shortArray0[7] = (short)21;
      shortArray0[8] = (short)21;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (int) (short)21);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)21, (short)21, (short)21, (short) (-17618), (short)21, (short)21, (short)21, (short)21, (short)21}, shortArray0);
      
      Class<Character[]> class0 = Character[].class;
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null, class0);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      char[] charArray1 = ArrayUtils.add(charArray0, 'Q');
      assertEquals(2, charArray1.length);
      assertEquals(1, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'W', 'Q'}, charArray1);
      assertArrayEquals(new char[] {'W'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)21;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)21);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {21}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)21, (short)21, (short)21, (short) (-17618), (short)21, (short)21, (short)21, (short)21, (short)21}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) characterArray0, (Object[]) characterArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(objectArray0);
      assertNotSame(characterArray0, objectArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-17618);
      longArray0[1] = (long) 'W';
      longArray0[2] = (long) 21;
      longArray0[3] = (long) (short)21;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (short)21;
      longArray0[6] = (long) (short)21;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (int) (short)21);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 21, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-854.44719217671);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1303.0095991, 38);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[2] = 38;
      intArray0[3] = 38;
      intArray0[4] = (-5289);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      ArrayUtils.swap(intArray0, 38, (-958));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 38, 38, (-5289), 0, (-1), (-1)}, intArray0);
      
      ArrayUtils.shift(intArray0, 0, (-1), 38);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 38, 38, (-5289), 0, (-1), (-1)}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-38);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)25);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-38)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-38)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray1, (byte) (-125));
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-38)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-38)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-38)}, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)25;
      doubleArray1[1] = (double) 1;
      ArrayUtils.shift(doubleArray1, (-1), Integer.MAX_VALUE, (int) (byte) (-38));
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {25.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1511);
      intArray0[2] = 1399;
      intArray0[4] = 1399;
      intArray0[4] = 2173;
      intArray0[5] = (-1375);
      intArray0[6] = 2;
      int int0 = ArrayUtils.indexOf(intArray0, 1455, 0);
      assertEquals((-1), int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1511), 0, 1399, 0, 2173, (-1375), 2, 0}, intArray0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-1375);
      integerArray0[1] = (Integer) (-1511);
      integerArray0[2] = (Integer) (-1511);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1375), (-1511), (-1511)}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 2;
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {2L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 51;
      long[] longArray0 = new long[5];
      longArray0[3] = (long) 51;
      longArray0[4] = (long) 51;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-1086));
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 51L, 51L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)51);
      assertEquals((-1), int1);
      assertEquals(0, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)27);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = ')';
      ArrayUtils.shift(charArray0, (-1));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {')', 'Y'}, charArray0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      int int2 = ArrayUtils.lastIndexOf((short[]) null, (short) (byte)51);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, (-1));
      assertFalse(boolean1);
      assertEquals(8, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 51, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      Long long0 = new Long(51L);
      assertEquals(51L, (long)long0);
      assertNotNull(long0);
      
      MutableInt mutableInt0 = new MutableInt(long0);
      assertNotNull(mutableInt0);
      assertEquals(51, (int)mutableInt0.toInteger());
      assertEquals((byte)51, mutableInt0.byteValue());
      assertEquals(51, (int)mutableInt0.getValue());
      assertEquals(51.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(51.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(51L, mutableInt0.longValue());
      assertEquals(51, mutableInt0.intValue());
      assertEquals("51", mutableInt0.toString());
      assertEquals((short)51, mutableInt0.shortValue());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt[] mutableIntArray1 = ArrayUtils.subarray(mutableIntArray0, (-2181), Integer.MAX_VALUE);
      assertEquals(1, mutableIntArray0.length);
      assertEquals(1, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) (-2181);
      doubleArray0[4] = 1141.038385;
      doubleArray0[5] = (double) (-2181);
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      doubleArray0[7] = (double) Integer.MAX_VALUE;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2156.6121342375, (-2181));
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 2.147483647E9, 0.0, (-2181.0), 1141.038385, (-2181.0), 2.147483647E9, 2.147483647E9}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-2181);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (-2181);
      floatArray0[6] = (float) 266;
      floatArray0[7] = (float) 51L;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 2646.0F, Integer.MAX_VALUE);
      assertEquals((-1), int1);
      assertEquals(8, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {2.14748365E9F, (-1.0F), 0.0F, (-2181.0F), 0.0F, (-2181.0F), 266.0F, 51.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1511);
      intArray0[2] = 1399;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1511);
      floatArray0[1] = (float) (-1511);
      floatArray0[2] = (float) 1399;
      floatArray0[3] = (-2552.9517F);
      floatArray0[4] = (float) 171;
      floatArray0[5] = (float) (-1511);
      floatArray0[6] = (float) (-1511);
      floatArray0[7] = (-3482.793F);
      floatArray0[8] = (float) (-1511);
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 104.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1511.0F), (-1511.0F), 1399.0F, (-2552.9517F), 171.0F, (-1511.0F), (-1511.0F), (-3482.793F), (-1511.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {104.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      MockRandom mockRandom0 = new MockRandom((-1059L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'1'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      Long long0 = new Long(51L);
      assertEquals(51L, (long)long0);
      assertNotNull(long0);
      
      MutableInt mutableInt0 = new MutableInt(long0);
      assertNotNull(mutableInt0);
      assertEquals(51L, mutableInt0.longValue());
      assertEquals(51.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(51, mutableInt0.intValue());
      assertEquals((short)51, mutableInt0.shortValue());
      assertEquals((byte)51, mutableInt0.byteValue());
      assertEquals("51", mutableInt0.toString());
      assertEquals(51, (int)mutableInt0.getValue());
      assertEquals(51, (int)mutableInt0.toInteger());
      assertEquals(51.0F, mutableInt0.floatValue(), 0.01F);
      
      mutableIntArray0[0] = mutableInt0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      stringArray0[1] = "java.lang.Byte";
      stringArray0[2] = "(C%y'qQ";
      stringArray0[3] = "v4";
      stringArray0[4] = "The type must not be null";
      stringArray0[5] = "(C%y'qQ";
      stringArray0[6] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      stringArray0[7] = "The type must not be null";
      stringArray0[8] = "Mo<n7!";
      String string0 = ArrayUtils.get(stringArray0, 2);
      assertEquals("(C%y'qQ", string0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-99L);
      longArray0[4] = 1144L;
      longArray0[5] = (-99L);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-3213L), (-958));
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, (-99L), 0L, 0L, 1144L, (-99L)}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertTrue(boolean0);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-57);
      shortArray0[1] = (short) (byte) (-103);
      shortArray0[2] = (short) (byte) (-103);
      ArrayUtils.shift(shortArray0, (int) (short)27891);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-57), (short) (-103), (short) (-103)}, shortArray0);
      
      ArrayUtils.swap(booleanArray0, (-1), (-1), (-1652));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      ArrayUtils.swap(booleanArray0, (-1652), 1, (int) (short) (-103));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-103);
      intArray0[1] = (int) (byte) (-57);
      int int1 = ArrayUtils.indexOf(intArray0, 1310, 34);
      assertEquals((-1), int1);
      assertEquals(2, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {(-103), (-57)}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-57);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)9);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-57), (byte) (-103), (byte) (-103), (byte) (-57)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-57), (byte) (-103), (byte) (-103), (byte) (-57)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[3];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)9;
      byteArray2[1] = (byte) (-57);
      byteArray2[2] = (byte) (-103);
      byte[] byteArray3 = ArrayUtils.removeElements(byteArray2, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertEquals(1, byteArray3.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-57), (byte) (-103), (byte) (-103), (byte) (-57)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-57), (byte) (-103), (byte) (-103), (byte) (-57)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-57), (byte) (-103)}, byteArray2);
      assertArrayEquals(new byte[] {(byte)9}, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isEquals(double0, double0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray0 = new int[10];
      intArray0[0] = 4165;
      intArray0[1] = 97;
      intArray0[2] = 97;
      double[] doubleArray0 = new double[0];
      boolean boolean2 = ArrayUtils.contains(doubleArray0, 0.0);
      assertFalse(boolean2);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)3361;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)3361, (-2474));
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)3361}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-2933), (-1));
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)5, 6);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)1, (short)3361}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)96);
      assertEquals((byte)96, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)96);
      assertEquals((byte)96, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-120));
      assertEquals((byte) (-120), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte) (-120));
      assertEquals((byte) (-120), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)111);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)96, (byte)96, (byte) (-120), (byte) (-120)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0, (-864), (-864));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-864);
      floatArray0[1] = (float) (-864);
      floatArray0[2] = (float) (-864);
      floatArray0[3] = (float) (-864);
      floatArray0[4] = (float) (-864);
      floatArray0[5] = (float) (-864);
      floatArray0[6] = (float) (-864);
      floatArray0[7] = (float) (-864);
      Integer integer0 = new Integer((-864));
      assertEquals((-864), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-864);
      Short short0 = new Short((short)1137);
      assertEquals((short)1137, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)1137);
      assertEquals((short)1137, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-25));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-73));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      Map<Object, Object> map0 = ArrayUtils.toMap(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(map0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)74;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-115);
      byteArray0[8] = (byte) (-39);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)97);
      assertEquals((-1), int0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-89), (byte) (-101), (byte)74, (byte)0, (byte) (-64), (byte)2, (byte) (-115), (byte) (-39)}, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) (-73);
      floatArray0[2] = (float) (byte) (-89);
      ArrayUtils.shift(floatArray0, (-599));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-89.0F), 0.0F, (-73.0F)}, floatArray0, 0.01F);
      
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1511), (short) (-1511)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 51;
      long[] longArray0 = new long[5];
      longArray0[3] = (long) 51;
      longArray0[4] = (long) 51;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-1086));
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 51L, 51L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)51);
      assertEquals((-1), int1);
      assertEquals(0, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)27);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = ')';
      ArrayUtils.shift(charArray0, (-1));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {')', 'Y'}, charArray0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
      assertEquals(4, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L));
      assertEquals(5, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 51L, 51L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-35.5F);
      floatArray0[1] = (-1427.2706F);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1427.2706F);
      doubleArray0[1] = (double) (-35.5F);
      doubleArray0[2] = (double) (-35.5F);
      doubleArray0[3] = 2223.284752829376;
      doubleArray0[5] = (double) (-35.5F);
      doubleArray0[6] = (double) (-1427.2706F);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1427.2706298828125), (-35.5), (-35.5), 2223.284752829376, 0.0, (-35.5), (-1427.2706298828125)}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[2];
      short short0 = (short)97;
      Short short1 = new Short((short)97);
      assertEquals((short)97, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertEquals((short)97, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)97, (short)97}, shortArray1);
      
      Long long0 = new Long(1581L);
      assertEquals(1581L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(short0);
      assertEquals(97L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = new Long(short0);
      assertEquals(97L, (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2523.0372369), (-1.0));
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1427.2706298828125), (-35.5), (-35.5), 2223.284752829376, 0.0, (-35.5), (-1427.2706298828125)}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.reverse(doubleArray0, (int) (short)97, (-276));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1427.2706298828125), (-35.5), (-35.5), 2223.284752829376, 0.0, (-35.5), (-1427.2706298828125)}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, short0);
      assertEquals(2, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)97, (short)97}, shortArray1);
      assertArrayEquals(new short[] {(short)97}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) shortArray0, (Object) short1);
      assertTrue(boolean1);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(short1.equals((Object)short2));
      assertTrue(short1.equals((Object)short0));
      
      ArrayUtils.shift(doubleArray0, (int) short0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-35.5), (-35.5), 2223.284752829376, 0.0, (-35.5), (-1427.2706298828125), (-1427.2706298828125)}, doubleArray0, 0.01);
      
      boolean boolean2 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean2);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new float[] {(-35.5F), (-1427.2706F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[2] = (int) (short) (-1511);
      intArray0[5] = (int) (short) (-1511);
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-1511), 0, 0, (-1511), (-1511)}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      char[] charArray1 = ArrayUtils.add(charArray0, 'c');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)18;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)122);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)18, (byte)0, (byte)0}, byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertSame(booleanArray2, booleanArray1);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray1, charArray0);
      assertEquals(1, charArray2.length);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'c'}, charArray2);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) stringArray0, (Object) double0, 0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = 0L;
      longArray0[2] = (-82L);
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-82L), 0L, 0L, 0L}, longArray0);
      
      ArrayUtils.reverse((boolean[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) (-82L);
      longArray1[1] = (Long) (-82L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-82L), (-82L)}, longArray2);
      assertNotSame(longArray2, longArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1336;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)88;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)88, (int) (short)2);
      assertEquals(3, int1);
      assertEquals(4, shortArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short)1336, (short)2, (short)0, (short)88}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2925.349F;
      floatArray0[1] = (-1478.1578F);
      floatArray0[2] = 2026.55F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1572.1396F);
      floatArray0[5] = (-64.076F);
      floatArray0[6] = 1003.0F;
      floatArray0[7] = 200.42648F;
      floatArray0[8] = 3723.9866F;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {2925.349F, (-1478.1578F), 2026.55F, 0.0F, (-1572.1396F), (-64.076F), 1003.0F, 200.42648F, 3723.9866F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2925.349F, (-1478.1578F), 2026.55F, 0.0F, (-1572.1396F), (-64.076F), 1003.0F, 200.42648F, 3723.9866F}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 2925.349F;
      objectArray0[1] = (Object) (-64.076F);
      int[] intArray0 = new int[7];
      intArray0[0] = (-277);
      intArray0[1] = (-4065);
      intArray0[2] = 2365;
      intArray0[3] = 2314;
      intArray0[4] = 2144973284;
      intArray0[5] = (-2675);
      intArray0[6] = (-3014);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2144973284, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[7] = 2925.349F;
      floatArray0[1] = (-1478.1578F);
      floatArray0[2] = 2026.55F;
      floatArray0[3] = (-1.8025594F);
      floatArray0[4] = (-1572.1396F);
      floatArray0[5] = (-64.076F);
      floatArray0[6] = 1003.0F;
      floatArray0[7] = 200.42648F;
      floatArray0[8] = 3723.9866F;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, (-1478.1578F), 2026.55F, (-1.8025594F), (-1572.1396F), (-64.076F), 1003.0F, 200.42648F, 3723.9866F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1478.1578F), 2026.55F, (-1.8025594F), (-1572.1396F), (-64.076F), 1003.0F, 200.42648F, 3723.9866F}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) (-64.076F);
      int[] intArray0 = new int[7];
      intArray0[0] = (-277);
      intArray0[1] = (-4065);
      intArray0[2] = 2365;
      intArray0[3] = 2314;
      intArray0[4] = 2144973284;
      intArray0[5] = (-2675);
      intArray0[6] = (-3014);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2144973284, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[9];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(9, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-127), 633);
      assertEquals((-1), int0);
      assertEquals(12, byteArray0.length);
      
      Character character0 = Character.valueOf('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('b');
      assertEquals('b', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('i');
      assertEquals('i', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character2;
      char[] charArray0 = Character.toChars((int) (byte)2);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u0002'}, charArray0);
      
      ArrayUtils.swap((Object[]) characterArray0, (int) (byte) (-127), (int) (byte)2, (int) (byte) (-127));
      assertEquals(1, characterArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) mutableIntArray0);
      assertEquals(9, mutableIntArray0.length);
      assertEquals(9, objectArray0.length);
      assertFalse(mutableIntArray0.equals((Object)mutableIntArray1));
      assertNotNull(objectArray0);
      assertSame(mutableIntArray0, objectArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      
      Boolean[] booleanArray0 = ArrayUtils.clone((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[2] = (byte)52;
      ArrayUtils.swap(byteArray1, (int) (byte)52, (int) (byte)52, (int) (byte)0);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)52, (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Double double0 = new Double((-1640.5124219194633));
      assertEquals((-1640.5124219194633), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-2048.0));
      assertEquals((-2048.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(3435.48789155259);
      assertEquals(3435.48789155259, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)52;
      intArray0[1] = (int) (byte)52;
      intArray0[2] = 36;
      intArray0[3] = (int) (byte)52;
      intArray0[4] = (int) (byte)52;
      ArrayUtils.shift(intArray0, (int) (byte)52, 2147031386, (int) (byte)52);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {52, 52, 36, 52, 52}, intArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)52;
      objectArray0[1] = (Object) 52;
      objectArray0[2] = (Object) double1;
      objectArray0[3] = (Object) 52;
      MutableInt mutableInt0 = new MutableInt(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotNull(mutableInt0);
      assertEquals((-2048), (int)mutableInt0.toInteger());
      assertEquals((-2048L), mutableInt0.longValue());
      assertEquals((-2048), mutableInt0.intValue());
      assertEquals((short) (-2048), mutableInt0.shortValue());
      assertEquals((-2048.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2048.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((-2048), (int)mutableInt0.getValue());
      assertEquals("-2048", mutableInt0.toString());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      char[] charArray1 = ArrayUtils.add(charArray0, 'c');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)18;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)122);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)18, (byte)0, (byte)0}, byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertSame(booleanArray2, booleanArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) 'c';
      doubleArray0[2] = (double) (short) (-1511);
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (-2452.77);
      doubleArray0[5] = (double) (byte)18;
      doubleArray0[6] = (double) (byte)122;
      doubleArray0[7] = (double) (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short) (-1511), 122.0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0), 99.0, (-1511.0), 1.0, (-2452.77), 18.0, 122.0, 1.0}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      
      ArrayUtils.reverse((boolean[]) null, (int) (short) (-1511), (int) (byte)122);
      MockRandom mockRandom0 = new MockRandom((byte) (-1));
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)18, (byte)0, (byte)0, (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)15;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)256;
      shortArray0[3] = (short)18;
      shortArray0[4] = (short)12;
      shortArray0[5] = (short)1389;
      shortArray0[6] = (short)12;
      shortArray0[7] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)12);
      assertEquals(4, int0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)15, (short)7, (short)256, (short)18, (short)12, (short)1389, (short)12, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("r0(2*us,GY");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean1);
      assertFalse(boolean2);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("].9PVdni`C|s|P!b");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf(false);
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      int[] intArray0 = new int[0];
      Boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'Q');
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean6 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean6);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-1L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-6231);
      shortArray0[2] = (short)480;
      shortArray0[3] = (short)140;
      shortArray0[4] = (short)2861;
      shortArray0[5] = (short)127;
      shortArray0[6] = (short)69;
      shortArray0[7] = (short)184;
      ArrayUtils.shift(shortArray0, (int) (short) (-6231), (int) (short) (-6231), (-1));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-6231), (short)480, (short)140, (short)2861, (short)127, (short)69, (short)184}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = (-2331);
      intArray0[3] = 102;
      intArray0[4] = (-4641);
      intArray0[5] = 410;
      intArray0[6] = 0;
      intArray0[7] = 755;
      intArray0[8] = 0;
      ArrayUtils.swap(intArray0, 0, 0, (-1883));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-2331), 0, 102, (-4641), 410, 0, 755, 0}, intArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[15];
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean1);
      assertTrue(boolean2);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[3] = boolean2;
      Boolean boolean3 = new Boolean(false);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[6] = boolean1;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1652, 43);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean boolean4 = ArrayUtils.isEmpty((Object[]) booleanArray0);
      assertFalse(boolean4);
      assertEquals(15, booleanArray0.length);
      assertFalse(boolean4 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2145485372, 69);
      assertEquals((-1), int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-2331), 0, 102, (-4641), 410, 0, 755, 0}, intArray0);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-75);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)38, (byte)1, (byte) (-75)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)38, (byte)1, (byte) (-75)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)29;
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)29, (int) (byte)29);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 1144L;
      longArray1[1] = (long) (byte)29;
      longArray1[2] = (long) (byte)29;
      longArray1[3] = 0L;
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertFalse(boolean0);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1144L, 29L, 29L, 0L}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)29;
      shortArray0[1] = (short) (byte)29;
      ArrayUtils.shift(shortArray0, (int) (byte)29);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)29, (short)29}, shortArray0);
      
      ArrayUtils.swap(booleanArray0, 2105, 2147080443, 1073741824);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)29, (short)29}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      short[] shortArray0 = new short[1];
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[4] = (-73);
      intArray0[5] = (-73);
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, (-73), (-73), 0}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 421.057121261556;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2803.5469402453023, (int) (short)0);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {421.057121261556}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      char[] charArray1 = ArrayUtils.add(charArray0, 'c');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)18;
      shortArray0[0] = (short) (byte)122;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)18, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte)18);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {18.0, 421.057121261556}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {421.057121261556}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Character character0 = new Character('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-5903.1513792529295);
      doubleArray0[1] = (double) (-398.66F);
      doubleArray0[2] = (double) 't';
      doubleArray0[3] = 5275.906080671124;
      doubleArray0[4] = 1024.6564394;
      doubleArray0[5] = (double) 't';
      doubleArray0[6] = (double) (-398.66F);
      doubleArray0[7] = 1.0;
      doubleArray0[8] = (double) 't';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-5903.1513792529295));
      assertEquals(0, int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-5903.1513792529295), (-398.6600036621094), 116.0, 5275.906080671124, 1024.6564394, 116.0, (-398.6600036621094), 1.0, 116.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 2321.708781, (-1), 100.0);
      assertEquals((-1), int1);
      assertEquals(9, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-5903.1513792529295), (-398.6600036621094), 116.0, 5275.906080671124, 1024.6564394, 116.0, (-398.6600036621094), 1.0, 116.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-5903.1513792529295), 116.0, 5275.906080671124, 1024.6564394, 116.0, (-398.6600036621094), 1.0, 116.0, (-398.6600036621094)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) null, 0, 2);
      assertNull(objectArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 'f';
      charArray0[2] = '.';
      charArray0[3] = 'L';
      charArray0[4] = '<';
      charArray0[5] = 'd';
      charArray0[6] = 'o';
      charArray0[7] = '8';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-854.44719217671);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1303.0095991, 38);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      doubleArray0[5] = (double) (-1);
      intArray0[2] = 38;
      intArray0[3] = 38;
      intArray0[4] = (-5289);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      ArrayUtils.swap(intArray0, 38, (-958));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 38, 38, (-5289), (-1), (-1), (-1)}, intArray0);
      
      ArrayUtils.shift(intArray0, (-1), (-1), 38);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 38, 38, (-5289), (-1), (-1), (-1)}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 38, 38, (-5289), (-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-5289);
      floatArray0[1] = (float) 38;
      floatArray0[2] = (float) (-5289);
      floatArray0[3] = (float) (-5289);
      floatArray0[4] = (float) 38;
      int int1 = ArrayUtils.indexOf(floatArray0, (-5289.0F));
      assertEquals(0, int1);
      assertEquals(5, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-5289.0F), 38.0F, (-5289.0F), (-5289.0F), 38.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-2));
      assertEquals(0, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-5289);
      integerArray0[1] = (Integer) (-5289);
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, (Integer) (-5289));
      assertEquals(2, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 36;
      floatArray0[2] = (float) (-2557);
      floatArray0[3] = (float) (-2557);
      floatArray0[4] = (float) (-2557);
      ArrayUtils.swap(floatArray0, 120, (-2557), (-156));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 36.0F, (-2557.0F), (-2557.0F), (-2557.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, 36);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-2557.0F), 0.0F, 36.0F, (-2557.0F), (-2557.0F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 120;
      longArray0[1] = (long) '}';
      longArray0[2] = (long) '}';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-156));
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {120L, 125L, 125L}, longArray0);
      assertArrayEquals(new long[] {120L, 125L, 125L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Random.setNextRandom(110);
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 158, (-156));
      assertNull(doubleArray0);
      
      ArrayUtils.shift((double[]) null, 120, (-3165), 1078);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2557.0F);
      ArrayUtils.shuffle(objectArray0);
      assertEquals(1, objectArray0.length);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2557.0F), 0.0F, 36.0F, (-2557.0F), (-2557.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2557.0F), 0.0F, 36.0F, (-2557.0F), (-2557.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)58;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-2));
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-80), (byte) (-2), (byte)58}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-2), (byte)36, (byte) (-80), (byte) (-2), (byte)58}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-29738);
      shortArray0[1] = (short)1067;
      shortArray0[2] = (short)97;
      shortArray0[3] = (short)610;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)384;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)384);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-29738), (short)1067, (short)97, (short)610, (short)1, (short)384}, shortArray0);
      assertArrayEquals(new short[] {(short)384, (short) (-29738), (short)1067, (short)97, (short)610, (short)1, (short)384}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)610;
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) (short)384;
      longArray0[3] = (long) (short)97;
      longArray0[4] = (long) (short)610;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)97);
      assertEquals(3, int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {610L, 1L, 384L, 97L, 610L}, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 3;
      floatArray0[1] = 3365.0537F;
      floatArray0[2] = (float) 610L;
      floatArray0[3] = (float) 97L;
      floatArray0[4] = (float) 1L;
      floatArray0[5] = (float) 610L;
      floatArray0[6] = (float) (short)384;
      floatArray0[7] = (-1.0F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3.0F, 3365.0537F, 610.0F, 97.0F, 1.0F, 610.0F, 384.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {3.0F, 3365.0537F, 610.0F, 97.0F, 1.0F, 610.0F, 384.0F, (-1.0F)}, floatArray0, 0.01F);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 76.0;
      doubleArray0[1] = 112.0;
      doubleArray0[3] = 258.9125308629482;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)93);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Short short0 = new Short((byte)93);
      assertEquals((short)93, (short)short0);
      assertNotNull(short0);
      
      Long long0 = new Long((-542L));
      assertEquals((-542L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)93, 101);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 101;
      intArray0[2] = (-1);
      intArray0[3] = 101;
      intArray0[4] = 101;
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)93, 0);
      assertEquals((-1), int1);
      assertEquals(5, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {(-1), 101, (-1), 101, 101}, intArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 76.0;
      doubleArray0[1] = 112.0;
      doubleArray0[3] = 258.9125308629482;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)93);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Short short0 = new Short((byte)93);
      assertEquals((short)93, (short)short0);
      assertNotNull(short0);
      
      Long long0 = new Long((-542L));
      assertEquals((-542L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)93, 101);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) longArray0);
      assertFalse(boolean1);
      assertEquals(1, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 101;
      intArray0[2] = (-1);
      intArray0[3] = 70;
      intArray0[4] = 101;
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)93, 0);
      assertEquals((-1), int1);
      assertEquals(5, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {(-1), 101, (-1), 70, 101}, intArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isEquals(double0, double0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[2] = 4165;
      intArray0[1] = 97;
      intArray0[2] = (-1358);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1358));
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 97, (-1358)}, intArray0);
      assertArrayEquals(new int[] {(-1358), 0, 97, (-1358)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean2 = ArrayUtils.contains(doubleArray0, 0.0);
      assertFalse(boolean2);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)3361;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[15];
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 97;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) double0;
      objectArray0[4] = (Object) 97;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "+2ejT");
      assertEquals(15, stringArray0.length);
      assertEquals(15, objectArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (short)3361, (-1652.0));
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Float[] floatArray1 = new Float[0];
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      ArrayUtils.shift((boolean[]) null, (-1553), 1399, 206);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 76.0;
      doubleArray0[1] = 112.0;
      doubleArray0[3] = 258.9125308629482;
      doubleArray0[4] = 76.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)93);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Short short0 = new Short((byte)93);
      assertEquals((short)93, (short)short0);
      assertNotNull(short0);
      
      Long long0 = new Long((-542L));
      assertEquals((-542L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)93, 101);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) longArray0);
      assertFalse(boolean1);
      assertEquals(1, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)93;
      shortArray0[1] = (short) (byte)93;
      shortArray0[2] = (short) (byte)93;
      shortArray0[3] = (short) (byte)93;
      shortArray0[4] = (short) (byte)93;
      shortArray0[5] = (short) (byte)93;
      shortArray0[6] = (short) (byte)93;
      ArrayUtils.reverse(shortArray0, (-1), (int) (short)93);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)93, (short)93, (short)93, (short)93, (short)93, (short)93, (short)93}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-73));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      Map<Object, Object> map0 = ArrayUtils.toMap(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(map0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)74;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-115);
      byteArray0[8] = (byte) (-39);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)97);
      assertEquals((-1), int0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-89), (byte) (-101), (byte)74, (byte)0, (byte) (-64), (byte)2, (byte) (-115), (byte) (-39)}, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)10;
      floatArray0[1] = (float) (-73);
      floatArray0[2] = (float) (byte) (-89);
      ArrayUtils.shift(floatArray0, (-599));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-89.0F), 10.0F, (-73.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (byte) (-89));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[19];
      stringArray0[0] = "org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle";
      stringArray0[1] = "java.lang.Byte";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(19, stringArray0.length);
      assertEquals(19, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Character[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = ArrayUtils.insert(234, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)357;
      shortArray0[1] = (short)10;
      shortArray0[2] = (short)59;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-2464);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)7;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)7, (short)9);
      assertEquals(8, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)357, (short)10, (short)59, (short) (-1), (short) (-2464), (short)2, (short)7, (short)9}, shortArray1);
      assertArrayEquals(new short[] {(short)357, (short)10, (short)59, (short) (-1), (short) (-2464), (short)2, (short)7}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) 234);
      assertEquals(234.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-2336.8F));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {234.0F, 0.0F}, floatArray1, 0.01F);
      
      String[] stringArray2 = ArrayUtils.toArray(stringArray0);
      assertEquals(19, stringArray0.length);
      assertEquals(19, stringArray2.length);
      assertNotNull(stringArray2);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      
      int int0 = ArrayUtils.indexOf((char[]) null, '8', 2806);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      short[] shortArray0 = new short[16];
      shortArray0[0] = (short) (-1511);
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[2] = (-73);
      intArray0[5] = (-73);
      Float float0 = new Float((float) (short) (-1511));
      assertEquals((-1511.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)111, (byte)111, (byte)111}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-128);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertFalse(boolean0);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Character character0 = new Character('_');
      assertEquals('_', (char)character0);
      assertNotNull(character0);
      
      Long long0 = new Long((-157L));
      assertEquals((-157L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray2 = new Long[3];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = long0;
      longArray2[1] = long0;
      longArray2[2] = long0;
      Long[] longArray3 = ArrayUtils.nullToEmpty(longArray2);
      assertEquals(3, longArray2.length);
      assertEquals(3, longArray3.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray0));
      assertNotNull(longArray3);
      assertNotSame(longArray2, longArray0);
      assertSame(longArray2, longArray3);
      assertSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, 100.0);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-128), 2299);
      assertEquals(4, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-128), (byte)0, (byte)0}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 851.3628172468533;
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-854.44719217671);
      int[] intArray0 = new int[6];
      intArray0[0] = 755;
      intArray0[1] = 0;
      intArray0[2] = (-38);
      intArray0[3] = 0;
      intArray0[4] = (-217);
      intArray0[5] = 0;
      ArrayUtils.swap(intArray0, 2, (-38), 1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-38), 0, 755, 0, (-217), 0}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (int) (short)100);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte)56;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-68));
      assertEquals(8, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)59, (byte)102, (byte) (-68), (byte) (-73), (byte)69, (byte) (-48), (byte) (-2), (byte)56}, byteArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 174.09;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 15, 174.09);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 15;
      floatArray0[3] = (-926.3574F);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[2] = 15;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(3, int1);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1.0F), 3, 174.09);
      assertEquals(3, int2);
      assertEquals(4, doubleArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(floatArray0, (-3478), (-1), 3);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 15.0F, 0.0F, (-926.3574F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)56;
      ArrayUtils.reverse(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)56}, shortArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)122;
      byte[] byteArray1 = ArrayUtils.insert(3, byteArray0, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-37), (byte) (-61), (byte) (-3), (byte) (-1), (byte)122}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 174.09;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 15, 174.09);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 15;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (-926.3574F);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-926.3574F), (-1.0F), 15.0F, (-1.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 15;
      boolean boolean2 = ArrayUtils.contains(intArray0, 2);
      assertFalse(boolean2);
      assertEquals(3, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-1), (-1), 15}, intArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(3, int1);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 100.0, 3, 174.09);
      assertEquals(3, int2);
      assertEquals(4, doubleArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(floatArray0, (-3478), (-1), 3);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-926.3574F), (-1.0F), 15.0F, (-1.0F)}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)56;
      ArrayUtils.reverse(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)56}, shortArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)122;
      byte[] byteArray1 = ArrayUtils.insert(3, byteArray0, byteArray0);
      assertEquals(12, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-37), (byte) (-61), (byte) (-3), (byte) (-1), (byte)122}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-2137.417F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2417.4536F));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2137.417F), (-2137.417F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2137.417F), (-2137.417F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-2137.417F), (-2137.417F)}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-540);
      doubleArray0[1] = 112.0;
      doubleArray0[2] = (-3630.80066424836);
      doubleArray0[3] = (double) (-540);
      doubleArray0[4] = (double) (-2137.417F);
      doubleArray0[5] = 112.0;
      doubleArray0[6] = (-3630.80066424836);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-540.0), 112.0, (-3630.80066424836), (-540.0), (-2137.4169921875), 112.0, (-3630.80066424836)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2143);
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (-540);
      longArray0[2] = (long) (short) (-2143);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2143L), (int) (short)1894);
      assertEquals(2, int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, (-540L), (-2143L)}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)731, (int) (short) (-2143));
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-2143)}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-50));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-38);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-6));
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-36), (byte) (-41), (byte)102, (byte)101, (byte) (-6), (byte)63, (byte) (-38)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-36), (byte) (-41), (byte)102, (byte)101, (byte)63, (byte) (-38)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-38);
      doubleArray0[1] = (double) (byte)63;
      doubleArray0[2] = (double) (byte) (-41);
      doubleArray0[3] = (double) (byte) (-41);
      doubleArray0[4] = (double) (byte)63;
      doubleArray0[5] = (double) (byte) (-36);
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte) (-36), (int) (byte)101);
      assertEquals(1, int0);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-36), (byte) (-41), (byte)102, (byte)101, (byte) (-6), (byte)63, (byte) (-38)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-36), (byte) (-41), (byte)102, (byte)101, (byte)63, (byte) (-38)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)63;
      shortArray0[1] = (short) (byte) (-6);
      shortArray0[2] = (short) (byte) (-38);
      shortArray0[3] = (short) (byte) (-38);
      shortArray0[4] = (short) (byte) (-6);
      shortArray0[5] = (short) (byte) (-6);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 51;
      long[] longArray0 = new long[5];
      longArray0[3] = (long) 51;
      longArray0[4] = (long) 51;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-1086));
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 51L, 51L}, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = ')';
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 51;
      long[] longArray0 = new long[5];
      longArray0[3] = (long) 51;
      longArray0[4] = (long) 51;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-1086));
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 51L, 51L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)51);
      assertEquals((-1), int1);
      assertEquals(0, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)27);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = ')';
      ArrayUtils.shift(charArray0, (-1));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {')', 'Y'}, charArray0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '3', 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((double) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (-1));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(5357.0740927779);
      assertEquals(5357.074F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) (-1));
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) floatArray1);
      assertFalse(boolean2);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      
      float[] floatArray2 = new float[4];
      floatArray2[0] = (float) floatArray0[1];
      floatArray2[1] = (float) '3';
      floatArray2[2] = (float) floatArray0[3];
      floatArray2[3] = 33.04F;
      float[] floatArray3 = ArrayUtils.add(floatArray2, 0, Float.NaN);
      assertEquals(4, floatArray2.length);
      assertEquals(5, floatArray3.length);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {(-1.0F), 51.0F, (-1.0F), 33.04F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, (-1.0F), 51.0F, (-1.0F), 33.04F}, floatArray3, 0.01F);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-502);
      shortArray0[1] = (short)1282;
      shortArray0[2] = (short) (-65);
      shortArray0[3] = (short)781;
      shortArray0[4] = (short) (-2649);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-13643);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-13643));
      assertEquals(7, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-502), (short)1282, (short) (-65), (short)781, (short) (-2649), (short) (-1), (short) (-13643)}, shortArray0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = ArrayUtils.get(byteArray0, Integer.MAX_VALUE);
      assertEquals(0, byteArray0.length);
      assertNull(byte0);
      
      byte[] byteArray1 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)105, 1344);
      assertEquals((-1), int0);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean2 = new Boolean((String) null);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = (-6L);
      longArray0[2] = 3746L;
      ArrayUtils.shift(longArray0, 5);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-6L), 3746L, (-1L)}, longArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = (-1941);
      intArray0[4] = (-1580);
      intArray0[5] = 5;
      intArray0[6] = 5;
      intArray0[7] = 5;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(18, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {5, 5, 5, (-1941), (-1580), 5, 5, 5, 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 5;
      integerArray0[1] = (Integer) 5;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 5, 5);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-6L), 3746L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-970);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1, (short) (-970)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'l';
      charArray0[2] = 'W';
      charArray0[3] = ')';
      charArray0[4] = ',';
      charArray0[5] = ',';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Y', 'l', 'W', ')', ',', ','}, charArray0);
      assertArrayEquals(new char[] {'Y', 'l', 'W', ')', ',', ','}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 2348L;
      longArray0[1] = (long) 'l';
      char[] charArray2 = ArrayUtils.subarray(charArray1, 4, 4);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'Y', 'l', 'W', ')', ',', ','}, charArray0);
      assertArrayEquals(new char[] {'Y', 'l', 'W', ')', ',', ','}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 38;
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-1), 38);
      assertNull(intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (-605L);
      longArray0[2] = 223L;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 38;
      longArray0[6] = (long) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 1783, (-1L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1783, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.swap(byteArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Double double0 = new Double((-1640.5124219194633));
      assertEquals((-1640.5124219194633), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-2048.0));
      assertEquals((-2048.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(3435.48789155259);
      assertEquals(3435.48789155259, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double((byte) (-57));
      assertEquals((-57.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.shift(objectArray0, 1073741824);
      assertEquals(1, objectArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1073741824;
      longArray0[3] = (long) 1073741824;
      longArray0[2] = (long) 1073741824;
      longArray0[3] = (long) 1073741824;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1073741824L, 0L, 1073741824L, 1073741824L}, longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 120;
      intArray0[1] = 1073741824;
      intArray0[2] = 1073741824;
      intArray0[3] = 1073741824;
      intArray0[6] = 1073741824;
      intArray0[7] = 11;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {120, 1073741824, 1073741824, 1073741824, 0, 0, 1073741824, 11}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[2] = boolean1;
      booleanArray0[3] = booleanArray0[0];
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[4] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean1);
      assertTrue(boolean3);
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[5] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.toArray(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap((Object[]) booleanArray1, 120, 1072, 11);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = '}';
      ArrayUtils.shift(charArray0, (-1333), 110, (-1333));
      assertEquals(12, charArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 36;
      floatArray0[2] = (float) (-2557);
      floatArray0[3] = (float) (-2557);
      MockRandom mockRandom0 = new MockRandom(81L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(12, charArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2557.0F);
      doubleArray0[1] = (double) (-2557.0F);
      doubleArray0[2] = (double) 110;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1854.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2557.0), (-2557.0), 110.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1854.0, (-2557.0), (-2557.0), 110.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 81L;
      longArray0[1] = (long) 36;
      longArray0[2] = (long) '}';
      longArray0[3] = 81L;
      longArray0[4] = (long) '\u0000';
      longArray0[5] = 81L;
      longArray0[6] = (long) '}';
      longArray0[7] = (-64L);
      longArray0[8] = (long) '}';
      ArrayUtils.shift(longArray0, 2, 2, 51);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {81L, 36L, 125L, 81L, 0L, 81L, 125L, (-64L), 125L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 665;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      boolean boolean1 = ArrayUtils.contains(intArray0, 665);
      assertTrue(boolean1);
      assertEquals(6, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {2, 2, 665, 2, 2, 2}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2156.74);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2;
      longArray0[1] = 1310L;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 665;
      longArray0[4] = (long) 2;
      ArrayUtils.shift(longArray0, 0, 2, 2);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {2L, 1310L, (-1L), 665L, 2L}, longArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-3223);
      shortArray0[1] = (short)89;
      shortArray0[2] = (short) (-3084);
      shortArray0[3] = (short) (-2091);
      shortArray0[4] = (short)9364;
      shortArray0[5] = (short)89;
      shortArray0[6] = (short)365;
      shortArray0[7] = (short)1;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1));
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3223), (short)89, (short) (-3084), (short) (-2091), (short)9364, (short)89, (short)365, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-3223), (short)89, (short) (-3084), (short) (-2091), (short)9364, (short)89, (short)365, (short)1}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 295;
      intArray0[1] = 4587;
      intArray0[2] = 2487;
      intArray0[3] = 1072;
      intArray0[4] = 2147031386;
      intArray0[5] = 23;
      intArray0[6] = 521;
      intArray0[7] = (-411);
      intArray0[8] = 287;
      int int0 = ArrayUtils.indexOf(intArray0, 1072, 1716);
      assertEquals((-1), int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {295, 4587, 2487, 1072, 2147031386, 23, 521, (-411), 287}, intArray0);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = 287;
      intArray1[2] = (-411);
      intArray1[3] = 521;
      intArray1[4] = 287;
      intArray1[5] = 23;
      intArray1[6] = 23;
      int[] intArray2 = ArrayUtils.insert(1, intArray0, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(16, intArray2.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {295, 4587, 2487, 1072, 2147031386, 23, 521, (-411), 287}, intArray0);
      assertArrayEquals(new int[] {(-1), 287, (-411), 521, 287, 23, 23}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'K');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.swap(booleanArray0, (-1770), (-706), 2951);
      assertEquals(1, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      Character character0 = new Character('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('?');
      assertEquals('?', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('K');
      assertEquals('K', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      ArrayUtils.swap((Object[]) characterArray1, (-706), (-706));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1770);
      intArray0[1] = (int) 'K';
      intArray0[2] = 2951;
      intArray0[3] = 2951;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 5);
      assertEquals(4, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1770), 75, 2951, 2951}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)103;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-706));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -706, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'l';
      charArray0[2] = 'W';
      charArray0[3] = ')';
      charArray0[4] = ',';
      charArray0[5] = ',';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Y', 'l', 'W', ')', ',', ','}, charArray0);
      assertArrayEquals(new char[] {'Y', 'l', 'W', ')', ',', ','}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 2348L;
      longArray0[1] = (long) 'l';
      longArray0[2] = (long) 'Y';
      longArray0[3] = (long) ',';
      longArray0[4] = (long) ')';
      longArray0[5] = (long) 'W';
      longArray0[6] = (long) 'Y';
      longArray0[7] = (long) ',';
      longArray0[8] = (long) 'W';
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-267L), (-837));
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {2348L, 108L, 89L, 44L, 41L, 87L, 89L, 44L, 87L}, longArray0);
      
      int int1 = ArrayUtils.indexOf(charArray0, 'W');
      assertEquals(2, int1);
      assertEquals(6, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'Y', 'l', 'W', ')', ',', ','}, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Double double0 = new Double(522.8273);
      assertEquals(522.8273, (double)double0, 0.01);
      assertNotNull(double0);
      
      String string0 = ArrayUtils.toString((Object) double0);
      assertEquals("522.8273", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '4';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 52.0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {52.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)92;
      byteArray0[5] = (byte)0;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'f';
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {102}, intArray0);
      assertArrayEquals(new int[] {102}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, 6, (int) (byte)0, (-2242));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Character character0 = Character.valueOf('f');
      assertEquals('f', (char)character0);
      assertNotNull(character0);
      
      String string0 = ArrayUtils.toString((Object) character0);
      assertEquals("f", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) 'f';
      ArrayUtils.shift(longArray0, 102, 6, (-2242));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 102L}, longArray0);
      
      ArrayUtils.swap(doubleArray0, 102, Integer.MAX_VALUE, (-1410));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {52.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)2);
      assertNull(byteArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((byte)2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1599.0);
      assertEquals(1599.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1599.0);
      assertEquals(1599.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(2763.0);
      assertEquals(2763.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[3]);
      assertEquals(0.0, (double)double5, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[3]);
      assertEquals(0.0, (double)double6, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(1148.42182899);
      assertEquals(1148.42182899, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(0.0);
      assertEquals(0.0, (double)double8, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertEquals((double)double8, (double)double5, 0.01);
      assertNotNull(double8);
      
      doubleArray0[8] = double8;
      Double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 2763.0;
      doubleArray2[1] = (double) doubleArray0[7];
      doubleArray2[2] = (double) doubleArray0[2];
      doubleArray2[3] = 1599.0;
      doubleArray2[4] = (double) doubleArray0[7];
      int[] intArray0 = new int[9];
      intArray0[0] = 2144929248;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = (int) (byte)2;
      intArray0[5] = (int) (byte)2;
      intArray0[6] = (int) (byte)2;
      intArray0[7] = (int) (byte)2;
      intArray0[8] = (int) (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&Y|GZx X6";
      stringArray0[1] = "&Y|GZx X6";
      stringArray0[2] = "&Y|GZx X6";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "");
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-181L));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[1] = (-1);
      intArray0[2] = (-73);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-73);
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-73), (-1), (-1), (-73), (-1511)}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 421.057121261556;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 2802.351034865865, (int) (short) (-1511));
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {421.057121261556}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      char[] charArray1 = ArrayUtils.add(charArray0, 'c');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) stringArray1);
      assertFalse(boolean1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-1511), (int) (short) (-1511));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(shortArray1);
      assertTrue(boolean2);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray3 = new short[8];
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      
      shortArray3[0] = (short) (-1511);
      shortArray3[1] = (short) (-1511);
      shortArray3[2] = (short) (-1511);
      shortArray3[3] = (short) (-1511);
      shortArray3[4] = (short) (-1511);
      shortArray3[5] = (short) (-1511);
      shortArray3[6] = (short) (-1511);
      shortArray3[7] = (short) (-1511);
      short[] shortArray4 = ArrayUtils.add(shortArray3, (short) (-1511));
      assertEquals(9, shortArray4.length);
      assertEquals(8, shortArray3.length);
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray3));
      assertFalse(shortArray4.equals((Object)shortArray0));
      assertFalse(shortArray4.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertNotNull(shortArray4);
      assertArrayEquals(new short[] {(short) (-1511), (short) (-1511), (short) (-1511), (short) (-1511), (short) (-1511), (short) (-1511), (short) (-1511), (short) (-1511), (short) (-1511)}, shortArray4);
      assertArrayEquals(new short[] {(short) (-1511), (short) (-1511), (short) (-1511), (short) (-1511), (short) (-1511), (short) (-1511), (short) (-1511), (short) (-1511)}, shortArray3);
      assertNotSame(shortArray4, shortArray1);
      assertNotSame(shortArray4, shortArray3);
      assertNotSame(shortArray4, shortArray0);
      assertNotSame(shortArray4, shortArray2);
      assertNotSame(shortArray3, shortArray4);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte)29;
      ArrayUtils.shift(byteArray0, 4, (int) (byte)29, (int) (byte)29);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29}, byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29}, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)29;
      shortArray0[1] = (short) (byte)29;
      shortArray0[2] = (short) (byte)29;
      shortArray0[3] = (short) (byte)29;
      shortArray0[4] = (short) (byte)29;
      shortArray0[5] = (short) (byte)29;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short) (byte)29;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(16, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)29, (short)29, (short)29, (short)29, (short)29, (short)29, (short)2, (short)29}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(18, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29}, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)0;
      ArrayUtils.reverse((byte[]) null);
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)9;
      Short short0 = new Short((byte)9);
      assertEquals((short)9, (short)short0);
      assertNotNull(short0);
      
      short short1 = (short)64;
      Short short2 = new Short((short)64);
      assertEquals((short)64, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short[] shortArray1 = new Short[16];
      shortArray1[0] = short0;
      shortArray1[1] = short2;
      Short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) 0, (int) short1);
      assertEquals(16, shortArray1.length);
      assertEquals(16, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 51;
      long[] longArray0 = new long[5];
      longArray0[3] = (long) 51;
      longArray0[4] = (long) 51;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-1086));
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 51L, 51L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)51);
      assertEquals((-1), int1);
      assertEquals(0, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)27);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = ')';
      ArrayUtils.shift(charArray0, (-1));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {')', 'Y'}, charArray0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-67.0);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-67.0), (-1.0), (-1.0), (-1.0), (-67.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-67.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-52.0), (-854.44719217671));
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-67.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true}, booleanArray0));
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) null, 0, 2);
      assertNull(objectArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true}, booleanArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = ' ';
      charArray0[2] = ']';
      charArray0[3] = 'V';
      charArray0[4] = 'u';
      charArray0[5] = ';';
      charArray0[6] = 'I';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertEquals(14, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'%', ' ', ']', 'V', 'u', ';', 'I'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ":";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "R%xt+G&\"";
      stringArray0[4] = ":";
      stringArray0[5] = "Index: ";
      stringArray0[6] = "Index: ";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "org.apache.commons.lang3.builder.EqualsBuilder");
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (short)0);
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      ArrayUtils.swap(charArray0, (-1624), (-333), 1760);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'A', 'A'}, charArray0);
      
      ArrayUtils.swap((Object[]) stringArray1, (-333), 296);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(4515.307889018751);
      assertEquals(4515.307889018751, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(259.2170180649946);
      assertEquals(259.2170180649946, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1891.58);
      assertEquals(1891.58, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = Double.valueOf(259.2170180649946);
      assertEquals(259.2170180649946, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4515.307889018751, 259.2170180649946, 1891.58, 259.2170180649946}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 2173);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[2] = null;
      int[] intArray0 = new int[26];
      intArray0[0] = 2173;
      intArray0[1] = 2173;
      intArray0[2] = (-2542);
      intArray0[3] = 2173;
      intArray0[3] = 2173;
      intArray0[22] = (-2542);
      objectArray0[4] = (Object) (-2542);
      intArray0[7] = 2173;
      intArray0[8] = 2173;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2173, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 2173);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get(objectArray0, (-2542));
      assertEquals(6, objectArray0.length);
      assertNull(object1);
      
      objectArray0[1] = null;
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      objectArray0[2] = null;
      int[] intArray0 = new int[9];
      int int0 = 59;
      intArray0[0] = 59;
      intArray0[1] = 2173;
      intArray0[2] = (-2542);
      intArray0[3] = 2173;
      intArray0[4] = 2173;
      intArray0[5] = (-2542);
      intArray0[6] = (-2542);
      intArray0[7] = 2173;
      intArray0[8] = (-2542);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2173, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 36;
      floatArray0[2] = (float) (-2557);
      floatArray0[3] = (float) (-2557);
      floatArray0[4] = (float) (-2557);
      ArrayUtils.swap(floatArray0, 120, (-2557), (-156));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 36.0F, (-2557.0F), (-2557.0F), (-2557.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, 36);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-2557.0F), 0.0F, 36.0F, (-2557.0F), (-2557.0F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 120;
      longArray0[1] = (long) '}';
      longArray0[2] = (long) '}';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-156));
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {120L, 125L, 125L}, longArray0);
      assertArrayEquals(new long[] {120L, 125L, 125L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1511);
      intArray0[2] = 1399;
      intArray0[4] = 1399;
      intArray0[4] = 2173;
      intArray0[5] = (-1375);
      intArray0[6] = 2;
      int int0 = ArrayUtils.indexOf(intArray0, 1455, 0);
      assertEquals((-1), int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1511), 0, 1399, 0, 2173, (-1375), 2, 0}, intArray0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-1375);
      integerArray0[1] = (Integer) (-1511);
      integerArray0[2] = (Integer) (-1511);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1375), (-1511), (-1511)}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, true, (int) integerArray0[0]);
      assertEquals((-1), int1);
      assertEquals(3, integerArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short) (-1511);
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[2] = (-73);
      intArray0[5] = (-73);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isEquals(double0, double0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[2] = 4165;
      intArray0[1] = 97;
      intArray0[2] = (-1358);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1358));
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 97, (-1358)}, intArray0);
      assertArrayEquals(new int[] {(-1358), 0, 97, (-1358)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean2 = ArrayUtils.contains(doubleArray0, 0.0);
      assertFalse(boolean2);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)3361;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 97;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) double0;
      objectArray0[4] = (Object) 97;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "+2ejT");
      assertEquals(5, stringArray0.length);
      assertEquals(5, objectArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (short)3361, (-1652.0));
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Float[] floatArray1 = new Float[0];
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      ArrayUtils.shift((boolean[]) null, (-1553), 1399, 206);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isEquals(double0, double0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean2);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[2] = 4165;
      intArray0[1] = 97;
      intArray0[2] = (-1358);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1358));
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 97, (-1358)}, intArray0);
      assertArrayEquals(new int[] {(-1358), 0, 97, (-1358)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean3 = ArrayUtils.contains(doubleArray0, 0.0);
      assertFalse(boolean3);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)3361;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 97;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) double0;
      objectArray0[4] = (Object) 97;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "+2ejT");
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (short)3361, (-1652.0));
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Float[] floatArray1 = new Float[0];
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      ArrayUtils.shift((boolean[]) null, (-1553), 1399, 206);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1511);
      intArray0[2] = 1399;
      intArray0[4] = 1399;
      intArray0[4] = 2173;
      intArray0[5] = (-1375);
      intArray0[6] = 2;
      int int0 = ArrayUtils.indexOf(intArray0, 1399, 0);
      assertEquals(2, int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1511), 0, 1399, 0, 2173, (-1375), 2, 0}, intArray0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-1375);
      integerArray0[2] = (Integer) (-1511);
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = 1.5;
      ArrayUtils.shift((char[]) null, (-865), (int) (short)0, (-1333));
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 116;
      floatArray0[1] = (float) (-865);
      floatArray0[2] = (float) 116;
      floatArray0[3] = (float) 116;
      floatArray0[4] = (float) (-156);
      floatArray0[5] = (float) 110;
      floatArray0[6] = (float) (-2557);
      ArrayUtils.swap(floatArray0, 9, 87, (-865));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {116.0F, (-865.0F), 116.0F, 116.0F, (-156.0F), 110.0F, (-2557.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 116;
      ArrayUtils.shift(floatArray1, (-864));
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {116.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-5964), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5964, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isEquals(double0, double0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean2);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 4165;
      intArray0[1] = 97;
      intArray0[2] = (-1358);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1358));
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {4165, 97, (-1358)}, intArray0);
      assertArrayEquals(new int[] {(-1358), 4165, 97, (-1358)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean3 = ArrayUtils.contains(doubleArray0, 0.0);
      assertFalse(boolean3);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)3361;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)36, (-990));
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)6, (short)3361}, shortArray0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 97;
      objectArray0[2] = (Object) 4165;
      objectArray0[3] = (Object) double0;
      objectArray0[4] = (Object) 97;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "+2ejT");
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (short)3361, (-1652.0));
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)73;
      Byte byte3 = new Byte((byte)73);
      assertEquals((byte)73, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte2);
      assertEquals((byte)73, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte2 == byte0);
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte0 == byte2);
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte2);
      assertEquals((byte)73, (byte)byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte2 == byte0);
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte8);
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte0));
      assertFalse(byte0 == byte2);
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)123);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)73, (byte)73, (byte)2, (byte)1, (byte)73, (byte)1}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-4643.0);
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.swap(doubleArray0, 1125, 1115, 1072);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-4643.0)}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-34);
      Byte byte1 = new Byte((byte) (-34));
      assertEquals((byte) (-34), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-34), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byteArray0[2] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-43));
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-34), (byte) (-34), (byte) (-34)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ArrayUtils.shift(byteArray0, (int) (byte)100, (-53), (-53));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      Short short0 = new Short((byte)100);
      assertEquals((short)100, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      assertArrayEquals(new byte[] {(byte)100}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)100);
      assertEquals(100.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.5, 1.0}, doubleArray1, 0.01);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean1 = new Boolean("@&er !6D&8");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      boolean boolean3 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean3);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      boolean boolean4 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-53);
      floatArray0[1] = (float) (-53);
      floatArray0[2] = (float) (byte)100;
      floatArray0[3] = (float) (byte)100;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-53.0F), (-53.0F), 100.0F, 100.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-53.0F), (-53.0F), 100.0F, 100.0F, (-53.0F), (-53.0F), 100.0F, 100.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-4643.0);
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Character character0 = Character.valueOf(':');
      assertEquals(':', (char)character0);
      assertNotNull(character0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-101);
      shortArray0[1] = (short) (byte) (-101);
      shortArray0[2] = (short)128;
      shortArray0[3] = (short) (byte) (-101);
      shortArray0[4] = (short) (byte) (-101);
      shortArray0[5] = (short) (byte) (-101);
      shortArray0[7] = (short) (byte)124;
      shortArray0[8] = (short) (byte)124;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-101), (short) (-101), (short)128, (short) (-101), (short) (-101), (short) (-101), (short)0, (short)124, (short)124}, shortArray0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = Integer.valueOf((int) (short) (-101));
      assertEquals((-101), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short) (-101));
      assertEquals((-101), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)724;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)6);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, 2147056682);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      ArrayUtils.swap((float[]) null, 2118884851, 708);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)6;
      ArrayUtils.reverse(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {6L}, longArray0);
      
      Integer[] integerArray0 = new Integer[5];
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 851.3628172468533;
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1303.0095991, 38);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-854.44719217671), 851.3628172468533, (-854.44719217671), (-1.0), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      doubleArray0[5] = (double) (-1);
      intArray0[1] = 38;
      intArray0[2] = 38;
      intArray0[3] = 38;
      intArray0[4] = (-5289);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 38);
      assertEquals(0, int1);
      assertEquals(6, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, (-854.44719217671), 851.3628172468533, (-854.44719217671), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-1.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], 38);
      assertEquals(3, objectArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      int int2 = bitSet0.previousClearBit(1397);
      assertEquals(1397, int2);
      assertEquals(3, objectArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      objectArray0[2] = (Object) (-854.44719217671);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-942);
      shortArray0[1] = (short)34;
      shortArray0[2] = (short)2278;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-31787);
      shortArray0[5] = (short) (-4066);
      shortArray0[6] = (short)2;
      shortArray0[7] = (short) (-31787);
      shortArray0[8] = (short) (-599);
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-31787);
      shortArray1[1] = (short)2;
      shortArray1[2] = (short)2;
      shortArray1[3] = (short) (-942);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(boolean1);
      assertEquals(4, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-31787), (short)2, (short)2, (short) (-942)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-942), (short)34, (short)2278, (short)2, (short) (-31787), (short) (-4066), (short)2, (short) (-31787), (short) (-599)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Short short0 = new Short((short) (-2188));
      assertEquals((short) (-2188), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-2188));
      assertEquals((short) (-2188), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-56));
      assertEquals((short) (-56), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-2188);
      doubleArray0[1] = (double) (short) (-56);
      doubleArray0[2] = (double) (short) (-2188);
      doubleArray0[3] = (double) (short) (-2188);
      doubleArray0[4] = (double) (short) (-2188);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2141.805355));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2188.0), (-56.0), (-2188.0), (-2188.0), (-2188.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2188.0), (-56.0), (-2188.0), (-2188.0), (-2188.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)84;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)116, (-2593));
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte)84}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)116;
      byteArray1[1] = (byte)84;
      byteArray1[2] = (byte)84;
      byteArray1[3] = (byte)116;
      byteArray1[4] = (byte)84;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1155, byteArray1, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1155, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(1, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      Random.setNextRandom((-670));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-136);
      doubleArray0[2] = (double) (-136);
      ArrayUtils.shift(doubleArray0, (-136));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-136.0), (-136.0), 0.0}, doubleArray0, 0.01);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-136));
      assertEquals((-136L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(1703L);
      assertEquals(1703L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(306L);
      assertEquals(306L, (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 938.3512828702425);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-136.0), (-136.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-136.0), (-136.0), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-57);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-103), (-2017));
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)83, (byte) (-57)}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short)0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byte byte0 = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-7);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(byteArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 174.09;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 15, 174.09);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 15;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (-926.3574F);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-926.3574F), (-1.0F), 15.0F, (-1.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 15;
      boolean boolean2 = ArrayUtils.contains(intArray0, 2);
      assertFalse(boolean2);
      assertEquals(3, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-1), (-1), 15}, intArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(3, int1);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 100.0, 3, 174.09);
      assertEquals(3, int2);
      assertEquals(4, doubleArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(floatArray0, (-3478), (-1), 3);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-926.3574F), (-1.0F), 15.0F, (-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, (-442));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {15.0F, (-1.0F), (-1.0F), (-1.0F), (-926.3574F), (-1.0F)}, floatArray0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[2] = (byte) (-63);
      ArrayUtils.swap(byteArray1, (int) (byte) (-63), (int) (byte) (-63), (int) (byte)0);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-63), (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Double double0 = new Double((-1640.5124219194633));
      assertEquals((-1640.5124219194633), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = Double.valueOf((double) (byte) (-63));
      assertEquals((-63.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((byte) (-57));
      assertEquals((-57.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte) (-63));
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (java.util.Random) mockRandom0);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)63, (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte)101, (byte) (-63), (byte)91, (byte)48, (byte)122, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-403);
      shortArray0[5] = (short)2015;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-73);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)116);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)101}, byteArray0);
      assertArrayEquals(new byte[] {(byte)101}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)5, (int) (short)0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)101}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.valueOf("e5dqWkg(ssg");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("e5dqWkg(ssg");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("e5dqWkg(ssg");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf((String) null);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray1));
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2146657240);
      assertEquals(2146657240, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1086));
      assertEquals((-1086), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte)116);
      assertEquals(116, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2);
      assertEquals(2, (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = new Integer[4];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer3;
      integerArray1[1] = integer3;
      integerArray1[2] = integer0;
      Integer integer4 = Integer.getInteger("Q@dc /uNap,G> ");
      assertNull(integer4);
      
      integerArray1[3] = null;
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray0, integerArray1);
      assertEquals(2, integerArray2.length);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      Character character0 = Character.valueOf('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) character0, (-4184));
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-4184);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-4184);
      floatArray0[5] = (float) 't';
      floatArray0[6] = (float) (-4184);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertEquals(1, int1);
      assertEquals(7, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-4184.0F), (-1.0F), (-4184.0F), 116.0F, (-4184.0F)}, floatArray0, 0.01F);
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      
      long[] longArray3 = ArrayUtils.add(longArray2, 455L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertEquals(1, longArray3.length);
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {455L}, longArray3);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-4184.0F);
      doubleArray0[2] = (double) 116.0F;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-4184);
      int int2 = ArrayUtils.indexOf(doubleArray0, 1141.038385, 1);
      assertEquals((-1), int2);
      assertEquals(6, doubleArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new double[] {0.0, (-4184.0), 116.0, (-1.0), (-1.0), (-4184.0)}, doubleArray0, 0.01);
      
      int int3 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 266);
      assertEquals(1, int3);
      assertEquals(7, floatArray0.length);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-4184.0F), (-1.0F), (-4184.0F), 116.0F, (-4184.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-128);
      shortArray0[1] = (short) (byte) (-128);
      shortArray0[2] = (short)48;
      ArrayUtils.shift(shortArray0, (-5), 1, (-174));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-128), (short) (-128), (short)48}, shortArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)14;
      ArrayUtils.reverse(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)1, (byte) (-128), (byte)14, (byte) (-47), (byte)14, (byte)1, (byte)14, (byte)1}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) longArray0, (Object[]) longArray0);
      assertTrue(boolean1);
      assertEquals(0, longArray0.length);
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) null, 14);
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = 'K';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-174), (int) (byte) (-128));
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {' ', 'K'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-74);
      shortArray0[1] = (short) (byte) (-128);
      shortArray0[2] = (short)48;
      ArrayUtils.shift(shortArray0, (-5), 1, (-174));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-74), (short) (-128), (short)48}, shortArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)14;
      ArrayUtils.reverse(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)1, (byte)26, (byte)14, (byte) (-47), (byte)26, (byte)26, (byte)14, (byte)26}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) longArray0, (Object[]) longArray0);
      assertTrue(boolean1);
      assertEquals(0, longArray0.length);
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) null, 7);
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = 'K';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-174), (int) (byte) (-128));
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {' ', 'K'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {5}, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2502.69009586596);
      doubleArray0[1] = (double) 5;
      doubleArray0[4] = (double) 5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 5;
      ArrayUtils.swap(doubleArray0, 5, 24, 1663);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-2502.69009586596), 5.0, 0.0, 5.0, 5.0, 5.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-125);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)0);
      assertEquals(6, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)109, (byte) (-1), (byte) (-1), (byte)100, (byte)75, (byte) (-125)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)109, (byte)0, (byte) (-1), (byte) (-1), (byte)100, (byte)75, (byte)0, (byte) (-125)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2074);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)65;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = 4628.803625496;
      doubleArray0[4] = (double) (short) (-2074);
      doubleArray0[5] = (double) (short)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 478.5882, (int) (short) (-2074));
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 4628.803625496, (-2074.0), 0.0}, doubleArray0, 0.01);
      
      Long long0 = new Long((short) (-2074));
      assertEquals((-2074L), (long)long0);
      assertNotNull(long0);
      
      Random.setNextRandom((-1494));
      ArrayUtils.swap((float[]) null, 1405, 1, (int) (short)65);
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      ArrayUtils.swap(intArray0, (-958), 1498);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      ArrayUtils.shift(intArray0, (-1216), (-1494), (int) (short) (-2074));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int1 = ArrayUtils.indexOf((float[]) null, (float) (short)65);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 851.3628172468533;
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1303.0095991, 38);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-854.44719217671), 851.3628172468533, (-854.44719217671), (-1.0), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      doubleArray0[5] = (double) (-1);
      intArray0[1] = 38;
      intArray0[2] = 38;
      intArray0[3] = 38;
      intArray0[4] = (-5289);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 38);
      assertEquals(0, int1);
      assertEquals(6, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, (-854.44719217671), 851.3628172468533, (-854.44719217671), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-1.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], 38);
      assertEquals(3, objectArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      int int2 = bitSet0.previousClearBit(1397);
      assertEquals(1397, int2);
      assertEquals(3, objectArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      objectArray0[2] = (Object) (-854.44719217671);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-942);
      shortArray0[1] = (short)34;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-31787);
      shortArray0[5] = (short) (-4066);
      shortArray0[6] = (short)2;
      shortArray0[7] = (short) (-31787);
      shortArray0[8] = (short) (-599);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1);
      assertEquals(9, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-942), (short)34, (short)0, (short)2, (short) (-31787), (short) (-4066), (short)2, (short) (-31787), (short) (-599)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 851.3628172468533;
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1303.0095991, 38);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-854.44719217671), 851.3628172468533, (-854.44719217671), (-1.0), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      doubleArray0[5] = (double) (-1);
      intArray0[1] = 38;
      intArray0[2] = 38;
      intArray0[3] = 38;
      intArray0[4] = (-5289);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 38);
      assertEquals(0, int1);
      assertEquals(6, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, (-854.44719217671), 851.3628172468533, (-854.44719217671), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-1.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], 38);
      assertEquals(3, objectArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      int int2 = bitSet0.previousClearBit(1397);
      assertEquals(1397, int2);
      assertEquals(3, objectArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      objectArray0[2] = (Object) (-854.44719217671);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-942);
      shortArray0[1] = (short)34;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-31787);
      shortArray0[5] = (short) (-4066);
      shortArray0[6] = (short)2;
      shortArray0[7] = (short) (-31787);
      shortArray0[8] = (short) (-599);
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-31787);
      shortArray1[1] = (short)2;
      shortArray1[2] = (short)2;
      shortArray1[3] = (short) (-942);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(boolean1);
      assertEquals(4, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-31787), (short)2, (short)2, (short) (-942)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-942), (short)34, (short)0, (short)2, (short) (-31787), (short) (-4066), (short)2, (short) (-31787), (short) (-599)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      Character character0 = Character.valueOf('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-128);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Character character1 = new Character('_');
      assertEquals('_', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character(';');
      assertEquals(';', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = new Character(';');
      assertEquals(';', (char)character3);
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'R');
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-291));
      assertEquals((-1), int0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.removeElement((char[]) null, 'I');
      assertNull(charArray1);
      
      Boolean[] booleanArray1 = new Boolean[5];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-127);
      shortArray0[1] = (short)834;
      shortArray0[2] = (short) (byte) (-128);
      shortArray0[3] = (short) (byte) (-128);
      shortArray0[4] = (short) (byte) (-127);
      shortArray0[5] = (short) (byte) (-128);
      shortArray0[6] = (short) (byte) (-128);
      shortArray0[7] = (short) (byte) (-128);
      short[] shortArray1 = new short[9];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte) (-127);
      shortArray1[1] = (short)4194;
      shortArray1[2] = (short) (byte) (-127);
      shortArray1[3] = (short)834;
      shortArray1[4] = (short)834;
      shortArray1[5] = (short) (byte) (-127);
      shortArray1[6] = (short) (-19996);
      shortArray1[7] = (short) (byte) (-128);
      shortArray1[8] = (short) (byte) (-128);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(boolean1);
      assertEquals(9, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-127), (short)4194, (short) (-127), (short)834, (short)834, (short) (-127), (short) (-19996), (short) (-128), (short) (-128)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-127), (short)834, (short) (-128), (short) (-128), (short) (-127), (short) (-128), (short) (-128), (short) (-128)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = 0;
      intArray0[6] = 0;
      intArray0[5] = 0;
      intArray0[3] = 0;
      ArrayUtils.swap(intArray0, (-6151), (-128));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)97;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-115));
      assertEquals(0, int0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)97}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (byte)97;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-128);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      ArrayUtils.shift(floatArray0, (-4228));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 97.0F, 0.0F, (-128.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 665;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      boolean boolean1 = ArrayUtils.contains(intArray0, 665);
      assertTrue(boolean1);
      assertEquals(6, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {2, 2, 665, 2, 2, 2}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2156.74);
      doubleArray0[1] = (double) 2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3340.8985445764147);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2156.74), 2.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2963.26), 316, (double) 2);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-2156.74), 2.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(floatArray0, 1256, 2, 2);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 2;
      floatArray1[1] = (float) 2;
      floatArray1[2] = (float) 1256;
      floatArray1[3] = (float) 2;
      ArrayUtils.shift(floatArray1, 1256);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2.0F, 2.0F, 1256.0F, 2.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)82;
      ArrayUtils.shift(byteArray0, 2);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)116, (byte)82, (byte)87, (byte) (-54), (byte)5}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = '}';
      ArrayUtils.shift(charArray0, (-1333), 110, (-1333));
      assertEquals(12, charArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)122);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean2);
      assertFalse(boolean3);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf("/~*8FH3");
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.valueOf((boolean) boolean1);
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean4));
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean2);
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(boolean2.equals((Object)boolean5));
      assertFalse(boolean2.equals((Object)boolean6));
      assertTrue(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray1);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElements(charArray1, charArray0);
      assertEquals(12, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      Double double0 = new Double((-1750.7132872006));
      assertEquals((-1750.7132872006), (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) boolean1, 1);
      assertEquals(0, int0);
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean1.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean4));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[0] = (int) (short) (-1511);
      intArray0[5] = (int) (short) (-1511);
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-1511), (-1511)}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      char[] charArray1 = ArrayUtils.add(charArray0, 'c');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)18;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)122);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)18, (byte)0, (byte)0}, byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertSame(booleanArray2, booleanArray1);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray1, charArray0);
      assertEquals(1, charArray2.length);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'c'}, charArray2);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      
      Double double0 = new Double(3.608424314455875);
      assertEquals(3.608424314455875, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) stringArray0, (Object) double0, 0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(180.1547F);
      assertEquals(180.1547F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(3574.0);
      assertEquals(3574.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 180.1547F);
      assertEquals(180.1547F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3574.0F, 3574.0F, 180.1547F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, (-1.0F));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {3574.0F, 3574.0F, 180.1547F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 3574.0F, 3574.0F, 180.1547F}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 3596.7);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3596.7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'l';
      int int0 = ArrayUtils.indexOf(doubleArray0, (-693.7028), 2);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      Long long0 = new Long(2);
      assertEquals(2L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      Long[] longArray1 = ArrayUtils.add(longArray0, longArray0[0]);
      assertEquals(5, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Double[] doubleArray2 = new Double[3];
      Double double0 = new Double(0.1);
      assertEquals(0.1, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[0] = double0;
      Double double1 = new Double((-1053.13699));
      assertEquals((-1053.13699), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray2[1] = double1;
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray2[2] = double2;
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.1, (-1053.13699), 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'l', '\u0000'}, charArray0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray2, (Object) float2);
      assertEquals((-1), int1);
      assertEquals(3, doubleArray2.length);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2410.4514F));
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[3] = 'A';
      ArrayUtils.swap(charArray0, (-1), (-1), (-4864));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'A', 'A', '\u0000', 'A', '\u0000'}, charArray0);
      
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, 3);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'A', 'A', '\u0000', 'A', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'A', 'A', '\u0000', 'A', '\u0000', 'A', 'A', '\u0000', 'A', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'A', 'A', '\u0000', 'A', '\u0000'}, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1);
      assertEquals(5, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      short[] shortArray0 = new short[17];
      shortArray0[0] = (short) (-1511);
      boolean[] booleanArray0 = new boolean[14];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(14, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 38;
      doubleArray0[1] = (double) (short) (-1511);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) (-1511), 38);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {38.0, (-1511.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[1] = (-1);
      intArray0[2] = (-5289);
      intArray0[3] = (int) (short) (-1511);
      intArray0[4] = (int) (short) (-1511);
      intArray0[5] = 98;
      ArrayUtils.shift(intArray0, 102);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1511), (-1), (-5289), (-1511), (-1511), 98}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {38.0, (-1511.0)}, doubleArray0, 0.01);
      
      Random.setNextRandom((-40));
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-40), (double) (-5289));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -40, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-605);
      longArray0[3] = (long) (-605);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-605L), 0L, 0L, (-605L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Double double0 = new Double((-605));
      assertEquals((-605.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) (-605L));
      assertEquals((-605.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (-605));
      assertEquals((-605.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-2194.5F));
      assertEquals((-2194.5F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(700.76F);
      assertEquals(700.76F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(517.97F);
      assertEquals(517.97F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) floatArray0[1]);
      assertEquals((-605.0F), (float)float5, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = Float.valueOf((-11.403F));
      assertEquals((-11.403F), (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      Float float7 = new Float((double) 517.97F);
      assertEquals(517.97F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotNull(float7);
      
      floatArray0[7] = float7;
      Float float8 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float8, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotNull(float8);
      
      floatArray0[8] = float8;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0, (-864), (-864));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-864);
      floatArray0[1] = (float) (-864);
      floatArray0[2] = (float) (-864);
      floatArray0[3] = (float) (-864);
      floatArray0[4] = (float) (-864);
      floatArray0[5] = (float) (-864);
      floatArray0[6] = (float) (-864);
      floatArray0[7] = (float) (-864);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-864));
      assertEquals((-864), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-864);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-864), 3573);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-864L)}, longArray0);
      assertArrayEquals(new long[] {(-864L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) integerArray0[0], 50);
      assertEquals(1, integerArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertSame(integerArray0, integerArray1);
      
      Float[] floatArray1 = new Float[6];
      floatArray1[0] = (Float) (-864.0F);
      floatArray1[1] = (Float) (-864.0F);
      floatArray1[2] = (Float) (-864.0F);
      floatArray1[3] = (Float) (-864.0F);
      floatArray1[4] = (Float) (-864.0F);
      floatArray1[5] = (Float) (-864.0F);
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertNotNull(floatArray2);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2145603252;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2145603252}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)29;
      ArrayUtils.shift(byteArray0, (int) (byte) (-49), 2145603252, (int) (byte) (-110));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)57, (byte) (-49), (byte)0, (byte)29}, byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)57, (byte) (-49), (byte)0, (byte)29}, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)57;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte) (-49);
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)29;
      shortArray0[5] = (short) (byte)29;
      shortArray0[6] = (short) (byte) (-110);
      shortArray0[7] = (short) (byte) (-110);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)57, (short)0, (short) (-49), (short)0, (short)29, (short)29, (short) (-110), (short) (-110)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)57, (byte) (-49), (byte)0, (byte)29}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)57, (byte) (-49), (byte)0, (byte)29, (byte) (-110), (byte)57, (byte) (-49), (byte)0, (byte)29}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'S');
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "2MLeL<2ix+secmY";
      stringArray0[1] = "&`}VgLHt";
      stringArray0[2] = ", '";
      stringArray0[3] = "java.lang.String";
      stringArray0[4] = "java.lang.String";
      stringArray0[5] = "!HLw/";
      stringArray0[6] = "]jgbC4hN'";
      String[] stringArray1 = ArrayUtils.clone(stringArray0);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = ArrayUtils.get(booleanArray0, 0);
      assertFalse(boolean3);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = 'W';
      charArray0[2] = '`';
      charArray0[3] = '2';
      charArray0[4] = 'T';
      charArray0[5] = 'f';
      charArray0[6] = ',';
      charArray0[7] = '$';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'n');
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'', 'W', '`', '2', 'T', 'f', ',', '$'}, charArray1);
      assertArrayEquals(new char[] {'', 'W', '`', '2', 'T', 'f', ',', '$'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean[] booleanArray1 = new boolean[9];
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = (boolean) boolean0;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = (boolean) boolean1;
      booleanArray1[7] = (boolean) boolean0;
      booleanArray1[8] = (boolean) boolean1;
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false, 0);
      assertEquals((-1), int0);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'k';
      charArray0[2] = 'C';
      charArray0[3] = 'O';
      charArray0[4] = 'g';
      charArray0[6] = '#';
      charArray0[7] = '_';
      charArray0[8] = 'p';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'k', 'C', 'O', 'g', '\u0000', '#', '_', 'p'}, charArray0);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) '\u0000');
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'O';
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 79.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {79.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2147056682, (-1));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean1 = Boolean.valueOf("L");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf("l");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean((String) null);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean4);
      assertFalse(boolean5);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean(false);
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      booleanArray0[6] = boolean1;
      Boolean boolean7 = new Boolean((boolean) boolean4);
      assertFalse(boolean7);
      assertTrue(boolean4.equals((Object)boolean5));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean6));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean5));
      assertNotNull(boolean7);
      
      Boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, boolean1);
      assertEquals(9, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean6));
      assertTrue(boolean1.equals((Object)boolean7));
      assertTrue(boolean1.equals((Object)boolean4));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 2092L;
      longArray0[1] = (-3252L);
      longArray0[2] = (-2081L);
      longArray0[3] = 1638L;
      longArray0[4] = 1879L;
      longArray0[5] = 120L;
      longArray0[6] = (-2105L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 2147483647L);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2092L, (-3252L), (-2081L), 1638L, 1879L, 120L, (-2105L)}, longArray0);
      assertArrayEquals(new long[] {2147483647L, 2092L, (-3252L), (-2081L), 1638L, 1879L, 120L, (-2105L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = '8';
      charArray0[2] = '+';
      charArray0[3] = '^';
      charArray0[4] = 'a';
      charArray0[5] = 'I';
      charArray0[6] = '<';
      charArray0[7] = '-';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'2', '8', '+', '^', 'a', 'I', '<', '-'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = '_';
      charArray0[2] = 'C';
      charArray0[3] = 'O';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      charArray0[6] = '#';
      charArray0[7] = '_';
      charArray0[8] = 'p';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'(', '_', 'C', 'O', 'g', 'g', '#', '_', 'p'}, charArray0);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (-432L));
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-432L)}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'O';
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 79.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {79.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2147056682, (-1));
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean1 = Boolean.valueOf("L");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf("l");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean((String) null);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean4);
      assertFalse(boolean5);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean(false);
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean4));
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.FALSE;
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean0));
      assertNotNull(boolean7);
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = new Boolean((boolean) boolean4);
      assertFalse(boolean8);
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean7));
      assertTrue(boolean4.equals((Object)boolean7));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean5));
      assertTrue(boolean4.equals((Object)boolean6));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean8);
      
      booleanArray0[7] = boolean8;
      Boolean boolean9 = new Boolean((String) null);
      assertFalse(boolean9);
      assertTrue(boolean9.equals((Object)boolean1));
      assertTrue(boolean9.equals((Object)boolean2));
      assertTrue(boolean9.equals((Object)boolean6));
      assertTrue(boolean9.equals((Object)boolean8));
      assertTrue(boolean9.equals((Object)boolean5));
      assertTrue(boolean9.equals((Object)boolean3));
      assertTrue(boolean9.equals((Object)boolean4));
      assertTrue(boolean9.equals((Object)boolean7));
      assertTrue(boolean9.equals((Object)boolean0));
      assertNotNull(boolean9);
      
      Boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, boolean9);
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(boolean9.equals((Object)boolean1));
      assertTrue(boolean9.equals((Object)boolean2));
      assertTrue(boolean9.equals((Object)boolean6));
      assertTrue(boolean9.equals((Object)boolean8));
      assertTrue(boolean9.equals((Object)boolean5));
      assertTrue(boolean9.equals((Object)boolean3));
      assertTrue(boolean9.equals((Object)boolean4));
      assertTrue(boolean9.equals((Object)boolean7));
      assertTrue(boolean9.equals((Object)boolean0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1511);
      intArray0[2] = 1399;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 1399;
      objectArray0[1] = (Object) (-1511);
      objectArray0[2] = (Object) 1399;
      objectArray0[3] = (Object) 1399;
      objectArray0[4] = (Object) 1399;
      objectArray0[5] = (Object) 1399;
      objectArray0[6] = (Object) (-1511);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "java.lang.Byte");
      assertEquals(7, objectArray0.length);
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 1399, 782.43280904);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = stringArray0[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-833);
      ArrayUtils.shift(doubleArray0, 2144973284);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-833.0), 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2144973284;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-833));
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2.14497331E9F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '\"';
      ArrayUtils.reverse(charArray0, 2144973284, 598);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      Short short0 = new Short((short)1184);
      assertEquals((short)1184, (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1184;
      shortArray0[1] = (short)1184;
      shortArray0[2] = (short)1184;
      shortArray0[3] = (short)1184;
      shortArray0[4] = (short)1184;
      shortArray0[5] = (short)1184;
      shortArray0[6] = (short)1184;
      shortArray0[7] = (short)1184;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)1184, (short)1184, (short)1184, (short)1184, (short)1184, (short)1184, (short)1184, (short)1184}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray2.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)1184, (short)1184, (short)1184, (short)1184, (short)1184, (short)1184, (short)1184, (short)1184}, shortArray2);
      assertArrayEquals(new short[] {(short)1184, (short)1184, (short)1184, (short)1184, (short)1184, (short)1184, (short)1184, (short)1184}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'V', 2381);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-1073.1F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.14497331E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.14497331E9F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.reverse(doubleArray0, (int) (short)1184, (-3112));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-833.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[19];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(19, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = (float) (byte)2;
      floatArray0[3] = (float) (-156);
      floatArray0[4] = (float) (byte)2;
      floatArray0[5] = (float) 120;
      floatArray0[6] = (float) (byte)2;
      ArrayUtils.swap(floatArray0, 2, (-267), (int) (byte)2);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, (-156.0F), 2.0F, 2.0F, 2.0F, 120.0F, 2.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 120;
      floatArray1[1] = (float) (byte)2;
      floatArray1[2] = (-2410.4514F);
      floatArray1[3] = (float) (-156);
      floatArray1[4] = (float) (byte)2;
      ArrayUtils.shift(floatArray1, Integer.MAX_VALUE);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-156.0F), 2.0F, 120.0F, 2.0F, (-2410.4514F)}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-605);
      longArray0[3] = (long) (-605);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-605L), 0L, 0L, (-605L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 2869L);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-605L), 0L, 0L, (-605L), 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) 2869L;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 2869.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[2] = 'F';
      charArray0[5] = '1';
      ArrayUtils.swap(floatArray0, (-1511), (-732), 1189);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2869.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, Integer.MIN_VALUE);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2869.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ArrayUtils.shift(byteArray0, (int) (byte)100, (-53), (-53));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)100);
      assertEquals((short)100, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = new short[14];
      shortArray1[0] = (short)0;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertEquals(14, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      short[] shortArray3 = ArrayUtils.removeElements(shortArray2, shortArray1);
      assertEquals(14, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray3);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)3570;
      doubleArray0[4] = (double) (byte)100;
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Long long0 = new Long(2147483647L);
      assertEquals(2147483647L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)0, (int) (short)0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'O';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {79}, intArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 851.3628172468533;
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-1.0);
      int[] intArray0 = new int[8];
      intArray0[4] = (-5289);
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-1.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], 0);
      assertEquals(3, objectArray0.length);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      
      objectArray0[2] = (Object) (-854.44719217671);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '\'';
      floatArray0[1] = (float) 'z';
      floatArray0[2] = (-1690.0F);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) '\'';
      boolean boolean0 = ArrayUtils.contains(floatArray0, 122.0F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {39.0F, 122.0F, (-1690.0F), 0.0F, 0.0F, 39.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(charArray0, 603, 37);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = new boolean[2];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      boolean[] booleanArray3 = ArrayUtils.removeElements(booleanArray2, booleanArray1);
      assertEquals(2, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'z';
      charArray1[1] = 'z';
      charArray1[2] = 'z';
      charArray1[3] = 'z';
      charArray1[4] = '\'';
      charArray1[5] = '\'';
      charArray1[6] = '\'';
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertEquals(14, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'z', 'z', 'z', 'z', '\'', '\'', '\''}, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = 455L;
      longArray0[2] = (-82L);
      longArray0[3] = 1879L;
      int int0 = ArrayUtils.indexOf(longArray0, 455L);
      assertEquals(1, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 455L, (-82L), 1879L, 0L, 0L}, longArray0);
      
      ArrayUtils.reverse((boolean[]) null);
      Character character0 = Character.valueOf('%');
      assertEquals('%', (char)character0);
      assertNotNull(character0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '%';
      doubleArray0[2] = (double) '%';
      doubleArray0[4] = (double) 1879L;
      doubleArray0[5] = (double) '%';
      doubleArray0[6] = (double) '%';
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) (-82L);
      longArray1[1] = (Long) (-82L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(2, longArray2.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-82L), (-82L)}, longArray2);
      assertNotSame(longArray2, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '%';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 8);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'%', '%'}, charArray0);
      assertArrayEquals(new char[] {'%'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int1 = ArrayUtils.indexOf(charArray1, 'h');
      assertEquals((-1), int1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'%', '%'}, charArray0);
      assertArrayEquals(new char[] {'%'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertEquals(14, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {37.0, 0.0, 37.0, 0.0, 1879.0, 37.0, 37.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1511);
      intArray0[1] = 51;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1511);
      longArray0[1] = (long) (-1511);
      longArray0[2] = (long) (-1511);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-1511L));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-813), 1072);
      assertEquals(8, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1511), 51, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-41);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-41));
      assertEquals(4, int0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-41), (byte) (-41), (byte) (-41), (byte) (-41), (byte)0}, byteArray0);
      
      Short short0 = new Short((short) (-1167));
      assertEquals((short) (-1167), (short)short0);
      assertNotNull(short0);
      
      Long long0 = new Long(51);
      assertEquals(51L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1511);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte) (-41), 4);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1511.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1511.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2225;
      shortArray0[1] = (short) (-277);
      shortArray0[2] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-277), (short)0, (short)2225}, shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = 'F';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)0;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertEquals((short)0, object0);
      assertEquals(8, objectArray0.length);
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short) (-277);
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = (Object) (short)0;
      objectArray0[7] = (Object) (short)0;
      Object object1 = ArrayUtils.get(objectArray0, 74);
      assertEquals(8, objectArray0.length);
      assertNull(object1);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals((-1), int0);
      assertEquals(8, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-277);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-277.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-277.0), (-277.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)116);
      assertEquals((short)116, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-348));
      assertEquals((short) (-348), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1262));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1262)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, (int) (byte)87);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      Boolean[] booleanArray2 = ArrayUtils.subarray((Boolean[]) null, (int)  (-109), (-1948));
      assertNull(booleanArray2);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, (String) null);
      assertNull(stringArray0);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)10);
      assertEquals((short)10, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte) (-109));
      assertEquals((short) (-109), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[1]);
      assertEquals((short) (-109), (short)short2);
      assertEquals(7, shortArray0.length);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)134);
      assertEquals((short)134, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-2188));
      assertEquals((short) (-2188), (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) (-626));
      assertEquals((short) (-626), (short)short5);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)331);
      assertEquals((short)331, (short)short6);
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '/');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertArrayEquals(new char[] {'/', '\\'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 3165;
      intArray0[2] = 3165;
      intArray0[6] = 3165;
      intArray0[5] = 3165;
      intArray0[5] = 2;
      intArray0[3] = 3165;
      ArrayUtils.swap(intArray0, (-6151), (-128));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {3165, 0, 3165, 3165, 0, 2, 3165}, intArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll((char[]) null, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 2;
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      integerArray0[1] = null;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 3165, (-2188));
      assertEquals(0, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, true, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      short[] shortArray0 = new short[17];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift((short[]) null, (int) (short) (-1511));
      ArrayUtils.reverse((Object[]) null, 6, (int) (short) (-1511));
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1511);
      intArray0[1] = (int) (short) (-1511);
      intArray0[2] = (-1);
      intArray0[3] = (int) (short) (-1511);
      ArrayUtils.shift(intArray0, (-1103));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1511), (-1511), (-1511), (-1)}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)35);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-605);
      intArray0[1] = 1131;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-605), 1131, 0, 0, 0, 0, 0, 0}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-605);
      longArray0[3] = (long) (-605);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-605L), 0L, 0L, (-605L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, 2869L);
      assertFalse(boolean1);
      assertEquals(5, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-605L), 0L, 0L, (-605L), 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) 2869L;
      floatArray0[2] = (float) 1131;
      floatArray0[3] = (float) 1131;
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new float[] {0.0F, 2869.0F, 1131.0F, 1131.0F, 0.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)126);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)126;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)99;
      shortArray0[3] = (short) (byte)6;
      shortArray0[4] = (short) (byte)126;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)126, (short)0, (short)99, (short)6, (short)126}, shortArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 2869.0F, 1131.0F, 1131.0F, 0.0F}, floatArray0, 0.01F);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 4);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(4, classArray1.length);
      assertEquals(4, classArray0.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short) (-1511);
      floatArray0[1] = (float) (short) (-1511);
      floatArray0[2] = (float) (-73);
      floatArray0[3] = (float) (short) (-1511);
      floatArray0[1] = (float) (short) (-1511);
      floatArray0[5] = (float) (short) (-1511);
      floatArray0[6] = (float) (short) (-1511);
      floatArray0[7] = (float) (short) (-1511);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1511.0F), (-1511.0F), (-73.0F), (-1511.0F), 0.0F, (-1511.0F), (-1511.0F), (-1511.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-957);
      intArray0[1] = 1770;
      intArray0[2] = (-2852);
      intArray0[3] = (int) (short) (-1511);
      ArrayUtils.swap(intArray0, (-73), (-3583), (-883));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-957), 1770, (-2852), (-1511)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1810.5496499656279);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1810.5496499656279), 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)12;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)102, (byte)12}, byteArray0);
      
      MutableInt mutableInt0 = new MutableInt((-1896));
      assertNotNull(mutableInt0);
      assertEquals((-1896), (int)mutableInt0.getValue());
      assertEquals((-1896), (int)mutableInt0.toInteger());
      assertEquals((byte) (-104), mutableInt0.byteValue());
      assertEquals((short) (-1896), mutableInt0.shortValue());
      assertEquals((-1896.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1896), mutableInt0.intValue());
      assertEquals("-1896", mutableInt0.toString());
      assertEquals((-1896L), mutableInt0.longValue());
      assertEquals((-1896.0), mutableInt0.doubleValue(), 0.01);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0);
      assertEquals("-1896", string0);
      assertNotNull(string0);
      assertEquals((-1896), (int)mutableInt0.getValue());
      assertEquals((-1896), (int)mutableInt0.toInteger());
      assertEquals((byte) (-104), mutableInt0.byteValue());
      assertEquals((short) (-1896), mutableInt0.shortValue());
      assertEquals((-1896.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1896), mutableInt0.intValue());
      assertEquals("-1896", mutableInt0.toString());
      assertEquals((-1896L), mutableInt0.longValue());
      assertEquals((-1896.0), mutableInt0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)111;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-42), (byte) (-1), (byte)64, (byte)111}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[2] = (-73);
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)73);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)6;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-90), (byte)36, (byte)6}, byteArray0);
      
      Double double0 = new Double((byte)6);
      assertEquals(6.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      String string0 = ArrayUtils.toString((Object) double0, "m");
      assertEquals("6.0", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-90);
      doubleArray0[1] = (double) (byte)6;
      doubleArray0[2] = 4628.803625496;
      doubleArray0[3] = (double) (byte) (-90);
      doubleArray0[4] = (double) (byte)6;
      doubleArray0[5] = (-358.00871);
      doubleArray0[6] = (double) (byte)36;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = (double) (byte)6;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1261.457041942012), (-22), 36.0);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-90.0), 6.0, 4628.803625496, (-90.0), 6.0, (-358.00871), 36.0, 1.0, 6.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1262));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1262)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte) (-109));
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-109), (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) (byte)0, 60);
      assertEquals(2, int0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-109), (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, (int) (byte)87);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      Boolean[] booleanArray2 = ArrayUtils.subarray((Boolean[]) null, (int) 0, (-1948));
      assertNull(booleanArray2);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-1511);
      Integer integer0 = new Integer((byte)4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) (short) (-1511);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], 12);
      assertEquals(2, objectArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-57);
      floatArray0[1] = (float) (-57);
      floatArray0[2] = (-1479.2395F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 102, (-22));
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-57.0F), (-57.0F), (-1479.2395F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 12;
      longArray0[1] = (long) (-57);
      longArray0[3] = (long) (byte)4;
      longArray0[4] = (long) 12;
      int int0 = ArrayUtils.indexOf(longArray0, 3758L, 1016);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {12L, (-57L), 0L, 4L, 12L}, longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)102);
      assertEquals((-1), int1);
      assertEquals(1, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)51}, byteArray0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-2238L));
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {12L, (-57L), 0L, 4L, 12L}, longArray1);
      assertArrayEquals(new long[] {12L, (-57L), 0L, 4L, 12L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-1511);
      intArray0[1] = (-57);
      intArray0[2] = 12;
      intArray0[3] = (int) (byte)102;
      intArray0[4] = (int) (byte)51;
      intArray0[5] = 1016;
      intArray0[6] = (-22);
      ArrayUtils.swap(intArray0, 12, 114, 12);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1511), (-57), 12, 102, 51, 1016, (-22)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-2137.417F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2417.4536F));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2137.417F), (-2137.417F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2137.417F), (-2137.417F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-2137.417F), (-2137.417F)}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3157.919F);
      doubleArray0[1] = 112.0;
      doubleArray0[2] = (-3630.80066424836);
      doubleArray0[3] = (double) (-3157.919F);
      doubleArray0[4] = (double) (-2137.417F);
      doubleArray0[5] = 112.0;
      doubleArray0[6] = (-3630.80066424836);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3157.9189453125), 112.0, (-3630.80066424836), (-3157.9189453125), (-2137.4169921875), 112.0, (-3630.80066424836)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2143);
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)1894);
      assertFalse(boolean1);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-2143)}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-2143);
      longArray0[1] = (long) (-540);
      longArray0[2] = (long) (short) (-2143);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2143L), (int) (short)1894);
      assertEquals(2, int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-2143L), (-540L), (-2143L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[2] = (-73);
      intArray0[5] = (-73);
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-73), 0, 0, (-73), (-1511)}, intArray0);
      
      Float float0 = new Float((float) (short) (-1511));
      assertEquals((-1511.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-124.0F));
      assertEquals((-124.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(3201.96);
      assertEquals(3201.96F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float1;
      floatArray0[1] = float2;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-124.0F), 3201.96F, (-1511.0F)}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shift(shortArray0, (-73));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      ArrayUtils.reverse((Object[]) null, 1473, (-1511));
      ArrayUtils.shift(intArray0, (-73));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-73), 0, 0, (-73), (-1511), 0}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)9);
      assertNull(byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-485.40018), 1801, (-1770.0));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 1652.27F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, Float.NaN);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 1652.27F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1652.27F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 1652.27F;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean1);
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      ArrayUtils.shift(booleanArray0, (-1), (-1), 55);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)859;
      shortArray0[1] = (short)777;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)859, (-2074));
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)859, (short)777}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)777, 37);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)99;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)7);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)6, (byte)6, (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)6, (byte)6, (byte)99}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray2 = new boolean[0];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      ArrayUtils.shift(booleanArray2, (int) (byte)6);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      ArrayUtils.swap((float[]) null, 37, (int) (byte)99);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 851.3628172468533);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Index: ";
      stringArray0[4] = "Index: ";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Index: ");
      assertEquals(5, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-840.7F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-3239.5425F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F));
      assertEquals(3, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-840.7F), (-1.0F), (-3239.5425F)}, floatArray0, 0.01F);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      ArrayUtils.swap(charArray0, (-1311), (-1), 1760);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'A'}, charArray0);
      
      ArrayUtils.swap((Object[]) stringArray1, 6, 1760);
      assertEquals(5, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isEquals(double0, double0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean2);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 4165;
      intArray0[1] = 97;
      intArray0[2] = (-1358);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1358));
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {4165, 97, (-1358)}, intArray0);
      assertArrayEquals(new int[] {(-1358), 4165, 97, (-1358)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean3 = ArrayUtils.contains(doubleArray0, 0.0);
      assertFalse(boolean3);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)3361;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte)112;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 111, (int) (byte)1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)1, (byte) (-117), (byte) (-117), (byte)112, (byte)112, (byte) (-117), (byte) (-117), (byte)112}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, 547, 1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {4165, 97, (-1358)}, intArray0);
      assertArrayEquals(new int[] {(-1358), 4165, 97, (-1358)}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      Character character0 = Character.valueOf('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-128);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Character character1 = new Character('_');
      assertEquals('_', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character(';');
      assertEquals(';', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character character3 = new Character(';');
      assertEquals(';', (char)character3);
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'R');
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-291));
      assertEquals((-1), int0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.removeElement((char[]) null, 'I');
      assertNull(charArray1);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((byte) (-127));
      assertEquals((-127), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("uVYRi]3 $gCvD_3H]");
      assertNull(integer2);
      
      integerArray0[2] = null;
      Integer integer3 = new Integer((-291));
      assertEquals((-291), (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf((int) (byte) (-128));
      assertEquals((-128), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 51);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-127), (-1), 51, (-291), (-128)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[4] = (-1478.1578F);
      floatArray0[5] = (-2336.8F);
      floatArray0[6] = (-2625.53F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-2625.53F));
      assertEquals(6, int0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-1478.1578F), (-2336.8F), (-2625.53F), 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 1067;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals((-1), int1);
      assertEquals(3, intArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {6, 6, 1067}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1067;
      longArray0[1] = (long) 6;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 1067;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1891.58);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 6.0, 1067.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 6.0, 1067.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-2625.53F), (-2336.8F), (-1478.1578F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift((short[]) null, 15, 15, 6);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 6.0, 1067.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 6.0, 1067.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 1891.58);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 6.0, 1067.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 6.0, 1067.0}, doubleArray1, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 174.09;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 15, 174.09);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((short[]) null, 9, 4628, 30);
      Character character0 = Character.valueOf('-');
      assertEquals('-', (char)character0);
      assertNotNull(character0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 321;
      ArrayUtils.shift(longArray0, (int) (short)2098, 321, 15);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {321L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character character0 = new Character('z');
      assertEquals('z', (char)character0);
      assertNotNull(character0);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      ArrayUtils.shift(intArray0, 4901);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4901;
      doubleArray0[1] = (double) 'z';
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)0;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short)0;
      intArray1[2] = (int) (short)0;
      intArray1[3] = (int) (short)0;
      intArray1[4] = 4901;
      boolean boolean1 = ArrayUtils.isSorted(intArray1);
      assertFalse(boolean1);
      assertEquals(7, intArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 4901, 0, 0}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift(shortArray0, (-3533), 0, (int) (short)0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)26;
      ArrayUtils.reverse(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)14, (byte)1, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1435.0924500149;
      doubleArray0[1] = (-4643.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-4643.0));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1435.0924500149, (-4643.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1435.0924500149}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-101));
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)124, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)124, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Character character0 = Character.valueOf('~');
      assertEquals('~', (char)character0);
      assertNotNull(character0);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)124, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      short[] shortArray0 = new short[5];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[6] = (double) (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short)0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)6;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)6);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)99, (byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)99}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (byte)6;
      shortArray0[2] = (short) (byte)6;
      shortArray0[3] = (short) (byte)99;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte)6;
      shortArray0[7] = (short) (byte) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)6, (short)6, (short)99, (short)0, (short) (-1), (short)6, (short) (-1)}, shortArray0);
      
      Float[] floatArray2 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 988;
      longArray0[1] = (-3252L);
      longArray0[2] = (-3252L);
      longArray0[3] = (long) 988;
      ArrayUtils.reverse(longArray0, (-124), (-124));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {988L, (-3252L), (-3252L), 988L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (short) (-13002);
      longArray1[1] = (long) (short) (-13002);
      longArray1[2] = (long) (short) (-13002);
      longArray1[3] = (-3252L);
      longArray1[4] = (long) (short) (-13002);
      longArray1[5] = (long) 988;
      longArray1[6] = (-2147483648L);
      long[] longArray2 = ArrayUtils.add(longArray1, 2422L);
      assertEquals(8, longArray2.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-13002L), (-13002L), (-13002L), (-3252L), (-13002L), 988L, (-2147483648L), 2422L}, longArray2);
      assertArrayEquals(new long[] {(-13002L), (-13002L), (-13002L), (-3252L), (-13002L), 988L, (-2147483648L)}, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray3 = ArrayUtils.removeAllOccurences(longArray0, (-240L));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {988L, (-3252L), (-3252L), 988L}, longArray0);
      assertArrayEquals(new long[] {988L, (-3252L), (-3252L), 988L}, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-82L);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)56;
      shortArray0[1] = (short)1831;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)100;
      shortArray0[4] = (short)100;
      shortArray0[5] = (short)1831;
      shortArray0[6] = (short)100;
      shortArray0[7] = (short) (-2154);
      shortArray0[8] = (short)1831;
      ArrayUtils.reverse(shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)1831, (short) (-2154), (short)100, (short)1831, (short)100, (short)100, (short)2, (short)1831, (short)56}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 3574.0;
      doubleArray0[3] = 1.5;
      doubleArray0[5] = (-2142.641207);
      doubleArray0[6] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.5, 1.5, 3574.0, 1.5, 0.0, (-2142.641207), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte byte0 = (byte) (-68);
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-68));
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-68)}, byteArray0);
      
      Short[] shortArray1 = new Short[5];
      Short short0 = new Short((byte) (-68));
      assertEquals((short) (-68), (short)short0);
      assertNotNull(short0);
      
      shortArray1[0] = short0;
      Short short1 = new Short((byte) (-68));
      assertEquals((short) (-68), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray1[1] = short1;
      short short2 = (short)2636;
      Short short3 = new Short((short)2636);
      assertEquals((short)2636, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray1[2] = short3;
      int int0 = 0;
      ArrayUtils.shift(doubleArray0, (int) (byte) (-68), (-688), 0);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.5, 1.5, 3574.0, 1.5, 0.0, (-2142.641207), 1.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, 1757);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1757, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '4';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 52.0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {52.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)92;
      byteArray0[5] = (byte)0;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'f';
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {102}, intArray0);
      assertArrayEquals(new int[] {102}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)92;
      shortArray0[3] = (short) (-1);
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (byte)92, (int) (short) (-1));
      assertEquals(4, shortArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)92, (short) (-1)}, shortArray0);
      assertEquals(3, bitSet1.length());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{2}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 935.18134F;
      floatArray0[1] = (-2417.4536F);
      floatArray0[2] = 1255.3656F;
      floatArray0[3] = (-1761.3F);
      int int0 = 2456;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 935.18134F, 2456);
      assertEquals(4, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {935.18134F, (-2417.4536F), 1255.3656F, (-1761.3F)}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[0];
      int int1 = (-2937);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(objectArray0, (-2937));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2937, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'b';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\\', 'b'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '\\';
      intArray0[1] = (int) '\\';
      intArray0[2] = (int) '\\';
      intArray0[6] = (int) 'b';
      intArray0[4] = (int) 'b';
      intArray0[5] = (int) 'b';
      intArray0[6] = (int) 'b';
      intArray0[7] = (int) 'b';
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (-1105);
      shortArray0[2] = (short)0;
      ArrayUtils.reverse(shortArray0, 78, 50);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)7, (short) (-1105), (short)0}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)7, (short) (-1105), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)7, (short) (-1105), (short)0}, shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      Character character0 = Character.valueOf('/');
      assertEquals('/', (char)character0);
      assertNotNull(character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertEquals('/', object0);
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 74L, 98);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(98);
      assertEquals(98, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, (-250));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -250, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(180.1547F);
      assertEquals(180.1547F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(3574.0);
      assertEquals(3574.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 180.1547F);
      assertEquals(180.1547F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {180.1547F, 3574.0F, 180.1547F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, (-1.0F));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {180.1547F, 3574.0F, 180.1547F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 180.1547F, 3574.0F, 180.1547F}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 3596.7);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3596.7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'l';
      int int0 = ArrayUtils.indexOf(doubleArray0, (-693.7028), 2);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      Long long0 = new Long(2);
      assertEquals(2L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      Long[] longArray1 = ArrayUtils.add(longArray0, longArray0[0]);
      assertEquals(5, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Double[] doubleArray2 = new Double[3];
      Double double0 = new Double(0.1);
      assertEquals(0.1, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[0] = double0;
      Double double1 = new Double((-1053.13699));
      assertEquals((-1053.13699), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray2[1] = double1;
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray2[2] = double2;
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.1, (-1053.13699), 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'l', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[2] = (-73);
      intArray0[5] = (-73);
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-73), 0, 0, (-73), (-1511)}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 421.057121261556;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2803.5469402453023, (int) (short) (-1511));
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {421.057121261556}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      char[] charArray1 = ArrayUtils.add(charArray0, 'c');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)18;
      shortArray0[0] = (short) (byte)122;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)122);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)18, (byte)0, (byte)0}, byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte)18);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {18.0, 421.057121261556}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {421.057121261556}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      float[] floatArray0 = new float[7];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1427.2706F);
      doubleArray0[1] = (double) (-35.5F);
      doubleArray0[2] = (double) (-1427.2706F);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (-1941.0);
      doubleArray0[5] = 542.31091;
      doubleArray0[6] = (double) (-1427.2706F);
      doubleArray0[7] = (double) (-1427.2706F);
      doubleArray0[8] = (double) (-725);
      ArrayUtils.shift(doubleArray0, 2, (-725), 2);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1427.2706298828125), (-35.5), (-1427.2706298828125), 2.0, (-1941.0), 542.31091, (-1427.2706298828125), (-1427.2706298828125), (-725.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Character character0 = Character.valueOf('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('K');
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'K');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(characterArray0);
      assertEquals(0, characterArray0.length);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'K';
      floatArray0[1] = (float) 'K';
      floatArray0[2] = 2646.0F;
      floatArray0[3] = (float) 'K';
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {75.0F, 75.0F, 2646.0F, 75.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shuffle((Object[]) characterArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1029);
      shortArray0[1] = (short)82;
      shortArray0[2] = (short)431;
      shortArray0[3] = (short)431;
      shortArray0[4] = (short)472;
      shortArray0[5] = (short)472;
      ArrayUtils.swap(shortArray0, 2, 1122, (int) (short)431);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1029), (short)82, (short)431, (short)431, (short)472, (short)472}, shortArray0);
      
      Random.setNextRandom((-1459));
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 99, (int) (short)472);
      assertNull(doubleArray0);
      
      ArrayUtils.shift((double[]) null, 1319, (-1459), (int) (short)431);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)101;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)59;
      shortArray0[1] = (short) (byte) (-62);
      shortArray0[2] = (short)431;
      shortArray0[3] = (short) (byte) (-36);
      shortArray0[4] = (short) (byte)102;
      shortArray0[5] = (short)472;
      shortArray0[6] = (short) (byte) (-62);
      shortArray0[7] = (short) (byte) (-62);
      shortArray0[8] = (short) (byte)101;
      ArrayUtils.swap(shortArray0, (int) (short)59, (int) (byte)102, (int) (byte) (-36));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)59, (short) (-62), (short)431, (short) (-36), (short)102, (short)472, (short) (-62), (short) (-62), (short)101}, shortArray0);
      
      Random.setNextRandom((short) (-36));
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 1276, (int) (short)472);
      assertNull(doubleArray0);
      
      int int0 = 2;
      ArrayUtils.shift((double[]) null, (-725), 2, 1276);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[2] = (-1426L);
      longArray0[3] = 9L;
      longArray0[0] = 1663L;
      longArray0[5] = 0L;
      longArray0[6] = 3758L;
      longArray0[7] = 0L;
      longArray0[8] = 129L;
      int int0 = ArrayUtils.indexOf(longArray0, 410L);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {1663L, 0L, (-1426L), 9L, 0L, 0L, 3758L, 0L, 129L}, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 3758L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3758.0}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Long[] longArray1 = new Long[1];
      longArray1[0] = (Long) 0L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-1L));
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertNotSame(longArray2, longArray0);
      
      Long long0 = new Long((-1426L));
      assertEquals((-1426L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) shortArray0, (Object) long0);
      assertFalse(boolean1);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 188.037444254;
      doubleArray0[1] = 661.116739991259;
      doubleArray0[2] = (-2286.03);
      doubleArray0[3] = 2543.18735047;
      doubleArray0[4] = 1.5;
      doubleArray0[5] = 1.0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {188.037444254, 661.116739991259, (-2286.03), 2543.18735047, 1.5, 1.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.remove(doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {188.037444254, 661.116739991259, (-2286.03), 2543.18735047, 1.5, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {661.116739991259, (-2286.03), 2543.18735047, 1.5, 1.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1369.991403841887), 661.116739991259);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {188.037444254, 661.116739991259, (-2286.03), 2543.18735047, 1.5, 1.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1));
      assertEquals((-1), int1);
      assertEquals(2, booleanArray0.length);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      MutableInt[] mutableIntArray0 = new MutableInt[4];
      MutableInt mutableInt0 = new MutableInt(81);
      assertNotNull(mutableInt0);
      assertEquals((byte)81, mutableInt0.byteValue());
      assertEquals(81.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(81, (int)mutableInt0.getValue());
      assertEquals(81, (int)mutableInt0.toInteger());
      assertEquals("81", mutableInt0.toString());
      assertEquals((short)81, mutableInt0.shortValue());
      assertEquals(81L, mutableInt0.longValue());
      assertEquals(81.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(81, mutableInt0.intValue());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((-3589));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals((-3589), (int)mutableInt1.toInteger());
      assertEquals((-3589), (int)mutableInt1.getValue());
      assertEquals("-3589", mutableInt1.toString());
      assertEquals((byte) (-5), mutableInt1.byteValue());
      assertEquals((-3589.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((short) (-3589), mutableInt1.shortValue());
      assertEquals((-3589L), mutableInt1.longValue());
      assertEquals((-3589.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-3589), mutableInt1.intValue());
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(1.0);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertNotNull(mutableInt2);
      assertEquals("1", mutableInt2.toString());
      assertEquals(1.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt2.shortValue());
      assertEquals(1, mutableInt2.intValue());
      assertEquals(1L, mutableInt2.longValue());
      assertEquals(1, (int)mutableInt2.toInteger());
      assertEquals(1, (int)mutableInt2.getValue());
      assertEquals(1.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt2.byteValue());
      
      mutableIntArray0[2] = mutableInt2;
      Long long0 = new Long(81);
      assertEquals(81L, (long)long0);
      assertNotNull(long0);
      
      MutableInt mutableInt3 = new MutableInt(long0);
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertNotNull(mutableInt3);
      assertEquals(81, (int)mutableInt3.toInteger());
      assertEquals((byte)81, mutableInt3.byteValue());
      assertEquals(81.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(81, mutableInt3.intValue());
      assertEquals("81", mutableInt3.toString());
      assertEquals((short)81, mutableInt3.shortValue());
      assertEquals(81L, mutableInt3.longValue());
      assertEquals(81.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(81, (int)mutableInt3.getValue());
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurences(mutableIntArray0, mutableInt3);
      assertEquals(2, mutableIntArray1.length);
      assertEquals(4, mutableIntArray0.length);
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertEquals(81, (int)mutableInt3.toInteger());
      assertEquals((byte)81, mutableInt3.byteValue());
      assertEquals(81.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(81, mutableInt3.intValue());
      assertEquals("81", mutableInt3.toString());
      assertEquals((short)81, mutableInt3.shortValue());
      assertEquals(81L, mutableInt3.longValue());
      assertEquals(81.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(81, (int)mutableInt3.getValue());
      assertNotSame(mutableInt3, mutableInt2);
      assertNotSame(mutableInt3, mutableInt0);
      assertNotSame(mutableInt3, mutableInt1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) mutableIntArray1, (Object) mutableInt1);
      assertTrue(boolean0);
      assertEquals(2, mutableIntArray1.length);
      assertEquals(4, mutableIntArray0.length);
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertFalse(mutableIntArray0.equals((Object)mutableIntArray1));
      assertEquals((-3589), (int)mutableInt1.toInteger());
      assertEquals((-3589), (int)mutableInt1.getValue());
      assertEquals("-3589", mutableInt1.toString());
      assertEquals((byte) (-5), mutableInt1.byteValue());
      assertEquals((-3589.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((short) (-3589), mutableInt1.shortValue());
      assertEquals((-3589L), mutableInt1.longValue());
      assertEquals((-3589.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-3589), mutableInt1.intValue());
      assertEquals(81, (int)mutableInt3.toInteger());
      assertEquals((byte)81, mutableInt3.byteValue());
      assertEquals(81.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(81, mutableInt3.intValue());
      assertEquals("81", mutableInt3.toString());
      assertEquals((short)81, mutableInt3.shortValue());
      assertEquals(81L, mutableInt3.longValue());
      assertEquals(81.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(81, (int)mutableInt3.getValue());
      assertNotSame(mutableInt1, mutableInt2);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableInt1, mutableInt3);
      assertNotSame(mutableInt3, mutableInt2);
      assertNotSame(mutableInt3, mutableInt0);
      assertNotSame(mutableInt3, mutableInt1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '4';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 52.0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {52.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)92;
      byteArray0[5] = (byte)0;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      ArrayUtils.shift(byteArray0, (-1496));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)0, (byte)92, (byte)0, (byte)110}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int[] intArray0 = new int[0];
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, false, false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Double double0 = new Double((-1135.96098));
      assertEquals((-1135.96098), (double)double0, 0.01);
      assertNotNull(double0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) double0, 48);
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      charArray0[1] = '0';
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, 1386.378525, 8);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      
      bitSet0.and(bitSet1);
      assertEquals(0, objectArray0.length);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      charArray0[2] = ';';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, ';');
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'N', '0', ';'}, charArray0);
      assertArrayEquals(new char[] {'N', '0'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(objectArray0, (Object) bitSet0);
      assertEquals(0, objectArray0.length);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertNotNull(bitSet2);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertNotSame(bitSet0, bitSet2);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0, 0.0);
      assertEquals(0, int1);
      assertEquals(9, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'm';
      charArray0[2] = 'Z';
      charArray0[3] = '\'';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'y', 'm', 'Z', '\''}, charArray1);
      assertArrayEquals(new char[] {'y', 'm', 'Z', '\''}, charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, 110);
      assertEquals((-1), int2);
      assertEquals(9, doubleArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift(byteArray0, 110, 110, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      char[] charArray2 = ArrayUtils.clone(charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray2.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'y', 'm', 'Z', '\''}, charArray1);
      assertArrayEquals(new char[] {'y', 'm', 'Z', '\''}, charArray2);
      assertArrayEquals(new char[] {'y', 'm', 'Z', '\''}, charArray0);
      assertNotSame(charArray1, charArray2);
      assertSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 'm';
      longArray0[2] = (long) 'Z';
      longArray0[3] = (long) 'y';
      ArrayUtils.swap(longArray0, 831, (-822), (-1));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 109L, 90L, 121L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")vU{";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Cbz";
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)70;
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-75);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2);
      assertEquals(7, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)108, (byte)25, (byte) (-92), (byte) (-115), (byte)92, (byte) (-75)}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-99L);
      longArray0[5] = (-99L);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[8];
      Character character0 = new Character('v');
      assertEquals('v', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'v');
      assertNull(charArray0);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (int) 'v');
      assertEquals((-1), int1);
      assertEquals(8, booleanArray0.length);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.removeElement((char[]) null, 'u');
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[19];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(19, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      longArray0[1] = (-329L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-329L)}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-329L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Character character0 = new Character(';');
      assertEquals(';', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('R');
      assertEquals('R', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('i');
      assertEquals('i', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character1;
      characterArray0[1] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'Y');
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'R', 'i'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[7] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 100);
      assertEquals((-1), int0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, false, true, true}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, (char) character1);
      assertEquals(1, charArray1.length);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'i'}, charArray1);
      assertArrayEquals(new char[] {'R', 'i'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short)572, (int) character1);
      assertEquals((-1), int1);
      assertFalse(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'b';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\\', 'b'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '\\';
      intArray0[1] = (int) '\\';
      intArray0[2] = (int) '\\';
      intArray0[6] = (int) 'b';
      intArray0[4] = (int) 'b';
      intArray0[5] = (int) 'b';
      intArray0[6] = (int) 'b';
      intArray0[7] = (int) 'b';
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (-1105);
      shortArray0[2] = (short)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)7;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {7.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertFalse(boolean1);
      assertEquals(8, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {92, 92, 92, 0, 98, 98, 98, 98}, intArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty(doubleArray1);
      assertFalse(boolean2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new double[] {7.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1435.0924500149;
      doubleArray0[1] = (-4643.0);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (-4494);
      shortArray0[2] = (short)100;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)83;
      shortArray0[5] = (short)816;
      ArrayUtils.reverse(shortArray0, (int) (short)83, (int) (short) (-4494));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)7, (short) (-4494), (short)100, (short)8, (short)83, (short)816}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)7, (short) (-4494), (short)100, (short)8, (short)83, (short)816}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short) (-4494), (short)100, (short)8, (short)83, (short)816}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      Character character0 = Character.valueOf(')');
      assertEquals(')', (char)character0);
      assertNotNull(character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertEquals(')', object0);
      assertNotNull(object0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-4494);
      longArray0[1] = (long) (short) (-4494);
      longArray0[2] = (-955L);
      longArray0[3] = (long) (short)8;
      longArray0[4] = (long) (short)7;
      ArrayUtils.reverse(longArray0, (int) (short)83, (int) (short)83);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-4494L), (-4494L), (-955L), 8L, 7L}, longArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-5903.1513792529295));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1435.0924500149, (-4643.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1435.0924500149, (-4643.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-605);
      longArray0[3] = (long) (-605);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-605L), 0L, 0L, (-605L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[13];
      floatArray0[0] = (-165.0F);
      floatArray0[1] = (float) (-605);
      floatArray0[2] = (float) (-605L);
      floatArray0[3] = (float) (-605);
      int int0 = ArrayUtils.indexOf(floatArray0, (-605.0F));
      assertEquals(1, int0);
      assertEquals(13, floatArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-1));
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = null;
      objectArray0[2] = (Object) 0.0;
      Object object0 = ArrayUtils.get(objectArray0, (-1), objectArray0[2]);
      assertEquals(0.0, object0);
      assertEquals(4, objectArray0.length);
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, (-2101292530));
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet1 = BitSet.valueOf(byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      
      Float float0 = new Float((-1739.88F));
      assertEquals((-1739.88F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) float0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1435.0924500149;
      doubleArray0[1] = (-4643.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-4643.0));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1435.0924500149, (-4643.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1435.0924500149}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-101));
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)124, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)124, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Character character0 = Character.valueOf('~');
      assertEquals('~', (char)character0);
      assertNotNull(character0);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)124, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = '&';
      charArray0[2] = '_';
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '_';
      intArray0[1] = (int) '_';
      intArray0[2] = (int) '_';
      intArray0[3] = (int) '[';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {95, 95, 95, 91}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-49);
      ArrayUtils.shift(byteArray0, (int) (byte) (-110), (int) (byte)60, (-3579));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-110)}, byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-110)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-99L);
      longArray0[3] = 1879L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-3213L), (-958));
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, (-99L), 0L, 1879L, 0L, 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray0, (-1), (-958));
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, (-99L), 0L, 1879L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, 2048L);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), (-1));
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, 100.0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-3213L);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-99L);
      floatArray0[3] = (float) 2048L;
      floatArray0[4] = (float) (-99L);
      floatArray0[5] = (float) 2048L;
      ArrayUtils.shift(floatArray0, 46, 100, (-958));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-3213.0F), (-1.0F), (-99.0F), 2048.0F, (-99.0F), 2048.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-128);
      Character character0 = new Character('_');
      assertEquals('_', (char)character0);
      assertNotNull(character0);
      
      Long long0 = new Long((-157L));
      assertEquals((-157L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, 100.0);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-128), 2299);
      assertEquals(4, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-128), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-128), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -128, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 851.3628172468533;
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-854.44719217671);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1303.0095991, 38);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {851.3628172468533, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      doubleArray0[5] = (double) (-1);
      intArray0[1] = 38;
      intArray0[2] = 38;
      intArray0[3] = 38;
      intArray0[4] = (-5289);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      ArrayUtils.shift(intArray0, 98);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, 38, 38, 38, (-5289), (-1)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {851.3628172468533, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), (-1.0)}, doubleArray0, 0.01);
      
      Random.setNextRandom((-1));
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, 0, (-184.01036934796));
      assertEquals(9, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-184.01036934796), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = Short.valueOf((short)2272);
      assertEquals((short)2272, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)6);
      assertEquals((short)6, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)6);
      assertEquals((short)6, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2272, (short)6, (short)6}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short)2);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)2272, (short)6, (short)6}, shortArray1);
      assertArrayEquals(new short[] {(short)2272, (short)6, (short)6}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 101;
      intArray0[2] = (-4);
      intArray0[3] = (-1283);
      intArray0[5] = 1328;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1283), (-4));
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 101, (-4), (-1283), 0, 1328}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)118;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(91, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)663);
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)663;
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 4018);
      assertEquals(1, intArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {663}, intArray0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-1062));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {663}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte) (-83);
      byteArray0[8] = (byte) (-116);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-6), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -6, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1246), 2);
      assertEquals(5, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-670.3156F);
      floatArray0[5] = (-688.87604F);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 0.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = '4';
      charArray0[2] = 'w';
      charArray0[4] = '4';
      charArray0[5] = 'z';
      charArray0[6] = 'f';
      ArrayUtils.shift(charArray0, (-835));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'w', '\u0000', '4', 'z', 'f', ' ', '4'}, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = (double) '4';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 52.0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {52.0, 52.0}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      ArrayUtils.shift(byteArray0, (-1496));
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)110, (byte)0}, byteArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'f');
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'w', '\u0000', '4', 'z', 'f', ' ', '4'}, charArray0);
      assertArrayEquals(new char[] {'w', '\u0000', '4', 'z', 'f', ' ', '4', 'f'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)110, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)1}, byteArray0);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {52.0, 52.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(960, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 960, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 2649, 6, (-717));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Double double0 = new Double((-688.87604F));
      assertEquals((-688.8760375976562), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(6);
      assertEquals(6.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      Double double2 = new Double((-3002.3885));
      assertEquals((-3002.3885), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      doubleArray0[4] = double1;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      ArrayUtils.reverse((byte[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      charArray0[7] = 'x';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '<');
      assertEquals(8, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'}, charArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-1.0F));
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray1, 'l', (-2129129085));
      assertEquals(0, charArray1.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)36);
      assertNull(byteArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short)0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {15}, intArray0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) 489L;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 489.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 489.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      Random.setNextRandom((-1441));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1441);
      doubleArray0[1] = (double) 489L;
      doubleArray0[2] = (double) 489.0F;
      doubleArray0[3] = (double) 489L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 489.0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1441.0), 489.0, 489.0, 489.0}, doubleArray0, 0.01);
      assertEquals("{1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-403));
      assertEquals((-403), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-403));
      assertEquals((-403), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertEquals((-403), (int)integer2);
      assertEquals(6, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertEquals((-403), (int)integer3);
      assertEquals(6, integerArray0.length);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(244);
      assertEquals(244, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(83);
      assertEquals(83, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-403), (-403), (-403), (-403), 244, 83}, intArray0);
      
      ArrayUtils.shift(intArray0, 244, 83, (-1033));
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertArrayEquals(new int[] {(-403), (-403), (-403), (-403), 244, 83}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (int) integerArray0[4], 2699);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 244, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = 0;
      intArray0[3] = 26;
      intArray0[5] = 907;
      intArray0[6] = 0;
      intArray0[7] = 0;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 26, 0, 907, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 26;
      floatArray0[5] = 451.04865F;
      ArrayUtils.swap(floatArray0, 3082, 0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 26.0F, 451.04865F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0, 0);
      assertEquals(8, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, 0, 26, 0, 907, 0, 0}, intArray0);
      assertEquals("{0, 1, 2, 4, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      boolean[] booleanArray2 = new boolean[2];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray2, false, 2);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(bitSet1, bitSet0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'O';
      charArray0[1] = 'g';
      charArray0[2] = 'v';
      charArray0[3] = 'm';
      charArray0[4] = 'w';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 4);
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'O', 'g', 'v', 'm'}, charArray1);
      assertArrayEquals(new char[] {'O', 'g', 'v', 'm', 'w'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, 2145630737, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 2145630737;
      intArray0[3] = 1024;
      intArray0[4] = 2145630737;
      intArray0[5] = Integer.MAX_VALUE;
      int int0 = ArrayUtils.indexOf(intArray0, 1024, 460);
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE, 2145630737, 1024, 2145630737, Integer.MAX_VALUE}, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 384.165F;
      floatArray0[1] = (float) 2145630737;
      floatArray0[2] = (float) 460;
      floatArray0[3] = (float) 460;
      floatArray0[4] = (float) 2145630737;
      floatArray0[5] = (float) Integer.MAX_VALUE;
      floatArray0[6] = (float) Integer.MAX_VALUE;
      floatArray0[7] = (float) (-1);
      floatArray0[8] = (float) 2145630737;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 796.92F);
      assertEquals(10, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {384.165F, 2.14563072E9F, 460.0F, 460.0F, 2.14563072E9F, 2.14748365E9F, 2.14748365E9F, (-1.0F), 2.14563072E9F, 796.92F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {384.165F, 2.14563072E9F, 460.0F, 460.0F, 2.14563072E9F, 2.14748365E9F, 2.14748365E9F, (-1.0F), 2.14563072E9F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE, 2145630737, 1024, 2145630737, Integer.MAX_VALUE}, intArray0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 174.09;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 15, 174.09);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 15;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (-926.3574F);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-926.3574F), (-1.0F), 15.0F, (-1.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 15;
      boolean boolean2 = ArrayUtils.contains(intArray0, 2);
      assertFalse(boolean2);
      assertEquals(3, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-1), (-1), 15}, intArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(3, int1);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 100.0, 3, 174.09);
      assertEquals(3, int2);
      assertEquals(4, doubleArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-24));
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), (-1), 15}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), 15}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int3 = ArrayUtils.indexOf(doubleArray0, (double) (-1.0F));
      assertEquals((-1), int3);
      assertEquals(4, doubleArray0.length);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 174.09, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 295;
      intArray0[1] = 4587;
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null, 295);
      assertNull(intArray1);
      
      Integer integer0 = new Integer(295);
      assertEquals(295, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 39.0;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (-4275.801586369696);
      doubleArray0[2] = (-3390.7498896065);
      doubleArray0[4] = (-458.207322198);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {39.0, 3.0, (-3390.7498896065), 0.0, (-458.207322198)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {39.0, 3.0, (-3390.7498896065), 0.0, (-458.207322198)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character character0 = new Character('z');
      assertEquals('z', (char)character0);
      assertNotNull(character0);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      ArrayUtils.shift(intArray0, 4901);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4901;
      doubleArray0[1] = (double) 'z';
      doubleArray0[2] = (double) 0;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1060;
      shortArray0[1] = (short)0;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short)0;
      intArray1[2] = (int) (short)0;
      intArray1[3] = (int) (short)1060;
      intArray1[4] = 4901;
      intArray1[5] = (int) (short)1060;
      intArray1[6] = (int) (short)0;
      boolean boolean1 = ArrayUtils.isSorted(intArray1);
      assertFalse(boolean1);
      assertEquals(7, intArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 1060, 4901, 1060, 0}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift(shortArray0, (-3533), 1060, (int) (short)0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1060, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)26;
      ArrayUtils.reverse(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)14, (byte)1, (byte) (-3)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ArrayUtils.shift(byteArray0, (int) (byte)100, (-53), (-53));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)100);
      assertEquals((short)100, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = new short[14];
      shortArray1[0] = (short)0;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertEquals(14, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      short[] shortArray3 = ArrayUtils.removeElements(shortArray2, shortArray1);
      assertEquals(14, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray3);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)3570;
      doubleArray0[4] = (double) (byte)100;
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = 'G';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'O', (int) (short)0);
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'G', 'O', 'O', 'O', 'G'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)67;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)67);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)31, (byte)67}, byteArray0);
      assertArrayEquals(new byte[] {(byte)31, (byte)67, (byte)67}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)67;
      doubleArray0[1] = (double) (byte)31;
      doubleArray0[2] = (double) (byte)31;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {67.0, 31.0, 31.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)67;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean1);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 35.491;
      doubleArray0[2] = 3574.0;
      doubleArray0[3] = 3140.42529219781;
      doubleArray0[4] = (-2524.0372369);
      doubleArray0[5] = (-2142.641207);
      doubleArray0[6] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.5, 35.491, 3574.0, 3140.42529219781, (-2524.0372369), (-2142.641207), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-68));
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-68)}, byteArray0);
      
      Short[] shortArray1 = new Short[5];
      Short short0 = new Short((byte) (-68));
      assertEquals((short) (-68), (short)short0);
      assertNotNull(short0);
      
      shortArray1[0] = short0;
      Short short1 = new Short((byte) (-68));
      assertEquals((short) (-68), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray1[1] = short1;
      Short short2 = new Short((short)2636);
      assertEquals((short)2636, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray1[2] = short2;
      try { 
        Short.decode("A?6Yrw#fB:0L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"A?6Yrw#fB:0L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2074);
      shortArray0[1] = (short) (-2074);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)65;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)65, 1);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2074), (short) (-2074), (short)0, (short)65}, shortArray0);
      
      double[] doubleArray0 = new double[16];
      doubleArray0[1] = (double) (-2137.417F);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (-2137.417F);
      doubleArray0[2] = (double) 1;
      doubleArray0[5] = (double) (short)0;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short) (-2074);
      objectArray0[1] = (Object) (short) (-2074);
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) (short) (-2074);
      objectArray0[4] = (Object) (short)65;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(5, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(objectArray0[1], objectArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'b';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\\', 'b'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '\\';
      intArray0[1] = (int) '\\';
      intArray0[2] = (int) '\\';
      intArray0[3] = (int) 'b';
      intArray0[4] = (int) 'b';
      intArray0[5] = (int) 'b';
      intArray0[6] = (int) 'b';
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2091;
      shortArray0[1] = (short) (-1105);
      ArrayUtils.swap(charArray0, Integer.MIN_VALUE, 4088, 98);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\\', 'b'}, charArray0);
      
      ArrayUtils.shift((byte[]) null, (-2086991149), 92, 4088);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2091, (short) (-1105), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)2091, (short) (-1105), (short)0}, shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Index: ";
      stringArray0[4] = "Index: ";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Index: ");
      assertEquals(5, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3156;
      shortArray0[1] = (short) (-1965);
      ArrayUtils.swap(shortArray0, (-924), (int) (short)3156);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)3156, (short) (-1965)}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (int) (short)3156);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3156, (short) (-1965)}, shortArray0);
      assertArrayEquals(new short[] {(short)3156, (short) (-1965)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false}, booleanArray0));
      
      ArrayUtils.shift((byte[]) null, 1626, 116, 10);
      int[] intArray0 = new int[7];
      intArray0[0] = 1626;
      intArray0[1] = (-924);
      intArray0[2] = 116;
      intArray0[3] = 0;
      intArray0[4] = 116;
      intArray0[5] = 98;
      intArray0[6] = 120;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (java.util.Random) mockRandom0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-924), 116, 0, 116, 98, 120, 1626}, intArray0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2137.417F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(12, booleanArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{3, 4, 6, 7, 9, 10, 11}", bitSet0.toString());
      assertEquals(12, bitSet0.length());
      assertEquals(7, bitSet0.cardinality());
      
      ArrayUtils.swap((Object[]) integerArray0, (int) integerArray0[0], 27, (-1507));
      assertEquals(3, integerArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1507);
      doubleArray0[1] = (double) (-540);
      doubleArray0[2] = (double) (-540);
      doubleArray0[3] = (double) (-540);
      doubleArray0[4] = (-4410.61752);
      doubleArray0[5] = (double) (-540);
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 1314.0, (-1507), (-178.5338592529297));
      assertEquals(6, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {(-1507.0), (-540.0), (-540.0), (-540.0), (-4410.61752), (-540.0)}, doubleArray0, 0.01);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-3011));
      assertEquals((short) (-3011), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short) (-3011), (short)short1);
      assertEquals(2, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-3011));
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3011), (short) (-3011)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-128);
      intArray0[1] = 2;
      ArrayUtils.swap(intArray0, (-128), (-128));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-128), 2}, intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = '(';
      charArray0[2] = 'v';
      charArray0[3] = 'U';
      charArray0[4] = 'X';
      charArray0[5] = 'O';
      charArray0[6] = 'N';
      charArray0[7] = '<';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'i', '(', 'v', 'U', 'X', 'O', 'N', '<'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Integer integer0 = Integer.getInteger("org.apache.commons.lang3.ArrayUtils");
      assertNull(integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) (-128);
      integerArray0[1] = null;
      integerArray0[2] = (Integer) 2;
      integerArray0[3] = null;
      integerArray0[4] = (Integer) 2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray1);
      assertFalse(boolean0);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2410.4514F));
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      ArrayUtils.swap(charArray0, (-1), (-1311), (-4864));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'A', 'A', 'A', 'A', 'A'}, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)38;
      byte byte0 = (byte)84;
      byteArray0[1] = (byte)84;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)38);
      assertEquals(0, int0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)38, (byte)84}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-1), (byte)84);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 489L;
      floatArray0[1] = (float) 489L;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {489.0F, 489.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {489.0F, 489.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      Random.setNextRandom((-1441));
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = 'X';
      charArray0[2] = '[';
      charArray0[3] = '>';
      charArray0[4] = 'q';
      charArray0[5] = 'D';
      charArray0[6] = '\\';
      charArray0[7] = 'H';
      charArray0[8] = 'i';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '');
      assertEquals(8, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'X', '[', '>', 'q', 'D', '\\', 'H', 'i'}, charArray1);
      assertArrayEquals(new char[] {'', 'X', '[', '>', 'q', 'D', '\\', 'H', 'i'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)36;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)36}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)36}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-68);
      shortArray0[1] = (short) (byte)36;
      shortArray0[2] = (short)13;
      shortArray0[3] = (short) (byte)36;
      shortArray0[4] = (short) (byte) (-68);
      shortArray0[5] = (short) (byte)36;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (-696));
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-68), (short)36, (short)13, (short)36, (short) (-68), (short)36}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[2] = (int) (short) (-1511);
      intArray0[5] = (int) (short) (-1511);
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-1511), 0, 0, (-1511), (-1511)}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      char[] charArray1 = ArrayUtils.add(charArray0, 'c');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)18;
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.shift(charArray0, (-546));
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 188.037444254;
      doubleArray0[1] = 661.116739991259;
      doubleArray0[2] = (-2286.03);
      doubleArray0[3] = 2543.18735047;
      doubleArray0[4] = 1.5;
      doubleArray0[5] = 1.0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {188.037444254, 661.116739991259, (-2286.03), 2543.18735047, 1.5, 1.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.remove(doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {188.037444254, 661.116739991259, (-2286.03), 2543.18735047, 1.5, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {661.116739991259, (-2286.03), 2543.18735047, 1.5, 1.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1369.991403841887), 661.116739991259);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {188.037444254, 661.116739991259, (-2286.03), 2543.18735047, 1.5, 1.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1));
      assertEquals((-1), int1);
      assertEquals(2, booleanArray0.length);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, objectArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(objectArray0);
      assertArrayEquals(new double[] {188.037444254, 661.116739991259, (-2286.03), 2543.18735047, 1.5, 1.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray1, objectArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (-1);
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), 0L, 0L, (-1L), (-1L)}, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'S';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'S');
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'X', 'S'}, charArray0);
      assertArrayEquals(new char[] {'X'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      short[] shortArray0 = new short[23];
      shortArray0[0] = (short)76;
      shortArray0[3] = (short)761;
      shortArray0[2] = (short)50;
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)50, 295);
      assertEquals(23, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) (-28667), (-1367));
      assertEquals((-1), int0);
      assertEquals(23, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)50;
      longArray0[1] = (long) (short)761;
      longArray0[2] = (long) (-1367);
      longArray0[3] = (long) (short)50;
      int int1 = ArrayUtils.indexOf(longArray0, 292L, Integer.MAX_VALUE);
      assertEquals((-1), int1);
      assertEquals(4, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {50L, 761L, (-1367L), 50L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '|';
      longArray0[1] = (-2743L);
      longArray0[2] = 606L;
      longArray0[3] = (-2743L);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {124L, (-2743L), 606L, (-2743L)}, longArray0);
      assertArrayEquals(new long[] {124L, (-2743L), 606L, (-2743L)}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '|';
      intArray0[1] = 1275;
      intArray0[2] = (int) '|';
      intArray0[3] = (int) '|';
      intArray0[4] = (int) '|';
      intArray0[5] = (int) '|';
      intArray0[6] = (int) '|';
      intArray0[7] = (int) '|';
      intArray0[8] = (int) '|';
      ArrayUtils.reverse(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {124, 124, 124, 124, 124, 124, 124, 1275, 124}, intArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 124, 102);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.reverse((float[]) null);
      ArrayUtils.shift(intArray0, 2142774254);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1275, 124, 124, 124, 124, 124, 124, 124, 124}, intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-688.87604F);
      doubleArray0[1] = (double) (-688.87604F);
      doubleArray0[2] = (-72.86592666643311);
      doubleArray0[4] = (double) (-688.87604F);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-688.8760375976562), (-688.8760375976562), (-72.86592666643311), 0.0, (-688.8760375976562)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-688.8760375976562), (-688.8760375976562), (-72.86592666643311), 0.0, (-688.8760375976562), (-688.8760375976562), (-688.8760375976562), (-72.86592666643311), 0.0, (-688.8760375976562)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-403);
      shortArray0[2] = (short)2015;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-73);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-1352);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-73);
      intArray0[2] = (int) (short) (-73);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)6;
      ArrayUtils.reverse((float[]) null);
      ArrayUtils.shift(intArray0, (int) (byte)6);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-73), 0, 0, (-73)}, intArray0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[3];
      MutableInt mutableInt0 = new MutableInt((Number) (byte)6);
      assertNotNull(mutableInt0);
      assertEquals((byte)6, mutableInt0.byteValue());
      assertEquals(6, (int)mutableInt0.getValue());
      assertEquals(6, (int)mutableInt0.toInteger());
      assertEquals((short)6, mutableInt0.shortValue());
      assertEquals(6L, mutableInt0.longValue());
      assertEquals("6", mutableInt0.toString());
      assertEquals(6, mutableInt0.intValue());
      assertEquals(6.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(6.0, mutableInt0.doubleValue(), 0.01);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((Number) (short) (-403));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals((-403.0), mutableInt1.doubleValue(), 0.01);
      assertEquals("-403", mutableInt1.toString());
      assertEquals((-403), mutableInt1.intValue());
      assertEquals((short) (-403), mutableInt1.shortValue());
      assertEquals((-403.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-403L), mutableInt1.longValue());
      assertEquals((-403), (int)mutableInt1.toInteger());
      assertEquals((-403), (int)mutableInt1.getValue());
      assertEquals((byte)109, mutableInt1.byteValue());
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt((int) (short) (-73));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertNotNull(mutableInt2);
      assertEquals((byte) (-73), mutableInt2.byteValue());
      assertEquals("-73", mutableInt2.toString());
      assertEquals((-73.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-73), (int)mutableInt2.toInteger());
      assertEquals((-73), (int)mutableInt2.getValue());
      assertEquals((-73.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-73L), mutableInt2.longValue());
      assertEquals((short) (-73), mutableInt2.shortValue());
      assertEquals((-73), mutableInt2.intValue());
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = ArrayUtils.get(mutableIntArray0, (int)  (-73), mutableInt2);
      assertEquals(3, mutableIntArray0.length);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertNotNull(mutableInt3);
      assertEquals((byte) (-73), mutableInt2.byteValue());
      assertEquals("-73", mutableInt2.toString());
      assertEquals((-73.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-73), (int)mutableInt2.toInteger());
      assertEquals((-73), (int)mutableInt2.getValue());
      assertEquals((-73.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-73L), mutableInt2.longValue());
      assertEquals((short) (-73), mutableInt2.shortValue());
      assertEquals((-73), mutableInt2.intValue());
      assertEquals((-73L), mutableInt3.longValue());
      assertEquals((-73.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals((-73.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((byte) (-73), mutableInt3.byteValue());
      assertEquals((-73), (int)mutableInt3.getValue());
      assertEquals((-73), (int)mutableInt3.toInteger());
      assertEquals("-73", mutableInt3.toString());
      assertEquals((short) (-73), mutableInt3.shortValue());
      assertEquals((-73), mutableInt3.intValue());
      assertNotSame(mutableInt2, mutableInt1);
      assertSame(mutableInt2, mutableInt3);
      assertNotSame(mutableInt2, mutableInt0);
      assertNotSame(mutableInt3, mutableInt1);
      assertSame(mutableInt3, mutableInt2);
      assertNotSame(mutableInt3, mutableInt0);
      
      MutableInt mutableInt4 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt3);
      assertEquals(3, mutableIntArray0.length);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertNotNull(mutableInt4);
      assertEquals((byte) (-73), mutableInt2.byteValue());
      assertEquals("-73", mutableInt2.toString());
      assertEquals((-73.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-73), (int)mutableInt2.toInteger());
      assertEquals((-73), (int)mutableInt2.getValue());
      assertEquals((-73.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-73L), mutableInt2.longValue());
      assertEquals((short) (-73), mutableInt2.shortValue());
      assertEquals((-73), mutableInt2.intValue());
      assertEquals((-73L), mutableInt3.longValue());
      assertEquals((-73.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals((-73.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((byte) (-73), mutableInt3.byteValue());
      assertEquals((-73), (int)mutableInt3.getValue());
      assertEquals((-73), (int)mutableInt3.toInteger());
      assertEquals("-73", mutableInt3.toString());
      assertEquals((short) (-73), mutableInt3.shortValue());
      assertEquals((-73), mutableInt3.intValue());
      assertEquals((-73L), mutableInt4.longValue());
      assertEquals((-73), mutableInt4.intValue());
      assertEquals((-73.0F), mutableInt4.floatValue(), 0.01F);
      assertEquals("-73", mutableInt4.toString());
      assertEquals((-73.0), mutableInt4.doubleValue(), 0.01);
      assertEquals((byte) (-73), mutableInt4.byteValue());
      assertEquals((-73), (int)mutableInt4.toInteger());
      assertEquals((short) (-73), mutableInt4.shortValue());
      assertEquals((-73), (int)mutableInt4.getValue());
      assertSame(mutableInt2, mutableInt4);
      assertNotSame(mutableInt2, mutableInt1);
      assertSame(mutableInt2, mutableInt3);
      assertNotSame(mutableInt2, mutableInt0);
      assertSame(mutableInt3, mutableInt4);
      assertNotSame(mutableInt3, mutableInt1);
      assertSame(mutableInt3, mutableInt2);
      assertNotSame(mutableInt3, mutableInt0);
      assertNotSame(mutableInt4, mutableInt0);
      assertNotSame(mutableInt4, mutableInt1);
      assertSame(mutableInt4, mutableInt2);
      assertSame(mutableInt4, mutableInt3);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[1] = float0;
      Float float1 = new Float(1.0);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-1770.4996F));
      assertEquals((-1770.4996F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[3] = float2;
      Float float3 = new Float(0.0F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      floatArray0[4] = float3;
      Float float4 = new Float(1.0F);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      
      floatArray0[5] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[5]);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1.0F, (-1770.4996F), 0.0F, 1.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'a';
      charArray0[2] = '|';
      charArray0[3] = '>';
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.shift(charArray0, (int) '|', (-1141), (-1141));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'H', 'a', '|', '>', '\u0000', '\u0000'}, charArray0);
      
      float[] floatArray2 = new float[9];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 'H';
      charArray0[3] = 'a';
      floatArray2[4] = 0.0F;
      floatArray2[5] = (float) 'a';
      floatArray2[7] = (float) '|';
      floatArray2[8] = (float) (-1141);
      ArrayUtils.swap(floatArray2, (-2557), (int) '|', 36);
      assertEquals(9, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {72.0F, 0.0F, 0.0F, 0.0F, 0.0F, 97.0F, 0.0F, 124.0F, (-1141.0F)}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte) (-73);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)84, (byte) (-48), (byte)34, (byte) (-64), (byte) (-85), (byte) (-96), (byte)56, (byte) (-73)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)84, (byte) (-48), (byte)34, (byte) (-64), (byte) (-85), (byte) (-96), (byte)56, (byte) (-73)}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      Character character0 = Character.valueOf('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) character0, (-4184));
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-128);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-128), (int) (byte) (-127));
      assertEquals(1, int1);
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-128), (byte)2, (byte) (-128)}, byteArray0);
      
      Character character1 = new Character('t');
      assertEquals('t', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('t');
      assertEquals('t', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = new Character('a');
      assertEquals('a', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      
      Character character4 = new Character('a');
      assertEquals('a', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character3));
      assertNotNull(character4);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character2;
      characterArray0[1] = character3;
      characterArray0[2] = character4;
      characterArray0[3] = character0;
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'G');
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'t', 'a', 'a', 't', 'a'}, charArray0);
      
      ArrayUtils.shift(byteArray0, (int) character3);
      assertEquals(4, byteArray0.length);
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character4));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-127), (byte) (-128), (byte)2}, byteArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1375L;
      longArray0[1] = 1779L;
      longArray0[2] = 772L;
      longArray0[3] = 1694L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1375L, 1779L, 772L, 1694L}, longArray0);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte)101);
      assertEquals((byte)101, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      try { 
        Byte.decode("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = 'B';
      charArray0[2] = 'V';
      charArray0[3] = 'E';
      charArray0[4] = 'Y';
      charArray0[5] = 't';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'>', 'B', 'V', 'E', 'Y', 't'}, charArray0);
      assertArrayEquals(new char[] {'>', 'B', 'V', 'E', 'Y', 't'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      int int0 = ArrayUtils.indexOf(booleanArray1, true);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Random.setNextRandom(52);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte) (-128);
      byteArray0[8] = (byte)50;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-78), (int) (byte)1);
      assertEquals(9, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)5, (byte)1, (byte)70, (byte)83, (byte)88, (byte)16, (byte) (-102), (byte) (-128), (byte)50}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1511);
      intArray0[1] = 51;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1511);
      longArray0[1] = (long) (-1511);
      longArray0[2] = (long) (-1511);
      longArray0[3] = (long) 51;
      longArray0[4] = (long) 51;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-1086));
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1511L), (-1511L), (-1511L), 51L, 51L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)51);
      assertEquals((-1), int1);
      assertEquals(0, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-854.44719217671);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1303.0095991, 38);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      doubleArray0[5] = (double) (-1);
      intArray0[2] = 38;
      intArray0[3] = 38;
      intArray0[4] = (-5289);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'G');
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'G'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-670.3156F));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'e';
      charArray1[1] = 'e';
      long[] longArray0 = new long[1];
      longArray0[0] = 2534L;
      ArrayUtils.swap(longArray0, 0, 3);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2534L}, longArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-58);
      shortArray0[2] = (short) (-1013);
      shortArray0[3] = (short)160;
      shortArray0[4] = (short) (-304);
      shortArray0[5] = (short)654;
      shortArray0[6] = (short)97;
      shortArray0[7] = (short)472;
      ArrayUtils.swap(shortArray0, 4288, 15, (int) (short)97);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-58), (short) (-1013), (short)160, (short) (-304), (short)654, (short)97, (short)472}, shortArray0);
      
      Random.setNextRandom((-1461));
      ArrayUtils.swap((float[]) null, (int) (short)472, (-1041), 0);
      boolean boolean0 = ArrayUtils.contains(charArray0, '#');
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)0;
      ArrayUtils.reverse((byte[]) null);
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 2118884851, 2155);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)0;
      ArrayUtils.reverse((byte[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 'x';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      charArray0[5] = 'V';
      charArray0[6] = 'x';
      charArray0[7] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'f');
      assertEquals(8, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'V', 'x', 'V', 'V', 'V', 'V', 'x', 'V'}, charArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-1.0F));
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap(charArray0, (int) (short)0, (int) (short)0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'V', 'x', 'V', 'V', 'V', 'V', 'x', 'V'}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (short)0);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)65);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)17, (byte)9, (byte) (-52), (byte)65, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)17, (byte)9, (byte) (-52), (byte)65, (byte)1}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Character[] characterArray1 = new Character[9];
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      Character character0 = new Character('~');
      assertEquals('~', (char)character0);
      assertNotNull(character0);
      
      characterArray1[0] = character0;
      characterArray1[1] = (Character) 'V';
      characterArray1[2] = (Character) 'V';
      Character character1 = Character.valueOf('+');
      assertEquals('+', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray1[3] = character1;
      characterArray1[4] = (Character) 'V';
      characterArray1[5] = (Character) 'V';
      characterArray1[6] = (Character) 'V';
      characterArray1[7] = (Character) 'V';
      characterArray1[8] = (Character) 'V';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray1, 'x');
      assertEquals(9, charArray2.length);
      assertEquals(9, characterArray1.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'~', 'V', 'V', '+', 'V', 'V', 'V', 'V', 'V'}, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      Integer integer1 = Integer.getInteger("3YOAmq vu");
      assertNull(integer1);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = Character.valueOf('+');
      assertEquals('+', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char char0 = '(';
      Character character1 = Character.valueOf('(');
      assertEquals('(', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('.');
      assertEquals('.', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertEquals('(', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.addFirst(characterArray0, character3);
      assertEquals(5, characterArray1.length);
      assertEquals(4, characterArray0.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = (double) (char)character3;
      doubleArray0[2] = (double) '(';
      doubleArray0[3] = (double) (byte)11;
      doubleArray0[4] = 100.0;
      doubleArray0[5] = (double) char0;
      doubleArray0[6] = (double) (byte)11;
      doubleArray0[7] = (double) (byte)11;
      doubleArray0[8] = (double) '+';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Character character0 = new Character('k');
      assertEquals('k', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.addFirst(characterArray0, character0);
      assertEquals(0, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-128);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) longArray0);
      assertTrue(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Character character0 = Character.valueOf('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      Integer integer0 = new Integer(2658);
      assertEquals(2658, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) character0, (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2074);
      shortArray0[1] = (short) (-2074);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)65;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)65, 1);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2074), (short) (-2074), (short)0, (short)65}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2137.417F);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (-2137.417F);
      doubleArray0[2] = (double) 1;
      doubleArray0[5] = (double) (short)0;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short) (-2074);
      objectArray0[1] = (Object) (short) (-2074);
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) (short) (-2074);
      objectArray0[4] = (Object) (short)65;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(5, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3374.256F;
      floatArray0[2] = 835.7F;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      Object[] objectArray0 = new Object[1];
      floatArray0[0] = 0.0F;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2440;
      ArrayUtils.shift(shortArray0, 3577, (int) (short)2440, (int) (short)0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2440, (short)0}, shortArray0);
      
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('F');
      assertEquals('F', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('G');
      assertEquals('G', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character0);
      assertEquals('F', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertFalse(character0.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character0);
      assertEquals('F', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character1);
      assertEquals('G', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character3));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('W');
      assertEquals('W', (char)character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'F', 'G', 'F', 'F', 'G', 'W'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      // Undeclared exception!
      try { 
        ArrayUtils.add(characterArray0, (-2124638076), character1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2124638076, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3374.256F;
      floatArray0[2] = 835.7F;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2440;
      shortArray0[1] = (short)0;
      ArrayUtils.shift(shortArray0, 3577, (int) (short)2440, (int) (short)0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2440, (short)0}, shortArray0);
      
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('F');
      assertEquals('F', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('G');
      assertEquals('G', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character0);
      assertEquals('F', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertFalse(character0.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character0);
      assertEquals('F', (char)character3);
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character1);
      assertEquals('G', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character3));
      assertFalse(character1.equals((Object)character2));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('W');
      assertEquals('W', (char)character5);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'F', 'G', 'F', 'F', 'G', 'W'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(characterArray0, (-2124638076), character1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2124638076, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-670.3156F));
      assertNull(floatArray0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Index: ");
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (-840.7F));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = '#';
      charArray0[4] = 'A';
      ArrayUtils.swap(charArray0, 4976, 256, 4976);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'A', 'A', 'A', '#', 'A', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) 256, 1556);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)56;
      shortArray0[1] = (short)127;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-2148));
      assertEquals((-1), int1);
      assertEquals(2, shortArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)56, (short)127}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 295;
      intArray0[1] = 4587;
      intArray0[2] = 2487;
      intArray0[3] = 1072;
      intArray0[4] = 2147031386;
      intArray0[5] = 23;
      intArray0[6] = 521;
      intArray0[7] = 521;
      intArray0[8] = 287;
      int int0 = ArrayUtils.indexOf(intArray0, 1072, 1072);
      assertEquals((-1), int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {295, 4587, 2487, 1072, 2147031386, 23, 521, 521, 287}, intArray0);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = 287;
      intArray1[2] = 521;
      intArray1[3] = 521;
      intArray1[4] = 287;
      intArray1[5] = 23;
      intArray1[6] = 23;
      int[] intArray2 = ArrayUtils.insert(1, intArray0, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(16, intArray2.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {295, 4587, 2487, 1072, 2147031386, 23, 521, 521, 287}, intArray0);
      assertArrayEquals(new int[] {(-1), 287, 521, 521, 287, 23, 23}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2137.417F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(12, booleanArray0.length);
      assertNotNull(bitSet0);
      assertEquals(7, bitSet0.cardinality());
      assertEquals(12, bitSet0.length());
      assertEquals("{3, 4, 6, 7, 9, 10, 11}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 4, 1964);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift(intArray0, (-888), (-86), (-586));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2137.417F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(12, booleanArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{0, 1, 2, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 4, 1964);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift(intArray0, (-888), (-86), (-586));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[14];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[13];
      charArray0[0] = '9';
      charArray0[1] = '\"';
      ArrayUtils.swap(charArray0, (-86), (-888), (-1));
      assertEquals(13, charArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (-1);
      intArray0[2] = (-888);
      intArray0[3] = (int) '9';
      intArray0[4] = (int) (byte)0;
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      int int0 = ArrayUtils.indexOf(booleanArray1, true);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      
      Random.setNextRandom((-249));
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-73));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1375);
      intArray0[1] = 0;
      intArray0[2] = (int) (short) (-1511);
      intArray0[3] = (-1375);
      intArray0[4] = (int) (short) (-1511);
      intArray0[5] = (-73);
      intArray0[6] = (-73);
      intArray0[7] = 5507;
      intArray0[8] = (int) (short) (-1511);
      int int0 = ArrayUtils.indexOf(intArray0, 0, 5507);
      assertEquals((-1), int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1375), 0, (-1511), (-1375), (-1511), (-73), (-73), 5507, (-1511)}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1455;
      longArray0[1] = (long) (short) (-1511);
      longArray0[2] = (long) 5507;
      longArray0[3] = (long) 5507;
      longArray0[4] = (long) 1399;
      longArray0[5] = (long) (-1375);
      longArray0[6] = (long) (-73);
      longArray0[7] = (long) (-1375);
      longArray0[8] = (long) 2;
      ArrayUtils.reverse(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {2L, (-1375L), (-73L), (-1375L), 1399L, 5507L, 5507L, (-1511L), 1455L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1511);
      intArray0[2] = 1399;
      intArray0[4] = (-1511);
      intArray0[4] = 2173;
      intArray0[5] = (-1375);
      intArray0[6] = 2;
      int int0 = ArrayUtils.indexOf(intArray0, 1455, 4);
      assertEquals((-1), int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1511), 0, 1399, 0, 2173, (-1375), 2, 0}, intArray0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-1375);
      integerArray0[1] = (Integer) (-1511);
      integerArray0[2] = (Integer) (-1511);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1375), (-1511), (-1511)}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      Integer integer0 = new Integer((byte)4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) (short) (-1511);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], 12);
      assertEquals(2, objectArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-57);
      floatArray0[1] = (float) (-57);
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2031.108143833146));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1511);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1511)}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 12;
      longArray0[1] = (long) 12;
      longArray0[2] = (long) (byte)4;
      longArray0[3] = (long) (byte)4;
      longArray0[4] = (long) (-57);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {12L, 12L, 4L, 4L, (-57L)}, longArray0);
      assertArrayEquals(new long[] {12L, 12L, 4L, 4L, (-57L), 12L, 12L, 4L, 4L, (-57L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) (-1511);
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) (-1511);
      integerArray0[6] = (Integer) (-1511);
      integerArray0[7] = integer0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(8, intArray1.length);
      assertEquals(8, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {4, (-1511), 4, 4, 4, (-1511), (-1511), 4}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2137.417F);
      short[] shortArray0 = new short[5];
      floatArray0[3] = (float) (short)0;
      shortArray0[1] = (short) (-73);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-73);
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = 'o';
      charArray0[2] = '\"';
      charArray0[3] = '';
      charArray0[4] = '>';
      charArray0[5] = 'G';
      charArray0[6] = 'm';
      charArray0[7] = '(';
      ArrayUtils.swap(charArray0, (int) (short) (-73), Integer.MAX_VALUE, (int) (short) (-73));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'2', 'o', '\"', '', '>', 'G', 'm', '('}, charArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) '';
      intArray0[2] = (int) 'G';
      intArray0[3] = (int) 'o';
      intArray0[4] = 2147;
      intArray0[5] = (int) 'o';
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1446));
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 127, 71, 111, 2147, 111}, intArray0);
      assertArrayEquals(new int[] {0, 127, 71, 111, 2147, 111}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'b';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'b'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '\\';
      intArray0[1] = (int) '\u0000';
      intArray0[2] = (int) '\\';
      intArray0[3] = (int) 'b';
      intArray0[4] = (int) 'b';
      intArray0[5] = (int) 'b';
      intArray0[6] = (int) 'b';
      intArray0[7] = (int) 'b';
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2091;
      shortArray0[1] = (short) (-1105);
      ArrayUtils.swap(charArray0, Integer.MIN_VALUE, 4088, 98);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'b'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)0;
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-840.7F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-3239.5425F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-3239.5425F));
      assertEquals(3, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-840.7F), (-1.0F), (-3239.5425F)}, floatArray0, 0.01F);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      ArrayUtils.swap(charArray0, (-1311), (-1), 1760);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'A'}, charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = Character.valueOf('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = (Character) 'A';
      characterArray0[2] = (Character) 'A';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)118;
      ArrayUtils.shift(byteArray0, (-3097));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)53, (byte) (-105), (byte)118, (byte)111}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte) (-57);
      byteArray1[2] = (byte)59;
      byteArray1[3] = (byte)59;
      ArrayUtils.swap(byteArray1, (int) (byte)59, (int) (byte)59, (int) (byte)59);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-57), (byte)59, (byte)59}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Double double0 = new Double((-1640.5124219194633));
      assertEquals((-1640.5124219194633), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(79.540325676);
      assertEquals(79.540325676, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(3435.48789155259);
      assertEquals(3435.48789155259, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double((byte) (-57));
      assertEquals((-57.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[2] = (byte)52;
      ArrayUtils.swap(byteArray1, (int) (byte)52, (int) (byte)52, (int) (byte)0);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)52, (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Double double0 = new Double((-1640.5124219194633));
      assertEquals((-1640.5124219194633), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = Double.valueOf((double) (byte)52);
      assertEquals(52.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((byte) (-57));
      assertEquals((-57.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)52);
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 2649, 6, (-717));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Double double0 = new Double((-2137.417F));
      assertEquals((-2137.4169921875), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-688.87604F));
      assertEquals((-688.8760375976562), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(6);
      assertEquals(6.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      Double double3 = new Double((-3002.3885));
      assertEquals((-3002.3885), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[2] = double3;
      doubleArray0[3] = double0;
      doubleArray0[4] = double2;
      doubleArray0[5] = double1;
      doubleArray0[6] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-688.8760375976562), (-2137.4169921875), (-3002.3885), (-2137.4169921875), 6.0, (-688.8760375976562), (-688.8760375976562)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-403);
      shortArray0[2] = (short)2015;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-73);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-1352);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-73);
      intArray0[2] = (int) (short) (-73);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)6;
      ArrayUtils.swap(byteArray0, 2649, (int) (short)2015, (int) (short) (-73));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)6}, byteArray0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(446.0681);
      assertEquals(446.0681, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(303.934);
      assertEquals(303.934, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((short)0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1290.9652879));
      assertEquals((-1290.9652879), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {446.0681, 303.934, 0.0, (-1290.9652879)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-670.3156F));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[8];
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'e';
      charArray1[1] = 'e';
      long[] longArray0 = new long[1];
      longArray0[0] = 2534L;
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 2978L, 538);
      assertEquals(1, longArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {2534L}, longArray0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[6] = true;
      ArrayUtils.swap((Object[]) integerArray0, (int) integerArray0[0], (-1), (int) integerArray0[1]);
      assertEquals(3, integerArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (int)integerArray0[1];
      doubleArray0[1] = (double) (-540);
      doubleArray0[2] = (double) (-540);
      doubleArray0[3] = (double) (-540);
      doubleArray0[4] = (-4410.61752);
      integerArray0[0] = (Integer) (-540);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) integerArray0[0], 2);
      assertEquals(1, longArray0.length);
      assertEquals(3, integerArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2137.417F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(12, booleanArray0.length);
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.cardinality());
      assertEquals(12, bitSet0.length());
      assertEquals("{3, 4, 6, 7, 9, 10, 11}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.swap((Object[]) integerArray0, (int) integerArray0[0], (-1), (-1507));
      assertEquals(3, integerArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1507);
      doubleArray0[1] = (double) (-540);
      doubleArray0[2] = (double) (-540);
      doubleArray0[3] = (double) (-540);
      doubleArray0[4] = (-4410.61752);
      doubleArray0[5] = (double) (-540);
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 1314.0, (-1507), (-178.5338592529297));
      assertEquals(6, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {(-1507.0), (-540.0), (-540.0), (-540.0), (-4410.61752), (-540.0)}, doubleArray0, 0.01);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-3011));
      assertEquals((short) (-3011), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short) (-3011), (short)short1);
      assertEquals(2, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-3011));
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3011), (short) (-3011)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[2] = (short)2015;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)2015;
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short)2015;
      doubleArray0[4] = 98.0286135566;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short)2015;
      doubleArray0[7] = (double) (short) (-1);
      ArrayUtils.reverse(doubleArray0, (int) (short) (-1), (-771));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2015.0, (-1.0), 2015.0, 98.0286135566, 0.0, 2015.0, (-1.0)}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertEquals(8, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2015, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2015, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-306));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-35.5F);
      floatArray0[1] = (-1427.2706F);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1427.2706F);
      doubleArray0[1] = (double) (-35.5F);
      doubleArray0[2] = (double) (-35.5F);
      doubleArray0[3] = 2223.284752829376;
      doubleArray0[4] = (double) (-35.5F);
      doubleArray0[5] = (double) (-35.5F);
      doubleArray0[6] = (double) (-1427.2706F);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1427.2706298828125), (-35.5), (-35.5), 2223.284752829376, (-35.5), (-35.5), (-1427.2706298828125)}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[2];
      short short0 = (short)97;
      Short short1 = new Short((short)97);
      assertEquals((short)97, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertEquals((short)97, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)97, (short)97}, shortArray1);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(1581L);
      assertEquals(1581L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(short0);
      assertEquals(97L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(short0);
      assertEquals(97L, (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 2966L);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1581L, 97L, 97L}, longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2523.0372369), (-1.0));
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1427.2706298828125), (-35.5), (-35.5), 2223.284752829376, (-35.5), (-35.5), (-1427.2706298828125)}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      ArrayUtils.reverse(doubleArray0, (int) (short)97, (-276));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1427.2706298828125), (-35.5), (-35.5), 2223.284752829376, (-35.5), (-35.5), (-1427.2706298828125)}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, short0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)97, (short)97}, shortArray1);
      assertArrayEquals(new short[] {(short)97}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")vU{";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Cbz";
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-926.3574F);
      floatArray0[1] = (-926.3574F);
      floatArray0[2] = (-926.3574F);
      floatArray0[3] = (-926.3574F);
      floatArray0[4] = (-926.3574F);
      floatArray0[5] = (-926.3574F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-926.3574F), (-926.3574F), (-926.3574F), (-926.3574F), (-926.3574F), (-926.3574F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, 2);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2034;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)3929;
      shortArray0[3] = (short)2034;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2034);
      assertEquals(2, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)3929}, shortArray1);
      assertArrayEquals(new short[] {(short)2034, (short)2, (short)3929, (short)2034}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      ArrayUtils.shift((int[]) null, (int) (short)2034);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-96), 49);
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)41, (byte)1, (byte) (-56), (byte)48, (byte)101, (byte) (-88), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)75;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)761;
      shortArray0[4] = (short)50;
      shortArray0[5] = (short)50;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 285);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)75, (short)0, (short)0, (short)761, (short)50, (short)50}, shortArray0);
      assertArrayEquals(new short[] {(short)75, (short)0, (short)0, (short)761, (short)50, (short)50}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)50);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)6;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)6);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift(booleanArray0, 708);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      ArrayUtils.swap((float[]) null, 26, (int) (short)75);
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (short)50, (-2355));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)6;
      doubleArray0[1] = (double) (short)761;
      doubleArray0[2] = (double) (short)50;
      doubleArray0[3] = (double) (short)50;
      doubleArray0[4] = (double) 708;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 2067.922979, 7);
      assertEquals(5, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {6.0, 761.0, 50.0, 50.0, 708.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      ArrayUtils.shift(longArray1, 0, 0, (int) (byte) (-127));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)89;
      shortArray0[1] = (short) (-2091);
      shortArray0[2] = (short) (-2091);
      shortArray0[3] = (short) (byte) (-127);
      shortArray0[4] = (short) (-3084);
      shortArray0[5] = (short)24;
      shortArray0[6] = (short) (byte) (-127);
      shortArray0[7] = (short) (byte) (-127);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)10);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)89, (short) (-2091), (short) (-2091), (short) (-127), (short) (-3084), (short)24, (short) (-127), (short) (-127)}, shortArray0);
      assertArrayEquals(new short[] {(short)10, (short)89, (short) (-2091), (short) (-2091), (short) (-127), (short) (-3084), (short)24, (short) (-127), (short) (-127)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray2 = ArrayUtils.add(longArray1, (long) (short) (-2091));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-2091L)}, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '|';
      longArray0[1] = (-2743L);
      longArray0[2] = 606L;
      longArray0[3] = (-2743L);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {124L, (-2743L), 606L, (-2743L)}, longArray0);
      assertArrayEquals(new long[] {124L, (-2743L), 606L, (-2743L)}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '|';
      intArray0[1] = 1275;
      intArray0[2] = (int) '|';
      intArray0[3] = (int) '|';
      intArray0[4] = (int) '|';
      intArray0[5] = (int) '|';
      intArray0[6] = (int) '|';
      intArray0[7] = (int) '|';
      intArray0[8] = (int) '|';
      ArrayUtils.reverse(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {124, 124, 124, 124, 124, 124, 124, 1275, 124}, intArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 124, 102);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.reverse((float[]) null);
      ArrayUtils.shift(intArray0, 2142774254);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1275, 124, 124, 124, 124, 124, 124, 124, 124}, intArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-92);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)16);
      assertEquals(6, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)2, (byte)116, (byte)3, (byte)43, (byte)49, (byte) (-92)}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1360;
      shortArray0[1] = (short) (-1507);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-680);
      shortArray0[4] = (short) (-97);
      shortArray0[5] = (short) (-4196);
      shortArray0[6] = (short)22437;
      shortArray0[7] = (short)1393;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-97));
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1360, (short) (-1507), (short)1, (short) (-680), (short) (-97), (short) (-4196), (short)22437, (short)1393}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2137.417F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-540);
      doubleArray0[4] = (double) (-2137.417F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) 1.0F;
      doubleArray0[7] = (double) (-3157.919F);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-540.0), (-2137.4169921875), (-1.0), 1.0, (-3157.9189453125)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-13);
      shortArray0[1] = (short)160;
      shortArray0[2] = (short) (-2143);
      shortArray0[3] = (short)160;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)160);
      assertTrue(boolean1);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-13), (short)160, (short) (-2143), (short)160}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      short[] shortArray0 = new short[17];
      shortArray0[0] = (short) (-1511);
      boolean[] booleanArray0 = new boolean[14];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(14, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) (short) (-1511);
      objectArray0[5] = (Object) false;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, objectArray1.length);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(14, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[2] = (-73);
      intArray0[5] = (-73);
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-73), 0, 0, (-73), (-1511)}, intArray0);
      
      Float float0 = new Float((float) (short) (-1511));
      assertEquals((-1511.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-124.0F));
      assertEquals((-124.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(3201.96);
      assertEquals(3201.96F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float1;
      floatArray0[1] = float2;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-124.0F), 3201.96F, (-1511.0F)}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) float1;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) float0;
      objectArray0[7] = (Object) (short) (-1511);
      objectArray0[8] = (Object) floatArray0[1];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(9, objectArray1.length);
      assertEquals(9, objectArray0.length);
      assertNotNull(objectArray1);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      float[] floatArray0 = new float[9];
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[1];
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Index: ";
      stringArray0[4] = "Index: ";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Index: ");
      assertEquals(5, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      int[] intArray0 = new int[14];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(14, intArray0.length);
      
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(2, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2147483648L));
      assertEquals(2, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 0L);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift(doubleArray1, 0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray0, (-92.14948));
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-92.14948), 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 0;
      integerArray0[7] = (Integer) 0;
      integerArray0[8] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(9, integerArray1.length);
      assertEquals(9, integerArray0.length);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)0;
      ArrayUtils.reverse((byte[]) null);
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)9;
      byte[] byteArray1 = ArrayUtils.subarray((byte[]) null, 2118884851, 2155);
      assertNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 851.3628172468533;
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-854.44719217671);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1303.0095991, 38);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {851.3628172468533, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      doubleArray0[5] = (double) (-1);
      intArray0[1] = 38;
      intArray0[2] = 38;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2278), 288);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 851.3628172468533, 38, (-854.44719217671));
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {851.3628172468533, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), (-1.0)}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      float[] floatArray0 = new float[4];
      ArrayUtils.swap(floatArray0, (-1446), (-1714), (-1707));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, (-1446));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), (-2338));
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)82;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-3167);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)6, (short)82, (short)2, (short) (-3167)}, shortArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)112;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short) (-3167), (-3097));
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)90, (byte)51, (byte)0, (byte)112}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'R';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'C', (-677));
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'|', 'R'}, charArray0);
      
      Integer integer0 = new Integer('|');
      assertEquals(124, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)19;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 936, 4288);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)33, (byte)19}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      float[] floatArray0 = new float[4];
      ArrayUtils.swap(floatArray0, (-1446), (-1714), (-1707));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, (-1446));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), (-2338));
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)6;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-3167);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)6, (short)0, (short)2, (short) (-3167)}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)6, (short)0, (short)2, (short) (-3167)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Character character0 = Character.valueOf('B');
      assertEquals('B', (char)character0);
      assertNotNull(character0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertEquals(1L, object0);
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'B';
      doubleArray0[1] = (-5903.1513792529295);
      doubleArray0[2] = (double) ')';
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 41.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {66.0, (-5903.1513792529295), 41.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {66.0, (-5903.1513792529295)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1432.685863862697;
      doubleArray0[1] = (-4643.0);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)994;
      shortArray0[2] = (short)100;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)83;
      shortArray0[5] = (short)816;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)7, (short)994, (short)100, (short)8, (short)83, (short)816, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)994, (short)100, (short)8, (short)83, (short)816, (short)0, (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      Character character0 = Character.valueOf(')');
      assertEquals(')', (char)character0);
      assertNotNull(character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertEquals(')', object0);
      assertNotNull(object0);
      
      shortArray0[1] = (short)994;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-5903.1513792529295));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1432.685863862697, (-4643.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1432.685863862697, (-4643.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'b';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\\', 'b'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '\\';
      intArray0[1] = (int) '\\';
      intArray0[2] = (int) '\\';
      intArray0[3] = (int) 'b';
      intArray0[4] = (int) 'b';
      intArray0[5] = (int) 'b';
      intArray0[6] = (int) 'b';
      intArray0[7] = (int) 'b';
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2091;
      shortArray0[1] = (short) (-1105);
      shortArray0[2] = (short)0;
      ArrayUtils.reverse(shortArray0, 78, 50);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2091, (short) (-1105), (short)0}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2091, (short) (-1105), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)2091, (short) (-1105), (short)0}, shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      Character character0 = Character.valueOf('/');
      assertEquals('/', (char)character0);
      assertNotNull(character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertEquals('/', object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Index: ";
      stringArray0[4] = "Index: ";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Index: ");
      assertEquals(5, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      int[] intArray0 = new int[14];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(14, intArray0.length);
      
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(2, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 0L);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift(doubleArray1, 0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)10;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-25));
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-25), (byte)10}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)10}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[3];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-25);
      byteArray2[1] = (byte) (-78);
      byteArray2[2] = (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray2, 2549, (byte) (-76));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2549, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)76;
      short short0 = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)761;
      shortArray0[2] = (short)50;
      shortArray0[5] = (short)0;
      int int0 = 285;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)50, 285);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)76, (short)0, (short)50, (short)761, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)76;
      doubleArray0[1] = (double) (short)76;
      doubleArray0[2] = 4628.803625496;
      doubleArray0[3] = (double) (short)50;
      doubleArray0[4] = (double) (short)0;
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (short)761, (-1));
      assertEquals((-1), int1);
      assertEquals(5, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {76.0, 76.0, 4628.803625496, 50.0, 0.0}, doubleArray0, 0.01);
      
      Long long0 = new Long((-745L));
      assertEquals((-745L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-745L));
      assertEquals((-745L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(287, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 287, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "0ndex: ";
      stringArray0[3] = "0ndex: ";
      stringArray0[4] = "0ndex: ";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      ArrayUtils.swap(doubleArray0, 1, 1, 1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)52;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)16, (byte)52}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)16, (byte)52}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1247);
      shortArray0[1] = (short) (byte)16;
      shortArray0[2] = (short) (byte)16;
      shortArray0[3] = (short) (byte)16;
      shortArray0[4] = (short) (byte)16;
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (short)16);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 8);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      Class<Long> class1 = Long.class;
      classArray0[1] = class1;
      Class<Long> class2 = Long.class;
      classArray0[2] = class2;
      Class<Long> class3 = Long.class;
      classArray0[3] = class3;
      Class<Long> class4 = Long.class;
      classArray0[4] = class4;
      Class<Long> class5 = Long.class;
      classArray0[5] = class5;
      Class<Long> class6 = Long.class;
      classArray0[6] = class6;
      Class<Long> class7 = Long.class;
      classArray0[7] = class7;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(8, classArray0.length);
      assertEquals(8, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[14];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(14, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(14, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (-3967L);
      longArray0[2] = (-1426L);
      longArray0[3] = (-1L);
      longArray0[0] = 1663L;
      longArray0[5] = 0L;
      longArray0[6] = 3758L;
      longArray0[7] = 0L;
      longArray0[8] = 129L;
      int int0 = ArrayUtils.indexOf(longArray0, 409L);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {1663L, (-3967L), (-1426L), (-1L), 0L, 0L, 3758L, 0L, 129L}, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3967L);
      doubleArray0[1] = (double) 3758L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-3967.0), 3758.0}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Long[] longArray1 = new Long[1];
      longArray1[0] = (Long) (-3967L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-1L));
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-3967L)}, longArray2);
      assertNotSame(longArray2, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '';
      charArray0[2] = 'B';
      charArray0[3] = ',';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'.', '', 'B', ','}, charArray0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2137.417F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = true;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 0;
      ArrayUtils.swap(longArray0, (int) integerArray0[1], 3);
      assertEquals(3, integerArray0.length);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 3L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)75;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)761;
      shortArray0[4] = (short)50;
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 285);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)75, (short)0, (short)0, (short)761, (short)50, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)75, (short)0, (short)0, (short)761, (short)50, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)6;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)6);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift(booleanArray0, 708);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      ArrayUtils.swap((float[]) null, 26, (int) (short)75);
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (short)50, (-2355));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")vU{";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Cbz";
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)70;
      ArrayUtils.swap((double[]) null, (-396), 633, (-396));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)52;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)52, (byte) (-125), (byte)52, (byte)52, (byte) (-125), (byte)16, (byte)52, (byte)52}, byteArray1);
      assertArrayEquals(new byte[] {(byte)52, (byte) (-125), (byte)52, (byte)52, (byte) (-125), (byte)16, (byte)52, (byte)52}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      ArrayUtils.reverse((double[]) null);
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((byte) (-125));
      assertEquals((-125.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2997.217764444));
      assertEquals((-2997.217764444), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-4305.732625821702));
      assertEquals((-4305.732625821702), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, 512);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-35.5F);
      floatArray0[1] = (-1427.2706F);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1427.2706F);
      doubleArray0[1] = (double) (-35.5F);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 2223.284752829376;
      doubleArray0[4] = (double) (-35.5F);
      doubleArray0[5] = (double) (-35.5F);
      doubleArray0[6] = (double) (-1427.2706F);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1427.2706298828125), (-35.5), (-1.0), 2223.284752829376, (-35.5), (-35.5), (-1427.2706298828125)}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[2];
      short short0 = (short)97;
      Short short1 = new Short((short)97);
      assertEquals((short)97, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertEquals((short)97, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)97, (short)97}, shortArray1);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(1581L);
      assertEquals(1581L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(short0);
      assertEquals(97L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(short0);
      assertEquals(97L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 2966L);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1581L, 97L, 97L}, longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2523.0372369), (-1.0));
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1427.2706298828125), (-35.5), (-1.0), 2223.284752829376, (-35.5), (-35.5), (-1427.2706298828125)}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)116);
      assertEquals(1, int0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)116, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)116;
      floatArray0[1] = (float) (byte)116;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)116;
      floatArray0[5] = (float) (byte)116;
      floatArray0[6] = (float) (byte)0;
      floatArray0[7] = (float) (byte)116;
      floatArray0[8] = (-1.0F);
      float[] floatArray1 = ArrayUtils.remove(floatArray0, (int) (byte)0);
      assertEquals(8, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {116.0F, 0.0F, 0.0F, 116.0F, 116.0F, 0.0F, 116.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {116.0F, 116.0F, 0.0F, 0.0F, 116.0F, 116.0F, 0.0F, 116.0F, (-1.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) 116.0F;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) 0.0F;
      objectArray0[5] = (Object) false;
      ArrayUtils.reverse(objectArray0, (int) (byte)0, (-1433));
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1107.06F;
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, 'l', (-2129129085));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)36);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36}, byteArray0);
      assertArrayEquals(new byte[] {(byte)36}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "0ndex: ";
      stringArray0[3] = "0ndex: ";
      stringArray0[4] = "0ndex: ";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      ArrayUtils.swap(doubleArray0, 1, 1, 1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)16;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)16, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)16, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1247);
      shortArray0[1] = (short) (byte)16;
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'l', (int) (byte)16);
      assertEquals(1, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray2 = new byte[4];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)16;
      byteArray2[1] = (byte) (-125);
      byteArray2[2] = (byte)36;
      byteArray2[3] = (byte) (-125);
      byte[] byteArray3 = ArrayUtils.removeElement(byteArray2, (byte) (-125));
      assertEquals(4, byteArray2.length);
      assertEquals(3, byteArray3.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-125), (byte)36, (byte) (-125)}, byteArray2);
      assertArrayEquals(new byte[] {(byte)16, (byte)36, (byte) (-125)}, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1073741824);
      assertEquals(0, objectArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1073741824;
      longArray0[3] = (long) 1073741824;
      longArray0[2] = (long) 1073741824;
      longArray0[3] = (long) 1073741824;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1073741824L, 0L, 1073741824L, 1073741824L}, longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 120;
      intArray0[1] = 1073741824;
      intArray0[2] = 1073741824;
      intArray0[3] = 1073741824;
      intArray0[6] = 1073741824;
      intArray0[7] = 11;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {120, 1073741824, 1073741824, 1073741824, 0, 0, 1073741824, 11}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean((boolean) boolean1);
      assertTrue(boolean3);
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[5] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.toArray(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap((Object[]) booleanArray1, 120, 1072, 11);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      int[] intArray2 = ArrayUtils.removeAllOccurences(intArray0, (-375));
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {120, 1073741824, 1073741824, 1073741824, 0, 0, 1073741824, 11}, intArray0);
      assertArrayEquals(new int[] {120, 1073741824, 1073741824, 1073741824, 0, 0, 1073741824, 11}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1073741824;
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) 11;
      doubleArray0[3] = (double) 1072;
      doubleArray0[4] = (double) 1073741824;
      doubleArray0[5] = (double) 1073741824L;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 1073741824L);
      assertEquals(3, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {11.0, 11.0, 1072.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.073741824E9, 11.0, 11.0, 1072.0, 1.073741824E9, 1.073741824E9}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-73));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 643.80042115172, (-310));
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      Map<Object, Object> map0 = ArrayUtils.toMap(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(map0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-115);
      byteArray0[8] = (byte) (-39);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)97);
      assertEquals((-1), int0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-89), (byte) (-101), (byte)74, (byte) (-101), (byte) (-64), (byte)2, (byte) (-115), (byte) (-39)}, byteArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short) (-1511);
      longArray0[1] = (long) (byte) (-101);
      longArray0[2] = (long) (byte)74;
      longArray0[3] = (long) ']';
      longArray0[4] = (long) ']';
      longArray0[5] = (long) (byte) (-89);
      longArray0[6] = 1879L;
      longArray0[7] = (long) (byte) (-39);
      longArray0[8] = (long) ']';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2211L);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1511L), (-101L), 74L, 93L, 93L, (-89L), 1879L, (-39L), 93L}, longArray0);
      assertArrayEquals(new long[] {(-1511L), (-101L), 74L, 93L, 93L, (-89L), 1879L, (-39L), 93L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = '-';
      charArray0[2] = 'w';
      charArray0[3] = 'b';
      charArray0[4] = '6';
      charArray0[5] = 'B';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'K', '-', 'w', 'b', '6', 'B'}, charArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) '-';
      objectArray0[1] = (Object) 'K';
      objectArray0[2] = (Object) '6';
      objectArray0[3] = (Object) 'b';
      Object object0 = ArrayUtils.get(objectArray0, 2904);
      assertEquals(5, objectArray0.length);
      assertNull(object0);
      
      objectArray0[4] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1]);
      assertEquals(1, int0);
      assertEquals(5, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'K';
      doubleArray0[1] = (double) 'b';
      doubleArray0[2] = (double) '6';
      doubleArray0[3] = (double) 'K';
      doubleArray0[4] = (double) 'B';
      doubleArray0[5] = (double) '-';
      doubleArray0[6] = (-348.088);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {75.0, 98.0, 54.0, 75.0, 66.0, 45.0, (-348.088)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {75.0, 98.0, 54.0, 75.0, 66.0, 45.0, (-348.088)}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '-';
      floatArray0[1] = (float) 'K';
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 'b';
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 'w';
      floatArray0[6] = (float) '-';
      floatArray0[7] = (float) 'B';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1986.0F));
      assertEquals(9, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1986.0F), 45.0F, 75.0F, (-1.0F), 98.0F, 1.0F, 119.0F, 45.0F, 66.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {45.0F, 75.0F, (-1.0F), 98.0F, 1.0F, 119.0F, 45.0F, 66.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(1, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)53;
      shortArray0[1] = (short) (byte)75;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)53, (short)75}, shortArray0);
      assertArrayEquals(new short[] {(short)53}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)75, (short)53}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-13002);
      shortArray0[1] = (short)100;
      shortArray0[2] = (short)1831;
      shortArray0[3] = (short)56;
      shortArray0[4] = (short)70;
      shortArray0[5] = (short)2;
      ArrayUtils.reverse(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)70, (short)56, (short)1831, (short)100, (short) (-13002)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Index: ";
      stringArray0[4] = "Index: ";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Index: ");
      assertEquals(5, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3156;
      shortArray0[1] = (short) (-1965);
      ArrayUtils.swap(shortArray0, (-924), (int) (short)3156);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)3156, (short) (-1965)}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), (int) (short)3156);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3156, (short) (-1965)}, shortArray0);
      assertArrayEquals(new short[] {(short)3156, (short) (-1965)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-93L));
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (short) (-1965);
      doubleArray0[2] = 661.116739991259;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (short)3156;
      doubleArray0[6] = (double) (-93L);
      doubleArray0[7] = (double) (short) (-1965);
      doubleArray0[8] = (double) (short)3156;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1965.0), 661.116739991259, (-1.0), (-1.0), 3156.0, (-93.0), (-1965.0), 3156.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = new short[9];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (-1965);
      shortArray2[1] = (short) (-1965);
      shortArray2[2] = (short) (-1965);
      shortArray2[3] = (short) (-1965);
      shortArray2[4] = (short) (-1965);
      shortArray2[5] = (short) (-1965);
      shortArray2[6] = (short)3156;
      shortArray2[7] = (short)3156;
      shortArray2[8] = (short) (-1965);
      ArrayUtils.reverse(shortArray2, (-1580), (-924));
      assertEquals(9, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-1965), (short) (-1965), (short) (-1965), (short) (-1965), (short) (-1965), (short) (-1965), (short)3156, (short)3156, (short) (-1965)}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "&Y|GZx X6";
      stringArray0[2] = "&Y|GZx X6";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-57);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-103), (byte) (-110), (byte) (-103), (byte) (-57)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-103), (byte) (-110), (byte) (-103), (byte) (-57)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte) (-103);
      longArray0[1] = (long) (byte) (-57);
      longArray0[2] = (long) (byte) (-57);
      longArray0[3] = (long) (byte) (-103);
      longArray0[4] = (long) (byte) (-57);
      longArray0[5] = (long) (byte) (-110);
      ArrayUtils.shift(longArray0, (int) (byte) (-103));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-57L), (-57L), (-103L), (-57L), (-110L), (-103L)}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-103);
      intArray0[1] = (int) (byte) (-103);
      intArray0[2] = (int) (byte) (-110);
      intArray0[3] = (int) (byte) (-110);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-103), (-103), (-110), (-110)}, intArray0);
      assertArrayEquals(new int[] {(-103), (-103), (-110), (-110), (-103), (-103), (-110), (-110)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = stringArray0[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-833);
      ArrayUtils.shift(doubleArray0, 2144973284);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-833.0), 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2144973284;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-833));
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2.14497331E9F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '\"';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.14497331E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      char[] charArray0 = new char[1];
      float[] floatArray0 = new float[7];
      floatArray0[1] = (-35.5F);
      floatArray0[1] = (-1427.2706F);
      floatArray0[2] = (-1427.2706F);
      floatArray0[3] = (-35.5F);
      floatArray0[4] = (-35.5F);
      floatArray0[5] = (-1427.2706F);
      floatArray0[6] = (-35.5F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-2852.829F));
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1427.2706F), (-1427.2706F), (-35.5F), (-35.5F), (-1427.2706F), (-35.5F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2852.829F), 0.0F, (-1427.2706F), (-1427.2706F), (-35.5F), (-35.5F), (-1427.2706F), (-35.5F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.swap(charArray0, 54, 54);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      Random.setNextRandom((-670));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1427.2706F);
      doubleArray0[1] = (-628.695073145039);
      doubleArray0[2] = (double) (-2129129085);
      doubleArray0[3] = (double) 54;
      doubleArray0[4] = (double) (-136);
      doubleArray0[1] = (double) 0.0F;
      ArrayUtils.shift(doubleArray0, (-833));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1427.2706298828125), 0.0, (-2.129129085E9), 54.0, (-136.0)}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (-670));
      assertFalse(boolean1);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, (-1427.2706F), (-1427.2706F), (-35.5F), (-35.5F), (-1427.2706F), (-35.5F)}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      ArrayUtils.reverse(charArray0, (-136), 103);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = '\"';
      charArray0[0] = '\"';
      char char1 = '4';
      charArray0[1] = '4';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = 643.80042115172;
      doubleArray0[2] = 643.80042115172;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1526.5809, 423);
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {52.0, 643.80042115172, 643.80042115172}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = stringArray0[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-833);
      ArrayUtils.shift(doubleArray0, 2144973284);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-833.0), 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2144973284;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-833));
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2.14497331E9F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '\"';
      ArrayUtils.reverse(charArray0, 2144973284, 598);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "[%!cYGl{]2?<a";
      stringArray0[3] = "[%!cYGl{]2?<a";
      stringArray0[4] = "[%!cYGl{]2?<a";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "[%!cYGl{]2?<a");
      assertEquals(5, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-840.7F);
      floatArray0[1] = (-840.7F);
      floatArray0[2] = (-3239.5425F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F));
      assertEquals(3, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-840.7F), (-840.7F), (-3239.5425F)}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      ArrayUtils.swap(charArray0, (-1311), (-1), 1760);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'A'}, charArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'A';
      longArray0[1] = (long) 'A';
      longArray0[2] = (long) (-1311);
      longArray0[3] = (long) 'A';
      longArray0[4] = (long) 'A';
      longArray0[5] = (long) (-1311);
      longArray0[6] = (long) 'A';
      longArray0[7] = (long) 'A';
      longArray0[8] = (long) (-1);
      ArrayUtils.shuffle(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {65L, (-1311L), 65L, 65L, (-1311L), 65L, 65L, (-1L), 65L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 76.0;
      doubleArray0[1] = 112.0;
      doubleArray0[3] = 258.9125308629482;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)93);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Short short0 = new Short((byte)93);
      assertEquals((short)93, (short)short0);
      assertNotNull(short0);
      
      Long long0 = new Long((-542L));
      assertEquals((-542L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)93, 101);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (float) (byte)93, 256);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      Integer integer0 = new Integer((byte)4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) (short) (-1511);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], 12);
      assertEquals(2, objectArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-57);
      floatArray0[1] = (float) (-57);
      floatArray0[2] = (-1479.2395F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 102, (-22));
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-57.0F), (-57.0F), (-1479.2395F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'K');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)100;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1770), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1770, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-99L);
      longArray0[3] = 1879L;
      longArray0[4] = 1144L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-3213L), (-958));
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, (-99L), 0L, 1879L, 1144L, 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertTrue(boolean0);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-57);
      shortArray0[1] = (short) (byte) (-103);
      shortArray0[2] = (short) (byte) (-103);
      ArrayUtils.shift(shortArray0, (int) (short)27891);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-57), (short) (-103), (short) (-103)}, shortArray0);
      
      ArrayUtils.swap(booleanArray0, (-1), (-1), (-1652));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[4] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '#');
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'5'}, charArray0);
      
      long[] longArray2 = ArrayUtils.add((long[]) null, 0, 0L);
      assertEquals(1, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      Float float0 = new Float(2022.3812F);
      assertEquals(2022.3812F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[1];
      int int0 = (-2338);
      intArray0[0] = (-2338);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2338, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)0;
      ArrayUtils.reverse((byte[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      charArray0[5] = 'x';
      charArray0[6] = 'V';
      charArray0[7] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'f');
      assertEquals(8, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'V', 'x', 'x', 'V', 'V', 'x', 'V', 'V'}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-1.0F));
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap(charArray0, (int) (short)0, (int) (short)0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'V', 'x', 'x', 'V', 'V', 'x', 'V', 'V'}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (short)0);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 295;
      intArray0[1] = 4587;
      intArray0[2] = 2487;
      intArray0[3] = 1072;
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = new Boolean((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = new Boolean((String) null);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[2] = boolean1;
      Boolean boolean2 = new Boolean((String) null);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[3] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 295;
      ArrayUtils.shift(floatArray0, 2487, 438, (-883));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {295.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 295;
      longArray0[1] = (long) 4587;
      longArray0[2] = (long) 4587;
      longArray0[3] = (long) 1072;
      longArray0[4] = (long) 4587;
      longArray0[5] = (long) 295;
      longArray0[6] = (long) 295;
      longArray0[7] = (long) (-883);
      longArray0[8] = (long) 1072;
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {295L, 4587L, 4587L, 1072L, 4587L, 295L, 295L, (-883L), 1072L}, longArray0);
      assertArrayEquals(new long[] {295L, 4587L, 4587L, 1072L, 4587L, 295L, 295L, (-883L), 1072L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2834);
      shortArray0[1] = (short)827;
      shortArray0[2] = (short) (-714);
      shortArray0[3] = (short) (-586);
      shortArray0[4] = (short)1580;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-203);
      shortArray0[7] = (short)65;
      ArrayUtils.shift(shortArray0, (int) (short) (-586), (-111), (int) (short)827);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2834), (short)827, (short) (-714), (short) (-586), (short)1580, (short) (-1), (short) (-203), (short)65}, shortArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (int) (short) (-203));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-38.6765));
      assertEquals((-38.6765), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((short) (-1));
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((short)1580);
      assertEquals(1580.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[4]);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.5, (-38.6765), (-1.0), 1580.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) (short)65;
      longArray0[2] = (long) (short) (-714);
      longArray0[3] = (long) (short)827;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 65L, (-714L), 827L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 65L, (-714L), 827L, (-1L), 65L, (-714L), 827L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-73));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      Map<Object, Object> map0 = ArrayUtils.toMap(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(map0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)74;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-115);
      byteArray0[8] = (byte) (-39);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)97);
      assertEquals((-1), int0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-89), (byte) (-101), (byte)74, (byte)0, (byte) (-64), (byte)2, (byte) (-115), (byte) (-39)}, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)10;
      floatArray0[1] = (float) (-73);
      floatArray0[2] = (float) (byte) (-89);
      ArrayUtils.shift(floatArray0, (-599));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-89.0F), 10.0F, (-73.0F)}, floatArray0, 0.01F);
      
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)74;
      shortArray1[1] = (short) (byte) (-64);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-64), shortArray0, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -64, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)100;
      byteArray0[0] = (byte)100;
      ArrayUtils.shift(byteArray0, (int) (byte)100, (-53), (-53));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)100);
      assertEquals((short)100, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short)100, (short)short1);
      assertEquals(3, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[2] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte)100);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)100, (short)100, (short)100}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray1);
      assertTrue(boolean1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)100, (short)100, (short)100}, shortArray1);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      assertArrayEquals(new byte[] {(byte)100}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) shortArray0[2]);
      assertEquals(100.0, (double)double1, 0.01);
      assertEquals(3, shortArray0.length);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((byte)100);
      assertEquals(100.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 100.0, 100.0}, doubleArray1, 0.01);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean2 = new Boolean("@&er !6D&8");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[1] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      boolean boolean4 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean4);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) shortArray0[1], shortArray1, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)420;
      shortArray0[1] = (short) (-643);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)3094;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(90, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = '\\';
      charArray0[2] = '1';
      charArray0[3] = '\\';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'1', '\\', '1', '\\'}, charArray0);
      assertArrayEquals(new char[] {'\\', '1', '\\'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '1';
      doubleArray0[1] = (double) '\\';
      doubleArray0[2] = (double) '\\';
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) '\\';
      doubleArray0[5] = (double) '\\';
      doubleArray0[6] = (double) '\\';
      doubleArray0[7] = (double) '\\';
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 2282.441580433286);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {49.0, 92.0, 92.0, 0.0, 92.0, 92.0, 92.0, 92.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {49.0, 92.0, 92.0, 0.0, 92.0, 92.0, 92.0, 92.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      AbstractMap.SimpleEntry<Double, Short>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Double, Short>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 6);
      short short0 = (short) (-1191);
      Short short1 = new Short((short) (-1191));
      assertEquals((short) (-1191), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      AbstractMap.SimpleEntry<Double, Short> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Double, Short>((Double) 92.0, short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Double, Short> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Double, Short>(abstractMap_SimpleEntry0);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry1;
      Double double0 = new Double(49.0);
      assertEquals(49.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      AbstractMap.SimpleEntry<Double, Short> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Double, Short>(double0, short1);
      assertTrue(short1.equals((Object)short0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry2);
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<Double, Short> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Double, Short>((Double) 49.0, (Short) null);
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry3);
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry3;
      Double double1 = new Double((-854.44719217671));
      assertEquals((-854.44719217671), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Short short2 = new Short((short) (-314));
      assertEquals((short) (-314), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      AbstractMap.SimpleImmutableEntry<Double, Short> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Short>(double1, short2);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Double, Short> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Double, Short>(abstractMap_SimpleImmutableEntry0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry4);
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry4;
      AbstractMap.SimpleEntry<Double, Short> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Double, Short>(abstractMap_SimpleEntry4);
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry5);
      
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry5;
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      try { 
        Short.valueOf((String) null, (int) (short) (-314));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'R';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'C', (-677));
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'|', 'R'}, charArray0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer('|');
      assertEquals(124, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integerArray0[2];
      Integer integer2 = new Integer((-151));
      assertEquals((-151), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[4] = integer2;
      Integer integer3 = new Integer((-677));
      assertEquals((-677), (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      integerArray0[5] = integer3;
      Integer integer4 = new Integer(13);
      assertEquals(13, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      integerArray0[6] = integer4;
      Integer integer5 = Integer.getInteger("Mr-#'Ngg>RB-", (-311));
      assertEquals((-311), (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertNotNull(integer5);
      
      integerArray0[8] = integer5;
      Integer integer6 = new Integer(175);
      assertEquals(175, (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer6);
      assertEquals(9, integerArray1.length);
      assertEquals(9, integerArray0.length);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'C', 13);
      assertEquals((-1), int1);
      assertEquals(2, charArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'|', 'R'}, charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 13;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-469.678840742903));
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {13.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (-677));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1684);
      shortArray0[1] = (short)12;
      int int2 = ArrayUtils.indexOf(shortArray0, (short) (-1684));
      assertEquals(0, int2);
      assertEquals(2, shortArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new short[] {(short) (-1684), (short)12}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1107.06F;
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '<');
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray1 = ArrayUtils.addFirst((float[]) null, 1107.06F);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1107.06F}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, 'l', (-2129129085));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)36);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36}, byteArray0);
      assertArrayEquals(new byte[] {(byte)36}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Integer integer0 = new Integer((-2129129085));
      assertEquals((-2129129085), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-333));
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertEquals(3, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {1107.06F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1107.06F;
      BitSet bitSet2 = ArrayUtils.indexesOf(doubleArray0, (double) (-2129129085));
      assertEquals(1, doubleArray0.length);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertNotNull(bitSet2);
      assertArrayEquals(new double[] {1107.06005859375}, doubleArray0, 0.01);
      assertEquals(0, bitSet2.length());
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet2.isEmpty());
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'Z';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      charArray0[6] = 'l';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'D', (int) (short)663);
      assertEquals(7, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'l', 'Z', 'l', 'l', 'l', 'l', 'l'}, charArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-29));
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36}, byteArray1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-580L);
      longArray0[1] = 4481L;
      longArray0[2] = 1L;
      longArray0[3] = (-1110L);
      longArray0[4] = 4697L;
      longArray0[5] = 2147483647L;
      longArray0[6] = (-3285L);
      longArray0[7] = 2147483647L;
      long[] longArray1 = ArrayUtils.add(longArray0, 4481L);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-580L), 4481L, 1L, (-1110L), 4697L, 2147483647L, (-3285L), 2147483647L}, longArray0);
      assertArrayEquals(new long[] {(-580L), 4481L, 1L, (-1110L), 4697L, 2147483647L, (-3285L), 2147483647L, 4481L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '*';
      charArray0[2] = 'k';
      charArray0[3] = 'S';
      charArray0[4] = '4';
      charArray0[5] = '_';
      charArray0[6] = ')';
      charArray0[7] = 'p';
      char[] charArray1 = ArrayUtils.add(charArray0, 2, '-');
      assertEquals(9, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'<', '*', '-', 'k', 'S', '4', '_', ')', 'p'}, charArray1);
      assertArrayEquals(new char[] {'<', '*', 'k', 'S', '4', '_', ')', 'p'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1511);
      intArray0[1] = 51;
      intArray0[2] = 1399;
      intArray0[3] = 171;
      intArray0[4] = 2173;
      intArray0[5] = (-1375);
      intArray0[6] = 2;
      intArray0[7] = 1074;
      int int0 = ArrayUtils.indexOf(intArray0, 1455, 0);
      assertEquals((-1), int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1511), 51, 1399, 171, 2173, (-1375), 2, 1074}, intArray0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Index: ";
      stringArray0[4] = "Index: ";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Index: ");
      assertEquals(5, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      int[] intArray0 = new int[14];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(14, intArray0.length);
      
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(2, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2147483648L));
      assertEquals(2, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 0L);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift(doubleArray1, 0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-1149), Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, (-1149), 1.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1149, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-670.3156F);
      floatArray0[5] = (-788.978F);
      floatArray0[6] = 4521.07F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 4521.07F);
      assertEquals(7, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-2137.417F), (-688.87604F), 0.0F, 0.0F, (-670.3156F), (-788.978F), 4521.07F}, floatArray0, 0.01F);
      assertEquals("{6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      int int0 = 2284;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 2284, 912.38F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2284, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[19];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(19, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      longArray0[1] = (-329L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-329L)}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-329L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Character character0 = new Character(';');
      assertEquals(';', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('R');
      assertEquals('R', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('i');
      assertEquals('i', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character1;
      characterArray0[1] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'Y');
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'R', 'i'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 100);
      assertEquals((-1), int0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      
      long[] longArray2 = ArrayUtils.add(longArray0, 945L);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, (-329L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-329L), 945L}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-1664), 111, (-3360));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1), (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 970;
      longArray0[1] = 2263L;
      longArray0[2] = (-3252L);
      longArray0[5] = (long) 171;
      longArray0[6] = (long) (-124);
      longArray0[7] = (long) 171;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      
      long[] longArray1 = ArrayUtils.add(longArray0, 268L);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {970L, 2263L, (-3252L), 0L, 0L, 171L, (-124L), 171L, 0L}, longArray0);
      assertArrayEquals(new long[] {970L, 2263L, (-3252L), 0L, 0L, 171L, (-124L), 171L, 0L, 268L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ArrayUtils.shift(byteArray0, (int) (byte)100, (-53), (-53));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)100);
      assertEquals((short)100, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short)100, (short)short1);
      assertEquals(3, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[2] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte)100);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)100, (short)100, (short)100}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray1);
      assertTrue(boolean1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)100, (short)100, (short)100}, shortArray1);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      assertArrayEquals(new byte[] {(byte)100}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) shortArray0[2]);
      assertEquals(100.0, (double)double1, 0.01);
      assertEquals(3, shortArray0.length);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((byte)100);
      assertEquals(100.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 100.0, 100.0}, doubleArray1, 0.01);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean2 = new Boolean("@&er !6D&8");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[1] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      boolean boolean4 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean4);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '|';
      longArray0[1] = (-2743L);
      longArray0[2] = 606L;
      longArray0[3] = (-2743L);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {124L, (-2743L), 606L, (-2743L)}, longArray0);
      assertArrayEquals(new long[] {124L, (-2743L), 606L, (-2743L)}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '|';
      intArray0[1] = 1275;
      intArray0[2] = (int) '|';
      intArray0[3] = (int) '|';
      intArray0[4] = (int) '|';
      intArray0[5] = (int) '|';
      intArray0[6] = (int) '|';
      intArray0[7] = (int) '|';
      intArray0[8] = (int) '|';
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 124, 102);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.reverse((float[]) null);
      ArrayUtils.shift(intArray0, 2142774254);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {124, 124, 124, 1275, 124, 124, 124, 124, 124}, intArray0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = 455L;
      longArray0[2] = (-82L);
      longArray0[3] = 1879L;
      int int0 = ArrayUtils.indexOf(longArray0, 455L);
      assertEquals(1, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 455L, (-82L), 1879L, 0L, 0L}, longArray0);
      
      ArrayUtils.reverse((boolean[]) null);
      Character character0 = Character.valueOf('%');
      assertEquals('%', (char)character0);
      assertNotNull(character0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[2] = (double) '%';
      doubleArray0[4] = (double) 1879L;
      doubleArray0[5] = (double) '%';
      doubleArray0[6] = (double) '%';
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) (-82L);
      longArray1[1] = (Long) (-82L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(2, longArray2.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-82L), (-82L)}, longArray2);
      assertNotSame(longArray2, longArray0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray1, (Object) byte0);
      assertEquals(2, longArray1.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = (-1);
      intArray0[3] = 26;
      intArray0[7] = 0;
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)97);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-39);
      floatArray0[1] = (float) (-599);
      ArrayUtils.shift(floatArray0, (int) (byte) (-39));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-599.0F), (-39.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      ArrayUtils.shift(charArray0, (-1333), 110, (-1333));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'}'}, charArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 36;
      floatArray0[2] = (float) 110;
      floatArray0[3] = (float) (-2557);
      floatArray0[4] = (float) (-2557);
      ArrayUtils.swap(floatArray0, 120, (-2557), (-156));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 36.0F, 110.0F, (-2557.0F), (-2557.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, 36);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-2557.0F), 0.0F, 36.0F, 110.0F, (-2557.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(180.1547F);
      assertEquals(180.1547F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(3574.0);
      assertEquals(3574.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 180.1547F);
      assertEquals(180.1547F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {180.1547F, 3574.0F, 180.1547F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, (-1.0F));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {180.1547F, 3574.0F, 180.1547F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 180.1547F, 3574.0F, 180.1547F}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 3596.7);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3596.7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = 'l';
      int int0 = ArrayUtils.indexOf(doubleArray0, (-693.7028), 2);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      Long long0 = new Long(2);
      assertEquals(2L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      Long[] longArray1 = ArrayUtils.add(longArray0, longArray0[0]);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Object[]) longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      
      float[] floatArray3 = new float[9];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (-1.0F);
      floatArray3[1] = (float) 2;
      floatArray3[2] = (float) (long)longArray0[2];
      floatArray3[3] = (float) (-1);
      floatArray3[4] = (float) 'l';
      floatArray3[5] = (float) '/';
      floatArray3[6] = (float) '/';
      floatArray3[7] = (float) 'l';
      floatArray3[8] = 4371.618F;
      float[] floatArray4 = ArrayUtils.removeElements(floatArray3, floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(9, floatArray4.length);
      assertEquals(9, floatArray3.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray3));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertNotNull(floatArray4);
      assertArrayEquals(new float[] {(-1.0F), 2.0F, 2.0F, (-1.0F), 108.0F, 47.0F, 47.0F, 108.0F, 4371.618F}, floatArray4, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 2.0F, 2.0F, (-1.0F), 108.0F, 47.0F, 47.0F, 108.0F, 4371.618F}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {180.1547F, 3574.0F, 180.1547F}, floatArray1, 0.01F);
      assertNotSame(floatArray4, floatArray2);
      assertNotSame(floatArray4, floatArray1);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray4);
      assertNotSame(floatArray1, floatArray4);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray2);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-2137.417F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2417.4536F));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2137.417F), (-2137.417F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2137.417F), (-2137.417F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-2137.417F), (-2137.417F)}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3157.919F);
      doubleArray0[1] = 112.0;
      doubleArray0[2] = (-3630.80066424836);
      doubleArray0[3] = (double) (-3157.919F);
      doubleArray0[4] = (double) (-2137.417F);
      doubleArray0[5] = 112.0;
      doubleArray0[6] = (-3630.80066424836);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3157.9189453125), 112.0, (-3630.80066424836), (-3157.9189453125), (-2137.4169921875), 112.0, (-3630.80066424836)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2143);
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)1894);
      assertFalse(boolean1);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-2143)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2137.417F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2417.4536F));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2137.417F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2137.417F), 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-2137.417F), 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3204.845F);
      doubleArray0[2] = (-3630.80066424836);
      doubleArray0[0] = (double) (-3204.845F);
      doubleArray0[5] = 112.0;
      doubleArray0[6] = (-3630.80066424836);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3204.844970703125), 0.0, (-3630.80066424836), 0.0, 0.0, 112.0, (-3630.80066424836)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2143);
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)1894);
      assertFalse(boolean1);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-2143)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)87;
      shortArray0[1] = (short)87;
      shortArray0[2] = (short) (byte)87;
      shortArray0[3] = (short) (byte)87;
      shortArray0[4] = (short) (byte)87;
      shortArray0[5] = (short) (byte)87;
      shortArray0[6] = (short) (byte)87;
      shortArray0[2] = (short) (-1);
      shortArray0[8] = (short) (byte)87;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)59);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)87, (short)87, (short) (-1), (short)87, (short)87, (short)87, (short)87, (short)0, (short)87}, shortArray0);
      assertArrayEquals(new short[] {(short)87, (short)87, (short) (-1), (short)87, (short)87, (short)87, (short)87, (short)0, (short)87}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-407.268879));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      Integer integer1 = Integer.getInteger("3YOAmq vu");
      assertNull(integer1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-76);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-76), (byte)1}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1107.06F;
      floatArray0[1] = (-1372.4F);
      floatArray0[2] = (-398.66F);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1107.06F;
      doubleArray0[1] = (double) (-1372.4F);
      doubleArray0[2] = 643.80042115172;
      doubleArray0[3] = (double) (-1372.4F);
      doubleArray0[4] = (double) 1107.06F;
      doubleArray0[5] = (double) 1314;
      doubleArray0[6] = (double) 1107.06F;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-18.53386F);
      floatArray0[1] = 697.049F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 520.4F;
      floatArray0[5] = 52.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-1.0F);
      floatArray0[8] = (-3157.919F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-18.53386F), 697.049F, 1.0F, (-1.0F), 520.4F, 52.0F, (-1.0F), (-1.0F), (-3157.919F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3157.919F);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3157.9189453125)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)160;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-2143));
      assertFalse(boolean1);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)160}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)100;
      doubleArray0[3] = 0.0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1103);
      intArray0[1] = (-1103);
      intArray0[3] = (int) (byte)100;
      ArrayUtils.shift(intArray0, 868);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1103), (-1103), 0, 100}, intArray0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte)15);
      assertNull(byteArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = '6';
      charArray0[4] = 'm';
      charArray0[5] = '}';
      charArray0[6] = 'o';
      charArray0[7] = '&';
      charArray0[8] = ';';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'m', 'e', 'e', '6', 'm', '}', 'o', '&', ';'}, charArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray2);
      
      ArrayUtils.reverse(charArray0, 65, (-2375));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'m', 'e', 'e', '6', 'm', '}', 'o', '&', ';'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Short short0 = new Short((short) (-2188));
      assertEquals((short) (-2188), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-2188));
      assertEquals((short) (-2188), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-56));
      assertEquals((short) (-56), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short2;
      shortArray0[1] = short2;
      shortArray0[2] = short0;
      shortArray0[3] = short1;
      shortArray0[4] = short2;
      shortArray0[5] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[2] = '/';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '/');
      assertEquals(5, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'/', '/', '/', '/', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'/', '/', '/', '\u0000'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")vU{";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Cbz";
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)70;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2);
      ArrayUtils.shift(shortArray0, Integer.MAX_VALUE);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)70, (short)0, (short) (-2), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)70;
      doubleArray0[1] = 3404.393357;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short) (-3250);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {70.0, 3404.393357, 0.0, 0.0, 0.0, (-3250.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'B';
      charArray0[2] = 'v';
      ArrayUtils.shift(charArray0, (-12), (-1083), (int) (short)0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'B', 'v'}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)70, (int) (short)70);
      assertEquals(9, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)70, (short)0, (short) (-2), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'B');
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Y', 'B', 'v'}, charArray0);
      assertArrayEquals(new char[] {'B', 'Y', 'B', 'v'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-407.268879));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2137.417F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      Integer integer1 = Integer.getInteger("3YOAmq vu");
      assertNull(integer1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-76);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-76), (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 851.3628172468533;
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      Integer integer0 = Integer.getInteger("suU&EY.a,");
      assertNull(integer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)37}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-407.269));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      Integer integer1 = Integer.getInteger("3YOAmq vu");
      assertNull(integer1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-76);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-76), (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Character character0 = Character.valueOf('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-4184);
      floatArray0[4] = (float) (-4184);
      floatArray0[5] = (float) 't';
      floatArray0[6] = (float) (-4184);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertEquals(3, int0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-4184.0F), 0.0F, (-4184.0F), 116.0F, (-4184.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[0] = 't';
      boolean boolean0 = ArrayUtils.contains(charArray0, '<');
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'t', '\u0000'}, charArray0);
      
      ArrayUtils.reverse(charArray0, (-2), 3);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 't'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)100;
      doubleArray0[3] = 0.0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1103);
      intArray0[1] = (-1103);
      intArray0[3] = (int) (byte)100;
      ArrayUtils.shift(intArray0, 3369);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {100, (-1103), (-1103), 0}, intArray0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte)15);
      assertNull(byteArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = 'e';
      charArray0[2] = '-';
      charArray0[3] = '6';
      charArray0[4] = 'm';
      char[] charArray1 = ArrayUtils.add(charArray0, '~');
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'m', 'e', '-', '6', 'm', '\u0000', '\u0000', '\u0000', '\u0000', '~'}, charArray1);
      assertArrayEquals(new char[] {'m', 'e', '-', '6', 'm', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-1));
      assertFalse(boolean0);
      
      char[] charArray2 = ArrayUtils.toPrimitive((Character[]) null, '7');
      assertNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      ArrayUtils.shift(charArray0, (-1333), 110, (-1333));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'}'}, charArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 36;
      floatArray0[2] = (float) 110;
      floatArray0[3] = (float) (-2557);
      floatArray0[4] = (float) (-2557);
      Short[] shortArray0 = ArrayUtils.subarray((Short[]) null, 2146993018, 102);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 102;
      intArray0[1] = 110;
      intArray0[2] = 110;
      intArray0[3] = (int) '}';
      intArray0[4] = 36;
      intArray0[5] = 36;
      intArray0[6] = 2146993018;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1628);
      assertEquals((-1), int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {102, 110, 110, 125, 36, 36, 2146993018}, intArray0);
      
      int int1 = ArrayUtils.indexOf(charArray0, '}');
      assertEquals(0, int1);
      assertEquals(1, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'}'}, charArray0);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-1333));
      assertEquals((-1333L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(142L);
      assertEquals(142L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(102);
      assertEquals(102L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1L));
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1333L), 142L, 102L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Integer integer0 = new Integer((-125));
      assertEquals((-125), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-125), (-125), (-125), (-125), (-125), (-125), (-125)}, intArray0);
      
      char[] charArray1 = new char[4];
      charArray1[0] = 'r';
      charArray1[1] = 'r';
      charArray1[2] = 'P';
      charArray1[3] = 'r';
      char[] charArray2 = ArrayUtils.add(charArray1, 'P');
      assertEquals(5, charArray2.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'r', 'r', 'P', 'r', 'P'}, charArray2);
      assertArrayEquals(new char[] {'r', 'r', 'P', 'r'}, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray2, (char[]) null);
      assertFalse(boolean0);
      assertEquals(5, charArray2.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray2));
      assertArrayEquals(new char[] {'r', 'r', 'P', 'r', 'P'}, charArray2);
      assertArrayEquals(new char[] {'r', 'r', 'P', 'r'}, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray2);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)787;
      doubleArray0[1] = (double) (short)76;
      doubleArray0[2] = 325.21262727;
      doubleArray0[4] = (double) (short)787;
      doubleArray0[5] = (-1075.041);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 2936.38557638);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {787.0, 76.0, 325.21262727, 0.0, 787.0, (-1075.041), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2936.38557638, 787.0, 76.0, 325.21262727, 0.0, 787.0, (-1075.041), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = '7';
      charArray0[2] = '4';
      charArray0[4] = 'A';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'A', '7', '4', '\u0000', 'A'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(1, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      longArray0[1] = (-329L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-329L)}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-329L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(longArray0, 34);
      assertEquals(2, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, (-329L)}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.shift(longArray0, 34);
      assertEquals(2, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, (-329L)}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) mutableIntArray1, 90, 3168, 3136);
      assertEquals(1, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray0.equals((Object)mutableIntArray1));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3168;
      doubleArray0[1] = (double) 34;
      doubleArray0[2] = (double) 34;
      doubleArray0[3] = (double) 34;
      doubleArray0[4] = (double) 34;
      doubleArray0[5] = (double) (-329L);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1422.4760851421943);
      assertEquals(7, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1422.4760851421943, 3168.0, 34.0, 34.0, 34.0, 34.0, (-329.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3168.0, 34.0, 34.0, 34.0, 34.0, (-329.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = '%';
      charArray0[2] = 'k';
      charArray0[3] = '\\';
      charArray0[4] = 'A';
      charArray0[5] = '#';
      charArray0[6] = '&';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean1);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {' ', '%', 'k', '\\', 'A', '#', '&'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'b';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\\', 'b'}, charArray0);
      
      int[] intArray0 = new int[11];
      intArray0[0] = (int) 'b';
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 98;
      longArray1[1] = (long) '\\';
      int int0 = ArrayUtils.lastIndexOf(longArray1, 1L, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {98L, 92L}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) '\\';
      longArray2[1] = (long) 'b';
      boolean boolean1 = ArrayUtils.isSorted(longArray2);
      assertTrue(boolean1);
      assertEquals(2, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {92L, 98L}, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      ArrayUtils.shift((short[]) null, Integer.MAX_VALUE);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-609), 1194, 1073741824);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6116;
      shortArray0[1] = (short)2770;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)6116, (short)2770}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "&Y|GZx X6";
      stringArray0[2] = "&Y|GZx X6";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 1530L);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-57);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-103);
      shortArray0[1] = (short)27891;
      shortArray0[2] = (short) (byte) (-103);
      shortArray0[3] = (short) (byte) (-110);
      shortArray0[4] = (short) (byte) (-110);
      shortArray0[5] = (short) (byte) (-103);
      shortArray0[6] = (short) (byte) (-110);
      shortArray0[7] = (short) (byte) (-103);
      ArrayUtils.shift(shortArray0, (int) (byte) (-103));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-103), (short) (-103), (short)27891, (short) (-103), (short) (-110), (short) (-110), (short) (-103), (short) (-110)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, 2144464867, 658, (-995));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-2137.417F);
      objectArray0[1] = (Object) (-2137.417F);
      objectArray0[2] = (Object) (-688.87604F);
      objectArray0[3] = (Object) (-2137.417F);
      objectArray0[4] = (Object) (-2137.417F);
      objectArray0[5] = (Object) (-2137.417F);
      objectArray0[6] = (Object) (-688.87604F);
      objectArray0[7] = (Object) (-2137.417F);
      objectArray0[8] = (Object) (-2137.417F);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[8], 48);
      assertEquals(9, objectArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 48;
      intArray0[1] = 3553;
      intArray0[2] = 48;
      intArray0[3] = 48;
      intArray0[4] = 5359;
      intArray0[5] = 5359;
      intArray0[6] = 2162;
      ArrayUtils.reverse(intArray0, 5359, (-907));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {48, 3553, 48, 48, 5359, 5359, 2162, 0}, intArray0);
      
      ArrayUtils.hashCode((Object) "Comparator should not be null.");
      ArrayUtils.shift(intArray0, (-2361), (-907), 314);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {48, 3553, 48, 48, 5359, 5359, 2162, 0}, intArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = 'K';
      charArray0[2] = 'l';
      charArray0[3] = '^';
      charArray0[4] = 'l';
      charArray0[5] = '%';
      char[] charArray1 = ArrayUtils.add(charArray0, '^');
      assertEquals(7, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'-', 'K', 'l', '^', 'l', '%', '^'}, charArray1);
      assertArrayEquals(new char[] {'-', 'K', 'l', '^', 'l', '%'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-854.44719217671);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1303.0095991, 38);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[2] = 38;
      intArray0[3] = 38;
      intArray0[4] = (-5289);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      ArrayUtils.swap(intArray0, 38, (-958));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 38, 38, (-5289), 0, (-1), (-1)}, intArray0);
      
      ArrayUtils.shift(intArray0, 0, (-1), 38);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 38, 38, (-5289), 0, (-1), (-1)}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 38, 38, (-5289), 0, (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)75;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-123);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-118), (byte) (-123)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-118), (byte) (-123)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-12);
      longArray0[1] = 2971L;
      longArray0[2] = (long) (short)75;
      longArray0[3] = (long) (byte) (-12);
      ArrayUtils.shift(longArray0, 34);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {75L, (-12L), (-12L), 2971L}, longArray0);
      
      ArrayUtils.shift(longArray0, 34);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-12L), 2971L, 75L, (-12L)}, longArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte) (-118);
      objectArray0[1] = (Object) (byte) (-118);
      objectArray0[2] = (Object) (-12L);
      objectArray0[3] = (Object) (-12L);
      objectArray0[4] = (Object) (byte) (-12);
      objectArray0[5] = (Object) (byte) (-118);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) 2971L;
      ArrayUtils.shift(objectArray0, Integer.MAX_VALUE, (int) (byte) (-118), 34);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Character character0 = new Character('k');
      assertEquals('k', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.addFirst(characterArray0, character0);
      assertEquals(0, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      double[] doubleArray0 = null;
      short[] shortArray0 = new short[6];
      short short0 = (short) (-3422);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-503);
      longArray0[1] = (long) (-503);
      longArray0[2] = (long) (short) (-3422);
      longArray0[3] = (long) 'k';
      longArray0[4] = (long) (-503);
      longArray0[5] = (long) (-503);
      longArray0[6] = (long) (short) (-3422);
      longArray0[7] = (long) (-503);
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (short) (-3422);
      longArray1[1] = (long) (-503);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-503), longArray0, longArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -503, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      float float0 = (-2137.417F);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2074);
      shortArray0[1] = (short)3319;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)65;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)65, 1);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2074), (short)3319, (short)0, (short)65}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2137.417F);
      doubleArray0[2] = (double) (short)0;
      String[] stringArray0 = ArrayUtils.removeAllOccurrences((String[]) null, "\"<");
      assertNull(stringArray0);
      
      long long0 = 0L;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-2074);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)3319;
      longArray0[3] = 0L;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) (short) (-2074);
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (short)3319;
      int int1 = ArrayUtils.indexOf(longArray0, (long) (short)3319);
      assertEquals(2, int1);
      assertEquals(8, longArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {(-2074L), 0L, 3319L, 0L, 1L, (-2074L), 0L, 3319L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-2074L), 0L, 3319L, 0L, 1L, (-2074L), 0L, 3319L}, longArray0);
      
      int[] intArray0 = new int[2];
      longArray0[0] = (long) (short)3319;
      intArray0[1] = (int) (short) (-2074);
      ArrayUtils.shuffle(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-2074), 0}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)3319, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3319, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = '\'';
      charArray0[0] = '\'';
      char char1 = '4';
      charArray0[1] = '4';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = (-31.0);
      doubleArray0[2] = 643.80042115172;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1526.5809, 423);
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {52.0, (-31.0), 643.80042115172}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'p');
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\'', '4', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Cbz";
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3275);
      shortArray0[1] = (short)70;
      shortArray0[2] = (short)1040;
      shortArray0[3] = (short) (-1);
      ArrayUtils.shift(shortArray0, Integer.MAX_VALUE);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)70, (short)1040, (short) (-1), (short) (-3275)}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = 3404.393357;
      shortArray0[3] = (short) (-3275);
      doubleArray0[3] = (double) (short) (-3275);
      doubleArray0[4] = (double) (short)1040;
      shortArray0[0] = (short) (-3275);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3404.393357, 0.0, (-3275.0), 1040.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-38);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-36), (byte) (-62), (byte)102, (byte)101, (byte)1, (byte)63, (byte) (-38)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-36), (byte) (-62), (byte)102, (byte)101, (byte)63, (byte) (-38)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-38);
      doubleArray0[1] = (double) (byte)63;
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)63);
      assertNull(byteArray2);
      
      ArrayUtils.shift(doubleArray0, (int) (byte) (-36), 1, 18);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-38.0), 63.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, 18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 76.0;
      doubleArray0[1] = 112.0;
      doubleArray0[2] = (-3630.80066424836);
      doubleArray0[3] = 258.9125308629482;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)93);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Short short0 = new Short((byte)93);
      assertEquals((short)93, (short)short0);
      assertNotNull(short0);
      
      Long long0 = new Long((-542L));
      assertEquals((-542L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)93, 101);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-854.44719217671);
      int[] intArray0 = new int[8];
      intArray0[4] = (-5289);
      ArrayUtils.shift(intArray0, 98);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-5289), 0}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), 0.0}, doubleArray0, 0.01);
      
      Random.setNextRandom(0);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (-243.37700403216502));
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-243.37700403216502), 0.0, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-5289));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5289, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-605);
      intArray0[1] = 1131;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-605), 1131}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-605), 1131}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-54));
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (-605);
      longArray0[3] = (long) (-605);
      longArray0[4] = (long) 1131;
      char[] charArray0 = new char[4];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'c';
      char[] charArray1 = ArrayUtils.add(charArray0, 't');
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'c', 'c', 'c', 'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c', 'c', 'c', 't'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertFalse(boolean1);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-605), 1131}, intArray0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) 't';
      intArray1[1] = 1131;
      intArray1[2] = (int) 'c';
      intArray1[3] = (-605);
      intArray1[4] = (int) 'c';
      intArray1[5] = (int) 'c';
      int[] intArray2 = ArrayUtils.add(intArray1, 2, (int) (byte)0);
      assertEquals(6, intArray1.length);
      assertEquals(7, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {116, 1131, 99, (-605), 99, 99}, intArray1);
      assertArrayEquals(new int[] {116, 1131, 0, 99, (-605), 99, 99}, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      ArrayUtils.shift(charArray0, 0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 'z';
      doubleArray0[2] = (double) '4';
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 'f';
      doubleArray0[5] = (double) '\'';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1551.4600447249118, 4287.76236996);
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 122.0, 52.0, 0.0, 102.0, 39.0}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)110;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)0, (byte)1, (byte)0, (byte)92, (byte)110}, byteArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '\'');
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\''}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      ArrayUtils.shift(charArray0, 0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 'z';
      doubleArray0[2] = (double) '4';
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) '\'';
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (byte)92;
      ArrayUtils.shift(floatArray0, (-599));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {92.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 851.3628172468533;
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1303.0095991, 38);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {851.3628172468533, (-854.44719217671), 0.0, (-854.44719217671), (-1.0), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      doubleArray0[5] = (double) (-1);
      intArray0[1] = 38;
      intArray0[2] = 38;
      intArray0[3] = 38;
      intArray0[4] = (-5289);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 38);
      assertEquals(2, int1);
      assertEquals(6, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {851.3628172468533, (-854.44719217671), 0.0, (-854.44719217671), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-1.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], 38);
      assertEquals(3, objectArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      objectArray0[2] = (Object) (-854.44719217671);
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean1);
      assertEquals(3, objectArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3374.256F;
      floatArray0[2] = 835.7F;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, Double.NaN, 2);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (-5289);
      intArray0[2] = (-1);
      intArray0[3] = 38;
      ArrayUtils.shift(intArray0, 0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, (-5289), (-1), 38}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      Random.setNextRandom(50);
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, 50, (double) 38);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&Y|GZx X6";
      stringArray0[1] = "&Y|GZx X6";
      stringArray0[2] = "&Y|GZx X6";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "");
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-181L));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-73);
      intArray0[1] = (int) (short) (-1511);
      intArray0[2] = (int) (short) (-1511);
      intArray0[3] = (-73);
      intArray0[4] = (-73);
      intArray0[5] = 98;
      intArray0[6] = (int) (short) (-1511);
      ArrayUtils.shift(intArray0, (-1511));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1511), (-73), (-1511), (-1511), (-73), (-73), 98}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      Random.setNextRandom((-2712));
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, (-2518), 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2518, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 5;
      longArray0[1] = 299L;
      longArray0[2] = (long) (short)787;
      longArray0[3] = (long) 285;
      ArrayUtils.shift(longArray0, (int) (short)787);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {299L, 787L, 285L, 5L}, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)50;
      intArray0[1] = (int) (short)787;
      intArray0[2] = (int) (short)787;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (-1580);
      intArray0[5] = 4069;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {50, 787, 787, 0, (-1580), 4069}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) 285;
      longArray0[2] = (long) (short)761;
      longArray0[3] = (long) 285;
      ArrayUtils.shift(longArray0, (int) (short)761);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {285L, 5L, 285L, 761L}, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)50;
      intArray0[1] = (int) (short)761;
      intArray0[2] = (int) (short)761;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (-1580);
      intArray0[5] = 4069;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {50, 761, 761, 0, (-1580), 4069}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 5;
      longArray0[1] = 299L;
      longArray0[2] = (long) (short)761;
      longArray0[3] = (long) 285;
      ArrayUtils.shift(longArray0, (int) (short)761);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {285L, 5L, 299L, 761L}, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)50;
      intArray0[1] = (int) (short)761;
      intArray0[2] = (int) (short)761;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (-1580);
      intArray0[5] = 4069;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {50, 761, 761, 0, (-1580), 4069}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-73));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1511);
      ArrayUtils.reverse(intArray0, (int) (short) (-1511), (-2819));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1511)}, intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1511);
      longArray0[2] = (long) (-73);
      longArray0[3] = 1L;
      ArrayUtils.shift(longArray0, 1184);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1511L), (-73L), 1L}, longArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1511)}, intArray0);
      assertArrayEquals(new int[] {(-1511), (-1511)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)112;
      ArrayUtils.shift(byteArray0, (int) (byte)112);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)112}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)112;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)112;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-670.3156F);
      floatArray0[5] = (-788.978F);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)92;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)92}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      char[] charArray1 = ArrayUtils.add(charArray0, 'm');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertArrayEquals(new char[] {'m', 'm'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)92}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'm';
      intArray0[1] = (int) (byte)92;
      intArray0[2] = (int) 'm';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 109, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1222.35215104;
      doubleArray0[2] = 174.09;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 15, 174.09);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1222.35215104, 174.09, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1222.35215104, 174.09, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 15;
      boolean boolean2 = ArrayUtils.contains(intArray0, 2);
      assertFalse(boolean2);
      assertEquals(3, intArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new int[] {(-1), (-1), 15}, intArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2034;
      shortArray0[5] = (short)2034;
      shortArray0[2] = (short) (-448);
      shortArray0[3] = (short)414;
      shortArray0[4] = (short)781;
      shortArray0[5] = (short)213;
      shortArray0[6] = (short)3929;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-3589));
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2034, (short)0, (short) (-448), (short)414, (short)781, (short)213, (short)3929}, shortArray1);
      assertArrayEquals(new short[] {(short)2034, (short)0, (short) (-448), (short)414, (short)781, (short)213, (short)3929}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Comparator should not be null.";
      stringArray0[1] = "(e2eteG";
      stringArray0[2] = "'T/f";
      stringArray0[3] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[4] = "@P#";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, (String[]) null);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1107.06F;
      floatArray0[1] = (-1372.4F);
      floatArray0[2] = (-398.66F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 3596, 1349);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1107.06F, (-1372.4F), (-398.66F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1107.06F, (-1372.4F), (-398.66F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)87;
      byteArray0[0] = (byte) (-79);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)0;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)4;
      Integer integer0 = new Integer((-57));
      assertEquals((-57), (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0, 2916);
      assertEquals(2, objectArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, 5359, 160);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1107.06F, (-1372.4F), (-398.66F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertSame(floatArray1, floatArray2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 13;
      ArrayUtils.reverse(intArray0, 13, (-57));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {13}, intArray0);
      
      ArrayUtils.hashCode(objectArray0[1]);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.shift(intArray0, 658, (-2361), 5359);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {13}, intArray0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 76.0;
      doubleArray0[1] = 112.0;
      doubleArray0[2] = (-3630.80066424836);
      doubleArray0[3] = 258.9125308629482;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {76.0, 112.0, (-3630.80066424836), 258.9125308629482, Double.NaN, 0.0, 1.0, 1.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 39.0;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (-4275.801586369696);
      doubleArray0[3] = (-3390.7498896065);
      doubleArray0[4] = (-458.207322198);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {39.0, 3.0, (-4275.801586369696), (-3390.7498896065), (-458.207322198)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {39.0, 3.0, (-4275.801586369696), (-3390.7498896065), (-458.207322198)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'R';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Q', (-688));
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'|', 'R'}, charArray0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(3186);
      assertEquals(3186, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int1 = (-1);
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertTrue(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      assertEquals((-1), (int)integer3);
      assertTrue(int1 == int0);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-127));
      assertEquals((-127), (int)integer4);
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-688));
      assertEquals((-688), (int)integer5);
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(13);
      assertEquals(13, (int)integer6);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-311));
      assertEquals((-311), (int)integer7);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer2));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = Integer.getInteger("Mr-#'Ngg>RB-", (-311));
      assertEquals((-311), (int)integer8);
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)int1));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer2));
      assertNotNull(integer8);
      
      integerArray0[8] = integer8;
      Integer integer9 = new Integer(175);
      assertEquals(175, (int)integer9);
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)int1));
      assertFalse(integer9.equals((Object)integer8));
      assertNotNull(integer9);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer9);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)int1));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-128);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Character character0 = new Character(';');
      assertEquals(';', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'S');
      assertNull(charArray0);
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      
      long[] longArray3 = ArrayUtils.add(longArray2, (long) (byte) (-127));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertEquals(1, longArray3.length);
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {(-127L)}, longArray3);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Long[] longArray4 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray4.length);
      assertFalse(longArray4.equals((Object)longArray0));
      assertNotNull(longArray4);
      assertNotSame(longArray0, longArray4);
      assertNotSame(longArray4, longArray0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 455L;
      longArray0[1] = 455L;
      longArray0[1] = (-85L);
      longArray0[3] = 1879L;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2181);
      shortArray0[1] = (short) (-216);
      shortArray0[2] = (short) (-818);
      shortArray0[3] = (short)3362;
      shortArray0[4] = (short)0;
      shortArray0[4] = (short)813;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), (int) (short)813);
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-2181), (short) (-216), (short) (-818), (short)3362, (short)813, (short)0}, shortArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-2181);
      doubleArray0[1] = (-1.0);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2181.0), (-1.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-818);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 1879L;
      floatArray0[3] = 2698.0F;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)3362;
      floatArray0[6] = (float) 123;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1879.0F, 2698.0F, 0.0F, 3362.0F, 123.0F, (-818.0F)}, floatArray0, 0.01F);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)3288);
      assertEquals(6, shortArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new short[] {(short) (-2181), (short) (-216), (short) (-818), (short)3362, (short)813, (short)0}, shortArray0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "Index: ";
      int[] intArray0 = new int[5];
      intArray0[0] = (-1562);
      intArray0[1] = (-2593);
      intArray0[2] = (-10);
      intArray0[3] = Integer.MIN_VALUE;
      intArray0[4] = 925;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)123);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-10);
      longArray0[1] = (long) Integer.MIN_VALUE;
      longArray0[2] = (-1L);
      longArray0[4] = (long) (-1562);
      longArray0[5] = (long) 925;
      longArray0[6] = (long) (-10);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-10L), (-2147483648L), (-1L), 0L, (-1562L), 925L, (-10L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('I');
      assertEquals('I', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('R');
      assertEquals('R', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character0);
      assertEquals('I', (char)character2);
      assertFalse(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character2);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertTrue(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'I', 'R', 'I'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "Index: ";
      int[] intArray0 = new int[5];
      intArray0[4] = (-1562);
      intArray0[1] = (-2593);
      intArray0[2] = (-10);
      intArray0[3] = Integer.MIN_VALUE;
      intArray0[4] = 925;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)123);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-10);
      longArray0[1] = (long) Integer.MIN_VALUE;
      longArray0[2] = (-1L);
      longArray0[4] = (long) (-1562);
      longArray0[5] = (long) 925;
      byte byte0 = (byte)75;
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)53, (int) (byte)53);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 1396);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1396, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1435.0924500149;
      doubleArray0[1] = (-4643.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-4643.0));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1435.0924500149, (-4643.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1435.0924500149}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1435.0924500149, (-4643.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-57);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)124, (byte) (-45), (byte) (-1), (byte) (-114), (byte) (-57)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)124, (byte) (-45), (byte) (-1), (byte) (-114), (byte) (-57)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = (Object) 1435.0924500149;
      boolean boolean2 = ArrayUtils.isNotEmpty(objectArray0);
      assertTrue(boolean2);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shuffle(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      short[] shortArray0 = new short[16];
      shortArray0[0] = (short) (-1511);
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[2] = (-73);
      Character character0 = Character.valueOf(',');
      assertEquals(',', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-41));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = ',';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -73, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      ArrayUtils.shift(floatArray0, 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 39.0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), (-1.0), 0.0, 39.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[0];
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      long long0 = 606L;
      long[] longArray0 = new long[4];
      longArray0[1] = (-2743L);
      longArray0[2] = 606L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-2743L), 606L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-2743L), 606L, 0L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3210);
      intArray0[1] = (-3210);
      intArray0[2] = (int) '|';
      intArray0[3] = (-1036);
      int int0 = (-2008);
      intArray0[4] = (-2008);
      intArray0[5] = (int) '|';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3210), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3210, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-2743L);
      longArray0[1] = (-2743L);
      longArray0[2] = (-2743L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2978L);
      assertEquals(3, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-2743L), (-2743L), (-2743L)}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-627));
      assertEquals((-1), int0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-627);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-627);
      intArray0[6] = (-627);
      intArray0[7] = (-627);
      intArray0[8] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-627), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -627, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char char0 = 'K';
      Character character1 = Character.valueOf('K');
      assertEquals('K', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertEquals('K', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = new Character('K');
      assertEquals('K', (char)character3);
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('F');
      assertEquals('F', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'K');
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'H', 'K', 'K', 'K', 'F'}, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)100;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2127, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2127, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&Y|GZx X6";
      stringArray0[1] = "&Y|GZx X6";
      stringArray0[2] = "&Y|GZx X6";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "");
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-181L));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[1] = (-1);
      intArray0[2] = (-73);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-73), (-1), (-1), 0, (-1511)}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 421.057121261556;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 2802.351034865865, (int) (short) (-1511));
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {421.057121261556}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      char[] charArray1 = ArrayUtils.add(charArray0, 'c');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) stringArray1);
      assertFalse(boolean1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      char[] charArray2 = ArrayUtils.subarray(charArray0, 932, (-73));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      int int2 = ArrayUtils.indexOf(intArray0, (-1));
      assertEquals(0, int2);
      assertEquals(6, intArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new int[] {(-1), (-73), (-1), (-1), 0, (-1511)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 970;
      longArray0[1] = 2263L;
      longArray0[2] = (-3252L);
      longArray0[5] = (long) 171;
      longArray0[7] = (long) 171;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      
      long[] longArray1 = ArrayUtils.add(longArray0, 268L);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {970L, 2263L, (-3252L), 0L, 0L, 171L, 0L, 171L, 0L}, longArray0);
      assertArrayEquals(new long[] {970L, 2263L, (-3252L), 0L, 0L, 171L, 0L, 171L, 0L, 268L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ArrayUtils.shift(byteArray0, (int) (byte)100, (-53), (-53));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)100);
      assertEquals((short)100, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short) shortArray0[0];
      shortArray1[1] = (short) (byte)100;
      shortArray1[2] = (short) shortArray0[0];
      shortArray1[3] = (short) (byte)100;
      shortArray1[4] = (short) (byte)100;
      shortArray1[5] = (short) shortArray0[0];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)100, shortArray1, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)116, (byte) (-1), (byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)116, (byte) (-1), (byte) (-1), (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (-1877.8589F);
      floatArray0[2] = 241.55F;
      floatArray0[3] = (float) (byte) (-1);
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (byte)116;
      floatArray0[6] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1877.8589F), 241.55F, (-1.0F), (-1.0F), 116.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1877.8589F), 241.55F, (-1.0F), (-1.0F), 116.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) (byte)116);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, (int) (byte) (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean1 = ArrayUtils.isSorted(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(boolean1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(7, floatArray2.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, (-1877.8589F), 241.55F, (-1.0F), (-1.0F), 116.0F, 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1877.8589F), 241.55F, (-1.0F), (-1.0F), 116.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(floatArray2, floatArray1);
      assertSame(floatArray2, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray0, floatArray2);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0, (-864), (-864));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-864);
      floatArray0[1] = (float) (-864);
      floatArray0[2] = (float) (-864);
      floatArray0[3] = (float) (-864);
      floatArray0[4] = (float) (-864);
      floatArray0[5] = (float) (-864);
      floatArray0[6] = (float) (-864);
      floatArray0[7] = (float) (-864);
      Integer integer0 = new Integer((-864));
      assertEquals((-864), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-864);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-864), 3573);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-864L)}, longArray0);
      assertArrayEquals(new long[] {(-864L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-99L);
      longArray0[3] = 1879L;
      longArray0[4] = 1144L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-3213L), (-958));
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, (-99L), 0L, 1879L, 1144L, 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray0, (-1), Integer.MAX_VALUE);
      assertEquals(6, longArray2.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, (-99L), 0L, 1879L, 1144L, 0L}, longArray2);
      assertArrayEquals(new long[] {0L, (-99L), 0L, 1879L, 1144L, 0L}, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (-3685L));
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, ":");
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, (-1511L));
      assertEquals((-1), int0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 429;
      intArray0[3] = (-1);
      ArrayUtils.shuffle(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), 429, (-1), (-1)}, intArray0);
      
      long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (-1783L));
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2066;
      intArray0[1] = 26;
      intArray0[2] = 2066;
      intArray0[3] = 26;
      intArray0[5] = 907;
      intArray0[7] = (-30);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, (-416), 1462);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-416);
      longArray0[1] = (long) (-30);
      longArray0[2] = (long) 1462;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-50);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-76), 1966);
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-76), (byte) (-50)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2893;
      intArray0[1] = (-3837);
      intArray0[2] = 729;
      intArray0[3] = (-1783);
      intArray0[4] = (-2657);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2893, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-310), (-310));
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean1);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean2 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean2);
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-310);
      intArray0[1] = (-1);
      intArray0[2] = (-310);
      intArray0[3] = 128;
      intArray0[4] = (-310);
      intArray0[5] = (-310);
      intArray0[6] = (-310);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 128, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-1);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)116;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) (byte) (-1);
      ArrayUtils.swap(longArray0, (-89), 3);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 3L, (-1L), 116L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "&Y|GZx X6";
      stringArray0[2] = "&Y|GZx X6";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 1530L);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-57);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-103), (byte) (-110), (byte) (-103), (byte) (-57)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-103), (byte) (-110), (byte) (-103), (byte) (-57)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte) (-103);
      longArray0[1] = (long) (byte) (-57);
      longArray0[2] = (long) (byte) (-57);
      longArray0[3] = (long) (byte) (-103);
      longArray0[4] = (long) (byte) (-57);
      longArray0[5] = (long) (byte) (-110);
      ArrayUtils.shift(longArray0, (int) (byte) (-103));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-57L), (-57L), (-103L), (-57L), (-110L), (-103L)}, longArray0);
      
      ArrayUtils.shift((long[]) null, (int) (byte) (-103));
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&Y|GZx X6";
      stringArray0[1] = "&Y|GZx X6";
      stringArray0[2] = "&Y|GZx X6";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "");
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-181L));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[1] = (-1);
      intArray0[2] = (-73);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-57);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-114), (byte) (-103), (byte) (-57), (byte) (-114), (byte) (-57)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-114), (byte) (-103), (byte) (-57), (byte) (-114), (byte) (-57)}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      ArrayUtils.shift((long[]) null, (-1));
      ArrayUtils.shift((long[]) null, (int) (short) (-1511));
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&Y|GZx X6";
      stringArray0[1] = "&Y|GZx X6";
      stringArray0[2] = "&Y|GZx X6";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "");
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-181L));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[1] = (-1);
      intArray0[2] = (-73);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-57);
      byteArray0[5] = (byte) (-57);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)0, (byte) (-103), (byte) (-57), (byte)0, (byte) (-57)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)0, (byte) (-103), (byte) (-57), (byte)0, (byte) (-57)}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      ArrayUtils.shift((long[]) null, (-1));
      ArrayUtils.shift((long[]) null, (int) (short) (-1511));
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Float float0 = new Float(180.1547F);
      assertEquals(180.1547F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 180.1547F;
      floatArray0[1] = 1618.655F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, Float.NaN);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {180.1547F, 1618.655F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {180.1547F, 1618.655F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1246), 2);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, (-1287));
      assertEquals(3, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {2L, 2L, 2L}, longArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-1287), 460);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.contains(intArray1, (-1385));
      assertFalse(boolean1);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'R';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'C', (-677));
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'|', 'R'}, charArray0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(3186);
      assertEquals(3186, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int1 = (-1);
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer(int1);
      assertEquals((-1), (int)integer2);
      assertTrue(int1 == int0);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[3] = integer2;
      Integer integer3 = new Integer((-151));
      assertEquals((-151), (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[4] = integer3;
      Integer integer4 = new Integer((-677));
      assertEquals((-677), (int)integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int1));
      assertNotNull(integer4);
      
      integerArray0[5] = integer4;
      Integer integer5 = new Integer(13);
      assertEquals(13, (int)integer5);
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      integerArray0[6] = integer5;
      Integer integer6 = Integer.getInteger("Mr-#'Ngg>RB-", (-311));
      assertEquals((-311), (int)integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      
      integerArray0[8] = integer6;
      Integer integer7 = new Integer(175);
      assertEquals(175, (int)integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer7);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      int int2 = ArrayUtils.lastIndexOf(charArray0, 'C', 13);
      assertEquals((-1), int2);
      assertEquals(2, charArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new char[] {'|', 'R'}, charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3574.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-469.678840742903));
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {3574.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (-677));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)76;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)761;
      shortArray0[4] = (short)50;
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 285);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)76, (short)0, (short)0, (short)761, (short)50, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)76, (short)0, (short)0, (short)761, (short)50, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)6;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)6);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift(booleanArray0, 708);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      ArrayUtils.swap((float[]) null, 26, (int) (short)76);
      ArrayUtils.reverse(booleanArray0, (-158), 120);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-416.78747806844785));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-416.78747806844785)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      Integer integer1 = Integer.getInteger("5BuK>JYdL%;w8'dq@");
      assertNull(integer1);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integerArray0[0]);
      assertTrue(boolean0);
      assertEquals(3, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean1);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      
      ArrayUtils.shift(floatArray1, 2103, 2, (-85));
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1107.06F;
      floatArray0[1] = (-1372.4F);
      floatArray0[2] = (-398.66F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 3596, 1314);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1107.06F, (-1372.4F), (-398.66F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1107.06F, (-1372.4F), (-398.66F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)0;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)4;
      Integer integer0 = new Integer((-57));
      assertEquals((-57), (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0, 2916);
      assertEquals(2, objectArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, 5359, 160);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1107.06F, (-1372.4F), (-398.66F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertSame(floatArray1, floatArray2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      Float float0 = new Float((double) (byte)100);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-4566.362F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {100.0F}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (byte)100;
      shortArray0[1] = (short) (byte)100;
      shortArray0[2] = (short) (byte)100;
      shortArray0[3] = (short) (byte)100;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      assertArrayEquals(new byte[] {(byte)100}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte) (-97), (-3360));
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      assertArrayEquals(new byte[] {(byte)100}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Boolean boolean0 = new Boolean("java.lang.Byte");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("java.lang.Byte");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-38);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-36), (byte) (-62), (byte)102, (byte)101, (byte)1, (byte)63, (byte) (-38)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-36), (byte) (-62), (byte)102, (byte)101, (byte)63, (byte) (-38)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-38);
      doubleArray0[1] = (double) (byte)63;
      doubleArray0[2] = (double) (byte) (-62);
      doubleArray0[3] = (double) (byte) (-62);
      doubleArray0[4] = (double) (byte)63;
      doubleArray0[5] = (double) (byte) (-36);
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)67, (int) (byte)101);
      assertEquals((-1), int0);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)59, (byte) (-36), (byte) (-62), (byte)102, (byte)101, (byte)1, (byte)63, (byte) (-38)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-36), (byte) (-62), (byte)102, (byte)101, (byte)63, (byte) (-38)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)63;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte) (-38);
      shortArray0[3] = (short) (byte) (-38);
      shortArray0[4] = (short) (byte)1;
      shortArray0[5] = (short) (byte)1;
      ArrayUtils.swap(shortArray0, (int) (byte) (-38), (int) (byte) (-62));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)63, (short)1, (short) (-38), (short) (-38), (short)1, (short)1}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-670.3156F));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'p';
      doubleArray0[1] = (double) 'p';
      doubleArray0[2] = (-67.0);
      doubleArray0[3] = (double) (-670.3156F);
      doubleArray0[4] = (double) 'p';
      doubleArray0[5] = (double) 'p';
      doubleArray0[6] = (double) 'p';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2223.871873749986);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {112.0, 112.0, (-67.0), (-670.3156127929688), 112.0, 112.0, 112.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1891.04006568, (-1), (-91.0));
      assertEquals((-1), int1);
      assertEquals(7, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {112.0, 112.0, (-67.0), (-670.3156127929688), 112.0, 112.0, 112.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {112.0, (-67.0), (-670.3156127929688), 112.0, 112.0, 112.0, 112.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-1), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Character character0 = Character.valueOf('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('K');
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'K');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(characterArray0);
      assertEquals(0, characterArray0.length);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'K';
      floatArray0[1] = (float) 'K';
      floatArray0[2] = 2646.0F;
      floatArray0[3] = (float) 'K';
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {75.0F, 75.0F, 2646.0F, 75.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 2646.0F, 100.0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 97, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1445.236131567);
      doubleArray0[1] = 585.80792199037;
      doubleArray0[2] = (-2736.302325235088);
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 172.8168103595;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-194.109883268));
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1445.236131567), 585.80792199037, (-2736.302325235088), 1.5, 172.8168103595}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-194.109883268), (-1445.236131567), 585.80792199037, (-2736.302325235088), 1.5, 172.8168103595}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[20];
      MutableInt[] mutableIntArray1 = ArrayUtils.subarray(mutableIntArray0, (-2181), 2147483639);
      assertEquals(20, mutableIntArray0.length);
      assertEquals(20, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-3485);
      intArray0[1] = 2147483639;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-3485), 2147483639}, intArray0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1435.0924500149;
      doubleArray0[1] = (-4643.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-4643.0));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1435.0924500149, (-4643.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1435.0924500149}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1435.0924500149, (-4643.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-57);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)124, (byte) (-45), (byte) (-1), (byte)0, (byte) (-57)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)124, (byte) (-45), (byte) (-1), (byte)0, (byte) (-57)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = 'j';
      charArray0[2] = 'c';
      charArray0[3] = '7';
      charArray0[4] = ')';
      charArray0[5] = 'i';
      charArray0[6] = 'T';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1021, 42);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'X', 'j', 'c', '7', ')', 'i', 'T'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      short[] shortArray0 = new short[23];
      shortArray0[0] = (short)76;
      shortArray0[3] = (short)787;
      shortArray0[17] = (short)50;
      shortArray0[5] = (short)5;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 287);
      assertEquals(23, shortArray0.length);
      assertEquals(23, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)5, (int) (short)5);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) (-28667), (-1367));
      assertEquals((-1), int0);
      assertEquals(23, shortArray0.length);
      assertEquals(23, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      charArray0[1] = 'r';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short) (-28667), (-973));
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'u', 'r'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.reverse((double[]) null, (int) (short)50, (-973));
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-854.44719217671);
      int[] intArray0 = new int[8];
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt();
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals("0", mutableInt1.toString());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0, mutableInt1.intValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(mutableInt0);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertNotNull(mutableInt2);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, mutableInt2.intValue());
      assertEquals(0, (int)mutableInt2.toInteger());
      assertEquals(0, (int)mutableInt2.getValue());
      assertEquals("0", mutableInt2.toString());
      assertEquals((byte)0, mutableInt2.byteValue());
      assertEquals(0.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt2.shortValue());
      assertEquals(0L, mutableInt2.longValue());
      assertEquals(0.0, mutableInt2.doubleValue(), 0.01);
      
      mutableIntArray0[2] = mutableInt0;
      MutableInt mutableInt3 = new MutableInt(1073741824);
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertNotNull(mutableInt3);
      assertEquals((byte)0, mutableInt3.byteValue());
      assertEquals(1073741824, (int)mutableInt3.getValue());
      assertEquals(1073741824, (int)mutableInt3.toInteger());
      assertEquals(1.073741824E9, mutableInt3.doubleValue(), 0.01);
      assertEquals("1073741824", mutableInt3.toString());
      assertEquals((short)0, mutableInt3.shortValue());
      assertEquals(1073741824, mutableInt3.intValue());
      assertEquals(1073741824L, mutableInt3.longValue());
      assertEquals(1.07374182E9F, mutableInt3.floatValue(), 0.01F);
      
      MutableInt mutableInt4 = new MutableInt(mutableInt3);
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertTrue(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertNotNull(mutableInt4);
      assertEquals((byte)0, mutableInt3.byteValue());
      assertEquals(1073741824, (int)mutableInt3.getValue());
      assertEquals(1073741824, (int)mutableInt3.toInteger());
      assertEquals(1.073741824E9, mutableInt3.doubleValue(), 0.01);
      assertEquals("1073741824", mutableInt3.toString());
      assertEquals((short)0, mutableInt3.shortValue());
      assertEquals(1073741824, mutableInt3.intValue());
      assertEquals(1073741824L, mutableInt3.longValue());
      assertEquals(1.07374182E9F, mutableInt3.floatValue(), 0.01F);
      assertEquals(1073741824L, mutableInt4.longValue());
      assertEquals(1073741824, mutableInt4.intValue());
      assertEquals(1.073741824E9, mutableInt4.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt4.shortValue());
      assertEquals("1073741824", mutableInt4.toString());
      assertEquals(1073741824, (int)mutableInt4.getValue());
      assertEquals(1073741824, (int)mutableInt4.toInteger());
      assertEquals(1.07374182E9F, mutableInt4.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt4.byteValue());
      
      mutableIntArray0[3] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt((-854.44719217671));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertNotNull(mutableInt5);
      assertEquals((-854), (int)mutableInt5.toInteger());
      assertEquals((byte) (-86), mutableInt5.byteValue());
      assertEquals((-854), (int)mutableInt5.getValue());
      assertEquals((short) (-854), mutableInt5.shortValue());
      assertEquals((-854L), mutableInt5.longValue());
      assertEquals((-854.0), mutableInt5.doubleValue(), 0.01);
      assertEquals((-854), mutableInt5.intValue());
      assertEquals("-854", mutableInt5.toString());
      assertEquals((-854.0F), mutableInt5.floatValue(), 0.01F);
      
      mutableIntArray0[4] = mutableInt5;
      MutableInt[] mutableIntArray1 = ArrayUtils.subarray(mutableIntArray0, 2064, (-77));
      assertEquals(0, mutableIntArray1.length);
      assertEquals(5, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")vU{";
      stringArray0[2] = ")vU{";
      stringArray0[3] = "Cbz";
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)70;
      ArrayUtils.swap((double[]) null, (-396), (-396), (-396));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)52;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)52, (byte) (-125), (byte)52, (byte)52, (byte) (-125), (byte)16, (byte)52, (byte)52}, byteArray1);
      assertArrayEquals(new byte[] {(byte)52, (byte) (-125), (byte)52, (byte)52, (byte) (-125), (byte)16, (byte)52, (byte)52}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      ArrayUtils.reverse((double[]) null);
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((byte) (-125));
      assertEquals((-125.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = Double.valueOf((double) (byte)52);
      assertEquals(52.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((-4305.732625821702));
      assertEquals((-4305.732625821702), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (-1983), (int) 52);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)724;
      short short0 = (short)6;
      shortArray0[1] = (short)6;
      ArrayUtils.swap(shortArray0, Integer.MAX_VALUE, (int) (short)6, 3947);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)724, (short)6}, shortArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (short)6);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)724;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) (short)6;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)724);
      assertEquals(0, int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {724L, 2147483647L, 6L}, longArray0);
      
      Short[] shortArray1 = new Short[9];
      shortArray1[0] = (Short) (short)6;
      shortArray1[1] = (Short) (short)724;
      shortArray1[2] = (Short) (short)6;
      shortArray1[3] = (Short) (short)6;
      shortArray1[4] = (Short) (short)6;
      shortArray1[5] = (Short) (short)6;
      shortArray1[6] = (Short) (short)6;
      shortArray1[7] = (Short) (short)6;
      shortArray1[8] = (Short) (short)724;
      Short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-1869), (int) short0);
      assertEquals(6, shortArray2.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, 2155);
      assertEquals((-1), int1);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(intArray0, intArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'm';
      charArray0[2] = '3';
      charArray0[3] = '&';
      charArray0[4] = 'j';
      int int2 = ArrayUtils.indexOf(charArray0, 'E');
      assertEquals((-1), int2);
      assertEquals(5, charArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new char[] {'$', 'm', '3', '&', 'j'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = 455L;
      longArray0[3] = 1879L;
      int int0 = ArrayUtils.indexOf(longArray0, 455L);
      assertEquals(1, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 455L, 0L, 1879L, 0L, 0L}, longArray0);
      
      ArrayUtils.reverse((boolean[]) null);
      Character character0 = Character.valueOf('%');
      assertEquals('%', (char)character0);
      assertNotNull(character0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '%';
      doubleArray0[2] = (double) '%';
      doubleArray0[4] = (double) 1879L;
      doubleArray0[5] = (double) '%';
      doubleArray0[6] = (double) '%';
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) 0L;
      longArray1[1] = (Long) 0L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L}, longArray2);
      assertNotSame(longArray2, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '%';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 8);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'%', '%'}, charArray0);
      assertArrayEquals(new char[] {'%'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = (-1);
      intArray0[3] = 26;
      intArray0[5] = 907;
      intArray0[6] = 0;
      intArray0[7] = 0;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-1), 26, 0, 907, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 26;
      floatArray0[5] = 451.04865F;
      ArrayUtils.swap(floatArray0, 3082, 0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F, 26.0F, 451.04865F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1), 0);
      assertEquals(8, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, (-1), 26, 0, 907, 0, 0}, intArray0);
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      boolean[] booleanArray2 = new boolean[2];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray2, false, 2);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(bitSet1, bitSet0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'O';
      charArray0[1] = 'g';
      charArray0[2] = 'v';
      charArray0[3] = 'm';
      charArray0[4] = 'w';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 4);
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'O', 'g', 'v', 'm'}, charArray1);
      assertArrayEquals(new char[] {'O', 'g', 'v', 'm', 'w'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-416.78747806844785));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2137.417F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      Integer integer1 = Integer.getInteger("3YOAmq vu");
      assertNull(integer1);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integerArray0[0]);
      assertTrue(boolean0);
      assertEquals(3, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean1);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      
      long[] longArray3 = ArrayUtils.add(longArray2, 455L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertEquals(1, longArray3.length);
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {455L}, longArray3);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      ArrayUtils.reverse((byte[]) null, (-4184), 8);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 455L;
      doubleArray0[1] = (double) 't';
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 't';
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (double) 't';
      ArrayUtils.swap(doubleArray0, 2, 2, 1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {455.0, 116.0, 0.0, 8.0, 116.0, 8.0, 116.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      Character character0 = Character.valueOf('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) character0, (-4184));
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      
      long[] longArray3 = ArrayUtils.add(longArray2, 455L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertEquals(1, longArray3.length);
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {455L}, longArray3);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      ArrayUtils.reverse((byte[]) null, (-4184), 8);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 455L;
      doubleArray0[1] = (double) 't';
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 't';
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (double) 't';
      ArrayUtils.swap(doubleArray0, 2, 2, 1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {455.0, 116.0, (-1.0), 8.0, 116.0, 8.0, 116.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'R';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'C', (-677));
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'|', 'R'}, charArray0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(3186);
      assertEquals(3186, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int1 = (-1);
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer(int1);
      assertEquals((-1), (int)integer2);
      assertTrue(int1 == int0);
      assertTrue(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[3] = integer2;
      Integer integer3 = new Integer((-151));
      assertEquals((-151), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[4] = integer3;
      Integer integer4 = new Integer((-677));
      assertEquals((-677), (int)integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      integerArray0[5] = integer4;
      Integer integer5 = new Integer(13);
      assertEquals(13, (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int1));
      assertNotNull(integer5);
      
      integerArray0[6] = integer5;
      integerArray0[7] = integer2;
      Integer integer6 = Integer.getInteger("Mr-#'Ngg>RB-", (-311));
      assertEquals((-311), (int)integer6);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      
      integerArray0[8] = integer6;
      Integer integer7 = new Integer(175);
      assertEquals(175, (int)integer7);
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertNotNull(integer7);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer7);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      int int2 = ArrayUtils.lastIndexOf(charArray0, 'C', 13);
      assertEquals((-1), int2);
      assertEquals(2, charArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new char[] {'|', 'R'}, charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3574.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-469.678840742903));
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {3574.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'V');
      assertEquals(2, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'x', 'V'}, charArray0);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)71;
      doubleArray0[3] = (double) (byte) (-100);
      doubleArray0[4] = 4578.452211;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {71.0, 0.0, 0.0, (-100.0), 4578.452211}, doubleArray0, 0.01);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'x';
      characterArray0[1] = (Character) 'x';
      characterArray0[2] = (Character) 'x';
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) characterArray0[1]);
      assertEquals(3, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray1);
      assertFalse(boolean0);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[13];
      charArray0[0] = '9';
      charArray0[1] = '\"';
      ArrayUtils.swap(charArray0, (-86), (-888), (-1));
      assertEquals(13, charArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (-1);
      intArray0[2] = (-888);
      intArray0[3] = (int) '9';
      intArray0[4] = (int) (byte)0;
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0, 0.0);
      assertEquals(0, int1);
      assertEquals(9, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'm';
      charArray0[2] = 'Z';
      charArray0[3] = '\'';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', 'm', 'Z', '\''}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'm', 'Z', '\''}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      ArrayUtils.shift(byteArray0, 110, 110, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      char[] charArray2 = ArrayUtils.clone(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000', 'm', 'Z', '\''}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'm', 'Z', '\''}, charArray1);
      assertArrayEquals(new char[] {'\u0000', 'm', 'Z', '\''}, charArray2);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[2] = (long) 'Z';
      longArray0[3] = (long) '\u0000';
      ArrayUtils.swap(longArray0, 831, (-822), (int) '\'');
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 90L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      Integer integer0 = new Integer((byte)4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) (short) (-1511);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], 12);
      assertEquals(2, objectArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-57);
      floatArray0[1] = (float) (-57);
      floatArray0[2] = (-1479.2395F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 102, 1122);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-57.0F), (-57.0F), (-1479.2395F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true, false}, booleanArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '~';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'?', '~'}, charArray0);
      assertArrayEquals(new char[] {'?', '~'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 4054L;
      longArray0[1] = 784L;
      longArray0[2] = (-1426L);
      longArray0[3] = (-1349L);
      longArray0[4] = (-1550L);
      longArray0[5] = (-1L);
      longArray0[6] = 2510L;
      longArray0[7] = 0L;
      longArray0[8] = 286L;
      int[] intArray0 = new int[7];
      intArray0[0] = (-491);
      intArray0[1] = 1518;
      intArray0[2] = (-1343);
      intArray0[3] = 1170;
      intArray0[4] = 3319;
      intArray0[5] = 332;
      intArray0[6] = 753;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3319, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-3360L);
      longArray0[1] = (-1426L);
      longArray0[2] = (-1L);
      longArray0[3] = (-2723L);
      longArray0[4] = 1L;
      int[] intArray0 = new int[4];
      intArray0[0] = 69;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 110;
      intArray0[3] = 256;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'R';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'C', (-677));
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'|', 'R'}, charArray0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(3186);
      assertEquals(3186, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int1 = (-1);
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      assertEquals((-1), (int)integer3);
      assertTrue(int1 == int0);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int1));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-151));
      assertEquals((-151), (int)integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-677));
      assertEquals((-677), (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int1));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(13);
      assertEquals(13, (int)integer6);
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-311));
      assertEquals((-311), (int)integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer1));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = Integer.getInteger("Mr-#'Ngg>RB-", (-311));
      assertEquals((-311), (int)integer8);
      assertFalse(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)int1));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer2));
      assertNotNull(integer8);
      
      integerArray0[8] = integer8;
      Integer integer9 = new Integer(175);
      assertEquals(175, (int)integer9);
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer9.equals((Object)int1));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer1));
      assertNotNull(integer9);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer9);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer9.equals((Object)int1));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[17];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(17, booleanArray0.length);
      assertEquals(18, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'K');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)100;
      byteArray0[7] = (byte)100;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1770), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1770, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0, (-864), (-864));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-864);
      floatArray0[1] = (float) (-864);
      floatArray0[2] = (float) (-864);
      floatArray0[3] = (float) (-864);
      floatArray0[4] = (float) (-864);
      floatArray0[5] = (float) (-864);
      floatArray0[6] = (float) (-864);
      floatArray0[7] = (float) (-864);
      Integer integer0 = new Integer((-864));
      assertEquals((-864), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-864);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-864), (-864));
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-864L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      String[] stringArray0 = new String[15];
      stringArray0[0] = "&Y|GZx X6";
      stringArray0[1] = "&Y|GZx X6";
      stringArray0[2] = "&Y|GZx X6";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(15, stringArray0.length);
      assertEquals(15, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 1530L);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-1), (-1));
      assertNull(longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 3093L);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[3] = stringArray0[2];
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (long) Integer.MAX_VALUE;
      longArray0[5] = (long) Integer.MAX_VALUE;
      longArray0[6] = (long) Integer.MAX_VALUE;
      longArray0[7] = (long) Integer.MAX_VALUE;
      long[] longArray1 = ArrayUtils.subarray(longArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2147483647L, 2147483647L, 2147483647L, 2147483647L, 2147483647L, 2147483647L, 2147483647L, 2147483647L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, 2147483647L);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {2147483647L, 2147483647L, 2147483647L, 2147483647L, 2147483647L, 2147483647L, 2147483647L, 2147483647L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)14;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)0, (byte)96, (byte)65, (byte) (-67), (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)0, (byte)96, (byte)65, (byte) (-67), (byte)14}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)14, (byte) (-67), (byte)65, (byte)96, (byte)0, (byte) (-100)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'V');
      assertEquals(2, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'x', 'V'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)65;
      doubleArray0[1] = (double) (byte)65;
      doubleArray0[2] = (double) (byte) (-67);
      doubleArray0[3] = (double) (byte) (-100);
      doubleArray0[4] = 4578.452211;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 65.0, (-67.0), (-100.0), 4578.452211}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-67));
      assertEquals(2, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 65.0, (-67.0), (-100.0), 4578.452211}, doubleArray0, 0.01);
      
      ArrayUtils.swap(charArray0, (int) (byte)65, (int) (byte)65);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'x', 'V'}, charArray0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'x';
      characterArray0[1] = (Character) 'x';
      characterArray0[2] = (Character) 'x';
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) null);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 32, (-1709));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = '`';
      charArray0[2] = 'h';
      charArray0[4] = 'h';
      charArray0[5] = '&';
      int int0 = 1473;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1473, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1473, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2100.9634F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 362.2F;
      int int0 = 786;
      int int1 = (-3001);
      ArrayUtils.swap(floatArray0, 786, 786, (-3001));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-2100.9634F), 1.0F, (-1.0F), 362.2F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-3001), (double) (-3001));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3001, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2715L;
      longArray0[1] = 1718L;
      longArray0[2] = 1636L;
      ArrayUtils.shift(longArray0, 2147483615, Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2715L, 1718L, 1636L}, longArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[0] = (byte) (-67);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-52);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1636L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 482.52246F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1636.0F}, floatArray0, 0.01F);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2715L, 1718L, 1636L}, longArray1);
      assertArrayEquals(new long[] {2715L, 1718L, 1636L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      long[] longArray2 = ArrayUtils.add(longArray1, (-2104L));
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {2715L, 1718L, 1636L}, longArray1);
      assertArrayEquals(new long[] {2715L, 1718L, 1636L}, longArray0);
      assertArrayEquals(new long[] {2715L, 1718L, 1636L, (-2104L)}, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-26416);
      ArrayUtils.shift(shortArray0, 859, (int) (short) (-26416), 0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-26416)}, shortArray0);
      
      Character character0 = Character.valueOf('#');
      assertEquals('#', (char)character0);
      assertNotNull(character0);
      
      ArrayUtils.shift(longArray1, (-1928), (-98), 1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2715L;
      longArray0[1] = 1718L;
      longArray0[2] = 1636L;
      ArrayUtils.shift(longArray0, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2715L, 1718L, 1636L}, longArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-52);
      byteArray0[7] = (byte) (-128);
      byteArray0[8] = (byte) (-85);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)1, (int) (byte)4);
      assertEquals(5, int0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-67), (byte) (-10), (byte) (-19), (byte)4, (byte)1, (byte) (-52), (byte) (-128), (byte) (-85)}, byteArray0);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('');
      assertEquals('', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertEquals('', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('a');
      assertEquals('a', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('a');
      assertEquals('a', (char)character3);
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character2);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character3));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'', '', 'a', 'a'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(0, int0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2743L));
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 52);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertTrue(boolean0);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2834L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = 92L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L));
      assertEquals(5, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {2834L, (-1L), (-1L), 0L, 92L}, longArray0);
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = ';';
      charArray0[2] = 'c';
      charArray0[3] = 'v';
      charArray0[4] = '5';
      boolean boolean0 = ArrayUtils.contains(charArray0, '3');
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'i', ';', 'c', 'v', '5'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)724;
      shortArray0[1] = (short)6;
      ArrayUtils.swap(shortArray0, Integer.MAX_VALUE, (int) (short)6, 3947);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)724, (short)6}, shortArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (short)6);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-347.0F);
      floatArray0[1] = 2380.1575F;
      floatArray0[2] = (float) (short)6;
      floatArray0[3] = (float) Integer.MAX_VALUE;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-347.0F), 2380.1575F, 6.0F, 2.14748365E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-347.0F), 2380.1575F, 6.0F, 2.14748365E9F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (short)724;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) (short)6;
      longArray0[4] = (long) (short)6;
      longArray0[5] = (long) Integer.MAX_VALUE;
      longArray0[6] = (long) (short)724;
      longArray0[7] = (long) (short)724;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L));
      assertEquals(8, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1L), 724L, 2147483647L, 6L, 6L, 2147483647L, 724L, 724L}, longArray0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, 3947);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      int int0 = (-73);
      ArrayUtils.shift(shortArray0, (-73));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 643.80042115172, (-310));
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = '5';
      charArray0[4] = ']';
      charArray0[5] = ']';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '5');
      assertEquals(3, int1);
      assertEquals(6, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {']', ']', ']', '5', ']', ']'}, charArray0);
      
      long long0 = (-204L);
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (int) ']', (long) (short) (-1511));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 93, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-670.3156F);
      floatArray0[5] = (-788.978F);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)92;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)92}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      char[] charArray1 = ArrayUtils.add(charArray0, 'm');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertArrayEquals(new char[] {'m', 'm'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (byte)0);
      assertEquals(5, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertEquals("{3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Character character0 = new Character('v');
      assertEquals('v', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('v');
      assertEquals('v', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('!');
      assertEquals('!', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = new Character('@');
      assertEquals('@', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      Character character4 = new Character('@');
      assertEquals('@', (char)character4);
      assertTrue(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      
      Character character5 = Character.valueOf('1');
      assertEquals('1', (char)character5);
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertNotNull(character5);
      
      Character[] characterArray0 = new Character[8];
      Character character6 = new Character('1');
      assertEquals('1', (char)character6);
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      assertNotNull(character6);
      
      characterArray0[0] = character6;
      characterArray0[1] = character3;
      characterArray0[2] = character5;
      characterArray0[4] = character1;
      Character character7 = Character.valueOf('%');
      assertEquals('%', (char)character7);
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character5));
      assertNotNull(character7);
      
      characterArray0[5] = character7;
      characterArray0[6] = character1;
      characterArray0[7] = character5;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 851.3628172468533);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (-2403.33591));
      assertNull(doubleArray0);
      
      Character character0 = new Character('[');
      assertEquals('[', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character0;
      characterArray0[1] = (Character) '\'';
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = (Character) '\'';
      characterArray0[5] = (Character) '\'';
      Character character1 = new Character('j');
      assertEquals('j', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = ArrayUtils.get(characterArray0, (int) characterArray0[4], character1);
      assertEquals('j', (char)character2);
      assertEquals(6, characterArray0.length);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-118));
      assertEquals((byte) (-118), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-118));
      assertEquals((byte) (-118), (byte)byte6);
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte0;
      byteArray0[2] = byte5;
      byteArray0[3] = byte6;
      byteArray0[4] = byte2;
      byteArray0[5] = byte1;
      byteArray0[6] = byte4;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-118);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray2, 565);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 565, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1511);
      intArray0[1] = 51;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1511);
      longArray0[1] = (long) (-1511);
      longArray0[2] = (long) (-1511);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-1511L));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-813), 1093);
      assertEquals(8, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1511), 51, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-41);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-41));
      assertEquals(4, int0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-41), (byte) (-41), (byte) (-41), (byte) (-41), (byte)0}, byteArray0);
      
      Short short0 = new Short((short) (-1167));
      assertEquals((short) (-1167), (short)short0);
      assertNotNull(short0);
      
      Long long0 = new Long(51);
      assertEquals(51L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1511);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte) (-41), 4);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1511.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1511.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ArrayUtils.shift(byteArray0, (int) (byte)100, (-53), (-53));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)100);
      assertEquals((short)100, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short)0;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      short[] shortArray3 = ArrayUtils.removeElements(shortArray2, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray3);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)3570;
      doubleArray0[4] = (double) (byte)100;
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (short) (-1);
      doubleArray0[7] = (double) (short)shortArray0[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1.0));
      assertEquals(5, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 3570.0, 0.0, 100.0, 100.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 3570.0, 0.0, 100.0, (-1.0), (-1.0), 100.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[6];
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)3570;
      intArray0[4] = (int) (short)3570;
      intArray0[5] = (int) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-813), (int) (short) (-1));
      assertEquals(6, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, 3570, 0, 3570, 0}, intArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-41));
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1.0), (int) (byte)100);
      assertEquals((-1), int1);
      assertEquals(8, doubleArray0.length);
      assertTrue(int1 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1.0), 0.0, 3570.0, 0.0, 100.0, (-1.0), (-1.0), 100.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)100;
      floatArray0[1] = (float) (short)3570;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (byte) (-41);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-53);
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      floatArray0[8] = (float) (byte)100;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)0, (int) (short)3570);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {100.0F, 3570.0F, 0.0F, (-41.0F), (-1.0F), (-53.0F), (-1.0F), (-1.0F), 100.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {100.0F, 3570.0F, 0.0F, (-41.0F), (-1.0F), (-53.0F), (-1.0F), (-1.0F), 100.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-854.44719217671);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1303.0095991, 38);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      doubleArray0[5] = (double) (-1);
      intArray0[2] = 38;
      intArray0[3] = 38;
      intArray0[4] = (-5289);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      ArrayUtils.shift(intArray0, 98);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, 0, 38, 38, (-5289), (-1)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), (-1.0)}, doubleArray0, 0.01);
      
      Random.setNextRandom((-1));
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, 0, (-184.01036934796));
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-184.01036934796)}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 38;
      floatArray0[2] = (float) 38;
      floatArray0[3] = (float) 38;
      floatArray0[4] = (float) 38;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 38.0F, 38.0F, 38.0F, 38.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 851.3628172468533;
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1303.0095991, 38);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {851.3628172468533, (-854.44719217671), 0.0, (-854.44719217671), (-1.0), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      doubleArray0[5] = (double) (-1);
      intArray0[1] = 38;
      intArray0[2] = 38;
      intArray0[3] = 38;
      intArray0[4] = (-5289);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      ArrayUtils.shift(intArray0, 98);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, 38, 38, 38, (-5289), (-1)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {851.3628172468533, (-854.44719217671), 0.0, (-854.44719217671), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      Random.setNextRandom((-1));
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, 0, (-184.01036934796));
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-184.01036934796)}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-670.3156F));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'p';
      charArray1[1] = 'p';
      charArray1[2] = 'p';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertArrayEquals(new char[] {'p', 'p', 'p'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-2154));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2154)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-2137.417F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2417.4536F));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2137.417F), (-2137.417F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2137.417F), (-2137.417F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-2137.417F), (-2137.417F)}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3204.845F);
      doubleArray0[2] = (-3630.80066424836);
      doubleArray0[0] = (double) (-3204.845F);
      doubleArray0[4] = (double) (-2137.417F);
      doubleArray0[5] = 112.0;
      doubleArray0[6] = (-3630.80066424836);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3204.844970703125), 0.0, (-3630.80066424836), 0.0, (-2137.4169921875), 112.0, (-3630.80066424836)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2143);
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)1894);
      assertFalse(boolean1);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-2143)}, shortArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3243;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-3524), 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3524, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Cbz";
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)70;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2);
      ArrayUtils.shift(shortArray0, Integer.MAX_VALUE);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)70, (short)0, (short) (-2), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)70;
      doubleArray0[1] = 3404.393357;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short) (-3267);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {70.0, 3404.393357, 0.0, 0.0, 0.0, (-3267.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'B';
      charArray0[2] = 'v';
      ArrayUtils.shift(charArray0, (-12), (-1083), (int) (short)0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'B', 'v'}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)70, (int) (short)70);
      assertEquals(9, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)70, (short)0, (short) (-2), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      int[] intArray0 = new int[6];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) 'B';
      intArray0[2] = (int) 'Y';
      intArray0[3] = (int) (short)0;
      intArray0[4] = (-1083);
      intArray0[5] = (int) 'B';
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 57, (int) (short)70);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-128);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Long long0 = new Long((-157L));
      assertEquals((-157L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray1 = new Long[3];
      longArray1[0] = long0;
      longArray1[1] = long0;
      longArray1[2] = long0;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      assertNotNull(longArray2);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, 100.0);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-128), 2299);
      assertEquals(4, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-128), (byte)0, (byte)0}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      long[] longArray3 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray3.length);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray3);
      assertSame(longArray3, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1400);
      intArray0[1] = (int) (byte) (-128);
      intArray0[2] = (int) (byte) (-128);
      int[] intArray1 = ArrayUtils.add(intArray0, 2, (int) (byte) (-127));
      assertEquals(4, intArray1.length);
      assertEquals(3, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1400), (-128), (-127), (-128)}, intArray1);
      assertArrayEquals(new int[] {(-1400), (-128), (-128)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")vU{";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Cbz";
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)70;
      ArrayUtils.swap((double[]) null, (-396), 633, (-396));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)52;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)52, (byte) (-125), (byte)52, (byte)52, (byte) (-125), (byte)16, (byte)52, (byte)52}, byteArray1);
      assertArrayEquals(new byte[] {(byte)52, (byte) (-125), (byte)52, (byte)52, (byte) (-125), (byte)16, (byte)52, (byte)52}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      ArrayUtils.reverse((double[]) null);
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) 489L;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 489.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 489.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      Random.setNextRandom((-1441));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1441);
      doubleArray0[1] = (double) 489.0F;
      doubleArray0[2] = (double) 489L;
      doubleArray0[3] = (double) 489L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 489.0, (-1441), (double) 489.0F);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1441.0), 489.0, 489.0, 489.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0, (-115), (-1441));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1441.0), 489.0, 489.0, 489.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '4';
      charArray0[2] = 'w';
      charArray0[3] = '+';
      charArray0[4] = '4';
      charArray0[5] = 'z';
      charArray0[6] = 'f';
      ArrayUtils.shift(charArray0, (-835));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'w', '+', '4', 'z', 'f', '\'', '4'}, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = (double) '4';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 52.0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {52.0, 52.0}, doubleArray0, 0.01);
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      ArrayUtils.shift(byteArray0, (-1496));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)0, (byte)92, (byte)0, (byte)110}, byteArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'f');
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'w', '+', '4', 'z', 'f', '\'', '4'}, charArray0);
      assertArrayEquals(new char[] {'w', '+', '4', 'z', 'f', '\'', '4', 'f'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)0, (byte)92, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {52.0, 52.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      short[] shortArray0 = new short[17];
      shortArray0[0] = (short) (-1511);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) (short) (-1511);
      objectArray0[5] = (Object) false;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, objectArray1.length);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-98);
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-98)}, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-98);
      doubleArray0[1] = (double) (-1572L);
      doubleArray0[2] = (double) (byte) (-98);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-98.0), (-1572.0), (-98.0)}, doubleArray0, 0.01);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("^fv2KRm,Y");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[7] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.insert((int) (short)0, doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, (int) (short)0);
      assertEquals(5, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (short)0;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (int) (short)0);
      assertEquals((-1), int0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte)17;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-10));
      assertEquals((-1), int1);
      assertEquals(8, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-128), (byte)2, (byte) (-43), (byte)0, (byte) (-43), (byte) (-42), (byte)17}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2074);
      shortArray0[1] = (short)3319;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)65;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)3319;
      longArray0[1] = (long) (short)65;
      longArray0[2] = (long) (short)65;
      longArray0[3] = (long) (short)0;
      ArrayUtils.swap(longArray0, 55, (int) (short)3319);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {3319L, 65L, 65L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = 0L;
      longArray0[2] = (-82L);
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-82L), 0L, 0L, 0L}, longArray0);
      
      ArrayUtils.reverse((boolean[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      ArrayUtils.swap(longArray0, 0, 3);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-82L), 0L, 0L, 0L}, longArray0);
      
      ArrayUtils.swap(longArray0, 827, 827, 0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-82L), 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      short[] shortArray0 = new short[5];
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = 1.5;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[3] = 1.5;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.8827147483825684);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = ArrayUtils.get(characterArray0, (int) 0, characterArray0[0]);
      assertEquals(1, characterArray0.length);
      assertNull(character0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[17];
      intArray0[3] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(intArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray1);
      assertFalse(boolean0);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1957.9013;
      doubleArray0[4] = 1048.9126810477687;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-841.2);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3594, (-1.0));
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.5, 0.0, 1.0, 1957.9013, 1048.9126810477687, 0.0, (-841.2)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[13];
      charArray0[0] = '9';
      charArray0[1] = '\"';
      ArrayUtils.swap(charArray0, (-86), (-888), (-1));
      assertEquals(13, charArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-1);
      intArray0[2] = (-888);
      intArray0[3] = (int) '9';
      intArray0[4] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(intArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(1677, charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 80;
      intArray0[1] = 1677;
      intArray0[2] = 1677;
      intArray0[3] = 1677;
      intArray0[4] = 1677;
      intArray0[5] = 1677;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 80);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 80, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = '`';
      charArray0[2] = 'h';
      char char0 = 'h';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1473, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1473, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-38);
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) (byte) (-38));
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-38.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = ' ';
      charArray0[3] = 'm';
      charArray0[4] = 'A';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\\', ' ', '\u0000', 'm', 'A'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(180.1547F);
      assertEquals(180.1547F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(3574.0);
      assertEquals(3574.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 180.1547F);
      assertEquals(180.1547F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {180.1547F, 3574.0F, 180.1547F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, (-1.0F));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {180.1547F, 3574.0F, 180.1547F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 180.1547F, 3574.0F, 180.1547F}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 3596.7);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3596.7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = 'l';
      charArray0[2] = '[';
      charArray0[3] = 'E';
      charArray0[4] = '';
      charArray0[5] = 'h';
      charArray0[6] = 'U';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1591), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1591, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short)0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)6;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)6);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)99, (byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)99}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = 1600.0949176752827;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte)99;
      doubleArray0[6] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (-4410.61752));
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-4410.61752), 0.0, (-1.0), 1600.0949176752827, 0.0, (-1.0), 99.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 1600.0949176752827, 0.0, (-1.0), 99.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(1, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      long[] longArray0 = new long[10];
      longArray0[1] = 0L;
      longArray0[1] = (-329L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(10, longArray0.length);
      assertArrayEquals(new long[] {0L, (-329L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)53;
      shortArray0[1] = (short) (byte)75;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)53, (short)75}, shortArray0);
      assertArrayEquals(new short[] {(short)53}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "fz2wY(]";
      stringArray0[2] = "u6q0U`L}";
      stringArray0[3] = "\"<size=";
      stringArray0[4] = "Cannot store ";
      stringArray0[5] = "";
      stringArray0[6] = " vs ";
      String[] stringArray1 = ArrayUtils.removeElements(stringArray0, stringArray0);
      assertEquals(0, stringArray1.length);
      assertEquals(7, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte)75;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)53, (byte)0, (byte)75}, byteArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-940), (-351));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1042);
      assertEquals(1042, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertEquals(2, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-3801));
      assertEquals((-3801), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2);
      assertEquals(2, (int)integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      boolean boolean2 = ArrayUtils.isSorted(integerArray0);
      assertFalse(boolean2);
      assertEquals(5, integerArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 4, (-1214));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2085;
      intArray0[1] = 26;
      intArray0[2] = (-1);
      intArray0[3] = 26;
      intArray0[5] = 907;
      intArray0[6] = 0;
      intArray0[7] = 0;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2085, 26, (-1), 26, 0, 907, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 26;
      floatArray0[4] = (float) 26;
      floatArray0[5] = 451.04865F;
      ArrayUtils.swap(floatArray0, 3082, 26);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 26.0F, 26.0F, 451.04865F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1), 0);
      assertEquals(8, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {2085, 26, (-1), 26, 0, 907, 0, 0}, intArray0);
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      boolean[] booleanArray2 = new boolean[2];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray2, false, 2);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(bitSet1, bitSet0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'O';
      charArray0[1] = 'g';
      charArray0[2] = 'v';
      charArray0[3] = 'm';
      charArray0[4] = 'w';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2085, 4);
      assertEquals(0, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'O', 'g', 'v', 'm', 'w'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-670.3156F));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'p';
      charArray1[1] = 'p';
      long[] longArray0 = new long[1];
      longArray0[0] = 2534L;
      ArrayUtils.swap(longArray0, 0, 3);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2534L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = 'K';
      Character character0 = Character.valueOf('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)37;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2618, (-65));
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)52, (byte)37}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (byte)52;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) (byte)52;
      longArray0[4] = (long) 2618;
      ArrayUtils.reverse(longArray0, (-1073741823), 1);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1L, 52L, 1L, 52L, 2618L}, longArray0);
      
      byte[] byteArray2 = ArrayUtils.insert((int) (byte)37, byteArray1, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)52, (byte)37}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = char0;
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = char0;
      char[] charArray1 = ArrayUtils.add(charArray0, 't');
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K', 'K'}, charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K', 'K', 't'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&Y|GZx X6";
      stringArray0[1] = "&Y|GZx X6";
      stringArray0[2] = "&Y|GZx X6";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "");
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-181L));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[1] = (-1);
      intArray0[2] = (-73);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-73);
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-73), (-1), (-1), (-73), (-1511)}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 421.057121261556;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 2803.5469402453023, (int) (short) (-1511));
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {421.057121261556}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      char[] charArray1 = ArrayUtils.add(charArray0, 'c');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-73), byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '&Y|GZx X6', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-605);
      intArray0[1] = 1131;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-605), 1131}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-54));
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[2] = (long) (-605);
      longArray0[3] = (long) (-605);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, (-605L), (-605L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, 2869L);
      assertFalse(boolean1);
      assertEquals(5, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-1L), 0L, (-605L), (-605L), 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 2869L;
      floatArray0[2] = (float) 1131;
      floatArray0[3] = (float) 1131;
      floatArray0[4] = (float) 1131;
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new float[] {(-1.0F), 2869.0F, 1131.0F, 1131.0F, 1131.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = '%';
      charArray0[2] = 'F';
      charArray0[3] = 'C';
      charArray0[4] = '&';
      charArray0[5] = '1';
      MockRandom mockRandom0 = new MockRandom((-3685L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'%', 'F', 'C', '&', '1', 'W'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.swap(doubleArray0, 2038, 26);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      Long[] longArray1 = new Long[4];
      Long long0 = new Long((short)3570);
      assertEquals(3570L, (long)long0);
      assertNotNull(long0);
      
      longArray1[0] = long0;
      Long long1 = new Long((short)3570);
      assertEquals(3570L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray1[1] = long1;
      Long long2 = new Long((long) longArray1[0]);
      assertEquals(3570L, (long)long2);
      assertEquals(4, longArray1.length);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray1[2] = long2;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1067.0, (-2146499202), (double) 26);
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Long long3 = new Long((-3000L));
      assertEquals((-3000L), (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (int) (short)0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Random.setNextRandom((short) (-1));
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 98, (-3520.501));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      short[] shortArray0 = new short[23];
      shortArray0[0] = (short)76;
      shortArray0[3] = (short)76;
      shortArray0[2] = (short)50;
      shortArray0[5] = (short)50;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)50, 1150);
      assertEquals(23, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)5, (int) (short)50);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) (-28667), (-1367));
      assertEquals((-1), int0);
      assertEquals(23, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '4';
      charArray0[2] = 'w';
      charArray0[3] = '+';
      charArray0[4] = '4';
      charArray0[5] = 'z';
      charArray0[6] = 'f';
      ArrayUtils.shift(charArray0, (-835));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'w', '+', '4', 'z', 'f', '\'', '4'}, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = (double) '4';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 52.0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {52.0, 52.0}, doubleArray0, 0.01);
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      ArrayUtils.shift(byteArray0, (-1496));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)0, (byte)92, (byte)0, (byte)110}, byteArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'f');
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'w', '+', '4', 'z', 'f', '\'', '4'}, charArray0);
      assertArrayEquals(new char[] {'w', '+', '4', 'z', 'f', '\'', '4', 'f'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)92;
      shortArray0[1] = (short) (byte)110;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)110;
      shortArray0[4] = (short) (-2605);
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)0, (-835));
      assertEquals((-1), int0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)92, (short)110, (short)0, (short)110, (short) (-2605), (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)14;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-3), (byte)96, (byte)65, (byte) (-67), (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-3), (byte)96, (byte)65, (byte) (-67), (byte)14}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)14, (byte) (-67), (byte)65, (byte)96, (byte) (-3), (byte) (-100)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'V');
      assertEquals(2, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'x', 'V'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)65;
      doubleArray0[1] = (double) (byte)65;
      doubleArray0[2] = (double) (byte) (-67);
      doubleArray0[3] = (double) (byte) (-100);
      doubleArray0[4] = 4578.452211;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 65.0, (-67.0), (-100.0), 4578.452211}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-67));
      assertEquals(2, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 65.0, (-67.0), (-100.0), 4578.452211}, doubleArray0, 0.01);
      
      ArrayUtils.swap(charArray0, (int) (byte)65, (int) (byte)65);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'x', 'V'}, charArray0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'x';
      characterArray0[1] = (Character) 'x';
      characterArray0[2] = (Character) 'x';
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) null);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-670.3156F);
      floatArray0[5] = (-688.87604F);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 0.0F;
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 51;
      long[] longArray0 = new long[5];
      longArray0[3] = (long) 51;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-1086));
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 51L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)51);
      assertEquals((-1), int1);
      assertEquals(0, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)27);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = ')';
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[0];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((Object[]) null, (Object) boolean1);
      assertFalse(boolean2);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)21671;
      short short0 = (short)2019;
      shortArray0[1] = (short)2019;
      shortArray0[2] = (short)1693;
      shortArray0[3] = (short) (-149);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2019, (-2014));
      assertEquals(4, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)21671, (short)2019, (short)1693, (short) (-149)}, shortArray0);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)1693;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) "java.lang.String", bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1262));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1262)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte) (-109));
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-109), (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1462;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-1262);
      longArray0[3] = (long) (byte)87;
      ArrayUtils.swap(longArray0, (-38), (int) (byte)0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1462L, 0L, (-1262L), 87L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2066;
      intArray0[1] = 26;
      intArray0[2] = (-1);
      intArray0[3] = 26;
      intArray0[5] = 907;
      intArray0[7] = (-30);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, (-416), 1462);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-416);
      longArray0[1] = (long) (-30);
      longArray0[2] = (long) 1462;
      ArrayUtils.swap(longArray0, 1, (-849));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-30L), (-416L), 1462L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      floatArray0[2] = 0.0F;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-121);
      ArrayUtils.swap(byteArray0, (int) (byte) (-75), (int) (byte)3);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)95, (byte) (-51), (byte)3, (byte)1, (byte) (-75), (byte)1, (byte) (-121)}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = '~';
      charArray0[2] = 'y';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'v', '~', 'y'}, charArray1);
      assertArrayEquals(new char[] {'v', '~', 'y'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      Float[] floatArray1 = new Float[1];
      floatArray1[0] = (Float) (-688.87604F);
      Float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      ArrayUtils.swap((boolean[]) null, (int) (byte) (-121), (int) (byte) (-51));
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)45;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) (-121), (int) (byte) (-75));
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-77);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)116);
      assertEquals(1, int0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)116, (byte) (-77), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      Character character0 = new Character('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[2] = characterArray0[1];
      Character character1 = Character.valueOf('K');
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[3] = character0;
      Character character2 = new Character((char) character0);
      assertEquals('K', (char)character2);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[4] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'K');
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K'}, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)100;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2127, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2127, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('W');
      assertEquals('W', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char char0 = 'K';
      Character character1 = Character.valueOf('K');
      assertEquals('K', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertEquals('K', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('K');
      assertEquals('K', (char)character3);
      assertTrue(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('F');
      assertEquals('F', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'K');
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'W', 'K', 'K', 'K', 'F'}, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)100;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2127, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2127, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '4';
      charArray0[2] = 'w';
      charArray0[3] = '+';
      charArray0[4] = '4';
      charArray0[5] = 'z';
      charArray0[6] = 'f';
      ArrayUtils.shift(charArray0, (-835));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'w', '+', '4', 'z', 'f', '\'', '4'}, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = (double) '4';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 52.0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {52.0, 52.0}, doubleArray0, 0.01);
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      ArrayUtils.shift(byteArray0, (-1496));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)0, (byte)92, (byte)0, (byte)110}, byteArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'f');
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'w', '+', '4', 'z', 'f', '\'', '4'}, charArray0);
      assertArrayEquals(new char[] {'w', '+', '4', 'z', 'f', '\'', '4', 'f'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, '4', 2073);
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'w', '+', '4', 'z', 'f', '\'', '4'}, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-1.0F);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-344));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -344, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-854.44719217671);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-275L);
      longArray0[1] = (-275L);
      longArray0[2] = (-275L);
      longArray0[3] = (-275L);
      longArray0[4] = (long) (-38);
      longArray0[5] = (-275L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-275L), 382);
      assertEquals(5, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-275L), (-275L), (-275L), (-275L), (-38L), (-275L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)724;
      shortArray0[1] = (short)6;
      ArrayUtils.swap(shortArray0, Integer.MAX_VALUE, (int) (short)6, 3947);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)724, (short)6}, shortArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (short)6);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)724;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) (short)6;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)724);
      assertEquals(0, int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {724L, 2147483647L, 6L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-605);
      longArray0[3] = (long) (-605);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-605L), 0L, 0L, (-605L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (-605L));
      assertTrue(boolean0);
      assertEquals(5, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-605L), 0L, 0L, (-605L), 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) (-605L);
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, (-605.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[2] = 'F';
      charArray0[5] = '1';
      MockRandom mockRandom0 = new MockRandom((-3685L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'F', '\u0000', '\u0000', '1', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-99);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 84, (byte) (-99));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[0] = (-3001.63F);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(20, floatArray0.length);
      assertEquals(20, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray1);
      assertTrue(boolean0);
      assertEquals(20, floatArray0.length);
      assertEquals(20, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      MockRandom mockRandom0 = new MockRandom((-2174L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'&'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L)}, longArray0);
      
      byte byte0 = (byte)53;
      byte byte1 = (byte)75;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)75;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (byte)53;
      short short0 = (short) (-5359);
      shortArray0[4] = (short) (-5359);
      shortArray0[5] = (short) (byte)53;
      shortArray0[6] = (short) (byte)75;
      shortArray0[7] = (short) (byte)53;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-2129129085));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2129129085, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1262));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1262)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte) (-109));
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-109), (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) (byte)0, 60);
      assertEquals(2, int0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-109), (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 60;
      doubleArray0[1] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {60.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (-4413.56530839465));
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {60.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, (int) (byte)87);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2074);
      shortArray0[1] = (short)3319;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)65;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)65;
      doubleArray0[1] = (double) (short)0;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short) (-2074);
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(3, objectArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-670.3156F));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'p';
      charArray1[1] = 'p';
      charArray1[2] = 'p';
      char[] charArray2 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'p';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 112L);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {112L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (-603.0F);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)116;
      floatArray0[5] = (float) (byte) (-1);
      floatArray0[6] = (float) (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (byte)0);
      assertEquals(7, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-603.0F), 0.0F, 116.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals("{3}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-670.3156F);
      floatArray0[5] = (-788.978F);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(18, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)36, (byte) (-74), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2137.417F), (-688.87604F), 0.0F, 0.0F, (-670.3156F), (-788.978F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2137.417F), (-688.87604F), 0.0F, 0.0F, (-670.3156F), (-788.978F), 0.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_LONG_ARRAY, 1663L);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      ArrayUtils.shift(charArray0, (int) (byte)36, (int) (byte) (-74), (int) (byte)36);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (-1234.0474);
      doubleArray0[7] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, (int) (short)0);
      assertEquals(5, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-344));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -344, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-670.3156F));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'p';
      charArray0[2] = 'p';
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)6;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)6);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)99, (byte)6, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)99, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)99, 3732);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-605);
      intArray0[1] = 1131;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-605), 1131}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-605), 1131}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-54));
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[2] = (long) (-605);
      longArray0[3] = (long) (-605);
      longArray0[4] = (long) 1131;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, (-605L), (-605L), 1131L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, 2869L);
      assertFalse(boolean1);
      assertEquals(5, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-1L), 0L, (-605L), (-605L), 1131L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 2869L;
      floatArray0[2] = (float) 1131;
      floatArray0[3] = (float) 1131;
      floatArray0[4] = (float) 1131;
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new float[] {(-1.0F), 2869.0F, 1131.0F, 1131.0F, 1131.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 3132L);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 3132L;
      floatArray0[1] = (float) 3132L;
      floatArray0[2] = (float) 3132L;
      floatArray0[3] = (float) 3132L;
      floatArray0[5] = (float) 3132L;
      floatArray0[6] = (float) 3132L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1928), (-1928));
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3132.0F, 3132.0F, 3132.0F, 3132.0F, 0.0F, 3132.0F, 3132.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 3132L);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 3132L;
      floatArray0[1] = (float) 3132L;
      floatArray0[2] = (float) 3132L;
      floatArray0[3] = (float) 3132L;
      floatArray0[4] = (float) 3132L;
      floatArray0[5] = (float) 3132L;
      floatArray0[6] = (float) 3132L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1928), (-1928));
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3132.0F, 3132.0F, 3132.0F, 3132.0F, 3132.0F, 3132.0F, 3132.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-670.3156F));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'p';
      doubleArray0[1] = (double) 'p';
      float[] floatArray1 = ArrayUtils.subarray((float[]) null, 4, 4);
      assertNull(floatArray1);
      
      float[] floatArray2 = new float[1];
      floatArray2[0] = (-503.2978F);
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray2);
      assertFalse(boolean0);
      assertEquals(1, floatArray2.length);
      assertArrayEquals(new float[] {(-503.2978F)}, floatArray2, 0.01F);
      
      Integer integer0 = new Integer((-1926));
      assertEquals((-1926), (int)integer0);
      assertNotNull(integer0);
      
      Short short0 = new Short((short)3363);
      assertEquals((short)3363, (short)short0);
      assertNotNull(short0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) short0, (int) (byte)4);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray3 = ArrayUtils.subarray((float[]) null, (int) (byte)87, 4);
      assertNull(floatArray3);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1107.06F;
      floatArray0[1] = (-1372.4F);
      floatArray0[2] = (-398.66F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 3596, 1314);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1107.06F, (-1372.4F), (-398.66F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1107.06F, (-1372.4F), (-398.66F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)87, (byte) (-79), (byte) (-88), (byte)4, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)87, (byte) (-79), (byte) (-88), (byte)4, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)4;
      Integer integer0 = new Integer((-57));
      assertEquals((-57), (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0, 2916);
      assertEquals(2, objectArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, 5359, 160);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1107.06F, (-1372.4F), (-398.66F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertSame(floatArray1, floatArray2);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.swap(doubleArray0, 2038, 26);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      Long[] longArray1 = new Long[4];
      Long long0 = new Long((short)3570);
      assertEquals(3570L, (long)long0);
      assertNotNull(long0);
      
      longArray1[0] = long0;
      Long long1 = new Long((short)3570);
      assertEquals(3570L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray1[1] = long1;
      Long long2 = new Long((long) longArray1[0]);
      assertEquals(3570L, (long)long2);
      assertEquals(4, longArray1.length);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray1[2] = long2;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1067.0, (-2146499202), (double) 26);
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      Long long3 = new Long((-3000L));
      assertEquals((-3000L), (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      Long long4 = new Long((short)0);
      assertEquals(0L, (long)long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long4);
      assertEquals(0L, object0);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(object0.equals((Object)long3));
      assertFalse(object0.equals((Object)long1));
      assertFalse(object0.equals((Object)long2));
      assertFalse(object0.equals((Object)long0));
      assertNotNull(object0);
      
      int int0 = 199;
      try { 
        Long.valueOf("_f`zZ,X!h8(dN@", 199);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 199 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      Character character0 = Character.valueOf('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) character0, (-4184));
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-4184);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-4184);
      floatArray0[5] = (float) 't';
      floatArray0[6] = (float) (-4184);
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      
      long[] longArray3 = ArrayUtils.add(longArray2, 455L);
      assertEquals(0, longArray2.length);
      assertEquals(1, longArray3.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray2));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {455L}, longArray3);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = 't';
      charArray0[5] = 't';
      charArray0[6] = 't';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 't');
      assertEquals(0, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'t', 't', 't', 't', 't', 't', 't'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-605);
      intArray0[1] = 1131;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-605), 1131}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-605), 1131}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-54));
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (-605);
      longArray0[3] = (long) (-605);
      longArray0[4] = (long) 1131;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, (-605L), (-605L), 1131L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-605);
      longArray0[3] = (long) (-605);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-605L), 0L, 0L, (-605L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-605));
      assertEquals((-605.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-605.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)64;
      Float float0 = new Float((-2255.0F));
      assertEquals((-2255.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(643.80042115172);
      assertEquals(643.8004F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-2828.2776F));
      assertEquals((-2828.2776F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-4184.0F));
      assertEquals((-4184.0F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(1350.21239);
      assertEquals(1350.2124F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      floatArray0[2] = float0;
      floatArray0[3] = float2;
      floatArray0[4] = float2;
      floatArray0[5] = float2;
      floatArray0[6] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2828.2776F), (-2828.2776F), (-1.0F), (-4184.0F), (-4184.0F), (-4184.0F), (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-73));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 643.80042115172, (-310));
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '`';
      charArray0[3] = '<';
      charArray0[4] = ',';
      charArray0[5] = ',';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ']');
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'5', '5', '`', '<', ',', ','}, charArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '5';
      longArray0[1] = (long) ',';
      longArray0[2] = (-171L);
      longArray0[3] = (long) '`';
      longArray0[4] = (long) ',';
      longArray0[5] = (long) (short) (-1511);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) '`';
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {53L, 44L, (-171L), 96L, 44L, (-1511L), (-1L), 96L}, longArray1);
      assertArrayEquals(new long[] {53L, 44L, (-171L), 96L, 44L, (-1511L), (-1L), 96L}, longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((float) 53L);
      assertEquals(53.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-1L));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[1]);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(0.7);
      assertEquals(0.7F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {53.0F, (-1.0F), (-1.0F), 0.7F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      ArrayUtils.swap((char[]) null, 394, (-2975), 394);
      int[] intArray0 = new int[6];
      intArray0[0] = 394;
      intArray0[1] = 1315;
      intArray0[2] = 394;
      intArray0[3] = (-2975);
      intArray0[4] = 394;
      intArray0[3] = (-2975);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {394, 1315, 394, (-2975), 394, 0}, intArray0);
      
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, (-2975), 394, 1315);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      ArrayUtils.swap((byte[]) null, (-2071), 375);
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 394, 394);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2975);
      doubleArray0[1] = 297.8691259263;
      doubleArray0[1] = 2128.2;
      doubleArray0[3] = (double) 394;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 1005.80916243;
      doubleArray0[6] = (double) (-2071);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-2975.0), 2128.2, 0.0, 394.0, Double.NaN, 1005.80916243, (-2071.0)}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      int[] intArray0 = null;
      int int0 = 2146426871;
      boolean boolean0 = ArrayUtils.contains((int[]) null, 2146426871);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)4561;
      shortArray0[1] = (short)100;
      short short0 = (short)0;
      shortArray0[2] = (short)0;
      int int1 = 91;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 91, (short)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-73));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 643.80042115172, (-310));
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '`';
      charArray0[3] = '<';
      charArray0[4] = ',';
      charArray0[5] = ',';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ']');
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'5', '5', '`', '<', ',', ','}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-310), (short)1078);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -310, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1810.5496499656279);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1810.5496499656279), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = 'h';
      charArray0[2] = 'J';
      charArray0[3] = 'L';
      charArray0[4] = '\\';
      charArray0[5] = ',';
      charArray0[6] = 'A';
      charArray0[7] = 'B';
      charArray0[8] = 'g';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'z');
      assertEquals(0, int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'z', 'h', 'J', 'L', '\\', ',', 'A', 'B', 'g'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 491L;
      longArray0[1] = 598L;
      longArray0[2] = (-2143L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 426, 426);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {491L, 598L, (-2143L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(426);
      assertEquals(426, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)67);
      assertEquals((byte)67, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)67, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[1] = float0;
      Float float1 = new Float(1.0);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-1770.4996F));
      assertEquals((-1770.4996F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[3] = float2;
      Float float3 = new Float(0.0F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      floatArray0[4] = float3;
      Float float4 = new Float(1.0F);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      
      floatArray0[5] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[5]);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1.0F, (-1770.4996F), 0.0F, 1.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'a';
      charArray0[2] = '|';
      charArray0[3] = '>';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'a', (-1141));
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'H', 'a', '|', '>', '\u0000', '\u0000'}, charArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.shift(charArray0, (-396), (-1141), (-1141));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'H', 'a', '|', '>', '\u0000', '\u0000'}, charArray0);
      
      float[] floatArray2 = new float[9];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 'H';
      floatArray2[1] = (float) '|';
      floatArray2[2] = (float) 'a';
      floatArray2[3] = (float) (-396);
      floatArray2[4] = 0.0F;
      floatArray2[5] = (float) 'a';
      floatArray2[6] = (float) (-396);
      floatArray2[7] = (float) '|';
      floatArray2[8] = (float) (-1141);
      ArrayUtils.swap(floatArray2, (-2557), (-396), 36);
      assertEquals(9, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {72.0F, 124.0F, 97.0F, (-396.0F), 0.0F, 97.0F, (-396.0F), 124.0F, (-1141.0F)}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '4';
      charArray0[2] = 'w';
      charArray0[3] = '+';
      charArray0[4] = '4';
      charArray0[5] = 'z';
      charArray0[6] = 'f';
      ArrayUtils.shift(charArray0, (-835));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'w', '+', '4', 'z', 'f', '\'', '4'}, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = (double) '4';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 52.0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {52.0, 52.0}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      ArrayUtils.shift(byteArray0, (-1496));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)0, (byte)92, (byte)0, (byte)110}, byteArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'f');
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'w', '+', '4', 'z', 'f', '\'', '4'}, charArray0);
      assertArrayEquals(new char[] {'w', '+', '4', 'z', 'f', '\'', '4', 'f'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, Float.NaN);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Index: ";
      stringArray0[4] = "Index: ";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Index: ");
      assertEquals(5, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3156;
      shortArray0[1] = (short) (-1965);
      ArrayUtils.swap(shortArray0, (-924), (int) (short)3156);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)3156, (short) (-1965)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Index: ";
      stringArray0[4] = "Index: ";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Index: ");
      assertEquals(5, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3156;
      shortArray0[1] = (short) (-1965);
      ArrayUtils.swap(shortArray0, (-924), 285);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)3156, (short) (-1965)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 851.3628172468533;
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[2] = 0.1;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1303.0095991;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1303.0095991, 38);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {851.3628172468533, (-854.44719217671), 0.1, 1.0, (-1.0), 1303.0095991}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 38;
      intArray0[2] = 38;
      intArray0[3] = 38;
      intArray0[4] = (-5289);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      ArrayUtils.shift(intArray0, 98);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), 38, 38, 38, (-5289), (-1)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {851.3628172468533, (-854.44719217671), 0.1, 1.0, (-1.0), 1303.0095991}, doubleArray0, 0.01);
      
      Random.setNextRandom((-1));
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray1, (-1), (-184.01036934796));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, 2904, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2904, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[2] = (-73);
      intArray0[5] = (-73);
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-73), 0, 0, (-73), (-1511)}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 421.057121261556;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2803.5469402453023, (int) (short) (-1511));
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {421.057121261556}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = '&';
      charArray0[2] = ';';
      charArray0[3] = 'o';
      charArray0[4] = ';';
      charArray0[5] = 'y';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'y', '&', ';', 'o', ';', 'y'}, charArray0);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.reverse(charArray0, (-73), 2095);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'y', ';', 'o', ';', '&', 'y'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 51;
      long[] longArray0 = new long[5];
      longArray0[3] = (long) 51;
      longArray0[4] = (long) 51;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-1086));
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 51L, 51L}, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = ')';
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.reverse((float[]) null, 51, 14);
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.shift((short[]) null, 74, (-1465), 90);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)100;
      doubleArray0[2] = (double) (byte)100;
      doubleArray0[3] = 0.0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1103);
      intArray0[1] = (-1103);
      intArray0[3] = (int) (byte)100;
      ArrayUtils.shift(intArray0, 3369);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {100, (-1103), (-1103), 0}, intArray0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte)15);
      assertNull(byteArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = 'e';
      charArray0[2] = '-';
      charArray0[3] = '6';
      charArray0[4] = 'u';
      charArray0[5] = 'y';
      charArray0[6] = 'o';
      charArray0[7] = '&';
      charArray0[8] = ';';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'m', 'e', '-', '6', 'u', 'y', 'o', '&', ';'}, charArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray2);
      
      ArrayUtils.reverse(charArray0, 65, (-2375));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'m', 'e', '-', '6', 'u', 'y', 'o', '&', ';'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-651.9602F));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'p';
      charArray1[1] = 'p';
      charArray1[2] = 'p';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertArrayEquals(new char[] {'p', 'p', 'p'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1001);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-2430));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2430, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Index: ";
      stringArray0[4] = "Index: ";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Index: ");
      assertEquals(5, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(2, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int1 = ArrayUtils.indexOf(intArray0, 0, 102);
      assertEquals((-1), int1);
      assertEquals(3, intArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, 1389);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1389, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      char[] charArray0 = new char[1];
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-35.5F);
      floatArray0[1] = (-1427.2706F);
      floatArray0[2] = (-1427.2706F);
      floatArray0[3] = (-35.5F);
      floatArray0[4] = (-35.5F);
      floatArray0[5] = (-1427.2706F);
      floatArray0[6] = (-35.5F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-2852.829F));
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-35.5F), (-1427.2706F), (-1427.2706F), (-35.5F), (-35.5F), (-1427.2706F), (-35.5F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2852.829F), (-35.5F), (-1427.2706F), (-1427.2706F), (-35.5F), (-35.5F), (-1427.2706F), (-35.5F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.swap(charArray0, 54, 54);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      Random.setNextRandom((-670));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1427.2706F);
      doubleArray0[1] = (-628.695073145039);
      doubleArray0[2] = (double) (-2129129085);
      doubleArray0[3] = (double) 54;
      doubleArray0[4] = (double) (-136);
      doubleArray0[5] = (double) (-35.5F);
      ArrayUtils.shift(doubleArray0, (-833));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-35.5), (-1427.2706298828125), (-628.695073145039), (-2.129129085E9), 54.0, (-136.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = '`';
      charArray0[2] = 'n';
      charArray0[3] = 'J';
      charArray0[4] = 'h';
      charArray0[5] = '&';
      charArray0[6] = 'x';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'H');
      assertEquals(7, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'h', '`', 'n', 'J', 'h', '&', 'x'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'h';
      floatArray0[1] = (float) '&';
      floatArray0[2] = (-35.5F);
      floatArray0[3] = (float) 'h';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1427.4F));
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {104.0F, 38.0F, (-35.5F), 104.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1427.4F), 104.0F, 38.0F, (-35.5F), 104.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.swap(charArray0, 54, 8);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'h', '`', 'n', 'J', 'h', '&', 'x'}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, '=', (-2129129085));
      assertEquals(7, charArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {'h', '`', 'n', 'J', 'h', '&', 'x'}, charArray0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      Random.setNextRandom((-3938));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'x';
      doubleArray0[1] = (double) 'J';
      doubleArray0[2] = (double) (-2129129085);
      ArrayUtils.shift(doubleArray0, (-121));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {74.0, (-2.129129085E9), 120.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)14;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-3), (byte)96, (byte)65, (byte) (-67), (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-3), (byte)96, (byte)65, (byte) (-67), (byte)14}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)14, (byte) (-67), (byte)65, (byte)96, (byte) (-3), (byte) (-100)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'x');
      assertEquals(2, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'x', 'x'}, charArray0);
      assertEquals("{0, 1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-67));
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-67.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.swap(charArray0, (int) (byte)65, (int) (byte)65);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'x', 'x'}, charArray0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'x';
      characterArray0[1] = (Character) 'x';
      characterArray0[2] = (Character) 'x';
      Character[] characterArray1 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, (char) characterArray0[0], (-2129129085));
      assertEquals(3, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {'x', 'x'}, charArray0);
      assertEquals(2, bitSet1.length());
      assertEquals("{0, 1}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(2, bitSet1.cardinality());
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(bitSet1, bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.swap(doubleArray0, 2038, 26);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      Long[] longArray1 = new Long[4];
      Long long0 = new Long((short)3570);
      assertEquals(3570L, (long)long0);
      assertNotNull(long0);
      
      longArray1[0] = long0;
      Long long1 = new Long((short)3570);
      assertEquals(3570L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray1[1] = long1;
      Long long2 = new Long((long) longArray1[0]);
      assertEquals(3570L, (long)long2);
      assertEquals(4, longArray1.length);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray1[2] = long2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)93);
      assertNull(byteArray0);
      
      ArrayUtils.shift(doubleArray0, 2, 1, 18);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-1518));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1518, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-62);
      ArrayUtils.shift((double[]) null, 8, 2, (int) (byte) (-62));
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 8;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (int) (byte)59;
      intArray0[4] = (int) (byte)102;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 628);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, 8, Integer.MAX_VALUE, 59, 102}, intArray0);
      assertArrayEquals(new int[] {2, 8, Integer.MAX_VALUE, 59, 102}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.reverse(intArray0, 2, 18);
      assertEquals(5, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {2, 8, 102, 59, Integer.MAX_VALUE}, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-38);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-24), (byte) (-62), (byte)102, (byte)101, (byte)1, (byte)63, (byte) (-38)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-24), (byte) (-62), (byte)102, (byte)101, (byte)63, (byte) (-38)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-38);
      doubleArray0[1] = (double) (byte)63;
      doubleArray0[2] = (double) (byte) (-62);
      doubleArray0[3] = (double) (byte) (-62);
      doubleArray0[4] = (double) (byte)63;
      doubleArray0[5] = (double) (byte) (-24);
      doubleArray0[6] = (double) (byte) (-62);
      ArrayUtils.shift(doubleArray0, 8, 8, (int) (byte) (-62));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-38.0), 63.0, (-62.0), (-62.0), 63.0, (-24.0), (-62.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2860);
      intArray0[1] = (int) (byte)102;
      intArray0[2] = (int) (byte)59;
      intArray0[3] = (int) (byte)1;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 11);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2860), 102, 59, 1}, intArray0);
      assertArrayEquals(new int[] {(-2860), 102, 59, 1}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (-3967L);
      longArray0[2] = (-1426L);
      longArray0[3] = (-1L);
      longArray0[0] = 1663L;
      longArray0[5] = 0L;
      longArray0[6] = 3758L;
      longArray0[0] = (-1426L);
      longArray0[8] = 129L;
      int int0 = ArrayUtils.indexOf(longArray0, 409L);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-1426L), (-3967L), (-1426L), (-1L), 0L, 0L, 3758L, 0L, 129L}, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3967L);
      doubleArray0[1] = (double) 3758L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-3967.0), 3758.0}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (-3967L);
      longArray0[2] = (-1426L);
      longArray0[3] = (-1L);
      longArray0[0] = 1663L;
      longArray0[5] = 0L;
      longArray0[6] = 3758L;
      longArray0[0] = (-2147483648L);
      longArray0[8] = 129L;
      int int0 = ArrayUtils.indexOf(longArray0, 409L);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-2147483648L), (-3967L), (-1426L), (-1L), 0L, 0L, 3758L, 0L, 129L}, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3967L);
      doubleArray0[1] = (double) 3758L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-3967.0), 3758.0}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-128);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Character character0 = new Character('_');
      assertEquals('_', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character(';');
      assertEquals(';', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character(';');
      assertEquals(';', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'R');
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 3);
      assertEquals(3, int0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, Integer.MIN_VALUE, 49);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-128), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-128), (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.shift((char[]) null, (int) (byte) (-128), (int) (byte) (-128), (int) (byte) (-127));
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 455L;
      longArray0[1] = 455L;
      longArray0[1] = (-85L);
      longArray0[3] = 1879L;
      ArrayUtils.shift((char[]) null, (-2989), (-1008), 123);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2181);
      shortArray0[1] = (short) (-216);
      shortArray0[2] = (short) (-818);
      shortArray0[3] = (short)3362;
      shortArray0[4] = (short)0;
      shortArray0[4] = (short)813;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), (int) (short)813);
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-2181), (short) (-216), (short) (-818), (short)3362, (short)813, (short)0}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-2181);
      doubleArray0[1] = (-1.0);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2181.0), (-1.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-818);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 1879L;
      floatArray0[3] = 2698.0F;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) 455L;
      floatArray0[6] = (float) 123;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1879.0F, 2698.0F, 0.0F, 455.0F, 123.0F, (-818.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-407.268879));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2137.417F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(16);
      assertEquals(16, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("3YOAmq vu");
      assertNull(integer2);
      
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.add(longArray0, longArray0[0]);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 's');
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ArrayUtils.shift(byteArray0, (int) (byte)100, (-53), (-53));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)100);
      assertEquals((short)100, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short)0;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      short[] shortArray3 = ArrayUtils.removeElements(shortArray2, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray3);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)3570;
      doubleArray0[3] = (double) (byte)100;
      doubleArray0[4] = (double) (byte)100;
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (short) (-1);
      doubleArray0[7] = (double) (short)shortArray0[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1.0));
      assertEquals(5, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 3570.0, 100.0, 100.0, 100.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 3570.0, 100.0, 100.0, (-1.0), (-1.0), 100.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)3570;
      intArray0[3] = (-53);
      intArray0[4] = (int) (short)3570;
      intArray0[5] = (int) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-813), (int) (short) (-1));
      assertEquals(6, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, 3570, (-53), 3570, 0}, intArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-41));
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1.0), (int) (byte)100);
      assertEquals((-1), int1);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 3570.0, 100.0, 100.0, (-1.0), (-1.0), 100.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Long long0 = new Long((-542L));
      assertEquals((-542L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1900L);
      assertEquals(1900L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long1);
      assertEquals(1, longArray0.length);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) longArray0);
      assertFalse(boolean1);
      assertEquals(1, longArray0.length);
      assertFalse(long1.equals((Object)long0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-99L);
      longArray0[3] = 1879L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-3213L), (-958));
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, (-99L), 0L, 1879L, 0L, 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray0, (-1), (-958));
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, (-99L), 0L, 1879L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (-3685L));
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), (-1));
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      longArray0[1] = (-329L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-329L)}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)53;
      shortArray0[1] = (short) (byte)75;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)53, (short)75}, shortArray0);
      assertArrayEquals(new short[] {(short)53}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "fz2wY(]";
      stringArray0[2] = "u6q0U`L}";
      stringArray0[3] = "\"<size=";
      stringArray0[4] = "Cannot store ";
      stringArray0[5] = "";
      stringArray0[6] = " vs ";
      String[] stringArray1 = ArrayUtils.removeElements(stringArray0, stringArray0);
      assertEquals(0, stringArray1.length);
      assertEquals(7, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte)75;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)53, (byte)0, (byte)75}, byteArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-940), (-351));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-121));
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('|');
      assertEquals('|', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertEquals('|', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character0);
      assertEquals('|', (char)character2);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('{');
      assertEquals('{', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(':');
      assertEquals(':', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) character2);
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character4));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertFalse(character2.equals((Object)character3));
      assertFalse(character2.equals((Object)character4));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      floatArray0[2] = 0.0F;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character[] characterArray0 = new Character[5];
      char char0 = '`';
      Character character0 = Character.valueOf('`');
      assertEquals('`', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertEquals('`', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('b');
      assertEquals('b', (char)character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(']');
      assertEquals(']', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('0');
      assertEquals('0', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(5, characterArray1.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-128));
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-128);
      doubleArray0[1] = (double) (byte)122;
      byteArray0[1] = (byte)122;
      doubleArray0[3] = (double) (byte)122;
      doubleArray0[4] = (double) (byte) (-128);
      doubleArray0[5] = (double) (byte)122;
      doubleArray0[6] = (double) (byte)122;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-128.0));
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-128.0), 122.0, 0.0, 122.0, (-128.0), 122.0, 122.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-128.0), (-128.0), 122.0, 0.0, 122.0, (-128.0), 122.0, 122.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&Y|GZx X6";
      stringArray0[1] = "&Y|GZx X6";
      stringArray0[2] = "&Y|GZx X6";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "");
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-181L));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[1] = (-1);
      intArray0[2] = (-73);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-73);
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-73), (-1), (-1), (-73), (-1511)}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 421.057121261556;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 2803.5469402453023, (int) (short) (-1511));
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {421.057121261556}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      char[] charArray1 = ArrayUtils.add(charArray0, 'c');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-1511), (int) (short) (-1511));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)103;
      boolean boolean2 = ArrayUtils.contains(byteArray0, (byte)122);
      assertFalse(boolean2);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)18, (byte)16, (byte)103}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1107.06F;
      byte byte0 = (byte)0;
      int int0 = (-57);
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) 1107.06F;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 455L;
      longArray0[1] = 455L;
      longArray0[2] = (-82L);
      longArray0[3] = 1879L;
      int int0 = ArrayUtils.indexOf(longArray0, 455L);
      assertEquals(0, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {455L, 455L, (-82L), 1879L, 0L, 0L}, longArray0);
      
      ArrayUtils.reverse((boolean[]) null);
      Object[] objectArray0 = new Object[3];
      Character character0 = Character.valueOf('%');
      assertEquals('%', (char)character0);
      assertNotNull(character0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 455L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) '%';
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1879L;
      doubleArray0[5] = (double) '%';
      doubleArray0[6] = (double) '%';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 37.0, 337, 3327.47);
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {455.0, 0.0, 37.0, 0.0, 1879.0, 37.0, 37.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (-1234.0474);
      doubleArray0[7] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.insert((int) (short)0, doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-1234.0474), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-1234.0474), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, (int) (short)0);
      assertEquals(5, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = 1L;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (short)0;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (int) (short)0);
      assertEquals(3, int0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte)17;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-10));
      assertEquals((-1), int1);
      assertEquals(8, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-128), (byte)2, (byte) (-43), (byte)0, (byte)41, (byte) (-42), (byte)17}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      byte[] byteArray0 = new byte[7];
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2137.417F), (-688.87604F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2137.417F), (-688.87604F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      longArray0[1] = (-329L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-329L)}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)53;
      shortArray0[1] = (short) (byte)75;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)53, (short)75}, shortArray0);
      assertArrayEquals(new short[] {(short)53}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = ArrayUtils.insert((int) (byte)53, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[9];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(9, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-127), 633);
      assertEquals((-1), int0);
      assertEquals(12, byteArray0.length);
      
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('b');
      assertEquals('b', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('i');
      assertEquals('i', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character2;
      char[] charArray0 = Character.toChars((int) (byte)2);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u0002'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2074);
      shortArray0[1] = (short)3319;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)65;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)65, 1);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2074), (short)3319, (short)0, (short)65}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-2137.417F);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (-2137.417F);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2137.4169921875), 0.0, (-2137.4169921875), 1.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) (short)0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)3319;
      intArray0[1] = 1;
      intArray0[2] = (int) (short)65;
      intArray0[3] = (-1);
      intArray0[4] = 998;
      intArray0[5] = (int) (short)3319;
      intArray0[6] = (-1);
      intArray0[7] = 306;
      intArray0[8] = 1;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3319, 1, 65, (-1), 998, 3319, (-1), 306, 1}, intArray1);
      assertArrayEquals(new int[] {3319, 1, 65, (-1), 998, 3319, (-1), 306, 1}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)0;
      ArrayUtils.reverse((byte[]) null);
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((short)0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byte byte0 = (byte) (-77);
      byteArray0[2] = (byte) (-77);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)116);
      assertEquals(1, int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)116, (byte) (-77)}, byteArray0);
      
      Boolean[] booleanArray2 = new Boolean[8];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[2] = (Boolean) true;
      booleanArray2[3] = (Boolean) false;
      booleanArray2[4] = (Boolean) false;
      booleanArray2[6] = (Boolean) true;
      booleanArray2[2] = (Boolean) false;
      Boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertEquals(8, booleanArray3.length);
      assertEquals(8, booleanArray2.length);
      assertNotNull(booleanArray3);
      assertSame(booleanArray3, booleanArray2);
      assertSame(booleanArray2, booleanArray3);
      
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      int int1 = ArrayUtils.indexOf((Object[]) booleanArray2, (Object) short0);
      assertEquals((-1), int1);
      assertEquals(8, booleanArray2.length);
      assertFalse(int1 == int0);
      assertSame(booleanArray2, booleanArray3);
      
      String string0 = ArrayUtils.toString((Object) booleanArray2[6], "");
      assertEquals("true", string0);
      assertEquals(8, booleanArray2.length);
      assertNotNull(string0);
      assertSame(booleanArray2, booleanArray3);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray1, (java.util.Random) mockRandom0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)0;
      byteArray1[2] = (Byte) (byte) (-77);
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertNotNull(byteArray2);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      
      ArrayUtils.shift((Object[]) byteArray1, (int) (byte)116);
      assertEquals(3, byteArray1.length);
      assertSame(byteArray1, byteArray2);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, "true");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Character character0 = new Character('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = (-2331);
      intArray0[3] = 102;
      intArray0[4] = (-4641);
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertArrayEquals(new char[] {'^'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.swap(booleanArray0, 1462, (-36));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false}, booleanArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = 3251L;
      longArray0[1] = 2147483647L;
      longArray0[2] = (long) 26;
      longArray0[3] = (long) 907;
      longArray0[4] = (long) (-416);
      ArrayUtils.swap(longArray0, (-1224), (-416));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {3251L, 2147483647L, 26L, 907L, (-416L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2085;
      intArray0[1] = 26;
      intArray0[2] = (-1);
      intArray0[3] = 26;
      intArray0[5] = 907;
      intArray0[6] = 0;
      intArray0[7] = 0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, (-416), 1462);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      float[] floatArray0 = new float[4];
      ArrayUtils.swap(floatArray0, (-1446), (-1714), (-1707));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, (-1446));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), (-2338));
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)6;
      shortArray0[2] = (short)6;
      shortArray0[3] = (short) (-3143);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)6, (short)0, (short)6, (short) (-3143)}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)6, (short)0, (short)6, (short) (-3143)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1810.5496499656279);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1810.5496499656279), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.shift(booleanArray0, 4252);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, true}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1810.5496499656279), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertEquals(10, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)781);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[2] = '\'';
      charArray0[3] = '4';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[4] = '4';
      charArray0[7] = '-';
      charArray0[8] = '\'';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '4');
      assertEquals(9, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'4', '\u0000', '\'', '4', '4', '\'', '\u0000', '-', '\''}, charArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{0, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) '4';
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) bitSet0);
      assertEquals(9, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertArrayEquals(new char[] {'4', '\u0000', '\'', '4', '4', '\'', '\u0000', '-', '\''}, charArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{0, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '\'';
      doubleArray0[1] = 4676.6513;
      doubleArray0[2] = (double) '\'';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 39.0, (int) characterArray0[0]);
      assertEquals(2, int0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, characterArray0.length);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertArrayEquals(new double[] {39.0, 4676.6513, 39.0}, doubleArray0, 0.01);
      assertNotSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)14;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-3), (byte)96, (byte)65, (byte) (-67), (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-3), (byte)96, (byte)65, (byte) (-67), (byte)14}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)14, (byte) (-67), (byte)65, (byte)96, (byte) (-3), (byte) (-100)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'V');
      assertEquals(2, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'x', 'V'}, charArray0);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)65;
      doubleArray0[1] = (double) (byte)65;
      doubleArray0[2] = (double) (byte) (-67);
      doubleArray0[3] = (double) (byte) (-100);
      doubleArray0[4] = 4578.452211;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 65.0, (-67.0), (-100.0), 4578.452211}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-67));
      assertEquals(2, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 65.0, (-67.0), (-100.0), 4578.452211}, doubleArray0, 0.01);
      
      ArrayUtils.swap(charArray0, (int) (byte)65, (int) (byte)65);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'x', 'V'}, charArray0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'x';
      characterArray0[1] = (Character) 'x';
      characterArray0[2] = (Character) 'x';
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) null);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Integer integer0 = new Integer((short) (-2074));
      assertEquals((-2074), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-2074), object0);
      assertNotNull(object0);
      
      long[] longArray0 = new long[18];
      ArrayUtils.reverse(longArray0, (int) (short) (-2074), (int) (short) (-2074));
      assertEquals(18, longArray0.length);
      
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = (double) (short) (-2074);
      doubleArray0[1] = (double) (short) (-2074);
      doubleArray0[2] = (-5903.1513792529295);
      doubleArray0[3] = (double) (short) (-2074);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertEquals(11, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)100;
      doubleArray0[1] = (double) (byte)100;
      doubleArray0[2] = (double) (byte)100;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (byte)100;
      doubleArray0[5] = (double) (byte)100;
      doubleArray0[6] = (double) (byte)100;
      doubleArray0[7] = (double) (byte)100;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-3374.125));
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {100.0, 100.0, 100.0, 0.0, 100.0, 100.0, 100.0, 100.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      ArrayUtils.shift(byteArray0, 2);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 'e');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'e'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)100;
      shortArray0[1] = (short)1532;
      shortArray0[2] = (short) (byte)100;
      shortArray0[3] = (short) (byte)100;
      shortArray0[4] = (short) (byte)100;
      shortArray0[5] = (short) (byte)100;
      shortArray0[6] = (short) (byte)100;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-2483));
      assertEquals(8, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2483), (short)100, (short)1532, (short)100, (short)100, (short)100, (short)100, (short)100}, shortArray1);
      assertArrayEquals(new short[] {(short)100, (short)1532, (short)100, (short)100, (short)100, (short)100, (short)100}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)100;
      objectArray0[1] = (Object) 100.0;
      objectArray0[2] = (Object) 100.0;
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) (short)100;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[4]);
      assertEquals((short)100, object0);
      assertEquals(6, objectArray0.length);
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      Double double0 = new Double((short)100);
      assertEquals(100.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) double0);
      assertEquals(1, int0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[1] = float0;
      Float float1 = new Float(1.0);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 409L;
      longArray0[1] = 2211L;
      longArray0[2] = 409L;
      longArray0[3] = 409L;
      longArray0[4] = 409L;
      longArray0[5] = 409L;
      int int0 = ArrayUtils.indexOf(longArray0, (-1783L));
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {409L, 2211L, 409L, 409L, 409L, 409L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[2] = (-1426L);
      longArray0[3] = 9L;
      longArray0[0] = 1663L;
      longArray0[5] = 0L;
      longArray0[6] = 9L;
      longArray0[7] = 0L;
      longArray0[8] = 129L;
      int int0 = ArrayUtils.indexOf(longArray0, 410L);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {1663L, 0L, (-1426L), 9L, 0L, 0L, 9L, 0L, 129L}, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 0L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      MutableInt mutableInt0 = new MutableInt(3010);
      assertNotNull(mutableInt0);
      assertEquals(3010.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3010.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3010L, mutableInt0.longValue());
      assertEquals(3010, (int)mutableInt0.toInteger());
      assertEquals((byte) (-62), mutableInt0.byteValue());
      assertEquals(3010, (int)mutableInt0.getValue());
      assertEquals((short)3010, mutableInt0.shortValue());
      assertEquals(3010, mutableInt0.intValue());
      assertEquals("3010", mutableInt0.toString());
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals(3010, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(3010.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3010.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3010L, mutableInt0.longValue());
      assertEquals(3010, (int)mutableInt0.toInteger());
      assertEquals((byte) (-62), mutableInt0.byteValue());
      assertEquals(3010, (int)mutableInt0.getValue());
      assertEquals((short)3010, mutableInt0.shortValue());
      assertEquals(3010, mutableInt0.intValue());
      assertEquals("3010", mutableInt0.toString());
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(mutableInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 970;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-101));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-101)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-101)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) 970L;
      longArray1[1] = (Long) 970L;
      longArray1[2] = (Long) 970L;
      longArray1[3] = (Long) 970L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) longArray1[0]);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {970L, 970L, 970L, 970L}, longArray2);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (-3967L);
      longArray0[2] = (-1426L);
      longArray0[3] = (-1L);
      longArray0[0] = 1663L;
      longArray0[5] = 0L;
      longArray0[6] = 3758L;
      longArray0[7] = (-2147483648L);
      longArray0[8] = 129L;
      int int0 = ArrayUtils.indexOf(longArray0, 409L);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {1663L, (-3967L), (-1426L), (-1L), 0L, 0L, 3758L, (-2147483648L), 129L}, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3967L);
      doubleArray0[1] = (double) 3758L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-3967.0), 3758.0}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Long[] longArray1 = new Long[1];
      longArray1[0] = (Long) (-3967L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-1L));
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-3967L)}, longArray2);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1511);
      intArray0[2] = (-73);
      intArray0[5] = (-73);
      Short[] shortArray1 = new Short[8];
      shortArray1[0] = (Short) (short) (-1511);
      shortArray1[1] = (Short) (short) (-1511);
      shortArray1[2] = (Short) (short) (-1511);
      shortArray1[3] = (Short) (short) (-1511);
      shortArray1[4] = (Short) (short) (-1511);
      shortArray1[5] = (Short) (short) (-1511);
      shortArray1[6] = (Short) (short) (-1511);
      shortArray1[7] = (Short) (short) (-1511);
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertEquals(8, shortArray2.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-1511), (short) (-1511), (short) (-1511), (short) (-1511), (short) (-1511), (short) (-1511), (short) (-1511), (short) (-1511)}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2074);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)65;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = 4628.803625496;
      doubleArray0[4] = (double) (short) (-2074);
      doubleArray0[5] = (double) (short)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 478.5882, (int) (short) (-2074));
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 4628.803625496, (-2074.0), 0.0}, doubleArray0, 0.01);
      
      Long long0 = new Long((short) (-2074));
      assertEquals((-2074L), (long)long0);
      assertNotNull(long0);
      
      Random.setNextRandom((-1494));
      ArrayUtils.swap((float[]) null, 1405, 1, (int) (short)65);
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[4] = '#';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'G');
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'#', '#', '#', '\u0000', '#'}, charArray0);
      
      ArrayUtils.reverse(charArray0, (int) (short) (-2074), (int) (short)0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'#', '#', '#', '\u0000', '#'}, charArray0);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-2074), (short)0, (short)0, (short)65}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-2074), (short)0, (short)0, (short)65}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 1705, (-1375));
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1375);
      longArray0[1] = (-1L);
      longArray0[2] = (long) 1705;
      ArrayUtils.reverse(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1705L, (-1L), (-1375L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 55, 16);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ArrayUtils.shift(byteArray0, (int) (byte)100, (-53), (-53));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)100);
      assertEquals((short)100, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = new short[14];
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertEquals(14, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      short[] shortArray3 = ArrayUtils.removeElements(shortArray2, shortArray1);
      assertEquals(14, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray3);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)shortArray0[0];
      longArray0[1] = (long) (short) (-1);
      int int0 = ArrayUtils.indexOf(longArray0, 780L, 2);
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {100L, (-1L)}, longArray0);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)100);
      assertEquals(0, int1);
      assertEquals(1, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-469.678840742903));
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'b';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\\', 'b'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '\\';
      intArray0[1] = (int) '\\';
      intArray0[2] = (int) '\\';
      intArray0[3] = (int) 'b';
      intArray0[4] = (int) 'b';
      intArray0[5] = (int) 'b';
      intArray0[6] = (int) 'b';
      intArray0[7] = (int) 'b';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'l';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'l', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Cbz";
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-3267);
      shortArray0[1] = (short)70;
      shortArray0[2] = (short) (-3267);
      shortArray0[3] = (short) (-2);
      ArrayUtils.shift(shortArray0, Integer.MAX_VALUE);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-3267), (short)70, (short) (-3267), (short) (-2), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)70;
      doubleArray0[1] = 3404.393357;
      doubleArray0[2] = (double) (short) (-3267);
      doubleArray0[3] = (double) (short) (-3267);
      doubleArray0[4] = (double) (short) (-3267);
      doubleArray0[5] = (double) (short) (-3267);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {70.0, 3404.393357, (-3267.0), (-3267.0), (-3267.0), (-3267.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'B';
      charArray0[2] = 'v';
      ArrayUtils.shift(charArray0, (-12), (-1083), (int) (short)0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'B', 'v'}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)70, (int) (short)70);
      assertEquals(9, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short) (-3267), (short)70, (short) (-3267), (short) (-2), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)14;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-3), (byte)96, (byte)65, (byte) (-67), (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-3), (byte)96, (byte)65, (byte) (-67), (byte)14}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)14, (byte) (-67), (byte)65, (byte)96, (byte) (-3), (byte) (-100)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'V');
      assertEquals(2, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'x', 'V'}, charArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-67));
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-67.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.swap(charArray0, (int) (byte)65, (int) (byte)65);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'x', 'V'}, charArray0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'x';
      characterArray0[1] = (Character) 'x';
      characterArray0[2] = (Character) 'x';
      Character[] characterArray1 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, (char) characterArray0[0], (-2129129085));
      assertEquals(3, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {'x', 'V'}, charArray0);
      assertEquals(1, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{0}", bitSet1.toString());
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(bitSet1, bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)0;
      ArrayUtils.reverse((byte[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 'x';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      charArray0[5] = 'V';
      charArray0[6] = 'V';
      charArray0[7] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'f');
      assertEquals(8, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'V', 'x', 'V', 'V', 'V', 'V', 'V', 'V'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-1.0F));
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap(charArray0, (int) (short)0, (int) (short)0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'V', 'x', 'V', 'V', 'V', 'V', 'V', 'V'}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (short)0);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)65);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)17, (byte)9, (byte) (-52), (byte)65, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)17, (byte)9, (byte) (-52), (byte)65, (byte)1}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2126634292, 2126634292);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Character[] characterArray0 = new Character[6];
      char char0 = 'N';
      Character character0 = Character.valueOf('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('$');
      assertEquals('$', (char)character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertEquals('N', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('d');
      assertEquals('d', (char)character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('$');
      assertEquals('$', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character1));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('u');
      assertEquals('u', (char)character5);
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'N', '$', 'N', 'd', '$', 'u'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Short short0 = new Short((short)1184);
      assertEquals((short)1184, (short)short0);
      assertNotNull(short0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = '';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'y', 2649);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'O', 'O', ''}, charArray0);
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 851.3628172468533;
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-854.44719217671);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1303.0095991, 38);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {851.3628172468533, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      doubleArray0[5] = (double) (-1);
      intArray0[1] = 38;
      intArray0[2] = 38;
      intArray0[3] = 38;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)787;
      shortArray0[1] = (short)787;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), (-1));
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)787, (short)787}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 38, (-5289));
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)5, (int) (short)76);
      assertEquals((-1), int1);
      assertEquals(2, shortArray0.length);
      assertTrue(int1 == int0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)787, (short)787}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-854.44719217671);
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) 38;
      ArrayUtils.reverse(objectArray0, (-1), 38);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)0;
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1770;
      ArrayUtils.swap(intArray0, 1770, 1, 1770);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1770}, intArray0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 1322.4F);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1770;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.1, (-2688), (double) 1322.4F);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1770.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (int) (byte)0, (-53), (-53));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)100);
      assertEquals((short)100, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short)100, (short)short1);
      assertEquals(3, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[2] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte)0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)100, (short)100, (short)100}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray0, (short) (byte)0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)100, (short)100, (short)100}, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray2);
      assertTrue(boolean1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)100, (short)100, (short)100}, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.shift(byteArray1, (int) (byte)0, (-11), (-1049));
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      ArrayUtils.reverse((Object[]) byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)shortArray0[0];
      longArray0[1] = (long) (short)shortArray0[0];
      longArray0[2] = (long) (-11);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 51L);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {100L, 100L, (-11L)}, longArray0);
      assertArrayEquals(new long[] {100L, 100L, (-11L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3374.256F;
      floatArray0[2] = 835.7F;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2440;
      shortArray0[1] = (short)0;
      ArrayUtils.shift(shortArray0, 3577, (int) (short)2440, (int) (short)0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2440, (short)0}, shortArray0);
      
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('F');
      assertEquals('F', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('G');
      assertEquals('G', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character0);
      assertEquals('F', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertFalse(character0.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('@');
      assertEquals('@', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character1);
      assertEquals('G', (char)character4);
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character3));
      assertFalse(character1.equals((Object)character2));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('W');
      assertEquals('W', (char)character5);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'F', 'G', 'F', '@', 'G', 'W'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Index: ";
      stringArray0[4] = "Index: ";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Index: ");
      assertEquals(5, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, (-1L));
      assertEquals(0, int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 4);
      assertEquals(9, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-82L);
      longArray0[1] = (-1L);
      longArray0[2] = (-3252L);
      ArrayUtils.reverse(longArray0, 970, (-124));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-82L), (-1L), (-3252L)}, longArray0);
      
      ArrayUtils.shift((Object[]) booleanArray1, (-124), 970, 970);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3252L);
      doubleArray0[1] = (double) (-3252L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (-520.5539271109);
      doubleArray0[4] = (-4536.0);
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) 970;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-520.5539271109));
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-520.5539271109), (-3252.0), (-3252.0), (-1.0), (-520.5539271109), (-4536.0), (-1.0), 970.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3252.0), (-3252.0), (-1.0), (-520.5539271109), (-4536.0), (-1.0), 970.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'v';
      charArray0[1] = '&';
      charArray0[2] = 'U';
      charArray0[3] = 'A';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'v', '&', 'U', 'A'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean[] booleanArray0 = new boolean[2];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)29;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) (byte)29;
      objectArray0[2] = (Object) false;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-82L);
      longArray0[1] = (-1L);
      longArray0[2] = (-3252L);
      ArrayUtils.reverse(longArray0, 970, (-111));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-82L), (-1L), (-3252L)}, longArray0);
      
      ArrayUtils.shift((Object[]) booleanArray1, (-111), 970, 970);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3252L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (-520.5539271109);
      doubleArray0[4] = (-4536.0);
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) 970;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-520.5539271109));
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3252.0), 0.0, (-1.0), (-520.5539271109), (-4536.0), (-1.0), 970.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-520.5539271109), (-3252.0), 0.0, (-1.0), (-520.5539271109), (-4536.0), (-1.0), 970.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'v';
      charArray0[1] = '&';
      charArray0[2] = 'U';
      charArray0[3] = 'A';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'v', '&', 'U', 'A'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      short[] shortArray0 = new short[23];
      shortArray0[0] = (short)76;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)76;
      ArrayUtils.swap(objectArray0, 140, (int) (short)76, (int) (short)76);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-77);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)116);
      assertEquals(1, int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)116, (byte) (-77)}, byteArray0);
      
      Boolean[] booleanArray2 = new Boolean[8];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[2] = (Boolean) true;
      booleanArray2[3] = (Boolean) false;
      booleanArray2[4] = (Boolean) false;
      booleanArray2[6] = (Boolean) true;
      booleanArray2[2] = (Boolean) false;
      Boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertEquals(8, booleanArray3.length);
      assertEquals(8, booleanArray2.length);
      assertNotNull(booleanArray3);
      assertSame(booleanArray3, booleanArray2);
      assertSame(booleanArray2, booleanArray3);
      
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      int int1 = ArrayUtils.indexOf((Object[]) booleanArray2, (Object) short0);
      assertEquals((-1), int1);
      assertEquals(8, booleanArray2.length);
      assertFalse(int1 == int0);
      assertSame(booleanArray2, booleanArray3);
      
      String string0 = ArrayUtils.toString((Object) booleanArray2[6], "");
      assertEquals("true", string0);
      assertEquals(8, booleanArray2.length);
      assertNotNull(string0);
      assertSame(booleanArray2, booleanArray3);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray1, (java.util.Random) mockRandom0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)0;
      byteArray1[2] = (Byte) (byte) (-77);
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertNotNull(byteArray2);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      
      ArrayUtils.shift((Object[]) byteArray1, (int) (byte)116);
      assertEquals(3, byteArray1.length);
      assertSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isEquals(double0, double0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) double0);
      assertFalse(boolean1);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean2 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean2);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      ArrayUtils.shift(booleanArray0, (-38), (-735), 55);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ArrayUtils.shift(byteArray0, (int) (byte)100, (-53), (-53));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)100);
      assertEquals((short)100, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short)100, (short)short1);
      assertEquals(3, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[2] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte)100);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)100, (short)100, (short)100}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray1);
      assertTrue(boolean1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)100, (short)100, (short)100}, shortArray1);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      assertArrayEquals(new byte[] {(byte)100}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) shortArray0[2]);
      assertEquals(100.0, (double)double1, 0.01);
      assertEquals(3, shortArray0.length);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((byte)100);
      assertEquals(100.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 100.0, 100.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-53);
      intArray0[1] = (int) (short)shortArray0[1];
      intArray0[2] = (int) (byte)100;
      intArray0[3] = (int) (short)shortArray0[1];
      intArray0[4] = (int) (short)shortArray0[0];
      intArray0[5] = (int) (byte)100;
      intArray0[6] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.add(intArray0, (-392));
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-53), 100, 100, 100, 100, 100, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {(-53), 100, 100, 100, 100, 100, Integer.MAX_VALUE, (-392)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean boolean2 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean2);
      assertEquals(7, booleanArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 489L;
      floatArray0[1] = (float) 489L;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {489.0F, 489.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {489.0F, 489.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 489L;
      floatArray2[1] = (float) 489L;
      floatArray2[2] = 1700.901F;
      float[] floatArray3 = ArrayUtils.removeAllOccurences(floatArray2, 3365.0537F);
      assertEquals(3, floatArray2.length);
      assertEquals(3, floatArray3.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {489.0F, 489.0F, 1700.901F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {489.0F, 489.0F, 1700.901F}, floatArray3, 0.01F);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[1] = float0;
      Float float1 = new Float(1.0);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-1770.4996F));
      assertEquals((-1770.4996F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(0.0F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      floatArray0[4] = float3;
      Float float4 = new Float(1.0F);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      
      floatArray0[5] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[5]);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1.0F, 1.0F, 0.0F, 1.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'a';
      charArray0[2] = '|';
      boolean[] booleanArray2 = new boolean[6];
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      boolean[] booleanArray3 = ArrayUtils.addAll(booleanArray2, booleanArray2);
      assertEquals(6, booleanArray2.length);
      assertEquals(12, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'a';
      longArray0[1] = (long) '|';
      longArray0[2] = (long) '|';
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {97L, 124L, 124L}, longArray0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)76;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)761;
      shortArray0[4] = (short)50;
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 285);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)76, (short)0, (short)0, (short)761, (short)50, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)76, (short)0, (short)0, (short)761, (short)50, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)6;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)6);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift(booleanArray0, 708);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      ArrayUtils.swap((float[]) null, 26, (int) (short)76);
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 4);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      Class<Long> class1 = Long.class;
      classArray0[1] = class1;
      Class<Long> class2 = Long.class;
      classArray0[2] = class2;
      Class<Long> class3 = Long.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[2] = (int) (short) (-73);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short) (-403);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (-1L);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (short) (-403);
      longArray0[7] = (long) (-73);
      longArray0[8] = (long) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(longArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 'x';
      charArray0[2] = '/';
      charArray0[3] = '$';
      charArray0[4] = 'F';
      charArray0[5] = '%';
      charArray0[6] = 'c';
      charArray0[7] = 'G';
      charArray0[8] = 'O';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'F', 2);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'1', 'x', '/', '$', 'F', '%', 'c', 'G', 'O'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      ArrayUtils.reverse((byte[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[1] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      charArray0[3] = 'x';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(6, int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'x', 'x', '\u0000', 'x', 'x', 'x', 'x', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2074);
      shortArray0[1] = (short) (-2074);
      shortArray0[2] = (short)0;
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '<', (int) (short)0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = '\'';
      charArray0[0] = '\'';
      char char1 = '4';
      charArray0[1] = '4';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = (-31.0);
      doubleArray0[2] = 643.80042115172;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1526.5809, 423);
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {52.0, (-31.0), 643.80042115172}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'p');
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\'', '4', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-310), 1);
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, ']');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(3852L);
      assertEquals(3852L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1647L);
      assertEquals(1647L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[0]);
      assertEquals(3852L, (long)long2);
      assertEquals(4, longArray0.length);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[0]);
      assertEquals(3852L, (long)long3);
      assertEquals(4, longArray0.length);
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3852L, 1647L, 3852L, 3852L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)3570;
      shortArray0[4] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)3570, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[6];
      ArrayUtils.swap(doubleArray0, 2038, 26);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      Long[] longArray1 = new Long[4];
      Long long0 = new Long((short)3570);
      assertEquals(3570L, (long)long0);
      assertNotNull(long0);
      
      longArray1[0] = long0;
      Long long1 = new Long((short)3570);
      assertEquals(3570L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray1[1] = long1;
      Long long2 = new Long((long) longArray1[0]);
      assertEquals(3570L, (long)long2);
      assertEquals(4, longArray1.length);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray1[2] = long2;
      Long long3 = new Long((short)0);
      assertEquals(0L, (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      longArray1[3] = long3;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(4, longArray2.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {3570L, 3570L, 3570L, 0L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[5] = (double) (short)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)3570;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)3570;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)0, (short)3570, (short)0, (short)3570, (short)0, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1.0));
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short)3570;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short) (-1);
      int int0 = ArrayUtils.indexOf(intArray0, (-958), (int) (short)3570);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, (-1), 3570, 0, (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) null, 0, 2);
      assertNull(objectArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      Character character0 = Character.valueOf('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) character0, (-4184));
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-4184);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-4184);
      floatArray0[5] = (float) 't';
      floatArray0[6] = (float) (-4184);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertEquals(1, int1);
      assertEquals(7, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-4184.0F), (-1.0F), (-4184.0F), 116.0F, (-4184.0F)}, floatArray0, 0.01F);
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      
      long[] longArray3 = ArrayUtils.add(longArray2, 455L);
      assertEquals(0, longArray2.length);
      assertEquals(1, longArray3.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray2));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {455L}, longArray3);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray3);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 353.432F;
      floatArray0[1] = (-2417.4536F);
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 178.8F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-2417.4536F));
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {353.432F, (-2417.4536F), Float.NaN, 178.8F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {353.432F, (-2417.4536F), Float.NaN, 178.8F, (-2417.4536F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      floatArray0[2] = 0.0F;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-121);
      ArrayUtils.swap(byteArray0, (int) (byte) (-75), (int) (byte)3);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)95, (byte) (-51), (byte)3, (byte)1, (byte) (-75), (byte) (-64), (byte) (-121)}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = '~';
      charArray0[2] = 'y';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'v', '~', 'y'}, charArray1);
      assertArrayEquals(new char[] {'v', '~', 'y'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-688.87604F));
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2137.417F), (-688.87604F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2137.417F), (-688.87604F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-688.87604F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'v';
      intArray0[1] = (int) (byte) (-51);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {118, (-51)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[2] = 1700.901F;
      float[] floatArray3 = ArrayUtils.removeAllOccurences(floatArray2, 3365.0537F);
      assertEquals(3, floatArray2.length);
      assertEquals(3, floatArray3.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1700.901F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1700.901F}, floatArray3, 0.01F);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1810.5496499656279);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1810.5496499656279), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.shift(booleanArray0, 4252);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, true}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1810.5496499656279), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertEquals(10, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean2);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1965);
      shortArray0[1] = (short)3577;
      shortArray0[2] = (short)3156;
      shortArray0[3] = (short) (-2209);
      ArrayUtils.swap(shortArray0, (int) (short)3577, (-1150));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1965), (short)3577, (short)3156, (short) (-2209)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 0L);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[20];
      intArray0[0] = 5;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.remove(intArray0, 5);
      assertEquals(20, intArray0.length);
      assertEquals(19, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 5);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 554.673365;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {5.0, (-1.0), 554.673365, 5.0, 5.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'N'}, charArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'N';
      floatArray0[1] = (float) 'N';
      floatArray0[2] = (float) 'N';
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 'N';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {78.0F, 78.0F, 78.0F, 0.0F, 78.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "0ndex: ";
      stringArray0[3] = "0ndex: ";
      stringArray0[4] = "0ndex: ";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-2238.14);
      doubleArray0[4] = (double) 1;
      ArrayUtils.swap(doubleArray0, 1, 1, 1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, (-2238.14), 1.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)52;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)16, (byte)52}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)16, (byte)52}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1247);
      shortArray0[1] = (short) (byte)16;
      shortArray0[2] = (short) (byte)16;
      shortArray0[3] = (short) (byte)16;
      shortArray0[4] = (short) (byte)16;
      ArrayUtils.shift(shortArray0, (int) (short) (-1247));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)16, (short)16, (short)16, (short) (-1247), (short)16}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[6] = 455L;
      longArray0[1] = 455L;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 455L;
      floatArray0[1] = (float) 455L;
      floatArray0[2] = (float) (-85L);
      floatArray0[3] = (float) (-85L);
      floatArray0[4] = (float) (-85L);
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 455L;
      floatArray0[7] = (float) 455L;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {455.0F, 455.0F, (-85.0F), (-85.0F), (-85.0F), 0.0F, 455.0F, 455.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {455.0F, 455.0F, (-85.0F), (-85.0F), (-85.0F), 0.0F, 455.0F, 455.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2137.417F), (-688.87604F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2137.417F), (-688.87604F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = 'Y';
      charArray0[2] = '{';
      charArray0[3] = 'K';
      charArray0[4] = '2';
      charArray0[5] = '%';
      charArray0[6] = 'c';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'c');
      assertEquals(7, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'4', 'Y', '{', 'K', '2', '%', 'c'}, charArray0);
      assertArrayEquals(new char[] {'4', 'Y', '{', 'K', '2', '%'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Integer[] integerArray0 = new Integer[2];
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3165;
      intArray0[1] = 52;
      intArray0[2] = 3165;
      intArray0[3] = 3165;
      intArray0[4] = (-1);
      intArray0[5] = 2;
      intArray0[6] = (-364);
      ArrayUtils.swap(intArray0, (-6151), Integer.MAX_VALUE);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {3165, 52, 3165, 3165, (-1), 2, (-364), 0}, intArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3165;
      intArray0[1] = 52;
      intArray0[2] = 3012;
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = 2;
      intArray0[6] = (-364);
      intArray0[7] = 0;
      ArrayUtils.swap(intArray0, (-6151), Integer.MAX_VALUE);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {3165, 52, 3012, 0, (-1), 2, (-364), 0}, intArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Integer[] integerArray0 = new Integer[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-407.268879));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2137.417F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int1 = 16;
      Integer integer1 = new Integer(16);
      assertEquals(16, (int)integer1);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("3YOAmq vu");
      assertNull(integer2);
      
      integerArray0[2] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      Character character0 = Character.valueOf('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-128);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Character character1 = new Character('_');
      assertEquals('_', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character(';');
      assertEquals(';', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = new Character(';');
      assertEquals(';', (char)character3);
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'R');
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 3);
      assertEquals(3, int0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)663);
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = new int[1];
      floatArray0[2] = (float) (short)663;
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 4018);
      assertEquals(1, intArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-1062));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 4018;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) (byte)124;
      floatArray1[3] = (float) 0;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 663.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {4018.0F, 0.0F, 124.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {663.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-128);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Character character0 = new Character(';');
      assertEquals(';', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'S');
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) ';');
      assertEquals(7, int0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-670.3156F));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'p';
      doubleArray0[1] = 1568.77002124;
      doubleArray0[2] = (double) 'p';
      doubleArray0[3] = (double) 'p';
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {112.0, 1568.77002124, 112.0, 112.0}, doubleArray0, 0.01);
      
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      String[] stringArray0 = new String[6];
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, 2144973284);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2144973284;
      char[] charArray0 = new char[2];
      charArray0[1] = '\"';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.14497331E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Character character0 = new Character(';');
      assertEquals(';', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'd');
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 3);
      assertEquals(3, int0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'K';
      intArray0[1] = (int) 'K';
      intArray0[2] = 255;
      intArray0[3] = (int) 'K';
      intArray0[4] = (int) 'K';
      intArray0[5] = (int) 'K';
      intArray0[6] = (int) 'K';
      int int0 = ArrayUtils.indexOf(intArray0, 1302, 255);
      assertEquals((-1), int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {75, 75, 255, 75, 75, 75, 75}, intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(0, int1);
      assertEquals(1, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-448.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1111.0F;
      floatArray0[3] = 4521.07F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-2137.417F);
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-2336.8F);
      floatArray0[8] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-448.0F), 1.0F, 1111.0F, 4521.07F, (-1.0F), (-2137.417F), 1.0F, (-2336.8F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(7, int0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (-3967L);
      longArray0[2] = (-1426L);
      longArray0[3] = (-1L);
      longArray0[0] = 1663L;
      longArray0[5] = 0L;
      longArray0[6] = 3758L;
      longArray0[7] = (-2147483648L);
      longArray0[8] = 129L;
      int int0 = ArrayUtils.indexOf(longArray0, 409L);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {1663L, (-3967L), (-1426L), (-1L), 0L, 0L, 3758L, (-2147483648L), 129L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true, true, true}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-906);
      shortArray0[1] = (short)160;
      shortArray0[2] = (short) (-1006);
      shortArray0[3] = (short)124;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)66);
      assertEquals((-1), int1);
      assertEquals(4, shortArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short) (-906), (short)160, (short) (-1006), (short)124}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '4';
      charArray0[2] = 'w';
      charArray0[3] = '+';
      charArray0[4] = 'w';
      charArray0[5] = 'z';
      charArray0[6] = 'f';
      ArrayUtils.shift(charArray0, (-835));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'w', '+', 'w', 'z', 'f', '\'', '4'}, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '4';
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isEquals(double0, double0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean2);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 4165;
      intArray0[1] = 97;
      intArray0[2] = (-1358);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1358));
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {4165, 97, (-1358)}, intArray0);
      assertArrayEquals(new int[] {(-1358), 4165, 97, (-1358)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean3 = ArrayUtils.contains(doubleArray0, 0.0);
      assertFalse(boolean3);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)3361;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)36, (-990));
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)6, (short)3361}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(intArray0, 97);
      assertEquals(1, int1);
      assertEquals(3, intArray0.length);
      assertFalse(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {4165, 97, (-1358)}, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-407.268879));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-407.268879)}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-30);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(356, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 356, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-4994);
      shortArray0[2] = (short)2098;
      ArrayUtils.shift(shortArray0, (int) (short)0, (-1928), 321);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-4994), (short)2098}, shortArray0);
      
      Character character0 = Character.valueOf('-');
      assertEquals('-', (char)character0);
      assertNotNull(character0);
      
      String string0 = ArrayUtils.toString((Object) character0);
      assertEquals("-", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1310L;
      longArray0[1] = (long) (short) (-4994);
      ArrayUtils.shift(longArray0, (-1459), (int) (short)0, (int) (short)2098);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1310L, (-4994L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1073741824);
      assertEquals(0, objectArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1073741824;
      longArray0[1] = (long) 1073741824;
      longArray0[2] = (long) 1073741824;
      longArray0[3] = (long) 1073741824;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1073741824L, 1073741824L, 1073741824L, 1073741824L}, longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 120;
      intArray0[1] = 1073741824;
      intArray0[3] = 1073741824;
      intArray0[5] = 1073741824;
      intArray0[6] = 1073741824;
      intArray0[7] = 11;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {120, 1073741824, 0, 1073741824, 0, 1073741824, 1073741824, 11}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.hashCode((Object) "");
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, 954);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      
      Double double0 = new Double(1073741824L);
      assertEquals(1.073741824E9, (double)double0, 0.01);
      assertNotNull(double0);
      
      String string0 = ArrayUtils.toString((Object) double0);
      assertEquals("1.073741824E9", string0);
      assertNotNull(string0);
      
      ArrayUtils.reverse(intArray1, 1073741824, 954);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {120, 1073741824, 0, 1073741824, 0, 1073741824, 1073741824, 11}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.hashCode((Object) "1.073741824E9");
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 0L);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[20];
      intArray0[0] = 5;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      int[] intArray1 = ArrayUtils.remove(intArray0, 5);
      assertEquals(20, intArray0.length);
      assertEquals(19, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      int int1 = ArrayUtils.indexOf(charArray0, '', (-1));
      assertEquals(0, int1);
      assertEquals(1, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {''}, charArray0);
      
      boolean[] booleanArray2 = new boolean[9];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = true;
      booleanArray2[1] = false;
      booleanArray2[2] = true;
      booleanArray2[3] = false;
      booleanArray2[4] = false;
      booleanArray2[5] = false;
      booleanArray2[6] = true;
      booleanArray2[7] = false;
      booleanArray2[8] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray2, false);
      assertEquals(9, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true, false, false}, booleanArray2));
      assertEquals("{1, 3, 4, 5, 7, 8}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(9, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "";
      stringArray0[1] = "org.apache.commos.lang3.ArrayUtils";
      stringArray0[2] = "(J!a.{3%* II,a$_";
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-833);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)7;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)6);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)7, (byte)6, (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)7}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 2144973284);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-403);
      shortArray0[2] = (short)2015;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-73);
      shortArray0[6] = (short)2015;
      shortArray0[7] = (short) (-1352);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      shortArray0[6] = (short) (-73);
      intArray0[2] = (int) (short) (-73);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -73, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Index: ";
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-2625.53F);
      floatArray0[2] = 416.64F;
      floatArray0[3] = (-5681.878F);
      int[] intArray0 = new int[1];
      intArray0[0] = (-358);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -358, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1810.5496499656279);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[0] = 1.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-73));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1511);
      ArrayUtils.reverse(intArray0, (int) (short) (-1511), (-2820));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1511)}, intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.add(longArray0, (-3951L));
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-3951L)}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 455L;
      longArray0[1] = 455L;
      longArray0[1] = (-85L);
      longArray0[3] = 1879L;
      longArray0[4] = 1144L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-3213L), (-958));
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {455L, (-85L), 0L, 1879L, 1144L, 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(9, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-99L);
      longArray0[4] = 1144L;
      longArray0[5] = (-99L);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-3213L), (-958));
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, (-99L), 0L, 0L, 1144L, (-99L)}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Character character0 = new Character('=');
      assertEquals('=', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('Z');
      assertEquals('Z', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('Z');
      assertEquals('Z', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '=');
      assertNull(charArray0);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, false, 2);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      char[] charArray1 = ArrayUtils.removeElement((char[]) null, '=');
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      short[] shortArray0 = new short[5];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[6] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.insert((int) (short)0, doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(180.1547F);
      assertEquals(180.1547F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(3574.0);
      assertEquals(3574.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      int int0 = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 180.1547F;
      doubleArray0[1] = (double) (float)floatArray0[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-605);
      intArray0[1] = 1131;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-605), 1131}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-605), 1131}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 1131;
      doubleArray0[2] = (double) (-605);
      doubleArray0[3] = (double) (-605);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1131, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1131, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Cbz";
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3267);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.swap(booleanArray0, (-2146478937), (-2146478937));
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, true}, booleanArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-3267);
      floatArray0[1] = (float) (-2146478937);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (short) (-3267);
      floatArray0[4] = (float) (-1536);
      floatArray0[5] = (float) (-2146478937);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-3267.0F), (-2.14647898E9F), 1.0F, (-3267.0F), (-1536.0F), (-2.14647898E9F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3267.0F), (-2.14647898E9F), 1.0F, (-3267.0F), (-1536.0F), (-2.14647898E9F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2085;
      intArray0[1] = 26;
      intArray0[2] = (-1);
      intArray0[3] = 26;
      intArray0[5] = 907;
      intArray0[7] = 0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, (-416), 1462);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      
      float[] floatArray0 = new float[0];
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ArrayUtils.shift(byteArray0, (int) (byte)100, (-53), (-53));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)100);
      assertEquals((short)100, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short short1 = (short)0;
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short)0);
      assertEquals((short)0, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte)100);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)100, (short)0, (short)0}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray1);
      assertFalse(boolean1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)100, (short)0, (short)0}, shortArray1);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      assertArrayEquals(new byte[] {(byte)100}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(short1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((byte)100);
      assertEquals(100.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 0.0, 100.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (int) (short)0, (-1536));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (-1L);
      longArray0[2] = (-3252L);
      ArrayUtils.reverse(longArray0, 970, 970);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L), (-3252L)}, longArray0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-1L));
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-1L), (-3252L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), (-3252L), (-1L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-77);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)116);
      assertEquals(1, int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)116, (byte) (-77)}, byteArray0);
      
      Boolean[] booleanArray2 = new Boolean[8];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[2] = (Boolean) true;
      booleanArray2[3] = (Boolean) false;
      booleanArray2[4] = (Boolean) false;
      booleanArray2[6] = (Boolean) true;
      booleanArray2[7] = (Boolean) false;
      Boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertEquals(8, booleanArray3.length);
      assertEquals(8, booleanArray2.length);
      assertNotNull(booleanArray3);
      assertSame(booleanArray3, booleanArray2);
      assertSame(booleanArray2, booleanArray3);
      
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      int int1 = ArrayUtils.indexOf((Object[]) booleanArray2, (Object) short0);
      assertEquals((-1), int1);
      assertEquals(8, booleanArray2.length);
      assertFalse(int1 == int0);
      assertSame(booleanArray2, booleanArray3);
      
      String string0 = ArrayUtils.toString((Object) booleanArray2[6], "");
      assertEquals("true", string0);
      assertEquals(8, booleanArray2.length);
      assertNotNull(string0);
      assertSame(booleanArray2, booleanArray3);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray1, (java.util.Random) mockRandom0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-77);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte) (-77);
      longArray0[4] = (long) (byte) (-77);
      longArray0[5] = (long) (byte) (-77);
      longArray0[6] = (long) 1;
      longArray0[7] = (long) (byte)116;
      longArray0[8] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.add(longArray0, (-557L));
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-77L), (-1L), 0L, (-77L), (-77L), (-77L), 1L, 116L, 0L, (-557L)}, longArray1);
      assertArrayEquals(new long[] {(-77L), (-1L), 0L, (-77L), (-77L), (-77L), 1L, 116L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)14;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-3), (byte)96, (byte)65, (byte) (-67), (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-3), (byte)96, (byte)65, (byte) (-67), (byte)14}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)14, (byte) (-67), (byte)65, (byte)96, (byte) (-3), (byte) (-100)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-67));
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-67.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)65;
      doubleArray0[1] = (double) (byte)65;
      doubleArray0[2] = (double) (byte)65;
      doubleArray0[3] = (double) (byte) (-100);
      doubleArray0[4] = 4578.452211;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 65.0, 65.0, (-100.0), 4578.452211}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-67));
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 65.0, 65.0, (-100.0), 4578.452211}, doubleArray0, 0.01);
      
      ArrayUtils.swap(charArray0, (int) (byte)65, (int) (byte)65);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'x', 'V'}, charArray0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'x';
      characterArray0[1] = (Character) 'x';
      characterArray0[2] = (Character) 'x';
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) null);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get((Object[]) characterArray0, (int)  (-100));
      assertEquals(3, characterArray0.length);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertNull(object0);
      assertNotSame(characterArray0, characterArray1);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) (byte)14;
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) characterArray0[1];
      objectArray0[4] = (Object) 4578.452211;
      objectArray0[5] = (Object) (-100.0);
      ArrayUtils.shift(objectArray0, (int) characterArray0[0], (int) characterArray0[0], (-158));
      assertEquals(3, characterArray0.length);
      assertEquals(6, objectArray0.length);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertNotSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 76.0;
      doubleArray0[1] = 112.0;
      doubleArray0[3] = 258.9125308629482;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      doubleArray0[4] = 0.0;
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)93);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Short short0 = new Short((byte)93);
      assertEquals((short)93, (short)short0);
      assertNotNull(short0);
      
      Long long0 = new Long((-542L));
      assertEquals((-542L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)93, 101);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) longArray0);
      assertFalse(boolean1);
      assertEquals(1, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift((Object[]) null, (-1), 101, (-2434));
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1.0);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-1770.4996F));
      assertEquals((-1770.4996F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(0.0F);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(1.0F);
      assertEquals(1.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[5]);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1.0F, (-1770.4996F), 0.0F, 1.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'a';
      charArray0[2] = '|';
      charArray0[3] = '>';
      charArray0[4] = '^';
      charArray0[5] = '';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'a', (-1141));
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'H', 'a', '|', '>', '^', ''}, charArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.shift(charArray0, (-396), (-1141), (-1141));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'H', 'a', '|', '>', '^', ''}, charArray0);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = '`';
      charArray0[2] = 'h';
      charArray0[4] = 'h';
      charArray0[5] = '\u0014';
      char[] charArray1 = Character.toChars((int) 'h');
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'h'}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray1, '\u0014', Integer.MIN_VALUE);
      assertEquals((-1), int0);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'h'}, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1073741824);
      assertEquals(0, objectArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1073741824;
      longArray0[1] = (long) 1073741824;
      longArray0[2] = (long) 1073741824;
      longArray0[3] = (long) 1073741824;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1073741824L, 1073741824L, 1073741824L, 1073741824L}, longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 120;
      intArray0[1] = 1073741824;
      intArray0[2] = 1073741824;
      intArray0[3] = 1073741824;
      intArray0[4] = 1073741824;
      intArray0[5] = 1073741824;
      intArray0[6] = 1073741824;
      intArray0[7] = 11;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {120, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 11}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean("");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean(true);
      assertTrue(boolean5);
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean(true);
      assertTrue(boolean6);
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean[] booleanArray1 = ArrayUtils.toArray(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) 1073741824);
      assertNotNull(mutableInt0);
      assertEquals(1073741824L, mutableInt0.longValue());
      assertEquals(1073741824, mutableInt0.intValue());
      assertEquals(1.07374182E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1073741824, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(1073741824, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("1073741824", mutableInt0.toString());
      assertEquals(1.073741824E9, mutableInt0.doubleValue(), 0.01);
      
      ArrayUtils.hashCode((Object) mutableInt0);
      assertEquals(1073741824L, mutableInt0.longValue());
      assertEquals(1073741824, mutableInt0.intValue());
      assertEquals(1.07374182E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1073741824, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(1073741824, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("1073741824", mutableInt0.toString());
      assertEquals(1.073741824E9, mutableInt0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-2L);
      longArray0[2] = (-82L);
      longArray0[3] = 1879L;
      int int0 = ArrayUtils.indexOf(longArray0, (-2L));
      assertEquals(1, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, (-2L), (-82L), 1879L, 0L, 0L}, longArray0);
      
      ArrayUtils.reverse((boolean[]) null);
      Character character0 = Character.valueOf('%');
      assertEquals('%', (char)character0);
      assertNotNull(character0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[2] = (double) '%';
      doubleArray0[4] = (double) 1879L;
      doubleArray0[5] = (double) '%';
      doubleArray0[6] = (double) '%';
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) (-82L);
      longArray1[1] = (Long) (-82L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(2, longArray2.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-82L), (-82L)}, longArray2);
      assertNotSame(longArray2, longArray0);
      
      Byte byte0 = Byte.valueOf((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.hashCode((Object) byte0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-73));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1511);
      ArrayUtils.reverse(intArray0, (int) (short) (-1511), (-2819));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1511)}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.insert((-73), (Boolean[]) null, (Boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-73));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1511);
      ArrayUtils.reverse(intArray0, (int) (short) (-1511), (-2819));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1511)}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle";
      stringArray0[1] = "java.lang.Byte";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Character[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = ArrayUtils.insert(234, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)357;
      shortArray0[1] = (short)10;
      shortArray0[2] = (short)59;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-2464);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)7;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)7, (short)9);
      assertEquals(8, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)357, (short)10, (short)59, (short) (-1), (short) (-2464), (short)2, (short)7, (short)9}, shortArray1);
      assertArrayEquals(new short[] {(short)357, (short)10, (short)59, (short) (-1), (short) (-2464), (short)2, (short)7}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-670.3156F);
      floatArray0[5] = (-688.87604F);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 0.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-73));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '^', (-1141));
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2346));
      assertEquals((-2346), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2146970509);
      assertEquals(2146970509, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertEquals(2146970509, (int)integer3);
      assertEquals(4, integerArray0.length);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean0);
      assertEquals(4, integerArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean1 = Boolean.valueOf((String) null);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean("Ph7<8-6sX--wA");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean1);
      assertFalse(boolean4);
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf((String) null);
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean4));
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = new Boolean(false);
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean4));
      assertNotNull(boolean7);
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = Boolean.valueOf(false);
      assertFalse(boolean8);
      assertFalse(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean7));
      assertNotNull(boolean8);
      
      booleanArray0[7] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 491L;
      longArray0[1] = 598L;
      longArray0[2] = (-2143L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2014), (-2014));
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {491L, 598L, (-2143L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-2014));
      assertEquals((-2014), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)67);
      assertEquals((byte)67, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)67, (byte)0}, byteArray1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {491L, 598L, (-2143L)}, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2225;
      shortArray0[1] = (short) (-277);
      shortArray0[2] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-277), (short)0, (short)2225}, shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = 'F';
      charArray0[2] = 'e';
      int int0 = ArrayUtils.indexOf(charArray0, 'X', 1);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'B', 'F', 'e'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(8, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, false, true}, booleanArray0));
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{0, 2, 3, 4, 7}", bitSet0.toString());
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (int) (short)2225, 2038);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)2225;
      longArray0[1] = (long) 'X';
      longArray0[2] = (long) (short)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2225L, 88L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1073741824);
      assertEquals(0, objectArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1073741824;
      longArray0[1] = (long) 1073741824;
      longArray0[2] = (long) 1073741824;
      longArray0[3] = (long) 1073741824;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1073741824L, 1073741824L, 1073741824L, 1073741824L}, longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 120;
      intArray0[1] = 1073741824;
      intArray0[2] = 1073741824;
      intArray0[3] = 1073741824;
      intArray0[5] = 1073741824;
      intArray0[6] = 1073741824;
      intArray0[7] = 11;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {120, 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 11}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean("");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean(true);
      assertTrue(boolean5);
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean(true);
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = new boolean[6];
      booleanArray2[0] = (boolean) boolean3;
      booleanArray2[1] = (boolean) boolean6;
      booleanArray2[2] = (boolean) boolean1;
      booleanArray2[3] = (boolean) boolean1;
      booleanArray2[4] = (boolean) boolean1;
      booleanArray2[5] = (boolean) boolean6;
      ArrayUtils.shift(booleanArray2, (-1073741824));
      assertEquals(6, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      String string0 = ArrayUtils.toString((Object) short0, "FC'm:K&~lQ");
      assertEquals("0", string0);
      assertNotNull(string0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)0, 1.5);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (short)0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = 'n';
      charArray0[2] = 'c';
      charArray0[3] = 'S';
      charArray0[4] = '!';
      charArray0[5] = 'c';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 659, 'c');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 659, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, (-2458), '@');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2458, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      float[] floatArray0 = new float[20];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(20, floatArray0.length);
      assertEquals(20, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[0];
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = '`';
      charArray0[2] = 'h';
      charArray0[4] = 'h';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)6);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)99, (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte)99}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift((boolean[]) null, 3544);
      ArrayUtils.swap((float[]) null, (-486), (int) (byte)99);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-486), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -486, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 1652.27F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, Float.NaN);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 1652.27F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1652.27F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 1652.27F;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean1);
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      ArrayUtils.shift(booleanArray0, (-1), (-1), 55);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-670.3156F));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'o';
      doubleArray0[3] = (double) 'o';
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {111.0, 0.0, 0.0, 111.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)116;
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte)116;
      doubleArray0[3] = (double) (byte)116;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {116.0, (-1.0), 116.0, 116.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 2146970509);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {116.0, (-1.0), 116.0, 116.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(4, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Cbz";
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3267);
      shortArray0[1] = (short)70;
      shortArray0[2] = (short)1040;
      shortArray0[3] = (short) (-1);
      ArrayUtils.shift(shortArray0, Integer.MAX_VALUE);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)70, (short)1040, (short) (-1), (short) (-3267)}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = 3404.393357;
      doubleArray0[2] = (double) (short) (-3267);
      doubleArray0[3] = (double) (short) (-3267);
      doubleArray0[4] = (double) (short)1040;
      doubleArray0[5] = (double) (short) (-3267);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3404.393357, (-3267.0), (-3267.0), 1040.0, (-3267.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'B';
      charArray0[2] = 'v';
      ArrayUtils.shift(charArray0, (-12), (-1083), (int) (short)70);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'B', 'v'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[1] = float0;
      Float float1 = new Float(1.0);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-1770.4996F));
      assertEquals((-1770.4996F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[3] = float2;
      Float float3 = new Float(0.0F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      floatArray0[4] = float3;
      Float float4 = new Float(1.0F);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotNull(float4);
      
      floatArray0[5] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[5]);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1.0F, (-1770.4996F), 0.0F, 1.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'a';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, 801.6F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1.0F, (-1770.4996F), 0.0F, 1.0F}, floatArray1, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.swap(charArray0, (-4624), 2405, 1760);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'H', 'a', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)76;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)761;
      shortArray0[4] = (short)50;
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 285);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)76, (short)0, (short)0, (short)761, (short)50, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)76, (short)0, (short)0, (short)761, (short)50, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'm';
      charArray0[3] = 'w';
      charArray0[4] = 'v';
      charArray0[5] = 'v';
      charArray0[6] = 'm';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1011), 1492);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'w', 'w', 'm', 'w', 'v', 'v', 'm'}, charArray0);
      assertArrayEquals(new char[] {'w', 'w', 'm', 'w', 'v', 'v', 'm'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      ArrayUtils.swap((char[]) null, 394, (-2975), 394);
      int[] intArray0 = new int[6];
      intArray0[0] = 394;
      intArray0[1] = 1315;
      intArray0[2] = 394;
      intArray0[3] = (-2975);
      intArray0[4] = 394;
      intArray0[3] = (-2975);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {394, 1315, 394, (-2975), 394, 0}, intArray0);
      
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, (-2975), 394, 1315);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      ArrayUtils.swap((byte[]) null, (-2071), 375);
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 394, 394);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2975);
      doubleArray0[1] = 297.8691259263;
      doubleArray0[2] = 2128.2;
      doubleArray0[3] = (double) 394;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 1005.80916243;
      doubleArray0[6] = (double) (-2071);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-2975.0), 297.8691259263, 2128.2, 394.0, Double.NaN, 1005.80916243, (-2071.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)1;
      byteArray0[5] = (byte)63;
      byteArray0[7] = (byte) (-38);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-66), (byte) (-66), (byte)102, (byte)101, (byte)63, (byte)0, (byte) (-38)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-66), (byte) (-66), (byte)102, (byte)101, (byte)63, (byte)0, (byte) (-38)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-38);
      doubleArray0[1] = (double) (byte)0;
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)63);
      assertNull(byteArray2);
      
      ArrayUtils.shift(doubleArray0, (int) (byte) (-66), 1, 18);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-38.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) (byte)1, (int) (byte)101);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 665;
      intArray0[1] = 665;
      boolean boolean0 = ArrayUtils.contains(intArray0, 665);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {665, 665}, intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 665;
      longArray0[1] = (long) 665;
      longArray0[2] = (long) 665;
      longArray0[3] = (long) 0;
      longArray0[4] = 1310L;
      longArray0[5] = 1310L;
      ArrayUtils.shift(longArray0, 665, 53, 665);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {665L, 665L, 665L, 0L, 1310L, 1310L}, longArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)9364;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-3084);
      longArray0[1] = (long) (short)1;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-3223));
      assertEquals(5, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3223), (short)9364, (short) (-1), (short) (-3084), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)9364, (short) (-1), (short) (-3084), (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 851.3628172468533;
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-854.44719217671);
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[8];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean1;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean1;
      booleanArray0[6] = boolean1;
      booleanArray0[7] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.toArray(booleanArray0);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      
      ArrayUtils.swap((Object[]) booleanArray0, 1, (-51), 1);
      assertEquals(8, booleanArray0.length);
      assertSame(booleanArray0, booleanArray1);
      
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean2);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {851.3628172468533, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-670.3156F));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'o';
      doubleArray0[2] = (double) 'o';
      doubleArray0[3] = (double) 'o';
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {111.0, 0.0, 111.0, 111.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1073741824);
      assertEquals(0, objectArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1073741824;
      longArray0[3] = (long) 1073741824;
      longArray0[2] = (long) 1073741824;
      longArray0[3] = (long) 1073741824;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1073741824L, 0L, 1073741824L, 1073741824L}, longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 120;
      intArray0[1] = 1073741824;
      intArray0[2] = 1073741824;
      intArray0[3] = 1073741824;
      intArray0[6] = 1073741824;
      intArray0[7] = 11;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {120, 1073741824, 1073741824, 1073741824, 0, 0, 1073741824, 11}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[2] = boolean1;
      booleanArray0[3] = booleanArray0[0];
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[4] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean1);
      assertTrue(boolean3);
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[5] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.toArray(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap((Object[]) booleanArray1, 120, 1072, 11);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 51;
      long[] longArray0 = new long[14];
      longArray0[3] = (long) 51;
      longArray0[4] = (long) 51;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-1104));
      assertEquals((-1), int0);
      assertEquals(14, longArray0.length);
      
      byte[] byteArray0 = new byte[10];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)51);
      assertEquals((-1), int1);
      assertEquals(10, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-128));
      assertEquals(10, byteArray0.length);
      assertEquals(11, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (double) 51;
      doubleArray0[3] = (double) (byte) (-128);
      doubleArray0[4] = (double) (byte) (-128);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-128.0));
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 100.0, 51.0, (-128.0), (-128.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isEquals(double0, double0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean2);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 4165;
      intArray0[1] = 97;
      intArray0[2] = (-1333);
      double[] doubleArray0 = new double[0];
      boolean boolean3 = ArrayUtils.contains(doubleArray0, 0.0);
      assertFalse(boolean3);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)3361;
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Cbz";
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3275);
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (short) (-3275), 75);
      assertEquals((-1), int0);
      
      Long long0 = new Long(1176L);
      assertEquals(1176L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((short) (-3275));
      assertEquals((-3275L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[8];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'u';
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 'u';
      doubleArray0[5] = (double) 'u';
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-1));
      assertEquals((-1), int1);
      assertEquals(8, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {117.0, 0.0, 0.0, (-1.0), 117.0, 117.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 124.0;
      doubleArray0[2] = 451.379;
      doubleArray0[3] = 1237.1;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 92.0;
      doubleArray0[6] = (-347.4570215);
      doubleArray0[7] = 1.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 942, 942);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 124.0, 451.379, 1237.1, (-1.0), 92.0, (-347.4570215), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-407.268879));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2137.417F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-109);
      shortArray0[1] = (short) (byte) (-109);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte) (-109);
      shortArray0[5] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-109), (short) (-109), (short)0, (short)0, (short) (-109), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-109), (short) (-109), (short)0, (short)0, (short) (-109), (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1262));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1262)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-109);
      ArrayUtils.reverse(byteArray0, (int) (byte) (-109), (int) (byte)82);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-109), (byte)0, (byte)0, (byte)30, (byte)40, (byte)0, (byte)2, (byte)87, (byte)82}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)2);
      assertEquals(10, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-109), (byte)0, (byte)0, (byte)30, (byte)40, (byte)0, (byte)2, (byte)87, (byte)82}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-109), (byte)0, (byte)0, (byte)30, (byte)40, (byte)0, (byte)87, (byte)82}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte) (-109));
      assertEquals(3, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-109), (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray0, (byte)123);
      assertEquals(10, byteArray2.length);
      assertEquals(10, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-109), (byte)0, (byte)0, (byte)30, (byte)40, (byte)0, (byte)2, (byte)87, (byte)82}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-109), (byte)0, (byte)0, (byte)30, (byte)40, (byte)0, (byte)2, (byte)87, (byte)82}, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1262);
      doubleArray0[1] = 52.0;
      doubleArray0[2] = 3718.781;
      doubleArray0[3] = (double) (byte) (-109);
      doubleArray0[4] = (double) (byte)40;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1262.0), 52.0, 3718.781, (-109.0), 40.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1262.0), 52.0, 3718.781, (-109.0), 40.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1262);
      doubleArray0[1] = 52.0;
      doubleArray0[2] = 3718.781;
      doubleArray0[3] = (double) (byte) (-109);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1262.0), 52.0, 3718.781, (-109.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1262.0), 52.0, 3718.781, (-109.0), 0.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      short[] shortArray0 = new short[1];
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[4] = (-73);
      intArray0[5] = (-73);
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, (-73), (-73), 0}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 421.057121261556;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2803.5469402453023, (int) (short)0);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {421.057121261556}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      char[] charArray1 = ArrayUtils.add(charArray0, 'c');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)18;
      shortArray0[0] = (short) (byte)122;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)122);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)18, (byte)0, (byte)0}, byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte)18);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {18.0, 421.057121261556}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {421.057121261556}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Index: ";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, stringArray0[4]);
      assertEquals(5, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      float[] floatArray0 = new float[17];
      floatArray0[0] = (-840.7F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-3239.5425F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F));
      assertEquals(17, floatArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      ArrayUtils.swap(charArray0, (-1311), (int) 'A', 1760);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'A'}, charArray0);
      
      ArrayUtils.swap((Object[]) stringArray1, 6, 1760);
      assertEquals(5, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      ArrayUtils.reverse((byte[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      charArray0[7] = 'x';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '<');
      assertEquals(8, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'}, charArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-1.0F));
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      Object object0 = ArrayUtils.get((Object[]) characterArray0, 321);
      assertEquals(0, characterArray0.length);
      assertNull(object0);
      
      Integer integer0 = new Integer((short)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 'x';
      objectArray0[1] = (Object) 'x';
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) 'x';
      objectArray0[4] = (Object) 'x';
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) bitSet0);
      assertEquals((-1), int0);
      assertEquals(5, objectArray0.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'}, charArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) characterArray0, objectArray0[4]);
      assertEquals(5, objectArray0.length);
      assertEquals(0, characterArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) null, (-2526));
      assertEquals(0, characterArray0.length);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertNotNull(bitSet2);
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(64, bitSet2.size());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.length());
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)0;
      ArrayUtils.reverse((byte[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 'x';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      charArray0[5] = 'V';
      charArray0[6] = 'V';
      charArray0[7] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'f');
      assertEquals(8, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'V', 'x', 'V', 'V', 'V', 'V', 'V', 'V'}, charArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-1.0F));
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap(charArray0, (int) (short)0, (int) (short)0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'V', 'x', 'V', 'V', 'V', 'V', 'V', 'V'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)14;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)0, (byte)96, (byte)65, (byte) (-67), (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)0, (byte)96, (byte)65, (byte) (-67), (byte)14}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)14, (byte) (-67), (byte)65, (byte)96, (byte)0, (byte) (-100)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)65;
      doubleArray0[1] = (double) (byte)65;
      doubleArray0[2] = (double) (byte) (-67);
      doubleArray0[3] = (double) (byte) (-100);
      doubleArray0[4] = 4578.452211;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 65.0, (-67.0), (-100.0), 4578.452211}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-67));
      assertEquals(2, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 65.0, (-67.0), (-100.0), 4578.452211}, doubleArray0, 0.01);
      
      Character[] characterArray0 = new Character[3];
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) null);
      assertEquals(3, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 32, (-1709));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = 'K';
      Character character0 = Character.valueOf('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      Character character1 = Character.valueOf('K');
      assertEquals('K', (char)character1);
      assertNotNull(character1);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'K');
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K', 'K'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) char0;
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) null, (int) char0);
      assertEquals((-1), int0);
      assertEquals(5, characterArray0.length);
      
      intArray0[1] = (int) 'K';
      intArray0[2] = (int) 'K';
      intArray0[3] = (-2306);
      intArray0[4] = (int) char0;
      intArray0[5] = (int) char0;
      intArray0[6] = (int) 'K';
      intArray0[7] = (int) 'K';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) char0, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 75, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)14;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-3), (byte)96, (byte)65, (byte) (-67), (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-3), (byte)96, (byte)65, (byte) (-67), (byte)14}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)14, (byte) (-67), (byte)65, (byte)96, (byte) (-3), (byte) (-100)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'V');
      assertEquals(2, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'x', 'V'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-67));
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-67.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)65;
      doubleArray0[1] = (double) (byte)65;
      doubleArray0[2] = (double) (byte)65;
      doubleArray0[3] = (double) (byte) (-100);
      doubleArray0[4] = 4578.452211;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 65.0, 65.0, (-100.0), 4578.452211}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-67));
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 65.0, 65.0, (-100.0), 4578.452211}, doubleArray0, 0.01);
      
      ArrayUtils.swap(charArray0, (int) (byte)65, (int) (byte)65);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'x', 'V'}, charArray0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'x';
      characterArray0[1] = (Character) 'x';
      characterArray0[2] = (Character) 'x';
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) null);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (int) '%';
      intArray0[2] = (-5289);
      ArrayUtils.shift(intArray0, 0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 37, (-5289)}, intArray0);
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Random.setNextRandom(230);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-2562), 1743.00939202738);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2562, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isEquals(double0, double0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean2);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 4165;
      intArray0[1] = 97;
      intArray0[2] = (-1358);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-839.5);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1358);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3374.125;
      doubleArray0[5] = (double) 97;
      doubleArray0[6] = (double) 4165;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.5, 9, 39.0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-839.5), 0.0, (-1358.0), 0.0, 3374.125, 97.0, 4165.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 4165;
      intArray1[1] = 9;
      intArray1[2] = 4165;
      intArray1[3] = 97;
      intArray1[4] = 4165;
      intArray1[5] = 9;
      intArray1[6] = (-1358);
      ArrayUtils.shift(intArray1, (-1358));
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {4165, 9, 4165, 97, 4165, 9, (-1358)}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '4';
      intArray0[1] = 98;
      intArray0[2] = 98;
      intArray0[3] = 98;
      intArray0[4] = (int) '4';
      intArray0[5] = 98;
      intArray0[6] = 1116;
      intArray0[7] = (int) '4';
      intArray0[8] = (int) '4';
      ArrayUtils.shift(intArray0, 821);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {52, 52, 52, 98, 98, 98, 52, 98, 1116}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1116;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1116.0}, doubleArray0, 0.01);
      
      Random.setNextRandom(1116);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 98, (double) 821);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-569.8441261978);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 950.04447396;
      doubleArray0[4] = 852.3628172468533;
      doubleArray0[5] = 1628.01963906128;
      doubleArray0[6] = (-854.44719217671);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2146991358);
      intArray0[1] = (-761);
      intArray0[2] = 973;
      intArray0[3] = 7;
      intArray0[4] = (-1569);
      intArray0[5] = 2498;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 97);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2146991358), (-761), 973, 7, (-1569), 2498}, intArray0);
      assertArrayEquals(new int[] {97, (-2146991358), (-761), 973, 7, (-1569), 2498}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) 97);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)76;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)761;
      shortArray0[4] = (short)50;
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 285);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)76, (short)0, (short)0, (short)761, (short)50, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)76, (short)0, (short)0, (short)761, (short)50, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)6;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)6);
      assertEquals(3, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99, (byte)6}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertEquals(0, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (int)integerArray0[1];
      doubleArray0[1] = (double) (int)integerArray0[0];
      doubleArray0[2] = (double) (int)integerArray0[1];
      doubleArray0[3] = (double) (int)integerArray0[1];
      doubleArray0[4] = (double) (-540);
      doubleArray0[5] = (double) (-540);
      doubleArray0[6] = (double) (int)integerArray0[0];
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-540.0), (-540.0), (-540.0), (-540.0), (-540.0), (-540.0), (-540.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-540.0), (-540.0), (-540.0), (-540.0), (-540.0), (-540.0), (-540.0), 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-540.0), (-540.0), (-540.0), (-540.0), (-540.0), (-540.0), (-540.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      MutableInt mutableInt0 = new MutableInt((Number) integerArray0[1]);
      assertEquals(3, integerArray0.length);
      assertNotNull(mutableInt0);
      assertEquals((byte) (-28), mutableInt0.byteValue());
      assertEquals((-540L), mutableInt0.longValue());
      assertEquals((-540), (int)mutableInt0.toInteger());
      assertEquals((-540), (int)mutableInt0.getValue());
      assertEquals((-540.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-540", mutableInt0.toString());
      assertEquals((-540.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-540), mutableInt0.shortValue());
      assertEquals((-540), mutableInt0.intValue());
      
      mutableIntArray0[0] = mutableInt0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-540);
      intArray0[1] = (-540);
      intArray0[2] = (int) integerArray0[1];
      intArray0[3] = (-540);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(mutableIntArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -540, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      AbstractMap.SimpleImmutableEntry<String, Short> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Short>("", short0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<String, Short> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Short>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)1;
      ArrayUtils.reverse(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-3)}, byteArray0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      MutableInt mutableInt0 = new MutableInt(1899);
      assertNotNull(mutableInt0);
      assertEquals(1899.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1899, mutableInt0.shortValue());
      assertEquals(1899, (int)mutableInt0.getValue());
      assertEquals(1899, (int)mutableInt0.toInteger());
      assertEquals((byte)107, mutableInt0.byteValue());
      assertEquals("1899", mutableInt0.toString());
      assertEquals(1899, mutableInt0.intValue());
      assertEquals(1899L, mutableInt0.longValue());
      assertEquals(1899.0, mutableInt0.doubleValue(), 0.01);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals(1899.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1899, mutableInt0.shortValue());
      assertEquals(1899, (int)mutableInt0.getValue());
      assertEquals(1899, (int)mutableInt0.toInteger());
      assertEquals((byte)107, mutableInt0.byteValue());
      assertEquals("1899", mutableInt0.toString());
      assertEquals(1899, mutableInt0.intValue());
      assertEquals(1899L, mutableInt0.longValue());
      assertEquals(1899.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1899L, mutableInt1.longValue());
      assertEquals(1899.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(1899.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(1899, mutableInt1.intValue());
      assertEquals((short)1899, mutableInt1.shortValue());
      assertEquals(1899, (int)mutableInt1.toInteger());
      assertEquals((byte)107, mutableInt1.byteValue());
      assertEquals("1899", mutableInt1.toString());
      assertEquals(1899, (int)mutableInt1.getValue());
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt((int) (byte) (-3));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertNotNull(mutableInt2);
      assertEquals((byte) (-3), mutableInt2.byteValue());
      assertEquals("-3", mutableInt2.toString());
      assertEquals((-3.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((short) (-3), mutableInt2.shortValue());
      assertEquals((-3), mutableInt2.intValue());
      assertEquals((-3.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-3), (int)mutableInt2.toInteger());
      assertEquals((-3), (int)mutableInt2.getValue());
      assertEquals((-3L), mutableInt2.longValue());
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt();
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertNotNull(mutableInt3);
      assertEquals(0, (int)mutableInt3.getValue());
      assertEquals(0, (int)mutableInt3.toInteger());
      assertEquals(0.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt3.byteValue());
      assertEquals(0.0, mutableInt3.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt3.shortValue());
      assertEquals(0L, mutableInt3.longValue());
      assertEquals(0, mutableInt3.intValue());
      assertEquals("0", mutableInt3.toString());
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(2220);
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertNotNull(mutableInt4);
      assertEquals(2220L, mutableInt4.longValue());
      assertEquals(2220, (int)mutableInt4.getValue());
      assertEquals(2220, (int)mutableInt4.toInteger());
      assertEquals("2220", mutableInt4.toString());
      assertEquals((byte) (-84), mutableInt4.byteValue());
      assertEquals(2220.0, mutableInt4.doubleValue(), 0.01);
      assertEquals(2220.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals((short)2220, mutableInt4.shortValue());
      assertEquals(2220, mutableInt4.intValue());
      
      mutableIntArray0[4] = mutableInt4;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(mutableIntArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1866;
      intArray0[2] = (-1361);
      intArray0[3] = 1734;
      intArray0[4] = (-2146871304);
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = (-404);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 1866, (-1361), 1734, (-2146871304), Integer.MAX_VALUE, (-404)}, intArray0);
      assertArrayEquals(new int[] {1, 1866, (-1361), 1734, (-2146871304), Integer.MAX_VALUE, (-404)}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)3570;
      shortArray0[4] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)3570, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short)3570;
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.5);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 3570.0, (-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 3570.0, (-1.0), (-1.0), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.insert((int) (short)0, booleanArray0, booleanArray0);
      assertEquals(10, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, false, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1774);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)3570;
      intArray0[3] = (int) (short) (-1);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1774), 0, 3570, (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1774), 0, 3570, (-1)}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      AbstractMap.SimpleImmutableEntry<String, Short> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Short>("", short0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<String, Short> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Short>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<String, Short>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<String, Short>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 1);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<String, Short>[] abstractMap_SimpleEntryArray1 = ArrayUtils.removeAllOccurrences(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntry0);
      assertEquals(1, abstractMap_SimpleEntryArray0.length);
      assertEquals(0, abstractMap_SimpleEntryArray1.length);
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertNotNull(abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (short) (-1));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      long[] longArray0 = new long[1];
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int[] intArray0 = new int[0];
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 782, (double) 782);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 782, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      Boolean boolean0 = new Boolean("T;gwG^NJd");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf((String) null);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean1;
      booleanArray0[4] = boolean2;
      booleanArray0[5] = boolean2;
      booleanArray0[6] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, false}, booleanArray1));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "T;gwG^NJd";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-3151);
      intArray0[1] = (-2331);
      intArray0[2] = 0;
      intArray0[3] = 102;
      intArray0[4] = (-4641);
      intArray0[5] = 410;
      intArray0[6] = 0;
      intArray0[7] = 755;
      intArray0[8] = 0;
      ArrayUtils.swap(intArray0, 0, 0, (-1883));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-3151), (-2331), 0, 102, (-4641), 410, 0, 755, 0}, intArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf((boolean) boolean2);
      assertTrue(boolean4);
      assertFalse(boolean2.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean(false);
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean("");
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.FALSE;
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean2));
      assertNotNull(boolean7);
      
      booleanArray0[6] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-1));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      ArrayUtils.reverse((Object[]) null, 6, (int) (short) (-1511));
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1511);
      intArray0[1] = (int) (short) (-1511);
      intArray0[2] = (-1);
      intArray0[3] = (int) (short) (-1511);
      ArrayUtils.shift(intArray0, (-1103));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1511), (-1511), (-1511), (-1)}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)35);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '4';
      charArray0[2] = 'w';
      charArray0[3] = '+';
      charArray0[4] = 'w';
      charArray0[5] = 'z';
      charArray0[6] = 'f';
      ArrayUtils.shift(charArray0, (-835));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'w', '+', 'w', 'z', 'f', '\'', '4'}, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = (double) '4';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 52.0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {52.0, 52.0}, doubleArray0, 0.01);
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      ArrayUtils.shift(byteArray0, (-1465));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)110, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'e');
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'w', '+', 'w', 'z', 'f', '\'', '4'}, charArray0);
      assertArrayEquals(new char[] {'w', '+', 'w', 'z', 'f', '\'', '4', 'e'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      int[] intArray0 = new int[15];
      intArray0[0] = 2;
      intArray0[1] = 51;
      intArray0[2] = 15;
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(15, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Double double0 = new Double(51);
      assertEquals(51.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isEquals(short0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = 0;
      intArray0[6] = 0;
      intArray0[5] = 0;
      intArray0[3] = 0;
      ArrayUtils.swap(intArray0, (-6151), (-128));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)116;
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 0;
      ArrayUtils.swap(intArray0, (-1883), 0, 1674);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {116, (-1), 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)116;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)6;
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) (-1), (int) (byte)116);
      assertEquals((-1), int0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)116, (short)0, (short)0, (short)6, (short) (-1), (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-605);
      intArray0[1] = 1131;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-605), 1131, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1511);
      intArray0[2] = 1399;
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      ArrayUtils.swap(charArray0, 101, 120, 570);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'L'}, charArray0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (-1996));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Cbz";
      stringArray0[4] = "&Y|GZx X6";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "&Y|GZx X6");
      assertEquals(5, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = '8';
      charArray0[2] = 'k';
      charArray0[3] = 'L';
      charArray0[4] = '=';
      ArrayUtils.swap(charArray0, 547, 2, 1659);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'l', '8', 'k', 'L', '='}, charArray0);
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2146386818, 2146386818);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)99;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-25));
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)78, (byte)6, (byte) (-26), (byte)0, (byte)65, (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte)78, (byte)6, (byte) (-26), (byte)0, (byte)65, (byte)99}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)3570;
      shortArray0[4] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)3570, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short) (-1);
      Object object0 = ArrayUtils.get(objectArray0, (int)  (-1));
      assertEquals(7, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short) (-1);
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = (Object) (short)3570;
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((float) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-3916.23229255));
      assertEquals((-3916.2322F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(Double.NaN);
      assertEquals(Float.NaN, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) (short) (-1));
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(0.0);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-162.18F));
      assertEquals((-162.18F), (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = new Float(0.0);
      assertEquals(0.0F, (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      Float float7 = new Float(23.06F);
      assertEquals(23.06F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotNull(float7);
      
      Float float8 = ArrayUtils.get(floatArray0, (-63), float7);
      assertEquals(23.06F, (float)float8, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotNull(float8);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) float8, 5359);
      assertEquals(7, floatArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)100;
      doubleArray0[1] = (double) (byte)100;
      doubleArray0[2] = (double) (byte)100;
      doubleArray0[3] = 0.0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1103);
      intArray0[1] = (-1103);
      intArray0[3] = (int) (byte)100;
      ArrayUtils.shift(intArray0, 3369);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {100, (-1103), (-1103), 0}, intArray0);
      
      Byte[] byteArray1 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift((Object[]) null, 3369);
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 1682, (-1375));
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1375);
      longArray0[1] = (-1L);
      longArray0[2] = (long) 1682;
      ArrayUtils.reverse(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1682L, (-1L), (-1375L)}, longArray0);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)6;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      ArrayUtils.swap((char[]) null, 394, (-2975), 394);
      int[] intArray0 = new int[6];
      intArray0[0] = 394;
      intArray0[1] = 1315;
      intArray0[2] = 394;
      intArray0[3] = (-2975);
      intArray0[4] = 394;
      intArray0[5] = (-2975);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {394, 1315, 394, (-2975), 394, (-2975)}, intArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-2975), 394, 1315);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte5);
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte7);
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte8);
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte3));
      assertNotNull(byte8);
      
      byteArray0[7] = byte8;
      Byte byte9 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte9);
      assertFalse(byte9.equals((Object)byte7));
      assertTrue(byte9.equals((Object)byte4));
      assertTrue(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte6));
      assertTrue(byte9.equals((Object)byte0));
      assertTrue(byte9.equals((Object)byte5));
      assertTrue(byte9.equals((Object)byte1));
      assertNotNull(byte9);
      
      byteArray0[8] = byte9;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 2145436305);
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.removeAllOccurences((String[]) null, "org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle");
      assertNull(stringArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-491L);
      longArray0[1] = (-1426L);
      longArray0[2] = 1530L;
      longArray0[3] = (-371L);
      longArray0[4] = (-1214L);
      longArray0[5] = 724L;
      longArray0[6] = (-1417L);
      longArray0[7] = 2147483647L;
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-491L);
      longArray1[1] = (-1214L);
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(6, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-491L), (-1426L), 1530L, (-371L), (-1214L), 724L, (-1417L), 2147483647L}, longArray0);
      assertArrayEquals(new long[] {(-491L), (-1214L)}, longArray1);
      assertArrayEquals(new long[] {(-1426L), 1530L, (-371L), 724L, (-1417L), 2147483647L}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-1);
      Short short0 = new Short((byte) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte)116);
      assertEquals((short)116, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      AbstractMap.SimpleEntry<String, Short> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Short>("", short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      Short short2 = new Short((short)1);
      assertEquals((short)1, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short short3 = new Short((short)2);
      assertEquals((short)2, (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      
      AbstractMap.SimpleEntry<String, Short> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Short>("", short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      Short short4 = new Short((byte) (-1));
      assertEquals((short) (-1), (short)short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short0));
      assertNotNull(short4);
      
      AbstractMap.SimpleEntry<String, Short> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, Short>("e^CE/U+/", short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry2);
      
      AbstractMap.SimpleEntry<String, Short> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<String, Short>("e^CE/U+/", short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short4));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertNotNull(abstractMap_SimpleEntry3);
      
      Short short5 = new Short((short)1472);
      assertEquals((short)1472, (short)short5);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertNotNull(short5);
      
      Short short6 = new Short((byte)116);
      assertEquals((short)116, (short)short6);
      assertTrue(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertNotNull(short6);
      
      AbstractMap.SimpleEntry<String, Short> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<String, Short>("e^CE/U+/", short6);
      assertTrue(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertNotNull(abstractMap_SimpleEntry4);
      
      AbstractMap.SimpleEntry<String, Short> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<String, Short>("", short0);
      assertTrue(short0.equals((Object)short4));
      assertFalse(short0.equals((Object)short1));
      assertFalse(short0.equals((Object)short6));
      assertFalse(short0.equals((Object)short3));
      assertFalse(short0.equals((Object)short2));
      assertFalse(short0.equals((Object)short5));
      assertNotNull(abstractMap_SimpleEntry5);
      
      AbstractMap.SimpleEntry<String, Short> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<String, Short>(abstractMap_SimpleEntry3);
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry4));
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short4));
      assertFalse(short3.equals((Object)short5));
      assertFalse(short3.equals((Object)short6));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertNotNull(abstractMap_SimpleEntry6);
      
      AbstractMap.SimpleEntry<String, Short>[] abstractMap_SimpleEntryArray0 = ArrayUtils.removeAllOccurrences((AbstractMap.SimpleEntry<String, Short>[]) null, abstractMap_SimpleEntry6);
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry4));
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short4));
      assertFalse(short3.equals((Object)short5));
      assertFalse(short3.equals((Object)short6));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry6));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertNull(abstractMap_SimpleEntryArray0);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry3);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry4);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry1);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry2);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry0);
      assertNotSame(abstractMap_SimpleEntry3, abstractMap_SimpleEntry6);
      assertNotSame(abstractMap_SimpleEntry3, abstractMap_SimpleEntry4);
      assertNotSame(abstractMap_SimpleEntry3, abstractMap_SimpleEntry0);
      assertNotSame(abstractMap_SimpleEntry3, abstractMap_SimpleEntry1);
      assertNotSame(abstractMap_SimpleEntry3, abstractMap_SimpleEntry2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte)116;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 116.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2074);
      shortArray0[1] = (short) (-2074);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)65;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)65, 1);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2074), (short) (-2074), (short)0, (short)65}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2137.417F);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (-2137.417F);
      doubleArray0[2] = (double) 1;
      doubleArray0[5] = (double) (short)0;
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1272);
      shortArray0[1] = (short) (byte)59;
      shortArray0[2] = (short)124;
      shortArray0[3] = (short) (-1272);
      shortArray0[4] = (short) (byte)59;
      shortArray0[5] = (short)124;
      shortArray0[6] = (short) (-1272);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)59);
      assertEquals(4, int0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1272), (short)59, (short)124, (short) (-1272), (short)59, (short)124, (short) (-1272)}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)59;
      doubleArray0[1] = (double) (short)124;
      doubleArray0[2] = (double) (short) (-1272);
      doubleArray0[3] = (double) (short)59;
      doubleArray0[4] = (double) 4;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {59.0, 124.0, (-1272.0), 59.0, 4.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2496;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2496, 0);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)2496}, shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      charArray0[1] = 'm';
      charArray0[2] = 'y';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'y');
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'e', 'm', 'y'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-670.3156F);
      floatArray0[5] = (-788.978F);
      floatArray0[6] = 4521.07F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 4521.07F);
      assertEquals(7, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-2137.417F), (-688.87604F), 0.0F, 0.0F, (-670.3156F), (-788.978F), 4521.07F}, floatArray0, 0.01F);
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals("{6}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2074);
      shortArray0[1] = (short)3319;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)65;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)65, 1);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2074), (short)3319, (short)0, (short)65}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-2137.417F);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (-2137.417F);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2137.4169921875), 0.0, (-2137.4169921875), 1.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      Character character1 = new Character('K');
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[4] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'K');
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K', 'K'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(characterArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1957.9013;
      doubleArray0[4] = 1048.9126810477687;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-841.2);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3594, (-1.0));
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.5, 0.0, 1.0, 1957.9013, 1048.9126810477687, 0.0, (-841.2)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = '\"';
      ArrayUtils.swap(charArray0, (-86), (-888), (-1));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'9', '\"'}, charArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 1.5;
      objectArray0[1] = (Object) 1048.9126810477687;
      objectArray0[2] = (Object) 1048.9126810477687;
      objectArray0[3] = (Object) (-841.2);
      objectArray0[4] = (Object) 1048.9126810477687;
      Object object0 = ArrayUtils.get(objectArray0, (-888), objectArray0[2]);
      assertEquals(1048.9126810477687, object0);
      assertEquals(8, objectArray0.length);
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (-86));
      assertEquals(8, objectArray0.length);
      assertNull(object1);
      
      objectArray0[6] = null;
      objectArray0[7] = (Object) 1048.9126810477687;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '1.5', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2146865667;
      intArray0[1] = (-1061);
      intArray0[2] = (-2146424176);
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2146865667, (-1061), (-2146424176)}, intArray0);
      assertArrayEquals(new int[] {2146865667, (-1061), (-2146424176), 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, ' ');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {' '}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '4';
      charArray0[2] = 'w';
      charArray0[3] = '+';
      charArray0[4] = 'w';
      charArray0[5] = 'z';
      charArray0[6] = 'f';
      ArrayUtils.shift(charArray0, (-835));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'w', '+', 'w', 'z', 'f', '\u0000', '4'}, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = (double) '4';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 52.0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {52.0, 52.0}, doubleArray0, 0.01);
      assertEquals("{0, 1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      ArrayUtils.shift(byteArray0, (-1465));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)110, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'w';
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (-1465);
      int[] intArray1 = ArrayUtils.add(intArray0, 1559);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {119, 0, 1, (-1465)}, intArray0);
      assertArrayEquals(new int[] {119, 0, 1, (-1465), 1559}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-73));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-36);
      ArrayUtils.reverse(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, (-36)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      short[] shortArray0 = new short[17];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-1));
      assertEquals(17, shortArray0.length);
      
      ArrayUtils.reverse((Object[]) null, 6, (int) (short)0);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-1511);
      intArray0[2] = (-1);
      intArray0[3] = (int) (short)0;
      ArrayUtils.shift(intArray0, (-1103));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-1511), (-1)}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)35);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Cbz";
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3267);
      shortArray0[1] = (short)70;
      shortArray0[2] = (short)1040;
      shortArray0[3] = (short) (-1);
      ArrayUtils.shift(shortArray0, Integer.MAX_VALUE);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)70, (short)1040, (short) (-1), (short) (-3267)}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = 3404.393357;
      doubleArray0[2] = (double) (short) (-3267);
      doubleArray0[3] = (double) (short) (-3267);
      doubleArray0[4] = (double) (short)1040;
      doubleArray0[5] = (double) (short) (-3267);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3404.393357, (-3267.0), (-3267.0), 1040.0, (-3267.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      ArrayUtils.reverse((byte[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 'x';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      charArray0[5] = 'V';
      charArray0[6] = 'V';
      charArray0[7] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'f');
      assertEquals(8, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'V', 'x', 'V', 'V', 'V', 'V', 'V', 'V'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-1.0F));
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap(charArray0, (int) (short)0, (int) (short)0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'V', 'x', 'V', 'V', 'V', 'V', 'V', 'V'}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray1, 'l', (-2129129085));
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertNotSame(charArray1, charArray0);
      assertNotSame(bitSet1, bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)36);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-57);
      shortArray0[2] = (short) (byte) (-103);
      ArrayUtils.shift(shortArray0, (int) (short)27891);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-57), (short)0, (short) (-103)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('z');
      assertEquals('z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Class<Character[]> class0 = Character[].class;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0, class0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'z';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {122}, intArray0);
      
      ArrayUtils.shift(intArray0, 4901);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {122}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4901;
      doubleArray0[1] = (double) 'z';
      doubleArray0[2] = (double) 122;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) character0, 0.0);
      assertTrue(boolean1);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {4901.0, 122.0, 122.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1060;
      shortArray0[1] = (short)0;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short)0;
      intArray1[1] = (int) (char)character0;
      intArray1[2] = (int) (short)0;
      intArray1[3] = (int) (short)1060;
      intArray1[4] = 4901;
      intArray1[5] = (int) (short)1060;
      intArray1[6] = (int) (short)0;
      boolean boolean2 = ArrayUtils.isSorted(intArray1);
      assertFalse(boolean2);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {0, 122, 0, 1060, 4901, 1060, 0}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift(shortArray0, (-3533), 1060, (int) (short)0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1060, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)26;
      ArrayUtils.reverse(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)14, (byte)1, (byte) (-3)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = new Boolean("{:");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("{:");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '}';
      ArrayUtils.shift(charArray0, (-1333), 110, (-1333));
      assertEquals(15, charArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 36;
      floatArray0[2] = (float) (-2557);
      floatArray0[3] = (float) (-2557);
      floatArray0[4] = (float) (-2557);
      ArrayUtils.swap(floatArray0, 120, (-2557), (-156));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 36.0F, (-2557.0F), (-2557.0F), (-2557.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, 36);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-2557.0F), 0.0F, 36.0F, (-2557.0F), (-2557.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.shift(shortArray0, (-1));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1511)}, shortArray0);
      
      ArrayUtils.reverse((Object[]) null, 6, (int) (short) (-1511));
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1511);
      intArray0[1] = (int) (short) (-1511);
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short) (-1511), (double) 6);
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)20;
      ArrayUtils.shift(byteArray0, (int) (byte)43);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)0, (byte)20, (byte)95, (byte)43, (byte)3, (byte) (-35), (byte) (-1)}, byteArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 'Z');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'Z'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1262));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1262)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte) (-109));
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-109), (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) (byte)0, 60);
      assertEquals(2, int0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-109), (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)0;
      ArrayUtils.shift(byteArray0, (-2209));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (-2303), (int) (byte) (-58));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)18, (byte) (-114), (byte) (-58), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 76.0;
      doubleArray0[1] = 112.0;
      doubleArray0[2] = (-3630.80066424836);
      doubleArray0[3] = 258.9125308629482;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      int[] intArray0 = new int[1];
      intArray0[0] = 2145603252;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2145603252}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)29;
      ArrayUtils.shift(byteArray0, (int) (byte) (-49), 2145603252, (int) (byte) (-110));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)57, (byte) (-49), (byte)0, (byte)29}, byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)57, (byte) (-49), (byte)0, (byte)29}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'K');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.swap(booleanArray0, (-1770), (-706), 2951);
      assertEquals(1, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      Character character0 = new Character('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('?');
      assertEquals('?', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('K');
      assertEquals('K', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'K';
      floatArray0[1] = (float) (-706);
      int int0 = ArrayUtils.indexOf(floatArray0, 75.0F, 4);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {75.0F, (-706.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift((byte[]) null, 85);
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-706);
      floatArray1[1] = (float) 85;
      floatArray1[2] = 1.0F;
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertEquals(3, floatArray2.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-706.0F), 85.0F, 1.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-706.0F), 85.0F, 1.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
  }

  @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = '}';
      ArrayUtils.shift(charArray0, (-1333), 110, (-1333));
      assertEquals(12, charArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 36;
      floatArray0[2] = (float) (-2557);
      floatArray0[3] = (float) (-2557);
      int int0 = ArrayUtils.lastIndexOf(charArray0, 's', 10);
      assertEquals((-1), int0);
      assertEquals(12, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = '^';
      charArray0[2] = 't';
      charArray0[3] = ']';
      charArray0[4] = 'G';
      charArray0[5] = 'j';
      charArray0[6] = '$';
      charArray0[7] = 'x';
      ArrayUtils.shift(charArray0, 2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'$', 'x', ',', '^', 't', ']', 'G', 'j'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ArrayUtils.shift(byteArray0, (int) (byte)100, (-53), (-53));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      Short[] shortArray0 = new Short[3];
      ArrayUtils.swap(byteArray0, (int) (byte) (-121), (int) (byte)100);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = '~';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'}', '~'}, charArray0);
      assertArrayEquals(new char[] {'}', '~'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-121));
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      ArrayUtils.shift(charArray1, (int) (byte)100, (int) (byte)100, (-53));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'}', '~'}, charArray0);
      assertArrayEquals(new char[] {'}', '~'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-670.3156F);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[12];
      charArray0[0] = 'm';
      char[] charArray1 = ArrayUtils.add(charArray0, 'm');
      assertEquals(12, charArray0.length);
      assertEquals(13, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)0;
      ArrayUtils.shift(byteArray0, (-2966), (int) (byte)0, (int) (byte)57);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte) (-70), (byte) (-49), (byte)60, (byte)57, (byte)0}, byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte) (-70), (byte) (-49), (byte)60, (byte)57, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(2147483647L);
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      MockRandom mockRandom1 = new MockRandom(2147483647L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double0 = mockRandom1.nextDouble();
      assertEquals(0.0, double0, 0.01);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true, true, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-1L));
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      Character character0 = Character.valueOf('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('a');
      assertEquals('a', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('|');
      assertEquals('|', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(characterArray0, 2145527418);
      assertFalse(boolean0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1511);
      Object[] objectArray0 = new Object[5];
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertEquals(true, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-1511);
      objectArray0[2] = (Object) (-1511);
      objectArray0[3] = (Object) (-1511);
      objectArray0[4] = (Object) (-1511);
      Object object1 = ArrayUtils.get(objectArray0, 0);
      assertEquals(true, object1);
      assertEquals(5, objectArray0.length);
      assertNotNull(object1);
      
      Integer integer0 = new Integer((-1511));
      assertEquals((-1511), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-670.3156F));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'e';
      charArray1[1] = 'e';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Object object0 = ArrayUtils.get((Object[]) null, 256);
      assertNull(object0);
      
      Boolean boolean1 = Boolean.valueOf((String) null);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) boolean1);
      assertEquals((-1), int0);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      int int0 = 0;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(7, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get(objectArray0, 0, object0);
      assertEquals(7, objectArray0.length);
      assertNull(object1);
      
      objectArray0[1] = null;
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)76;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)761;
      shortArray0[2] = (short)50;
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)50, 285);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)76, (short)0, (short)50, (short)761, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)76;
      doubleArray0[1] = (double) (short)76;
      doubleArray0[2] = 4628.803625496;
      doubleArray0[3] = (double) (short)50;
      doubleArray0[4] = (double) (short)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)761, (-1));
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {76.0, 76.0, 4628.803625496, 50.0, 0.0}, doubleArray0, 0.01);
      
      Long long0 = new Long((-745L));
      assertEquals((-745L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-745L));
      assertEquals((-745L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long1);
      assertEquals(1, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1478.1578F);
      floatArray0[5] = (-2336.8F);
      floatArray0[6] = (-2625.53F);
      floatArray0[7] = 1.8827147F;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 1067;
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertEquals(1, int1);
      assertEquals(3, intArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {(-1), (-1), 1067}, intArray0);
      
      long[] longArray0 = new long[14];
      longArray0[0] = (long) 1067;
      longArray0[1] = (long) (-1);
      double[] doubleArray0 = new double[6];
      floatArray0[1] = 0.0F;
      doubleArray0[1] = (double) 1.8827147F;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1.8827147F;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 1067;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1891.58);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.8827147483825684, 1.0, 1.8827147483825684, (-1.0), 1067.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.8827147483825684, 1.0, 1.8827147483825684, (-1.0), 1067.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1.8827147F, (-2625.53F), (-2336.8F), (-1478.1578F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)3570;
      shortArray0[4] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)3570, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short)3570;
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short)0;
      short[] shortArray2 = new short[8];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)0;
      shortArray2[1] = (short) (-1);
      shortArray2[2] = (short)0;
      shortArray2[3] = (short)3570;
      shortArray2[4] = (short)0;
      shortArray2[5] = (short)3570;
      shortArray2[6] = (short)0;
      shortArray2[7] = (short) (-1);
      short[] shortArray3 = ArrayUtils.removeElements(shortArray2, shortArray2);
      assertEquals(0, shortArray3.length);
      assertEquals(8, shortArray2.length);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {}, shortArray3);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)0, (short)3570, (short)0, (short)3570, (short)0, (short) (-1)}, shortArray2);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {3570.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 3570.0, (-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 95;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-2557);
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)3570;
      intArray0[5] = (int) (short) (-1);
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short)0;
      intArray0[8] = 1105;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2557));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0, (-864), (-864));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-864);
      floatArray0[1] = (float) (-864);
      floatArray0[2] = (float) (-864);
      floatArray0[3] = (float) (-864);
      floatArray0[4] = (float) (-864);
      floatArray0[5] = (float) (-864);
      floatArray0[6] = (float) (-864);
      floatArray0[7] = (float) (-864);
      floatArray0[8] = (float) (-864);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, Float.NaN);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-864.0F), (-864.0F), (-864.0F), (-864.0F), (-864.0F), (-864.0F), (-864.0F), (-864.0F), (-864.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-864.0F), (-864.0F), (-864.0F), (-864.0F), (-864.0F), (-864.0F), (-864.0F), (-864.0F), (-864.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)29;
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)29, (int) (byte)29);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 1144L;
      longArray1[1] = (long) (byte)29;
      longArray1[2] = (long) (byte)29;
      longArray1[3] = 0L;
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertFalse(boolean0);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1144L, 29L, 29L, 0L}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)29;
      shortArray0[1] = (short) (byte)29;
      ArrayUtils.shift(shortArray0, (int) (byte)29);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)29, (short)29}, shortArray0);
      
      ArrayUtils.swap(booleanArray0, 2105, 2147080443, 1073741824);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)29, (int) (byte)29, 0.0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short)0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1443);
      intArray0[1] = 0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (byte)6;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 114, 114);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1443), 0, 0, 0, 6}, intArray0);
  }

  @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Index: ";
      stringArray0[4] = "Index: ";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Index: ");
      assertEquals(5, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3156;
      shortArray0[1] = (short) (-1965);
      ArrayUtils.swap(shortArray0, (-924), (int) (short)3156);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)3156, (short) (-1965)}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (int) (short)3156);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3156, (short) (-1965)}, shortArray0);
      assertArrayEquals(new short[] {(short)3156, (short) (-1965)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-93L));
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 4288;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 768);
      assertEquals((-1), int1);
      assertEquals(1, intArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {4288}, intArray0);
  }

  @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3155.972F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-162.18F);
      floatArray0[4] = (-1478.1578F);
      floatArray0[5] = (-2336.8F);
      floatArray0[6] = (-2625.53F);
      floatArray0[7] = 0.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-2625.53F));
      assertEquals(6, int0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3155.972F), 0.0F, (-162.18F), (-1478.1578F), (-2336.8F), (-2625.53F), 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 1067;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals((-1), int1);
      assertEquals(3, intArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {6, 6, 1067}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1067;
      longArray0[1] = (long) 6;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1067L, 6L}, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 1067;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1891.58);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 6.0, 1067.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 6.0, 1067.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isEquals(double0, double0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean2);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 4165;
      intArray0[1] = 97;
      intArray0[2] = (-1358);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1358));
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {4165, 97, (-1358)}, intArray0);
      assertArrayEquals(new int[] {(-1358), 4165, 97, (-1358)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean3 = ArrayUtils.contains(doubleArray0, 0.0);
      assertFalse(boolean3);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)3361;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)36, (-990));
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)6, (short)3361}, shortArray0);
      
      Class<Character[]> class0 = Character[].class;
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null, class0);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      char[] charArray1 = ArrayUtils.add(charArray0, 'W');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'W'}, charArray0);
      assertArrayEquals(new char[] {'W', 'W'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-99L);
      longArray0[3] = 1879L;
      longArray0[4] = 1144L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-3213L), (-958));
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, (-99L), 0L, 1879L, 1144L, 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray0, (-1), Integer.MAX_VALUE);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, (-99L), 0L, 1879L, 1144L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-99L), 0L, 1879L, 1144L, 0L}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (-3685L));
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(392);
      assertEquals(392, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3001.63F);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-3001.63F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3001.63F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 100.0, (-1.0));
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {5}, intArray0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 97, 97);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {5}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
  }

  @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[2] = (byte)52;
      ArrayUtils.swap(byteArray1, (int) (byte)52, (int) (byte)52, (int) (byte)0);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)52, (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Double double0 = new Double((-1640.5124219194633));
      assertEquals((-1640.5124219194633), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-2048.0));
      assertEquals((-2048.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(3435.48789155259);
      assertEquals(3435.48789155259, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double((byte) (-57));
      assertEquals((-57.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)52);
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1640.5124219194633);
      doubleArray2[1] = (-2048.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray2, (-2048.0), (double) (byte)52);
      assertTrue(boolean0);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1640.5124219194633), (-2048.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 48.98681;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-1356));
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {48.98681, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals("{1, 2}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, '*');
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'*'}, charArray0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'x');
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'*'}, charArray0);
      assertArrayEquals(new char[] {'*'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean1 = ArrayUtils.contains((int[]) null, (-1356));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean2);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '*';
      floatArray0[1] = 1994.8864F;
      floatArray0[2] = (float) '*';
      floatArray0[3] = (float) (-1356);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {42.0F, 1994.8864F, 42.0F, (-1356.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {42.0F, 1994.8864F, 42.0F, (-1356.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      ArrayUtils.swap((char[]) null, 394, (-2975), 394);
      int[] intArray0 = new int[6];
      intArray0[0] = 394;
      intArray0[1] = 1315;
      intArray0[2] = 394;
      intArray0[3] = (-2975);
      intArray0[4] = 394;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {394, 1315, 394, (-2975), 394, 0}, intArray0);
      
      short[] shortArray0 = new short[0];
  }

  @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('z');
      assertEquals('z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Class<Character[]> class0 = Character[].class;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0, class0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'z';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {122}, intArray0);
      
      ArrayUtils.shift(intArray0, 4901);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {122}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4901;
      doubleArray0[1] = (double) 'z';
      doubleArray0[2] = (double) 122;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) character0, 0.0);
      assertTrue(boolean1);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {4901.0, 122.0, 122.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1060;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1931;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (int) (short)0;
      intArray1[2] = (int) (short) (-1);
      intArray1[3] = (int) (short) (-1);
      intArray1[4] = 1357;
      intArray1[5] = (int) (short)0;
      intArray1[6] = (int) (short)1931;
      intArray1[7] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1931, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character character0 = new Character('z');
      assertEquals('z', (char)character0);
      assertNotNull(character0);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      ArrayUtils.shift(intArray0, 4901);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[4] = 4901;
      boolean boolean1 = ArrayUtils.isSorted(intArray1);
      assertFalse(boolean1);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 4901, 0, 0}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)14;
      ArrayUtils.reverse(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)14, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      ArrayUtils.swap((char[]) null, 3413, Integer.MIN_VALUE, 1);
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[0] = (-3001.63F);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(20, floatArray0.length);
      assertEquals(20, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 100.0, (double) (-3001.63F));
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2410.4514F));
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      ArrayUtils.swap(charArray0, (-1), (-1), (-4864));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'A', 'A', '\u0000', 'A', 'A'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1107.06F;
      floatArray0[1] = (-1372.4F);
      floatArray0[2] = (-398.66F);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1107.06F;
      doubleArray0[1] = (double) (-1372.4F);
      doubleArray0[2] = 643.80042115172;
      doubleArray0[3] = (double) (-1372.4F);
      doubleArray0[4] = (double) 1107.06F;
      doubleArray0[5] = (double) 1314;
      doubleArray0[6] = (double) 1107.06F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1024.656439434093);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1107.06005859375, (-1372.4000244140625), 643.80042115172, (-1372.4000244140625), 1107.06005859375, 1314.0, 1107.06005859375}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 643.80042115172, 8, 2448.0);
      assertEquals(6, int1);
      assertEquals(7, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {1107.06005859375, (-1372.4000244140625), 643.80042115172, (-1372.4000244140625), 1107.06005859375, 1314.0, 1107.06005859375}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1372.4000244140625), 643.80042115172, (-1372.4000244140625), 1107.06005859375, 1314.0, 1107.06005859375, 1107.06005859375}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      ArrayUtils.reverse((byte[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 643.80042115172;
      doubleArray0[1] = (double) (-398.66F);
      doubleArray0[2] = (double) (-398.66F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 553.63864186319);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {643.80042115172, (-398.6600036621094), (-398.6600036621094)}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)0, (int) (short)0, 2448.0);
      assertEquals(0, int1);
      assertEquals(3, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {643.80042115172, (-398.6600036621094), (-398.6600036621094)}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom1);
      assertEquals(3, doubleArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new double[] {(-398.6600036621094), (-398.6600036621094), 643.80042115172}, doubleArray0, 0.01);
      assertNotSame(mockRandom1, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-67.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2223.871873749986);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-67.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1891.04006568, (-1), (-91.0));
      assertEquals((-1), int1);
      assertEquals(7, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, (-67.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2483L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      charArray0[3] = 'F';
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'F', 'F', 'F', 'F'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Float float0 = new Float((double) (byte)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-4566.362F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte) (-97), (-3360));
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Boolean boolean0 = new Boolean("java.lang.Byte");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("java.lang.Byte");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[1] = float0;
      Float float1 = new Float(1.0);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-1770.4996F));
      assertEquals((-1770.4996F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[3] = float2;
      Float float3 = new Float(0.0F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      floatArray0[4] = float3;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)122;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)122);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)103, (byte)51, (byte)103, (byte)122}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-1770.4996F));
      assertEquals((-1770.4996F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(0.0F);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(1.0F);
      assertEquals(1.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[5]);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, (-1770.4996F), 0.0F, 1.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'a';
      charArray0[2] = '|';
      charArray0[3] = '>';
      charArray0[4] = '^';
      charArray0[5] = '';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'a', (-1141));
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'H', 'a', '|', '>', '^', ''}, charArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      charArray0[7] = 'x';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '<');
      assertEquals(8, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray1, 'l', (-2129129085));
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {}, charArray1);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(charArray1, charArray0);
      assertNotSame(bitSet1, bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer('x');
      assertEquals(120, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short)0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {120}, intArray0);
  }

  @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1956.0F);
      floatArray0[7] = (-3415.1086F);
      floatArray0[8] = (-1160.1516F);
      MockRandom mockRandom0 = new MockRandom((-2553L));
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1956.0F), (-3415.1086F), (-1160.1516F), 1.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-100);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0, (int) (short)0);
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-100)}, shortArray0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.0F);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(555.24917);
      assertEquals(555.24917, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(2366.967574807653);
      assertEquals(2366.967574807653, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0F);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-3894.078587179386));
      assertEquals((-3894.078587179386), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[1]);
      assertEquals(555.24917, (double)double5, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1631.5634668473));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 555.24917, 2366.967574807653, 0.0, (-3894.078587179386), 555.24917}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      longArray0[1] = (-329L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-329L)}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)53;
      shortArray0[1] = (short) (byte)75;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)53, (short)75}, shortArray0);
      assertArrayEquals(new short[] {(short)53}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "fz2wY(]";
      stringArray0[2] = "u6q0U`L}";
      stringArray0[3] = "\"<size=";
      stringArray0[4] = "Cannot store ";
      stringArray0[5] = "";
      stringArray0[6] = " vs ";
      String[] stringArray1 = ArrayUtils.removeElements(stringArray0, stringArray0);
      assertEquals(0, stringArray1.length);
      assertEquals(7, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)75;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)75}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      longArray0[1] = (-329L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-329L)}, longArray0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)53;
      byteArray0[0] = (byte)53;
      byte byte1 = (byte)75;
      byteArray0[1] = (byte)75;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-19), (int) (byte)53);
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)53, (byte)75}, byteArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-329L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-329L)}, longArray0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)53;
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)75;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-19), (int) (byte)53);
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)53, (byte)75}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 100, (-831));
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 100;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 1, 1030);
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {100.0F}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) bitSet0, 100);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {100.0F}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-77);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals(1, int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-77)}, byteArray0);
      
      Boolean[] booleanArray2 = new Boolean[8];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[3] = (Boolean) false;
      booleanArray2[4] = (Boolean) false;
      booleanArray2[6] = (Boolean) true;
      booleanArray2[7] = (Boolean) false;
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      int int1 = ArrayUtils.indexOf((Object[]) booleanArray2, (Object) short0);
      assertEquals((-1), int1);
      assertEquals(8, booleanArray2.length);
      assertFalse(int1 == int0);
      
      String string0 = ArrayUtils.toString((Object) booleanArray2[6], "");
      assertEquals("true", string0);
      assertEquals(8, booleanArray2.length);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray1, (java.util.Random) mockRandom0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)36;
      shortArray0[2] = (short)36;
      shortArray0[3] = (short) (-17618);
      shortArray0[2] = (short)36;
      shortArray0[5] = (short)36;
      shortArray0[6] = (short)36;
      shortArray0[7] = (short)36;
      shortArray0[8] = (short)36;
      char[] charArray0 = Character.toChars((int) (short)36);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'$'}, charArray0);
      
      ArrayUtils.swap((Object[]) null, (int) (short)36, (int) (short)36, 1831);
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[1] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-2137.417F), 683, (-136.63437));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 1653.1359F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, Float.NaN);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 1653.1359F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1653.1359F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 1653.1359F;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)91, (int) (byte)91);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)31}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(2147483647L);
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double0 = mockRandom1.nextDouble();
      assertEquals(0.0, double0, 0.01);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertEquals(4, booleanArray0.length);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertNotSame(mockRandom0, mockRandom1);
  }

  @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-77);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)116);
      assertEquals(1, int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)116, (byte) (-77)}, byteArray0);
      
      Boolean[] booleanArray2 = new Boolean[8];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[2] = (Boolean) true;
      booleanArray2[3] = (Boolean) false;
      booleanArray2[4] = (Boolean) false;
      booleanArray2[5] = (Boolean) true;
      booleanArray2[6] = (Boolean) true;
      booleanArray2[7] = (Boolean) false;
      Boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertEquals(8, booleanArray3.length);
      assertEquals(8, booleanArray2.length);
      assertNotNull(booleanArray3);
      assertSame(booleanArray3, booleanArray2);
      assertSame(booleanArray2, booleanArray3);
      
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      int int1 = ArrayUtils.indexOf((Object[]) booleanArray2, (Object) short0);
      assertEquals((-1), int1);
      assertEquals(8, booleanArray2.length);
      assertFalse(int1 == int0);
      assertSame(booleanArray2, booleanArray3);
      
      String string0 = ArrayUtils.toString((Object) booleanArray2[6], "");
      assertEquals("true", string0);
      assertEquals(8, booleanArray2.length);
      assertNotNull(string0);
      assertSame(booleanArray2, booleanArray3);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray1, (java.util.Random) mockRandom0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-605);
      intArray0[1] = 1131;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-605), 1131}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-605), 1131}, intArray0);
      
      int int0 = (-2300);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1131;
      doubleArray0[1] = (double) (-2300);
      doubleArray0[2] = (double) (-2300);
      doubleArray0[3] = (double) (-605);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2300), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2300, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2498);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2498), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2498, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-54);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[4] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&Y|GZx X6";
      stringArray0[1] = "&Y|GZx X6";
      stringArray0[2] = "&Y|GZx X6";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "");
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3165;
      intArray0[1] = 52;
      intArray0[2] = 3165;
      intArray0[3] = 3165;
      intArray0[5] = (-1);
      intArray0[5] = 2;
      intArray0[6] = (-364);
      ArrayUtils.swap(intArray0, (-6151), (-128));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {3165, 52, 3165, 3165, 0, 2, (-364), 0}, intArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 455L;
      longArray0[1] = 455L;
      longArray0[2] = (-85L);
      longArray0[3] = 1879L;
      int int0 = ArrayUtils.indexOf(longArray0, 455L);
      assertEquals(0, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {455L, 455L, (-85L), 1879L, 0L, 0L}, longArray0);
      
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test870()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((Object[]) null, (Object) boolean1);
      assertFalse(boolean2);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean2 == boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)9;
      longArray0[1] = (long) (byte)9;
      boolean boolean3 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean3);
      assertEquals(2, longArray0.length);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertArrayEquals(new long[] {9L, 9L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test871()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = (-3685L);
      int int0 = ArrayUtils.indexOf(longArray0, 1530L);
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-3685L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test872()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 2, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test873()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-1L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test874()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Cbz";
      stringArray0[4] = "&Y|GZx X6";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "&Y|GZx X6");
      assertEquals(5, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test875()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 455L;
      longArray0[1] = 0L;
      longArray0[2] = (-85L);
      longArray0[3] = 1850L;
      longArray0[4] = 1135L;
      longArray0[5] = 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 1551, 1245L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1551, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test876()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 455L;
      longArray0[1] = 455L;
      longArray0[2] = (-85L);
      longArray0[3] = 1879L;
      longArray0[4] = 1144L;
      longArray0[5] = 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-958), 1144L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -958, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test877()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 455L;
      long long0 = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-85L);
      longArray0[3] = 1879L;
      longArray0[4] = 1135L;
      longArray0[5] = 0L;
      int int0 = (-958);
      long long1 = 1245L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-958), 1245L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -958, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test878()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 0L);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[20];
      intArray0[0] = 5;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.remove(intArray0, 5);
      assertEquals(20, intArray0.length);
      assertEquals(19, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 5);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (double) 5;
      doubleArray0[1] = (double) (-1);
      int int1 = ArrayUtils.indexOf((int[]) null, 2147056682, 2308);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 5;
      integerArray0[1] = (Integer) 5;
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) 5;
      integerArray0[4] = (Integer) (-1);
      integerArray0[5] = (Integer) (-1);
      integerArray0[6] = (Integer) (-1);
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(7, intArray2.length);
      assertEquals(7, integerArray0.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {5, 5, (-1), 5, (-1), (-1), (-1)}, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test879()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 120;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test880()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)724;
      shortArray0[1] = (short)6;
      ArrayUtils.swap(shortArray0, Integer.MAX_VALUE, (int) (short)6, 3947);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)724, (short)6}, shortArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (short)6);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)724;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) (short)6;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)724);
      assertEquals(0, int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {724L, 2147483647L, 6L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test881()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 194;
      intArray0[1] = 2940;
      intArray0[2] = (-384);
      intArray0[3] = 4355;
      intArray0[4] = 57;
      intArray0[5] = (-124);
      intArray0[6] = 57;
      intArray0[7] = (-1248);
      intArray0[8] = 2333;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-419));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -419, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test882()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 0L);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 5;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test883()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0, (-864), (-864));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-864);
      floatArray0[1] = (float) (-864);
      floatArray0[2] = (float) (-864);
      floatArray0[3] = (float) (-864);
      floatArray0[4] = (float) (-864);
      floatArray0[5] = (float) (-864);
      floatArray0[6] = (float) (-864);
      floatArray0[7] = (float) (-864);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-864));
      assertEquals((-864), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-864);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-864), (-1292));
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-864L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Long long0 = new Long(763L);
      assertEquals(763L, (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray1, (Object) long0, (-864));
      assertEquals((-1), int0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-26416));
      assertEquals((short) (-26416), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short) (-26416), (short)short1);
      assertEquals(2, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1245, 1245);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test884()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[9];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertEquals(9, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-127), 633);
      assertEquals((-1), int0);
      assertEquals(12, byteArray0.length);
      
      Character character0 = Character.valueOf('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('b');
      assertEquals('b', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('i');
      assertEquals('i', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character2;
      char[] charArray0 = Character.toChars((int) (byte)2);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u0002'}, charArray0);
      
      ArrayUtils.swap((Object[]) characterArray0, (int) (byte) (-127), (int) (byte)2, (int) (byte) (-127));
      assertEquals(1, characterArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test885()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3, (-2146609265));
      assertEquals(0, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'p';
      floatArray0[1] = (float) (byte)3;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 105.0F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {112.0F, 3.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test886()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = (-1);
      intArray0[3] = 26;
      intArray0[7] = 0;
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)97);
      assertEquals((-1), int0);
      
      Double[] doubleArray0 = ArrayUtils.subarray((Double[]) null, 1, 4);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test887()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)329;
      shortArray0[2] = (short) (-2054);
      shortArray0[3] = (short)101;
      shortArray0[4] = (short) (-1283);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)1231;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)329, (short) (-2054), (short)101, (short) (-1283), (short)0, (short)1231}, shortArray0);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 1);
      assertNull(floatArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-76);
      byteArray0[8] = (byte) (-50);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (-2126));
      assertEquals(1, int0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)0, (byte) (-1), (byte)100, (byte)126, (byte) (-89), (byte)0, (byte) (-76), (byte) (-50)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test888()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Random.setNextRandom(230);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-2562), 1743.00939202738);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2562, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test889()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)330;
      shortArray0[1] = (short) (-403);
      shortArray0[2] = (short)2015;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-73);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-1352);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-73);
      intArray0[2] = (int) (short) (-73);
      intArray0[3] = (int) (short)330;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 330, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test890()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-403);
      shortArray0[2] = (short)2015;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)330, Integer.MIN_VALUE);
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test891()  throws Throwable  {
      short[] shortArray0 = new short[15];
      shortArray0[7] = (short) (-403);
      shortArray0[7] = (short)2015;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-73);
      shortArray0[6] = (short) (-12);
      shortArray0[7] = (short) (-1352);
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)0);
      assertEquals(15, shortArray0.length);
      assertEquals(14, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (int) (short)0, (int) (short)0, (int) (short)0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test892()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)0;
      ArrayUtils.reverse((byte[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 7);
      assertEquals(7, int0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, false, true}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test893()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-407.268879));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-540);
      intArray0[1] = 38;
      intArray0[2] = (-540);
      intArray0[3] = 651;
      intArray0[4] = (int) integerArray0[0];
      intArray0[5] = (-540);
      ArrayUtils.swap(floatArray0, (-540), 2791);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((short[]) null, (-4644), 4234);
  }

  @Test(timeout = 4000)
  public void test894()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Cbz";
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3267);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-3267);
      floatArray0[1] = (float) (short) (-3267);
      floatArray0[2] = (float) (-1536);
      floatArray0[3] = 451.04865F;
      ArrayUtils.swap(floatArray0, (int) (short) (-3267), (int) (short) (-3267));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-3267.0F), (-3267.0F), (-1536.0F), 451.04865F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0, (int) (short) (-3267));
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false}, booleanArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true, 2146313994);
      assertEquals(7, booleanArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false}, booleanArray0));
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test895()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-82L);
      longArray0[1] = (-1L);
      longArray0[2] = (-3252L);
      ArrayUtils.reverse(longArray0, 970, (-124));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-82L), (-1L), (-3252L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-1L));
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-82L), (-1L), (-3252L)}, longArray0);
      assertArrayEquals(new long[] {(-82L), (-1L), (-3252L), (-1L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test896()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '4';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 52.0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {52.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 52.0;
      Double double0 = new Double((byte)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[1] = double0;
      doubleArray1[2] = (Double) 52.0;
      doubleArray1[3] = (Double) 52.0;
      doubleArray1[4] = (Double) 52.0;
      doubleArray1[5] = (Double) 52.0;
      doubleArray1[6] = (Double) 52.0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray1, (-110));
      assertFalse(boolean0);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test897()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.swap(doubleArray0, 2038, 2038);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Long long0 = new Long((short)3570);
      assertEquals(3570L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((short)3570);
      assertEquals(3570L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1067.0, (-2146499202), (double) (short)0);
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Long long2 = new Long((-3000L));
      assertEquals((-3000L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      Long long3 = new Long((short)0);
      assertEquals(0L, (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long3);
      assertEquals(0L, object0);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(object0.equals((Object)long2));
      assertFalse(object0.equals((Object)long0));
      assertFalse(object0.equals((Object)long1));
      assertNotNull(object0);
      
      try { 
        Long.valueOf("_f`zZ,X!h8(dN@", 199);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 199 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test898()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1653.226738433954;
      doubleArray0[1] = 1.5;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3.0, 584, (double) 584);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1653.226738433954, 1.5}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test899()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = ":";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "Index: ";
      stringArray0[4] = "Index: ";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "Index: ");
      assertEquals(5, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3156;
      ArrayUtils.swap(shortArray0, (-924), (int) (short)3156);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)3156, (short)0}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (int) (short)3156);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3156, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)3156, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-93L));
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test900()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 27, 2146693233);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2146693233;
      longArray0[1] = (long) 27;
      longArray0[2] = (long) 2146693233;
      longArray0[3] = (long) 27;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {27L, 2146693233L, 27L, 2146693233L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test901()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-854.44719217671);
      doubleArray0[3] = (-854.44719217671);
      doubleArray0[4] = (-854.44719217671);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1303.0095991, 38);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-854.44719217671), 0.0, (-854.44719217671), (-854.44719217671), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      doubleArray0[5] = (double) (-1);
      intArray0[1] = 38;
      intArray0[2] = 38;
      intArray0[3] = 38;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)787;
      shortArray0[1] = (short)787;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), (-1));
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)787, (short)787}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 38, (-5289));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1708), (int) (short)76);
      assertEquals((-1), int1);
      assertEquals(2, shortArray0.length);
      assertTrue(int1 == int0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)787, (short)787}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test902()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'K');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.swap(booleanArray0, (-1770), (-706), 2951);
      assertEquals(1, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      Character character0 = new Character('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('?');
      assertEquals('?', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('K');
      assertEquals('K', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-1770), (-706));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2403.33591);
      doubleArray0[1] = (double) 2951;
      doubleArray0[2] = (double) (-706);
      doubleArray0[3] = (double) 'K';
      doubleArray0[4] = (double) 2951;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1107.06005859375, 2951, (double) (-1770));
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-2403.33591), 2951.0, (-706.0), 75.0, 2951.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test903()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)787, 2445);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-5289), 2445);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)787, 2445);
      assertEquals((-1), int0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test904()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)76;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)761;
      shortArray0[4] = (short)50;
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), 285);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)76, (short)0, (short)0, (short)761, (short)50, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)76, (short)0, (short)0, (short)761, (short)50, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1.0F));
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)6;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)6);
      assertEquals(3, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)99}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)99, (byte)6}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test905()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-28);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-8), (byte) (-28)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-8), 0, Integer.MAX_VALUE);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-8), (byte) (-28)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test906()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-670.3156F));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'p';
      charArray1[1] = 'p';
      charArray1[2] = 'p';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertArrayEquals(new char[] {'p', 'p', 'p'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      ArrayUtils.reverse((float[]) null, 0, 108);
  }

  @Test(timeout = 4000)
  public void test907()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 328.258F;
      floatArray0[1] = (-482.2157F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 975.153F;
      ArrayUtils.reverse(floatArray0, 0, 46);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {975.153F, 1.0F, (-482.2157F), 328.258F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {975.153F, 1.0F, (-482.2157F), 328.258F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("Q@dc /uNap,G> ");
      assertNull(integer1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test908()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 328.258F;
      floatArray0[1] = (-482.2157F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 975.153F;
      ArrayUtils.reverse(floatArray0, 0, 46);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {975.153F, 1.0F, (-482.2157F), 328.258F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {975.153F, 1.0F, (-482.2157F), 328.258F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)9, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test909()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3374.256F;
      floatArray0[2] = 835.7F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1.0F));
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 3374.256F, 835.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 3374.256F, 835.7F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test910()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'K';
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (float) 'K';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 75.0F);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {75.0F, Float.NaN, 75.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, 75.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test911()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[2] = "(J!a.{3%* II,a$_";
      stringArray0[3] = "3}#?#A3#";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl";
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(stringArray0, (Comparator<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test912()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[2] = "(J!a.{3%* II,a$_";
      stringArray0[3] = "3}#?#A3#";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl";
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(stringArray0, (Comparator<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test913()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)101;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test914()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isEquals(double0, double0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean2);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Float float0 = new Float((float) 4165);
      assertEquals(4165.0F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test915()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 51;
      intArray0[2] = 15;
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, 51, 15, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Double double0 = new Double(51);
      assertEquals(51.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isEquals(short0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test916()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1262));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1262)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[2];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)0, 60);
      assertEquals(1, int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, (int) (byte)87);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test917()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 101;
      intArray0[2] = (-4);
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 82, (-36), (-4));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-1));
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test918()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-29737);
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-29737)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-29737), (short) (-29737)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test919()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-38);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-36), (byte) (-62), (byte)102, (byte)101, (byte)1, (byte)63, (byte) (-38)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-36), (byte) (-62), (byte)102, (byte)101, (byte)63, (byte) (-38)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-38);
      doubleArray0[1] = (double) (byte)63;
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)63);
      assertNull(byteArray2);
      
      ArrayUtils.shift(doubleArray0, (int) (byte) (-36), 1, 18);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-38.0), 63.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-36);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1023));
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-36)}, intArray1);
      assertArrayEquals(new int[] {(-36)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      ArrayUtils.reverse(intArray1, 122, 0);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-36)}, intArray1);
      assertArrayEquals(new int[] {(-36)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test920()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 76.0;
      doubleArray0[1] = 112.0;
      doubleArray0[3] = 258.9125308629482;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)93);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Short short0 = new Short((byte)93);
      assertEquals((short)93, (short)short0);
      assertNotNull(short0);
      
      Long long0 = new Long((-542L));
      assertEquals((-542L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)93, 101);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) longArray0);
      assertFalse(boolean1);
      assertEquals(1, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (float) (byte)93, 256);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test921()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (-3967L);
      Character character0 = Character.valueOf('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('K');
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('K');
      assertEquals('K', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)109;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)24);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)75, (byte)109}, byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte)109}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test922()  throws Throwable  {
      float[] floatArray0 = new float[13];
      floatArray0[0] = (-2155.4363F);
      floatArray0[1] = (-2155.4363F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, Float.NaN);
      assertEquals(13, floatArray0.length);
      assertEquals(13, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-540);
      doubleArray0[2] = (-3630.80066424836);
      short[] shortArray0 = new short[15];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-110));
      assertEquals(15, shortArray0.length);
      assertEquals(16, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test923()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-3);
      byteArray0[3] = (byte) (-1);
      ArrayUtils.reverse(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-3), (byte)14}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test924()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)50);
      assertNull(byteArray0);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test925()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1262));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1262)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-109);
      ArrayUtils.reverse(byteArray0, (int) (byte) (-109), (int) (byte)82);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-109), (byte)0, (byte)0, (byte)30, (byte)40, (byte)0, (byte)2, (byte)87, (byte)82}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)87);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-109), (byte)0, (byte)0, (byte)30, (byte)40, (byte)0, (byte)2, (byte)87, (byte)82}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-109), (byte)0, (byte)0, (byte)30, (byte)40, (byte)0, (byte)2, (byte)82}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-109);
      shortArray0[1] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte) (-109));
      assertEquals(3, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-109), (short) (-109), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-109), (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray0, (byte)123);
      assertEquals(9, byteArray2.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-109), (byte)0, (byte)0, (byte)30, (byte)40, (byte)0, (byte)2, (byte)87, (byte)82}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-109), (byte)0, (byte)0, (byte)30, (byte)40, (byte)0, (byte)2, (byte)87, (byte)82}, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test926()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[19];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-3360));
      assertEquals((-1), int0);
      assertEquals(19, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1));
      assertEquals(19, booleanArray0.length);
      assertNotNull(bitSet0);
      assertEquals(19, bitSet0.length());
      assertEquals(17, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}", bitSet0.toString());
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-3360);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-572L), (-1));
      assertEquals(3, longArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {(-3360L), (-1L), (-1L)}, longArray0);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test927()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2137.417F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-540));
      assertEquals((-540), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      Integer integer1 = Integer.getInteger("3YOAmq vu");
      assertNull(integer1);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integerArray0[0]);
      assertTrue(boolean0);
      assertEquals(3, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean1);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(7, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true}, booleanArray0));
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test928()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-3360));
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1));
      assertEquals("{1}", bitSet0.toString());
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-3360);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-3360);
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-572L), (-2606));
      assertEquals("{}", bitSet1.toString());
  }

  @Test(timeout = 4000)
  public void test929()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2999;
      shortArray0[1] = (short)100;
      shortArray0[2] = (short)1916;
      MockRandom mockRandom0 = new MockRandom(2L);
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new short[] {(short)100, (short)1916, (short)2999}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test930()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2225;
      shortArray0[1] = (short) (-277);
      shortArray0[2] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-277), (short)0, (short)2225}, shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) (short)0;
      Short short0 = new Short((short)0);
      objectArray0[2] = (Object) short0;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short) (-277);
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = (Object) (short)0;
      objectArray0[7] = (Object) (short)0;
      ArrayUtils.get(objectArray0, 72);
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test931()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-403);
      shortArray0[2] = (short)2015;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-73);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-1352);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-73);
      intArray0[2] = (int) (short) (-73);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -73, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test932()  throws Throwable  {
      short[] shortArray0 = new short[5];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[6] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.insert((int) (short)0, doubleArray0, doubleArray0);
      ArrayUtils.removeElements(doubleArray1, doubleArray1);
      float[] floatArray0 = new float[16];
      floatArray0[0] = (float) (short)0;
      doubleArray0[1] = (double) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      ArrayUtils.removeAll(shortArray0, intArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test933()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2373.002983021476;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 2336.345;
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 4883;
      intArray0[2] = 0;
      intArray0[3] = 4;
      intArray0[4] = 1;
      intArray0[5] = (-415);
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = (-2012);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4883, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test934()  throws Throwable  {
      Integer integer0 = new Integer((short) (-2074));
      ArrayUtils.toPrimitive((Object) integer0);
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1894;
      intArray0[1] = (int) (short) (-2074);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test935()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'V');
      assertEquals("{1}", bitSet0.toString());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)71;
      doubleArray0[3] = (double) (byte) (-100);
      doubleArray0[4] = (double) 'x';
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'x';
      characterArray0[1] = (Character) 'x';
      characterArray0[2] = (Character) 'x';
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) characterArray0[1]);
      assertEquals(2, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test936()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.indexOf(intArray0, 1705, (-1375));
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1375);
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'p');
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test937()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1107.06F;
      ArrayUtils.indexesOf((char[]) null, '<');
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1107.06F;
      doubleArray0[1] = (double) '<';
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 344.8064115034);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test938()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = 1435.0924500149;
      doubleArray0[9] = (-4643.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1435.0924500149, (-4643.0)}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-101));
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test939()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = 'L';
      charArray0[2] = '#';
      charArray0[3] = '*';
      charArray0[4] = '[';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'y');
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test940()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test941()  throws Throwable  {
      short[] shortArray0 = new short[11];
      ArrayUtils.swap(shortArray0, (-2147483617), (-833));
      assertEquals(11, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test942()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1511);
      ArrayUtils.toPrimitive((Double[]) null, (double) (short) (-1511));
      Integer integer0 = new Integer((short) (-1511));
      Integer integer1 = Integer.getInteger("3YOAmq vu");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test943()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)663;
      doubleArray0[1] = (double) (short)663;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-38);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 382);
      assertEquals((-1), int0);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) (-38L));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {663.0, 663.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test944()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ArrayUtils.shift(byteArray0, (int) (byte)0, (-1472), (-1472));
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)105);
      shortArray0[2] = short0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)17);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1472);
      intArray0[1] = 13;
      intArray0[2] = (-1);
      intArray0[3] = 525;
      intArray0[4] = (-1472);
      intArray0[5] = (int) (short)shortArray0[2];
      intArray0[6] = (-1);
      intArray0[7] = (int) (byte)105;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test945()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      ArrayUtils.swap(byteArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      Double double0 = new Double((-273.0));
      assertEquals((-273.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test946()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ArrayUtils.shift(byteArray0, (int) (byte)100, (-53), (-53));
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)100);
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short0;
      Short short2 = new Short((short)0);
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte)100);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      boolean boolean1 = ArrayUtils.isSorted(shortArray1);
      assertArrayEquals(new short[] {(short)100, (short)100, (short)0}, shortArray1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(short1);
      doubleArray0[1] = double0;
      Double double1 = new Double((byte)100);
      doubleArray0[2] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertArrayEquals(new double[] {1.5, 0.0, 100.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test947()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (int) (byte)0, (-1472), (-1472));
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)100);
      shortArray0[2] = short0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)17);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test948()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean1 = new Boolean("{:");
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean1);
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf("");
      booleanArray0[3] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean2);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test949()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (int) (byte)0, (-53), (-53));
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)100);
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      shortArray0[2] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {(short)100, (short)100, (short)100}, shortArray1);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      ArrayUtils.shift(byteArray1, (int) (byte)0, (-11), (-1049));
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test950()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2715L;
      longArray0[1] = 1718L;
      longArray0[2] = 1636L;
      ArrayUtils.shift(longArray0, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[0] = (byte) (-67);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-52);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1636L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 482.52246F);
      assertEquals((-1), int0);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      long[] longArray2 = ArrayUtils.add(longArray1, (-2104L));
      assertArrayEquals(new long[] {2715L, 1718L, 1636L, (-2104L)}, longArray2);
  }

  @Test(timeout = 4000)
  public void test951()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)59;
      floatArray0[1] = (float) (byte)59;
      floatArray0[2] = (float) (byte)59;
      floatArray0[3] = (float) (byte) (-62);
      floatArray0[4] = (float) 266;
      floatArray0[5] = (float) (byte)59;
      floatArray0[6] = (float) (byte) (-36);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-36.0F), (int) (byte)59);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test952()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      ArrayUtils.toPrimitive((Long[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-128);
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = 'u';
      charArray0[2] = '_';
      charArray0[3] = 'G';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'C');
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.reverse(charArray0, (int) (byte) (-128), (-4182));
      assertArrayEquals(new char[] {'G', 'u', '_', 'G'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test953()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      ArrayUtils.toPrimitive(longArray0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-128);
      shortArray0[0] = (short) (byte) (-128);
      shortArray0[2] = (short) (byte) (-128);
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test954()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[2] = (double) (short)3574;
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test955()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2410.4514F));
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      ArrayUtils.swap(charArray0, (-1), (-1), (-4864));
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)15);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, 3);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'A', 'A', '\u0000', 'A', 'A', 'A', 'A', '\u0000', 'A', 'A'}, charArray1);
      assertEquals(10, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test956()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'p';
      floatArray0[0] = (float) (byte)3;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 105.0F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test957()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.addFirst(booleanArray0, false);
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (-605);
  }

  @Test(timeout = 4000)
  public void test958()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.removeAllOccurrences(floatArray0, (-2137.417F));
      Integer[] integerArray0 = new Integer[3];
      integerArray0[1] = integerArray0[0];
  }

  @Test(timeout = 4000)
  public void test959()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      ArrayUtils.toPrimitive(longArray0);
      Character character0 = Character.valueOf('t');
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) character0, (-4184));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = 0.0F;
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      ArrayUtils.swap(charArray0, (-4184), (-1709), 4406);
      assertArrayEquals(new char[] {'t', 't', 't', 't'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test960()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray0);
      assertSame(longArray2, longArray1);
      assertNotNull(longArray2);
      
      Character character0 = Character.valueOf('t');
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) character0, (-4184));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-4184);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-4184);
      floatArray0[5] = (float) 't';
      floatArray0[6] = (float) (-4184);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test961()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '?';
      charArray0[1] = 'J';
      charArray0[2] = 'W';
      charArray0[3] = 'b';
      charArray0[4] = 'G';
      charArray0[5] = 'y';
      charArray0[6] = 'v';
      ArrayUtils.removeAllOccurrences(charArray0, 'b');
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '?';
      intArray0[1] = (int) 'y';
      intArray0[2] = (int) 'J';
      intArray0[3] = (int) 'y';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) "{}", intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test962()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-569.8441261978);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 950.04447396;
      doubleArray0[4] = 852.3628172468533;
      doubleArray0[5] = 1628.01963906128;
      doubleArray0[6] = (-854.44719217671);
      doubleArray0[7] = 1.5;
      doubleArray0[8] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 852.3628172468533, 0, 1.0);
      assertEquals("{4}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test963()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2066;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)593;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (short)2);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test964()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'p';
      doubleArray0[1] = (double) 'p';
      doubleArray0[2] = (-67.0);
      doubleArray0[3] = (double) (-670.3156F);
      doubleArray0[4] = (double) 'p';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3589);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-2528));
      assertArrayEquals(new short[] {(short) (-3589)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test965()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 46);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1));
      assertEquals(2, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.insert((-1), doubleArray0, (double[]) null);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test966()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1632);
      shortArray0[1] = (short)1675;
      shortArray0[2] = (short)38;
      shortArray0[3] = (short)11;
      shortArray0[4] = (short)18688;
      shortArray0[5] = (short) (-500);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-500));
      assertArrayEquals(new short[] {(short) (-1632), (short)1675, (short)38, (short)11, (short)18688, (short) (-500), (short) (-500)}, shortArray1);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)742);
      int int1 = ArrayUtils.lastIndexOf((int[]) null, (int) (short)11);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = ' ';
      charArray0[2] = 'F';
      charArray0[3] = '[';
      charArray0[4] = '{';
      charArray0[5] = 'I';
      charArray0[6] = 'x';
      charArray0[7] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test967()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1222.35215104;
      doubleArray0[2] = 174.09;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 15, 174.09);
      assertEquals((-1), int0);
      
      ArrayUtils.isEmpty(doubleArray0);
      ArrayUtils.isNotEmpty((char[]) null);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 15;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (-926.3574F);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-926.3574F), (-1.0F), 15.0F, (-1.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 15;
      boolean boolean0 = ArrayUtils.contains(intArray0, 2);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2034;
      shortArray0[1] = (short) (-3589);
      shortArray0[2] = (short) (-448);
      shortArray0[3] = (short)414;
      shortArray0[4] = (short)781;
      shortArray0[5] = (short)213;
      shortArray0[6] = (short)3929;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-3589));
      assertArrayEquals(new short[] {(short)2034, (short) (-448), (short)414, (short)781, (short)213, (short)3929}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test968()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2085;
      intArray0[1] = 26;
      intArray0[2] = (-1);
      intArray0[3] = 4785;
      intArray0[4] = 4297;
      intArray0[5] = 907;
      intArray0[6] = 0;
      intArray0[7] = 0;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 4785;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = 451.04865F;
      ArrayUtils.swap(floatArray0, 3082, 26);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1), 0);
      assertEquals("{2}", bitSet0.toString());
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test969()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-349));
      assertNull(intArray0);
      
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)0);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test970()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2137.417F);
      floatArray0[1] = (-688.87604F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-670.3156F);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-670.3156F), 0.0F, 0.0F, (-688.87604F), (-2137.417F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test971()  throws Throwable  {
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test972()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-3034), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }
}
