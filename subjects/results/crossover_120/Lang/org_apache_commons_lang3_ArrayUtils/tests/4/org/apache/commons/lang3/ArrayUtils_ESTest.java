/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:12:01 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Map;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)88;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte)95;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)30, 9);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88, (byte)88, (byte)0, (byte)88, (byte)88, (byte)88, (byte)95}, byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88, (byte)88, (byte)0, (byte)88, (byte)88, (byte)88, (byte)95}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'r';
      charArray0[2] = 'm';
      charArray0[3] = '\\';
      charArray0[4] = 'd';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'T');
      assertNotNull(charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'o', 'r', 'm', '\\', 'd'}, charArray1);
      assertArrayEquals(new char[] {'o', 'r', 'm', '\\', 'd'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = '/';
      charArray0[2] = 't';
      charArray0[3] = ':';
      charArray0[4] = 't';
      charArray0[5] = 't';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 't';
      longArray0[1] = (long) (short) (-1578);
      longArray0[2] = (long) ':';
      longArray0[3] = (long) '/';
      ArrayUtils.swap(longArray0, (-28), (-28), (-767));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {116L, (-1578L), 58L, 47L}, longArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 't';
      objectArray0[1] = (Object) 0.0F;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(2, objectArray0.length);
      assertEquals(0, int0);
      
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) 58L;
      longArray1[1] = (Long) 116L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 0L);
      assertNotNull(longArray2);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      assertArrayEquals(new long[] {58L, 116L}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'c';
      charArray0[1] = '\u0013';
      charArray0[0] = '|';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[0] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)1;
      int[] intArray0 = new int[1];
      byteArray0[4] = (byte)0;
      ArrayUtils.swap(intArray0, 1, 0, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[8];
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-385);
      floatArray0[1] = (float) (-385);
      floatArray0[2] = (float) (-385);
      floatArray0[3] = (float) (-385);
      floatArray0[4] = (float) (-385);
      floatArray0[5] = (float) (-385);
      floatArray0[6] = 1.0F;
      floatArray0[7] = (float) (-385);
      floatArray0[8] = (float) (-385);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-446), 9);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {(-385.0F), (-385.0F), (-385.0F), (-385.0F), (-385.0F), (-385.0F), 1.0F, (-385.0F), (-385.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-385.0F), (-385.0F), (-385.0F), (-385.0F), (-385.0F), (-385.0F), 1.0F, (-385.0F), (-385.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.reverse(intArray0, (-385), (-385));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)729;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-32568), 256);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)729}, shortArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)25;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-20), 979);
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)16, (byte)1, (byte)0, (byte) (-75), (byte)25}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)1, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)16, (byte)1, (byte)0, (byte) (-75), (byte)25}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1731L;
      longArray0[1] = (long) (byte)16;
      longArray0[2] = (long) (byte)1;
      longArray0[3] = (long) (byte) (-44);
      longArray0[4] = (long) (byte)1;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)25, (int) (byte)25);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {1731L, 16L, 1L, (-44L), 1L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      ArrayUtils.shift(longArray0, (int) (byte)1, (int) (byte)16, (int) (byte)25);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {1731L, 16L, 1L, (-44L), 1L, 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-75);
      doubleArray0[1] = (double) (byte)25;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (byte)25;
      doubleArray0[5] = (double) (byte) (-75);
      doubleArray0[6] = (double) (byte)25;
      doubleArray0[7] = (double) (byte)25;
      doubleArray0[8] = (double) (byte)1;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte)25, (-785));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-75.0), 25.0, 1.0, (-1.0), 25.0, (-75.0), 25.0, 25.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) 2;
      floatArray0[5] = (float) (-2469);
      floatArray0[6] = (float) 32;
      floatArray0[7] = (float) 2;
      ArrayUtils.swap(floatArray0, 1536, 0, (-2469));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2.0F, 0.0F, 0.0F, 0.0F, (-2469.0F), 32.0F, 2.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shuffle(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 0.0F, 0.0F, 0.0F, (-2469.0F), 32.0F, 2.0F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Character character0 = new Character('>');
      assertNotNull(character0);
      assertEquals('>', (char)character0);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      Character[] characterArray1 = ArrayUtils.add(characterArray0, 6, character0);
      assertNotNull(characterArray1);
      assertEquals(6, characterArray0.length);
      assertEquals(7, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\u0081';
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 1008, 51);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertFalse(boolean0);
      
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '\u0081';
      charArray1[1] = '\u0081';
      charArray1[2] = '\u0081';
      charArray1[3] = '\u0081';
      charArray1[4] = '\u0081';
      charArray1[5] = '\u0081';
      charArray1[6] = '\u0081';
      charArray1[7] = '\u0081';
      charArray1[8] = '{';
      ArrayUtils.swap(charArray1, (-1), 664, (-1));
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'\u0081', '\u0081', '\u0081', '\u0081', '\u0081', '\u0081', '\u0081', '\u0081', '{'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[0] = (-2469);
      intArray0[3] = 0;
      intArray0[4] = 21;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(11, intArray0.length);
      assertEquals(11, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 21;
      floatArray0[3] = (float) (-2469);
      floatArray0[4] = (float) 21;
      floatArray0[5] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 2.0F, 21.0F, (-2469.0F), 21.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 9.35056628111297;
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)88, 21);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[9];
      floatArray0[4] = (float) 0;
      longArray0[2] = (long) (byte)88;
      longArray0[4] = (long) (-2469);
      longArray0[5] = (long) (-2469);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) 2;
      longArray0[8] = (long) 21;
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 88L, 0L, (-2469L), (-2469L), (-1L), 2L, 21L}, longArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray2 = new float[9];
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) (-2469);
      floatArray2[1] = (float) (-1);
      floatArray2[2] = (float) 2;
      floatArray2[3] = (float) 2;
      floatArray2[4] = (float) 0;
      floatArray2[5] = (float) (-1);
      floatArray2[6] = (float) 2;
      floatArray2[7] = (float) 2L;
      floatArray2[8] = (float) 2L;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray2, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray2.length);
      assertArrayEquals(new float[] {0.0F, 2.0F, 21.0F, (-2469.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2469.0F), (-1.0F), 2.0F, 2.0F, 0.0F, (-1.0F), 2.0F, 2.0F, 2.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2443);
      Character character0 = new Character('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = '*';
      ArrayUtils.shift(charArray0, (-2443));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'*', 'i'}, charArray0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '*';
      charArray1[1] = '*';
      char[] charArray2 = ArrayUtils.subarray(charArray1, (-2443), (-2443));
      assertNotNull(charArray2);
      assertEquals(2, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'*', '*'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      Boolean boolean3 = Boolean.valueOf("A blank string is not a valid number");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean("");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      
      Boolean boolean5 = new Boolean("A blank string is not a valid number");
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5);
      
      boolean boolean6 = ArrayUtils.isNotEmpty((Boolean[]) null);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6);
      
      boolean boolean7 = ArrayUtils.contains(charArray2, 'w');
      assertEquals(2, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'*', '*'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean6);
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(boolean7);
      
      boolean boolean8 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean8 == boolean7);
      assertFalse(boolean8 == boolean6);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-2443);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {(-2443)}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1012L);
      longArray0[1] = (long) '*';
      longArray0[2] = 0L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1012L), 42L, 0L}, longArray1);
      assertArrayEquals(new long[] {(-1012L), 42L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[5];
      Character character0 = new Character('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = '*';
      ArrayUtils.shift(charArray0, 0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'i', '*'}, charArray0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '*';
      charArray1[1] = '*';
      char[] charArray2 = ArrayUtils.subarray(charArray1, (-2443), (-2443));
      assertNotNull(charArray2);
      assertEquals(2, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'*', '*'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      Boolean boolean3 = Boolean.valueOf("A blank string is not a valid number");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean("");
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      Boolean boolean5 = new Boolean("A blank string is not a valid number");
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5);
      
      boolean boolean6 = ArrayUtils.isNotEmpty((Boolean[]) null);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6);
      
      boolean boolean7 = ArrayUtils.contains(charArray2, 'w');
      assertEquals(2, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'*', '*'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7 == boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(boolean7);
      
      boolean boolean8 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean8 == boolean7);
      assertFalse(boolean8 == boolean6);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      long[] longArray0 = new long[3];
      longArray0[0] = (-1012L);
      longArray0[1] = (long) '*';
      longArray0[2] = 0L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {(-1012L), 42L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1012L), 42L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-2647L);
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '^';
      charArray0[2] = '2';
      charArray0[3] = '5';
      boolean boolean0 = ArrayUtils.contains(charArray0, '^');
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'2', '^', '2', '5'}, charArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-2), 1);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      byte[] byteArray0 = ArrayUtils.insert((-372), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-2), (-987));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '^';
      floatArray0[1] = (float) 2146363413;
      floatArray0[2] = (float) (-2647L);
      floatArray0[3] = (float) (-2647L);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (-2096.0F);
      floatArray0[7] = (float) '^';
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {94.0F, 2.14636339E9F, (-2647.0F), (-2647.0F), (-1.0F), (-1.0F), (-2096.0F), 94.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)616);
      assertNotNull(short0);
      assertEquals((short)616, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)616);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)616, (short)short1);
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte) (-2));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)616, (short)616}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[5] = (byte)53;
      byteArray0[2] = (byte)0;
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'B');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)1;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) (byte)53;
      floatArray0[3] = 1929.0F;
      floatArray0[4] = (float) 2128309662;
      floatArray0[5] = (float) (short)0;
      ArrayUtils.reverse(booleanArray0, (-2471), 2128309662);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Character[] characterArray1 = ArrayUtils.removeElements(characterArray0, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(0, characterArray1.length);
      assertEquals(0, characterArray0.length);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '\u0016';
      charArray0[2] = '|';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[5] = (byte) (-44);
      byteArray0[4] = (byte)1;
      int[] intArray0 = new int[2];
      byteArray0[4] = (byte) (-44);
      ArrayUtils.swap(intArray0, 0, 0, 0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)1;
      shortArray0[6] = (short) (byte) (-44);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)3);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1, (short)0, (short)1, (short) (-44)}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1, (short)0, (short)1, (short) (-44)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-44));
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44), (byte) (-44), (byte)0, (byte) (-44), (byte) (-44), (byte) (-44)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44), (byte) (-44), (byte)0, (byte) (-44), (byte) (-44)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-44);
      doubleArray0[1] = (double) (byte) (-44);
      doubleArray0[2] = (double) (byte) (-44);
      doubleArray0[3] = (double) (short)1;
      ArrayUtils.shift(doubleArray0, (-2469));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-44.0), (-44.0), 1.0, (-44.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1333.82;
      doubleArray0[2] = (-1431.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1503.0), 622, (-1431.0));
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 1333.82, (-1431.0)}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)1292;
      shortArray0[2] = (short)40;
      shortArray0[3] = (short)76;
      shortArray0[4] = (short)511;
      shortArray0[5] = (short)90;
      shortArray0[6] = (short) (-2173);
      shortArray0[7] = (short) (-4296);
      shortArray0[8] = (short)3897;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)90);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)6, (short)1292, (short)40, (short)76, (short)511, (short)90, (short) (-2173), (short) (-4296), (short)3897}, shortArray0);
      assertEquals(5, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (short)1292, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.reverse(byteArray0, (int) (short)76, (int) (short)511);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float((double) (-288));
      assertNotNull(float0);
      assertEquals((-288.0F), (float)float0, 0.01F);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-288);
      floatArray0[1] = 64.5F;
      floatArray0[0] = 3251.0F;
      floatArray0[6] = (float) (-288);
      floatArray0[7] = (float) (-288);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {3251.0F, 64.5F, 0.0F, 0.0F, 0.0F, 0.0F, (-288.0F), (-288.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      char[] charArray1 = Character.toChars((int) '');
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {''}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift(booleanArray0, (-288));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertSame(booleanArray0, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[2] = 2;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (-1443.1F);
      floatArray0[5] = (float) (-2469);
      floatArray0[6] = (float) (-2469);
      ArrayUtils.swap(floatArray0, (-2469), 32, 2);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, (-1443.1F), 0.0F, (-2469.0F), (-2469.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-94.0F));
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, (-1443.1F), 0.0F, (-2469.0F), (-2469.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-94.0F), 2.0F, 2.0F, 2.0F, (-1443.1F), 0.0F, (-2469.0F), (-2469.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = 'v';
      ArrayUtils.shift(charArray0, (-1928), 32, 2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'+', 'v'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-44);
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)25;
      byte byte1 = (byte) (-20);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-20), 979);
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)16, (byte)1, (byte)0, (byte) (-75), (byte)25}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[6];
      longArray0[1] = (long) (byte)16;
      longArray0[2] = (long) (byte)1;
      longArray0[3] = (long) (byte) (-44);
      longArray0[4] = (long) (byte)1;
      longArray0[5] = (long) 979;
      int int0 = ArrayUtils.indexOf(longArray0, 979L);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 16L, 1L, (-44L), 1L, 979L}, longArray0);
      assertEquals(5, int0);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) 0L;
      longArray1[1] = (Long) 0L;
      longArray1[2] = (Long) (-44L);
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.swap(intArray0, 0, 3358);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      ArrayUtils.shift(intArray0, (-867));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-867);
      floatArray0[1] = (float) 3358;
      floatArray0[2] = (float) (-867);
      floatArray0[3] = (float) (-867);
      floatArray0[4] = (float) (-867);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-867.0F), 3358);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-867.0F), 3358.0F, (-867.0F), (-867.0F), (-867.0F)}, floatArray0, 0.01F);
      assertEquals(4, int0);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(167.913922191469);
      assertNotNull(double0);
      assertEquals(167.913922191469, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(3358);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(3358.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      try { 
        Double.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)25;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-20), 979);
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)16, (byte)1, (byte)0, (byte) (-75), (byte)25}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)1, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)16, (byte)1, (byte)0, (byte) (-75), (byte)25}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1731L;
      longArray0[1] = (long) (byte)16;
      longArray0[2] = (long) (byte)1;
      longArray0[3] = (long) (byte) (-44);
      longArray0[4] = (long) (byte)1;
      longArray0[5] = (long) 979;
      int int0 = ArrayUtils.indexOf(longArray0, 979L);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {1731L, 16L, 1L, (-44L), 1L, 979L}, longArray0);
      assertEquals(5, int0);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) 1731L;
      longArray1[1] = (Long) 1731L;
      longArray1[2] = (Long) (-44L);
      longArray1[3] = (Long) 16L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotNull(longArray2);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertArrayEquals(new long[] {1731L, 1731L, (-44L), 16L}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-34));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -34, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short)120, (-1260));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-30);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-30);
      longArray0[1] = (long) (byte) (-30);
      longArray0[2] = (long) (byte) (-30);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (short)120;
      longArray0[5] = (long) (byte) (-30);
      longArray0[6] = (long) (byte) (-30);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, (-385), 1422);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      ArrayUtils.reverse((int[]) null, 256, (int) (byte) (-30));
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-30);
      shortArray0[1] = (short)729;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)826, (int) (byte) (-30));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-30), (short)729}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) false;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "_HR@<,n+o");
      assertNotNull(stringArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(7, stringArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1549.3F;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 1549.3F;
      doubleArray0[5] = (double) Float.NaN;
      doubleArray0[6] = (double) Float.NaN;
      doubleArray0[7] = 1135.0;
      doubleArray0[8] = (double) 2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1135.0, 1, Double.NaN);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 1549.300048828125, (-1.0), (-1.0), 1549.300048828125, Double.NaN, Double.NaN, 1135.0, 2.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 1135.0, Double.NaN, Double.NaN, 1549.300048828125, (-1.0), (-1.0), 1549.300048828125, 2.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[2]);
      assertNotNull(object0);
      assertEquals(7, objectArray0.length);
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(true, object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) true;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "_HR@<,n+o");
      assertNotNull(stringArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(7, stringArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1549.3F;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 1549.3F;
      doubleArray0[5] = (double) Float.NaN;
      doubleArray0[6] = (double) Float.NaN;
      doubleArray0[7] = 1135.0;
      doubleArray0[8] = (double) 2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1135.0, 1, Double.NaN);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 1549.300048828125, (-1.0), (-1.0), 1549.300048828125, Double.NaN, Double.NaN, 1135.0, 2.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\u0081';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '\u0081';
      doubleArray0[1] = (double) '\u0081';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-44), 0, (-2311.47689802834));
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {129.0, 129.0, 0.0}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1791);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[10];
      ArrayUtils.swap(shortArray0, 1791, (-1));
      assertEquals(10, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)3);
      assertNotNull(shortArray1);
      assertEquals(10, shortArray0.length);
      assertEquals(11, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) true;
      Double double0 = new Double((-1611.19696626));
      assertNotNull(double0);
      assertEquals((-1611.19696626), (double)double0, 0.01);
      
      Object object0 = ArrayUtils.get(objectArray0, 1791, (Object) double0);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertEquals((-1611.19696626), object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) false;
      ArrayUtils.shift(objectArray0, 845, (-335), (int) (short) (-437));
      assertEquals(6, objectArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 1);
      assertNull(intArray0);
      
      ArrayUtils.shift(objectArray0, (-445), 30, (-1));
      assertEquals(6, objectArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = null;
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      int int0 = 7;
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-1337), 2147277704, (-398));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-398), (-2254));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Random.setNextRandom(2);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-16));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-16), (int)integer0);
      
      integerArray0[0] = integer0;
      try { 
        Integer.valueOf("org.apache.commons.lang3.builder.ToStringStyle");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.lang3.builder.ToStringStyle\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = new Integer(2181);
      assertNotNull(integer0);
      assertEquals(2181, (int)integer0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)5849;
      ArrayUtils.shift(booleanArray0, (int) (short)5849, 512, (int) (short)5849);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false}, booleanArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 2181);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 512;
      floatArray0[1] = (float) 2181;
      floatArray0[2] = (float) 512;
      floatArray0[3] = (float) 2181;
      floatArray0[4] = (float) (short)5849;
      floatArray0[5] = (float) 512;
      floatArray0[6] = (float) (short)5849;
      floatArray0[7] = (float) 512;
      floatArray0[8] = (float) (short)5849;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {512.0F, 2181.0F, 512.0F, 2181.0F, 5849.0F, 512.0F, 5849.0F, 512.0F, 5849.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-2469));
      assertNotNull(short0);
      assertEquals((short) (-2469), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 89L;
      longArray0[1] = (long) (short)shortArray0[0];
      longArray0[2] = (long) (short)shortArray0[0];
      longArray0[3] = (long) (short)shortArray0[0];
      longArray0[4] = (long) (short) (-2469);
      longArray0[6] = 1929L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {89L, (-2469L), (-2469L), (-2469L), (-2469L), 0L, 1929L}, longArray1);
      assertArrayEquals(new long[] {89L, (-2469L), (-2469L), (-2469L), (-2469L), 0L, 1929L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray1, (short) shortArray0[0]);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray2.length);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2469)}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-2469));
      assertNotNull(short0);
      assertEquals((short) (-2469), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)shortArray0[0];
      longArray0[1] = (long) (short)shortArray0[0];
      longArray0[2] = (long) (short)shortArray0[0];
      longArray0[3] = (long) (short)shortArray0[0];
      longArray0[4] = (long) (short) (-2469);
      longArray0[6] = 1929L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-2469L), (-2469L), (-2469L), (-2469L), (-2469L), 0L, 1929L}, longArray1);
      assertArrayEquals(new long[] {(-2469L), (-2469L), (-2469L), (-2469L), (-2469L), 0L, 1929L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray1, (short) shortArray0[0]);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray2.length);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2469)}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1412L);
      longArray0[1] = 1015L;
      int int0 = ArrayUtils.indexOf((char[]) null, 'b', 1040);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-2);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-61), (byte)91, (byte)28, (byte)51, (byte)72, (byte) (-2)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(0.0);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      floatArray0[3] = floatArray0[2];
      Float float3 = new Float(0.0);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      
      floatArray0[4] = float0;
      Float float4 = new Float((float) floatArray0[1]);
      assertNotNull(float4);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float4, 0.01F);
      
      floatArray0[5] = float4;
      Float float5 = new Float((float) floatArray0[0]);
      assertNotNull(float5);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      
      Float float6 = new Float((-3600.16792227363));
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((-3600.168F), (float)float6, 0.01F);
      
      floatArray0[7] = float6;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)54;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1536;
      shortArray0[4] = (short) (-4042);
      ArrayUtils.shift(shortArray0, (int) (short) (-4042), 0, (int) (short)1);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)54, (short)1, (short)0, (short)1536, (short) (-4042)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-71);
      Byte byte1 = new Byte((byte) (-71));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-71), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)1);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)1, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte) (-71), (byte)byte3);
      
      byteArray0[2] = byte3;
      byte byte4 = (byte)108;
      Byte byte5 = new Byte((byte)108);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertEquals((byte)108, (byte)byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte4);
      assertNotNull(byte6);
      assertFalse(byte4 == byte0);
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertEquals((byte)108, (byte)byte6);
      
      byteArray0[4] = byte6;
      byte byte7 = (byte)3;
      Byte byte8 = new Byte((byte)3);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte6));
      assertEquals((byte)3, (byte)byte8);
      
      byteArray0[5] = byte8;
      Byte byte9 = new Byte((byte)96);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte7));
      assertEquals((byte)96, (byte)byte9);
      
      byteArray0[6] = byte9;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)3);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-71), (byte)1, (byte) (-71), (byte)108, (byte)108, (byte)3, (byte)96}, byteArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = (double) byte0;
      doubleArray0[4] = (double) (byte)3;
      doubleArray0[5] = (double) byte7;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-71.0), (int) byte0);
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-71.0), (-71.0), 100.0, (-71.0), 3.0, 3.0}, doubleArray0, 0.01);
      assertFalse(byte0 == byte4);
      assertFalse(byte0 == byte7);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 3}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Character";
      stringArray0[1] = "java.lang.Character";
      stringArray0[2] = "awdt,ZY`Sw";
      stringArray0[3] = "M^";
      stringArray0[4] = "W3h@'Q)]_QXI@Xc";
      stringArray0[5] = "lfCvQ;v:#-";
      stringArray0[6] = "6L^0z$/pIk";
      Float float0 = new Float(427.0F);
      assertNotNull(float0);
      assertEquals(427.0F, (float)float0, 0.01F);
      
      String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) float0);
      assertNotNull(stringArray1);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)5;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)96);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)120, (byte) (-31), (byte)5}, byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte) (-31), (byte)5, (byte)96}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)2303);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1), (-1));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      byte byte0 = (byte) (-30);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)59;
      byteArray0[0] = (byte)59;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)59, (int) (byte)59);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-11);
      doubleArray0[1] = (double) (byte) (-11);
      ArrayUtils.reverse(doubleArray0, (int) (byte)59, (-1));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-11.0), (-11.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2358.8F);
      floatArray0[1] = (-2069.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      ArrayUtils.swap(floatArray0, (-1029), (-1029), 0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-2358.8F), (-2069.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, '^', 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 0.0F);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, 0.0);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1029);
      ArrayUtils.swap(intArray0, (-187), 1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1029)}, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)60;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)34, (byte)60}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-2358.8F);
      objectArray0[1] = (Object) (-1029);
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNotNull(object0);
      assertEquals(7, objectArray0.length);
      assertEquals((-2358.8F), object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 0.0F;
      objectArray0[4] = (Object) 0.0F;
      objectArray0[5] = (Object) (byte)0;
      objectArray0[6] = (Object) 0.0F;
      MockRandom mockRandom0 = new MockRandom((byte)60);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (java.util.Random) mockRandom0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = '/';
      charArray0[2] = 't';
      charArray0[3] = ':';
      charArray0[4] = 't';
      charArray0[5] = 't';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 't';
      doubleArray0[1] = (double) 't';
      doubleArray0[2] = 1855.3558101666983;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short) (-1578), 1);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {116.0, 116.0, 1855.3558101666983}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {116.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 1003);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Object[] objectArray0 = new Object[9];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(9, objectArray0.length);
      
      Object[] objectArray1 = ArrayUtils.toArray(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(9, objectArray0.length);
      assertEquals(9, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 11;
      intArray0[1] = 1003;
      intArray0[2] = 1003;
      intArray0[3] = 1;
      intArray0[4] = 1003;
      intArray0[5] = 1003;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertArrayEquals(new int[] {11, 1003, 1003, 1, 1003, 1003, 0}, intArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = '';
      charArray0[2] = 'p';
      charArray0[3] = '(';
      charArray0[4] = 'I';
      charArray0[5] = 'o';
      int int0 = ArrayUtils.indexOf(charArray0, 'G', 174);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'G', '', 'p', '(', 'I', 'o'}, charArray0);
      assertEquals((-1), int0);
      
      Object[] objectArray2 = ArrayUtils.subarray(objectArray0, 4, 83);
      assertNotNull(objectArray2);
      assertEquals(9, objectArray0.length);
      assertEquals(5, objectArray2.length);
      assertSame(objectArray0, objectArray1);
      assertNotSame(objectArray0, objectArray2);
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray0);
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-887.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-887.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)32);
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'q';
      charArray0[1] = '3';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'q', '3', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, (-1279), 128);
      assertNotNull(charArray2);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'q', '3', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      Float float0 = new Float(909.28705F);
      assertNotNull(float0);
      assertEquals(909.28705F, (float)float0, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) float0);
      assertNotNull(string0);
      assertEquals("909.28705", string0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(128, intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Character character0 = new Character('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray1, true);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray1));
      assertEquals(2, int0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1.0F);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)11;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (int) (short)11);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)11}, shortArray0);
      assertArrayEquals(new short[] {(short)11}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short)11;
      doubleArray0[2] = (double) (short)11;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (short)11;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-227.47782853865), 0.0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 11.0, 11.0, 0.0, 11.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)11);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(2, int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, (int) (short)11, (double) 2);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 11.0, 11.0, 0.0, 11.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = 303L;
      longArray0[4] = 53L;
      longArray0[5] = (long) (short)11;
      longArray0[6] = (long) 0;
      int int2 = ArrayUtils.lastIndexOf(longArray0, 1726L, 2);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {3L, 0L, 0L, 303L, 53L, 11L, 0L}, longArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = (-1);
      intArray0[2] = (-735);
      intArray0[3] = (int) (short)11;
      intArray0[4] = 3;
      intArray0[5] = (int) (short)11;
      intArray0[6] = (int) (short)11;
      intArray0[7] = (-1);
      intArray0[8] = (int) (short)11;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {3, (-1), (-735), 11, 3, 11, 11, (-1), 11}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '\"';
      floatArray0[1] = (float) 'c';
      floatArray0[2] = (float) '\"';
      floatArray0[3] = (float) 'c';
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'c';
      intArray0[2] = (int) 'c';
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      Float[] floatArray3 = ArrayUtils.toObject(floatArray2);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {34.0F, 99.0F, 34.0F, 99.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.insert((-835), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(14, charArray1.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 99;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = 2231L;
      longArray0[3] = (long) 99;
      longArray0[4] = (long) 'c';
      longArray0[5] = (long) 99;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertArrayEquals(new long[] {99L, 2147483647L, 2231L, 99L, 99L, 99L}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray4 = ArrayUtils.removeElements(floatArray1, floatArray2);
      assertNotNull(floatArray4);
      assertEquals(0, floatArray4.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray4, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray4, floatArray2);
      assertNotSame(floatArray4, floatArray1);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray1, floatArray4);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray4);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      float[] floatArray5 = ArrayUtils.subarray(floatArray1, (-1578), 99);
      assertNotNull(floatArray5);
      assertEquals(0, floatArray5.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray5, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray5, floatArray0);
      assertNotSame(floatArray5, floatArray1);
      assertSame(floatArray5, floatArray2);
      assertNotSame(floatArray5, floatArray4);
      assertNotSame(floatArray1, floatArray4);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray5);
      assertFalse(floatArray5.equals((Object)floatArray0));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray1.equals((Object)floatArray4));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 124L;
      longArray0[2] = (-1260L);
      longArray0[3] = (-335L);
      longArray0[4] = 111L;
      longArray0[5] = (-3130L);
      longArray0[6] = 368L;
      longArray0[7] = (-833L);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-18);
      shortArray0[1] = (short) (byte) (-18);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-3130L);
      floatArray0[2] = (float) 111L;
      floatArray0[3] = (float) (short) (-18);
      floatArray0[4] = (float) 111L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 4199.71F);
      assertNotNull(bitSet0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3130.0F), 111.0F, (-18.0F), 111.0F}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = '%';
      charArray0[2] = 'E';
      charArray0[3] = '-';
      charArray0[4] = '`';
      charArray0[5] = '$';
      charArray0[6] = '[';
      charArray0[7] = '3';
      charArray0[8] = 'k';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotNull(charArray1);
      assertEquals(0, intArray0.length);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'A', '%', 'E', '-', '`', '$', '[', '3', 'k'}, charArray0);
      assertArrayEquals(new char[] {'A', '%', 'E', '-', '`', '$', '[', '3', 'k'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2817.4F;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1457.0F);
      doubleArray0[1] = (double) 2817.4F;
      doubleArray0[2] = (double) 2817.4F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2817.39990234375, 886);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1457.0), 2817.39990234375, 2817.39990234375}, doubleArray0, 0.01);
      assertEquals(2, int0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2443.0F));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {2817.4F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2817.4F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 886;
      longArray0[1] = (long) 2146291925;
      longArray0[2] = (long) 2146291925;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 886;
      longArray0[6] = (long) 2146291925;
      longArray0[7] = 1275L;
      longArray0[8] = (long) 2146291925;
      ArrayUtils.swap(longArray0, 2, 0, 886);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {2146291925L, 2L, 2L, 886L, 2146291925L, 1275L, 2146291925L, 2146291925L, 886L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) '4';
      floatArray0[2] = (float) '4';
      floatArray0[1] = (float) 'c';
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, 1);
      assertNotNull(integer2);
      assertEquals(2, integerArray0.length);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      Character character0 = ArrayUtils.get((Character[]) null, 85);
      assertNull(character0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) null);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '_');
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'_', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.reverse(booleanArray0, 0, 312);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1578);
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1578.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-1578);
      longArray0[1] = (long) (short) (-1578);
      longArray0[2] = (long) 0;
      longArray0[3] = 3882L;
      longArray0[4] = (long) 0;
      ArrayUtils.reverse(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 3882L, 0L, (-1578L), (-1578L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (-820L));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 3882L, 0L, (-1578L), (-1578L)}, longArray0);
      assertFalse(boolean0);
      
      float[] floatArray2 = ArrayUtils.insert((-461), floatArray1, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      Float[] floatArray3 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray3);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray3.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1578.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = ':';
      charArray0[2] = '{';
      int int0 = ArrayUtils.indexOf(charArray0, '{');
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'|', ':', '{'}, charArray0);
      assertEquals(2, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(18, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-46), (byte)12, (byte)42, (byte) (-92), (byte) (-1), (byte)30, (byte) (-1), (byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(2, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 0, 65);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = 1L;
      longArray0[3] = (long) 0;
      longArray0[4] = 1L;
      long[] longArray1 = ArrayUtils.add(longArray0, (-4064L));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1L), 1L, 0L, 1L}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), 1L, 0L, 1L, (-4064L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-71);
      Byte byte1 = new Byte((byte) (-71));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-71), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)1);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte) (-71), (byte)byte3);
      
      byteArray0[2] = byte3;
      byte byte4 = (byte)108;
      Byte byte5 = new Byte((byte)108);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertEquals((byte)108, (byte)byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte4);
      assertNotNull(byte6);
      assertFalse(byte4 == byte0);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte4));
      assertEquals((byte)108, (byte)byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)3);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte2));
      assertEquals((byte)3, (byte)byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte)96);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte5));
      assertEquals((byte)96, (byte)byte8);
      
      byteArray0[6] = byte8;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)3);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-71), (byte)1, (byte) (-71), (byte)108, (byte)108, (byte)3, (byte)96}, byteArray1);
      
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray1);
      assertNotNull(objectArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, objectArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-17L);
      doubleArray0[1] = (double) (-17L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-17L), (double) (-17L));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-17.0), (-17.0), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Object[] objectArray1 = ArrayUtils.toArray(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[3] = doubleArray0[0];
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1237.2790971243);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(1237.2790971243, (double)double3, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1337);
      intArray0[2] = (-1337);
      intArray0[3] = 0;
      ArrayUtils.shift(intArray0, 2, 7, 2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-1337), (-1337), 0}, intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2176);
      shortArray0[1] = (short)291;
      shortArray0[2] = (short)16757;
      shortArray0[3] = (short)2119;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)291, 2036);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-2176), (short)291, (short)16757, (short)2119}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Random.setNextRandom((short)16757);
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, ' ');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {' '}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1582L);
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) (byte)76);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(76.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(37.0);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(37.0F, (float)float2, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1582.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1582L);
      floatArray0[1] = (float) (-1582L);
      floatArray0[2] = (float) (-1582L);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1582.0F), (-1582.0F), (-1582.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)76, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 76, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object1, 0);
      assertEquals(0, objectArray0.length);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.1, double0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '=';
      charArray0[2] = 'o';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)91);
      assertNotNull(bitSet0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)6, (byte)0, (byte)6, (byte)0, (byte)6, (byte)6}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '>';
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = 0.1;
      doubleArray0[4] = 0.1;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 'o';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {62.0, 0.0, 0.0, 0.1, 0.1, 1.0, 0.0, 111.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1791);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (-437);
      ArrayUtils.swap(shortArray0, 1791, 0);
      assertEquals(10, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)3);
      assertNotNull(shortArray1);
      assertEquals(10, shortArray0.length);
      assertEquals(11, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) (short) (-437);
      objectArray0[2] = (Object) (short) (-437);
      objectArray0[3] = (Object) true;
      Double double0 = new Double((-1611.19696626));
      assertNotNull(double0);
      assertEquals((-1611.19696626), (double)double0, 0.01);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) double0);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertEquals(false, object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) false;
      ArrayUtils.shift(objectArray0, 845, (-335), 0);
      assertEquals(6, objectArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 1);
      assertNull(intArray0);
      
      ArrayUtils.shift(objectArray0, (-445), 30, (-1));
      assertEquals(6, objectArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[3];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) object0;
      booleanArray1[2] = (Boolean) object0;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) '4';
      floatArray0[2] = (float) '4';
      floatArray0[1] = (float) 'c';
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, 1);
      assertNotNull(integer2);
      assertEquals(2, integerArray0.length);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)58}, byteArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)58}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[3] = (-2469);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(14, intArray0.length);
      assertSame(intArray0, intArray1);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2469), (-2469));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      Integer integer1 = new Integer((-2469));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2469), (int)integer1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)72;
      byteArray0[3] = (byte)58;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)72, (byte)0, (byte)58}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) '4';
      floatArray0[2] = (float) '4';
      floatArray0[1] = (float) 'c';
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)58}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      ArrayUtils.swap(booleanArray0, (-2146508173), 2249);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      ArrayUtils.reverse((short[]) null, (-2146508173), 2842);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-105), (byte)14, (byte) (-88), (byte)63, (byte)0, (byte) (-1)}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-105), (byte)14, (byte) (-88), (byte)63, (byte)0, (byte) (-1)}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1791);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (-437);
      ArrayUtils.shift(booleanArray0, (int) (short) (-437), 1791, 512);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1791;
      doubleArray0[1] = (double) 512;
      doubleArray0[2] = (double) (short) (-437);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 512;
      doubleArray0[5] = (double) (short) (-437);
      ArrayUtils.swap(doubleArray0, 512, 512);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1791.0, 512.0, (-437.0), (-1.0), 512.0, (-437.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 615L;
      longArray0[1] = (long) 512;
      longArray0[2] = (long) (-1);
      longArray0[3] = 1L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-1), 1L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[3] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1237.2790971243);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(1237.2790971243, (double)double3, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1337);
      intArray0[2] = (-1337);
      intArray0[3] = 0;
      ArrayUtils.shift(intArray0, 2, 7, 2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-1337), (-1337), 0}, intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2176);
      shortArray0[1] = (short)291;
      shortArray0[2] = (short)291;
      shortArray0[3] = (short)2119;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)291, 2036);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-2176), (short)291, (short)291, (short)2119}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Random.setNextRandom((short)291);
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1337);
      longArray0[1] = (long) (short)291;
      longArray0[2] = (long) (short) (-2176);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (short)291;
      longArray0[5] = (long) (short)291;
      longArray0[6] = (long) 2;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 2479, (-437L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2479, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (-1435.1078529937);
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1435.1078529937)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, (-3593));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2;
      intArray1[1] = (-1);
      intArray1[2] = (-3593);
      intArray1[3] = (-1);
      intArray1[4] = (-3593);
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray1);
      assertNotNull(intArray2);
      assertEquals(5, intArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {2, (-1), (-3593), (-1), (-3593)}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2, (-1), (-3593), (-1), (-3593)}, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1799;
      floatArray0[1] = (float) 1799;
      floatArray0[2] = (float) 1799;
      floatArray0[3] = (-1071.756F);
      floatArray0[4] = 933.0F;
      floatArray0[5] = (float) 1799;
      floatArray0[6] = (float) 1799;
      float[] floatArray1 = ArrayUtils.insert(1799, (float[]) null, floatArray0);
      assertNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1799.0F, 1799.0F, 1799.0F, (-1071.756F), 933.0F, 1799.0F, 1799.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Long long0 = new Long(1799);
      assertNotNull(long0);
      assertEquals(1799L, (long)long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) long0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, 1799.0F, 1799);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1390);
      shortArray0[1] = (short)48;
      shortArray0[2] = (short) (-185);
      shortArray0[3] = (short)1676;
      shortArray0[4] = (short)56;
      shortArray0[5] = (short) (-1468);
      shortArray0[6] = (short)3433;
      shortArray0[7] = (short) (-26214);
      shortArray0[8] = (short) (-1747);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1676);
      assertNotNull(bitSet0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1390), (short)48, (short) (-185), (short)1676, (short)56, (short) (-1468), (short)3433, (short) (-26214), (short) (-1747)}, shortArray0);
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[1] = (byte)0;
      ArrayUtils.shift(byteArray0, 2048, (int) (byte)0, 2502);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(4, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-2311.47689802834);
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) '\u0016';
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte) (-44);
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) '\u0016';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 0, 2446, 0.0);
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2311.47689802834), 0.0, 22.0, 0.0, (-44.0), 0.0, 22.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2597, (-3241));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2311.47689802834), 0.0, 22.0, 0.0, (-44.0), 0.0, 22.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = '+';
      charArray0[2] = '(';
      charArray0[3] = '3';
      charArray0[4] = 'Q';
      charArray0[5] = 'H';
      charArray0[6] = 'o';
      charArray0[7] = 'u';
      ArrayUtils.swap(charArray0, (int) (byte)0, (-2220), (-82));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\'', '+', '(', '3', 'Q', 'H', 'o', 'u'}, charArray0);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '\'';
      charArray1[1] = 'Q';
      charArray1[2] = '(';
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'\'', 'Q', '('}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2220);
      intArray0[1] = (int) '+';
      intArray0[2] = (int) '(';
      intArray0[3] = (int) 'u';
      intArray0[4] = (int) 'H';
      intArray0[5] = (int) 'u';
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-2220));
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-2220), 43, 40, 117, 72, 117}, intArray0);
      assertArrayEquals(new int[] {43, 40, 117, 72, 117}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'H';
      floatArray0[1] = (float) 'u';
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {72.0F, 117.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) (-319));
      assertNotNull(float0);
      assertEquals((-319.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) (-319);
      floatArray1[1] = 64.5F;
      floatArray1[2] = 3251.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2224.938541, (-869));
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[4];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-319), (-319));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) (-319));
      assertNotNull(float0);
      assertEquals((-319.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) (-319);
      floatArray1[1] = 64.5F;
      floatArray1[2] = 3251.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2224.938541, (-869));
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      ArrayUtils.reverse((short[]) null, (-1761), (-869));
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = 1791;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, 1791);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (-437);
      ArrayUtils.swap(shortArray0, 1791, 0);
      assertEquals(10, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)3);
      assertNotNull(shortArray1);
      assertEquals(10, shortArray0.length);
      assertEquals(11, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) (short) (-437);
      objectArray0[2] = (Object) (short) (-437);
      objectArray0[3] = (Object) true;
      Double double0 = new Double((-1611.19696626));
      assertNotNull(double0);
      assertEquals((-1611.19696626), (double)double0, 0.01);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) double0);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertEquals(false, object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) false;
      ArrayUtils.shift(objectArray0, 845, (-335), 0);
      assertEquals(6, objectArray0.length);
      
      int int2 = 1;
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 1);
      assertNull(intArray0);
      
      int int3 = (-445);
      ArrayUtils.shift(objectArray0, (-445), 30, (-1));
      assertEquals(6, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[4];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-319), (-319));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) (-319));
      assertNotNull(float0);
      assertEquals((-319.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) (-319);
      floatArray1[1] = 64.5F;
      floatArray1[2] = 3251.0F;
      Long long0 = new Long(1151L);
      assertNotNull(long0);
      assertEquals(1151L, (long)long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object0);
      assertEquals(1151L, object0);
      
      Short short0 = new Short((short)992);
      assertNotNull(short0);
      assertEquals((short)992, (short)short0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray0, (Object) short0, 0);
      assertNotNull(bitSet0);
      assertEquals(3, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-319.0F), (-2471), 3755.114);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      ArrayUtils.shift(floatArray0, (-1), (-247), (-1));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2755), 12);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.reverse(floatArray0, (-247), (-1));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2755);
      doubleArray0[1] = (double) (-247);
      doubleArray0[2] = 91.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2755.0), (-247.0), 91.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[9];
      MutableInt mutableInt0 = new MutableInt(0.0F);
      assertNotNull(mutableInt0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((-1));
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals("-1", mutableInt1.toString());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((short) (-1), mutableInt1.shortValue());
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt((-247.0));
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertEquals((byte)9, mutableInt2.byteValue());
      assertEquals((-247.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((short) (-247), mutableInt2.shortValue());
      assertEquals((-247), (int)mutableInt2.toInteger());
      assertEquals((-247), (int)mutableInt2.getValue());
      assertEquals((-247L), mutableInt2.longValue());
      assertEquals("-247", mutableInt2.toString());
      assertEquals((-247.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-247), mutableInt2.intValue());
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(mutableInt2);
      assertNotNull(mutableInt3);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertEquals((byte)9, mutableInt2.byteValue());
      assertEquals((-247.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((short) (-247), mutableInt2.shortValue());
      assertEquals((-247), (int)mutableInt2.toInteger());
      assertEquals((-247), (int)mutableInt2.getValue());
      assertEquals((-247L), mutableInt2.longValue());
      assertEquals("-247", mutableInt2.toString());
      assertEquals((-247.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-247), mutableInt2.intValue());
      assertEquals((-247), mutableInt3.intValue());
      assertEquals((-247.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((-247), (int)mutableInt3.toInteger());
      assertEquals("-247", mutableInt3.toString());
      assertEquals((-247), (int)mutableInt3.getValue());
      assertEquals((-247.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals((byte)9, mutableInt3.byteValue());
      assertEquals((-247L), mutableInt3.longValue());
      assertEquals((short) (-247), mutableInt3.shortValue());
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt((-1));
      assertNotNull(mutableInt4);
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertEquals((-1), (int)mutableInt4.toInteger());
      assertEquals((byte) (-1), mutableInt4.byteValue());
      assertEquals((-1), (int)mutableInt4.getValue());
      assertEquals((short) (-1), mutableInt4.shortValue());
      assertEquals((-1.0F), mutableInt4.floatValue(), 0.01F);
      assertEquals("-1", mutableInt4.toString());
      assertEquals((-1.0), mutableInt4.doubleValue(), 0.01);
      assertEquals((-1), mutableInt4.intValue());
      assertEquals((-1L), mutableInt4.longValue());
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt((-2898));
      assertNotNull(mutableInt5);
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertEquals((-2898.0), mutableInt5.doubleValue(), 0.01);
      assertEquals((short) (-2898), mutableInt5.shortValue());
      assertEquals("-2898", mutableInt5.toString());
      assertEquals((-2898), mutableInt5.intValue());
      assertEquals((-2898L), mutableInt5.longValue());
      assertEquals((byte) (-82), mutableInt5.byteValue());
      assertEquals((-2898), (int)mutableInt5.getValue());
      assertEquals((-2898), (int)mutableInt5.toInteger());
      assertEquals((-2898.0F), mutableInt5.floatValue(), 0.01F);
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = new MutableInt(0.0F);
      assertNotNull(mutableInt6);
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertTrue(mutableInt6.equals((Object)mutableInt0));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertEquals(0, (int)mutableInt6.getValue());
      assertEquals((short)0, mutableInt6.shortValue());
      assertEquals(0.0, mutableInt6.doubleValue(), 0.01);
      assertEquals(0, mutableInt6.intValue());
      assertEquals(0L, mutableInt6.longValue());
      assertEquals("0", mutableInt6.toString());
      assertEquals(0.0F, mutableInt6.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt6.toInteger());
      assertEquals((byte)0, mutableInt6.byteValue());
      
      mutableIntArray0[6] = mutableInt6;
      MutableInt mutableInt7 = new MutableInt(mutableInt2);
      assertNotNull(mutableInt7);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt6));
      assertTrue(mutableInt2.equals((Object)mutableInt3));
      assertFalse(mutableInt2.equals((Object)mutableInt4));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt5));
      assertFalse(mutableInt7.equals((Object)mutableInt1));
      assertFalse(mutableInt7.equals((Object)mutableInt6));
      assertTrue(mutableInt7.equals((Object)mutableInt3));
      assertFalse(mutableInt7.equals((Object)mutableInt4));
      assertTrue(mutableInt7.equals((Object)mutableInt2));
      assertFalse(mutableInt7.equals((Object)mutableInt0));
      assertFalse(mutableInt7.equals((Object)mutableInt5));
      assertEquals((byte)9, mutableInt2.byteValue());
      assertEquals((-247.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((short) (-247), mutableInt2.shortValue());
      assertEquals((-247), (int)mutableInt2.toInteger());
      assertEquals((-247), (int)mutableInt2.getValue());
      assertEquals((-247L), mutableInt2.longValue());
      assertEquals("-247", mutableInt2.toString());
      assertEquals((-247.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-247), mutableInt2.intValue());
      assertEquals((byte)9, mutableInt7.byteValue());
      assertEquals((-247.0F), mutableInt7.floatValue(), 0.01F);
      assertEquals((short) (-247), mutableInt7.shortValue());
      assertEquals((-247), (int)mutableInt7.toInteger());
      assertEquals((-247), (int)mutableInt7.getValue());
      assertEquals((-247L), mutableInt7.longValue());
      assertEquals("-247", mutableInt7.toString());
      assertEquals((-247.0), mutableInt7.doubleValue(), 0.01);
      assertEquals((-247), mutableInt7.intValue());
      
      mutableIntArray0[7] = mutableInt7;
      MutableInt mutableInt8 = new MutableInt((-2898));
      assertNotNull(mutableInt8);
      assertFalse(mutableInt8.equals((Object)mutableInt6));
      assertFalse(mutableInt8.equals((Object)mutableInt4));
      assertFalse(mutableInt8.equals((Object)mutableInt7));
      assertTrue(mutableInt8.equals((Object)mutableInt5));
      assertFalse(mutableInt8.equals((Object)mutableInt0));
      assertFalse(mutableInt8.equals((Object)mutableInt3));
      assertFalse(mutableInt8.equals((Object)mutableInt2));
      assertFalse(mutableInt8.equals((Object)mutableInt1));
      assertEquals((-2898), (int)mutableInt8.toInteger());
      assertEquals((-2898), (int)mutableInt8.getValue());
      assertEquals((-2898L), mutableInt8.longValue());
      assertEquals((-2898), mutableInt8.intValue());
      assertEquals((short) (-2898), mutableInt8.shortValue());
      assertEquals((-2898.0), mutableInt8.doubleValue(), 0.01);
      assertEquals((-2898.0F), mutableInt8.floatValue(), 0.01F);
      assertEquals((byte) (-82), mutableInt8.byteValue());
      assertEquals("-2898", mutableInt8.toString());
      
      mutableIntArray0[8] = mutableInt8;
      MutableInt[] mutableIntArray1 = ArrayUtils.addAll(mutableIntArray0, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertEquals(18, mutableIntArray1.length);
      assertEquals(9, mutableIntArray0.length);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      char[] charArray0 = new char[14];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = 'F';
      charArray0[3] = 'F';
      charArray0[4] = '7';
      charArray0[5] = 'F';
      charArray0[6] = '7';
      charArray0[7] = '7';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(14, charArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '7';
      doubleArray0[1] = (double) '7';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, 1629.7);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {55.0, 55.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 54, 54);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray1, 0.01F);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {55.0, 55.0, 0.0, 55.0, 55.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {55.0, 55.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '7';
      Character character0 = new Character('F');
      assertNotNull(character0);
      assertEquals('F', (char)character0);
      
      characterArray0[1] = character0;
      characterArray0[2] = (Character) '7';
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, 0);
      assertEquals(3, characterArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = (int) (short)120;
      intArray0[2] = 0;
      ArrayUtils.swap(intArray0, 3358, (-1));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {3, 120, 0}, intArray0);
      
      ArrayUtils.shift(intArray0, (-1));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {120, 0, 3}, intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Comparator<Boolean> comparator0 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null, comparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)91;
      shortArray0[2] = (short)82;
      shortArray0[3] = (short) (-3353);
      shortArray0[4] = (short)3303;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)8, (short)91, (short)82, (short) (-3353), (short)3303}, shortArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.shift(shortArray0, 1, 1066, (-1));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)8, (short)82, (short) (-3353), (short)3303, (short)91}, shortArray0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 1);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (short) (-3353);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-3353.0)}, doubleArray0, 0.01);
      
      Short[] shortArray1 = ArrayUtils.insert(3025, (Short[]) null, (Short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      Object[] objectArray0 = new Object[6];
      objectArray0[2] = (Object) true;
      objectArray0[5] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 2146363416, objectArray0[0]);
      assertNull(object0);
      assertEquals(6, objectArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object object1 = ArrayUtils.toPrimitive(objectArray0[2]);
      assertNotNull(object1);
      assertEquals(6, objectArray0.length);
      assertTrue(object1.equals((Object)boolean0));
      assertEquals(true, object1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object1, 2578);
      assertNotNull(bitSet0);
      assertEquals(6, objectArray0.length);
      assertTrue(object1.equals((Object)boolean0));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      Character character0 = new Character('q');
      assertNotNull(character0);
      assertEquals('q', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('q', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('8');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('8', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('V');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('V', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('8');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertEquals('8', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('i');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertEquals('i', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character((char) character0);
      assertNotNull(character6);
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character4));
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character5));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)character1));
      assertEquals('q', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character('q');
      assertNotNull(character7);
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character5));
      assertTrue(character7.equals((Object)character6));
      assertTrue(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character3));
      assertTrue(character7.equals((Object)character0));
      assertEquals('q', (char)character7);
      
      characterArray0[7] = character7;
      Character character8 = ArrayUtils.get(characterArray0, (-485));
      assertNull(character8);
      assertEquals(8, characterArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = (char) character3;
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'V'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short) (-1758);
      shortArray0[2] = (short) (-1758);
      shortArray0[3] = (short) (-4078);
      shortArray0[4] = (short) (-1566);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-4078);
      shortArray0[7] = (short) (-1758);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)7);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)6, (short) (-1758), (short) (-1758), (short) (-4078), (short) (-1566), (short) (-1), (short) (-4078), (short) (-1758)}, shortArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = '*';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-44);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 503, (int) (byte) (-44));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44), (byte) (-44), (byte) (-44), (byte)1, (byte) (-44)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      
      char[] charArray1 = ArrayUtils.insert((int) (byte)1, charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {'j', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Map<Object, Object> map0 = ArrayUtils.toMap(classArray1);
      assertNotNull(map0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-44);
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte) (-44);
      shortArray0[3] = (short) (byte) (-44);
      shortArray0[4] = (short) (byte) (-44);
      shortArray0[5] = (short)1045;
      shortArray0[6] = (short) (byte)1;
      ArrayUtils.shift(shortArray0, 2, 3204, (int) (byte) (-44));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-44), (short)1, (short)1, (short) (-44), (short) (-44), (short) (-44), (short)1045}, shortArray0);
      
      float[] floatArray0 = new float[11];
      floatArray0[0] = (float) (short)1045;
      ArrayUtils.swap(floatArray0, 62, 503, 827);
      assertEquals(11, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(11, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray2 = new char[3];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = '*';
      charArray2[1] = '*';
      charArray2[2] = '*';
      ArrayUtils.shift(charArray2, (int) (byte) (-44), (int) (short)1, 2567);
      assertEquals(3, charArray2.length);
      assertArrayEquals(new char[] {'*', '*', '*'}, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = '*';
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-44);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 503, (int) (byte) (-44));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-44), (byte) (-44), (byte) (-44), (byte)1, (byte) (-44)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      
      char[] charArray1 = ArrayUtils.insert((int) (byte)1, charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {'j', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Map<Object, Object> map0 = ArrayUtils.toMap(classArray1);
      assertNotNull(map0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-44);
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte) (-44);
      shortArray0[3] = (short) (byte) (-44);
      shortArray0[4] = (short) (byte) (-44);
      shortArray0[5] = (short)1045;
      ArrayUtils.shift(shortArray0, 2, 3204, (int) (byte) (-44));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-44), (short)1, (short)0, (short) (-44), (short) (-44), (short) (-44), (short)1045}, shortArray0);
      
      float[] floatArray0 = new float[11];
      floatArray0[0] = (float) (short)1045;
      ArrayUtils.swap(floatArray0, 62, 503, (int) '*');
      assertEquals(11, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 2);
      assertNotNull(floatArray1);
      assertEquals(11, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray2 = new char[3];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = '*';
      charArray2[1] = '*';
      charArray2[2] = '*';
      ArrayUtils.shift(charArray2, (int) (byte) (-44), (int) (short)1, 2567);
      assertEquals(3, charArray2.length);
      assertArrayEquals(new char[] {'*', '*', '*'}, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      char char0 = 'Z';
      Character character0 = Character.valueOf('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertEquals('Z', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('Z');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character1));
      assertEquals('Z', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('!');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('!', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('4');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertEquals('4', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character(char0);
      assertNotNull(character5);
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character0));
      assertEquals('Z', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('b');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      assertEquals('b', (char)character6);
      
      ArrayUtils.shift((Object[]) characterArray0, 0);
      assertEquals(8, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      char char0 = 'Z';
      Character character0 = Character.valueOf('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertEquals('Z', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('Z');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character1));
      assertEquals('Z', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('!');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertEquals('!', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('4');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertEquals('4', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character(char0);
      assertNotNull(character5);
      assertTrue(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)char0));
      assertEquals('Z', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('b');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertEquals('b', (char)character6);
      
      characterArray0[6] = character6;
      ArrayUtils.shift((Object[]) characterArray0, 0);
      assertEquals(8, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) '4';
      floatArray0[2] = (float) '4';
      floatArray0[1] = (float) 'c';
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-43));
      assertNotNull(integer0);
      assertEquals((-43), (int)integer0);
      
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, (-43));
      assertNull(integer2);
      assertEquals(2, integerArray0.length);
      
      Byte byte0 = new Byte((byte) (-87));
      assertNotNull(byte0);
      assertEquals((byte) (-87), (byte)byte0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-43);
      doubleArray0[1] = (double) 'c';
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2876.66045);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-43.0), 99.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-43.0), 99.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 99.0F, 52.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray1 = ArrayUtils.remove(charArray0, int0);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'c';
      longArray0[1] = (long) (byte) (-87);
      longArray0[2] = (long) 'c';
      longArray0[3] = (long) (-43);
      longArray0[4] = (long) int0;
      ArrayUtils.shift(longArray0, (-43), 0, (-43));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {99L, (-87L), 99L, (-43L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 53);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 266.6681F;
      floatArray0[1] = (float) (short)933;
      floatArray0[2] = (float) 53;
      floatArray0[3] = 266.6681F;
      floatArray0[4] = (float) (short)933;
      floatArray0[5] = 266.6681F;
      floatArray0[6] = (float) (short)933;
      floatArray0[7] = (float) (short)933;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 490.541F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {266.6681F, 933.0F, 53.0F, 266.6681F, 933.0F, 266.6681F, 933.0F, 933.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {266.6681F, 933.0F, 53.0F, 266.6681F, 933.0F, 266.6681F, 933.0F, 933.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[1] = 'd';
      ArrayUtils.swap(charArray0, 3849, 51, 1233);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {']', 'd'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Object[]) null, 1233);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-905.7));
      assertNotNull(double0);
      assertEquals((-905.7), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-905.7)}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[4];
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (-3130L));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) (-469);
      floatArray0[3] = (float) (-820L);
      floatArray0[4] = (float) (-820L);
      floatArray0[5] = (float) (-469);
      floatArray0[6] = (float) (-3130L);
      floatArray0[7] = (float) (-820L);
      floatArray0[8] = (float) (-469);
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(18, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, (-469.0F), (-820.0F), (-820.0F), (-469.0F), (-3130.0F), (-820.0F), (-469.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray2);
      assertEquals(9, floatArray2.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, (-469.0F), (-820.0F), (-820.0F), (-469.0F), (-3130.0F), (-820.0F), (-469.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      ArrayUtils.shift(doubleArray1, 2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-905.7)}, doubleArray1, 0.01);
      
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertNotNull(floatArray3);
      assertEquals(9, floatArray2.length);
      assertEquals(9, floatArray3.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, (-469.0F), (-820.0F), (-820.0F), (-469.0F), (-3130.0F), (-820.0F), (-469.0F)}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {2.0F, 2.0F, (-469.0F), (-820.0F), (-820.0F), (-469.0F), (-3130.0F), (-820.0F), (-469.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray3);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 1857.220327256);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-905.7)}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short) (-4040);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)3552;
      shortArray0[4] = (short)2847;
      shortArray0[5] = (short)898;
      shortArray0[6] = (short)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1380));
      assertNotNull(bitSet0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)4, (short) (-4040), (short)1, (short)3552, (short)2847, (short)898, (short)2}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[2] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, booleanArray0[1]);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1812.2542F;
      floatArray0[1] = 1812.2542F;
      ArrayUtils.shift(floatArray0, 832, 832, 0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1812.2542F, 1812.2542F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) booleanArray0, (-3), (-3), 0);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      ArrayUtils.reverse((Object[]) booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)106;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)98);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)106}, byteArray1);
      assertArrayEquals(new byte[] {(byte)121, (byte)98, (byte)106}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)106}, byteArray1);
      assertArrayEquals(new byte[] {(byte)98}, byteArray2);
      assertArrayEquals(new byte[] {(byte)121, (byte)98, (byte)106}, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      boolean[] booleanArray2 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = new Float(0.07738724603915031);
      assertNotNull(float0);
      assertEquals(0.07738724F, (float)float0, 0.01F);
      
      Float float1 = new Float((-781.2180951147782));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-781.2181F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[1] = float0;
      floatArray0[2] = float1;
      floatArray0[4] = float0;
      floatArray0[5] = floatArray0[1];
      floatArray0[7] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1427.5833F));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-1427.5833F), 0.07738724F, (-781.2181F), (-1427.5833F), 0.07738724F, 0.07738724F, (-1427.5833F), (-781.2181F)}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'I';
      intArray0[1] = (int) 'I';
      intArray0[2] = (int) 'I';
      intArray0[3] = (int) 'I';
      intArray0[4] = (-2146614923);
      intArray0[5] = (int) 'I';
      intArray0[6] = (-1700);
      intArray0[7] = 1;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(16, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {73, 73, 73, 73, (-2146614923), 73, (-1700), 1}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Arguments cannot both be null");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = 'x';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      int int0 = ArrayUtils.indexOf(charArray0, 'x', 73);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'I', 'x', 'I', 'I'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(" is not in the range '0' - '9'");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[0] = (-1.0F);
      ArrayUtils.shift(floatArray0, 0, 808, 808);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) boolean2;
      objectArray0[1] = (Object) boolean0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 808;
      doubleArray0[1] = 2982.8898191;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 808;
      doubleArray0[4] = (-3271.5);
      doubleArray0[5] = (double) 808;
      boolean boolean3 = ArrayUtils.contains(doubleArray0, 1281.4841, 0.0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {808.0, 2982.8898191, 0.0, 808.0, (-3271.5), 808.0}, doubleArray0, 0.01);
      assertFalse(boolean3);
      
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Float float0 = new Float((float) 808);
      assertNotNull(float0);
      assertEquals(808.0F, (float)float0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 808;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 808);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {808}, intArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) float0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 854.0F;
      floatArray0[1] = (-246.50766F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-232.61981F);
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-146);
      intArray0[1] = 966;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0);
      assertNotNull(stringArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      boolean[] booleanArray2 = new boolean[1];
      boolean[] booleanArray3 = ArrayUtils.addFirst(booleanArray2, false);
      assertNotNull(booleanArray3);
      assertEquals(1, booleanArray2.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      Float[] floatArray2 = new Float[3];
      floatArray2[0] = (Float) 0.0F;
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray2[2] = (Float) 854.0F;
      Float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray2);
      assertNotNull(floatArray3);
      assertEquals(3, floatArray3.length);
      assertEquals(3, floatArray2.length);
      assertSame(floatArray3, floatArray2);
      assertSame(floatArray2, floatArray3);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-232.61981F);
      doubleArray0[1] = (double) 854.0F;
      doubleArray0[2] = (double) 1471;
      ArrayUtils.swap(doubleArray0, (-146), (-146), 966);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-232.61981201171875), 854.0, 1471.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) floatArray2[2], 1471, (double) (-146));
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, floatArray2.length);
      assertArrayEquals(new double[] {(-232.61981201171875), 854.0, 1471.0}, doubleArray0, 0.01);
      assertSame(floatArray2, floatArray3);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      Object object0 = ArrayUtils.get((Object[]) booleanArray1, 52);
      assertNull(object0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int0 = ArrayUtils.indexOf((Object[]) stringArray0, (Object) null, (-146));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte)115);
      assertNotNull(byte0);
      assertEquals((byte)115, (byte)byte0);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) floatArray2, (Object) byte0);
      assertNotNull(objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, floatArray2.length);
      assertSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, objectArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-985);
      long[] longArray0 = new long[5];
      longArray0[1] = (long) (short) (-985);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-150));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-985)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-150), (short)0, (short) (-985)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Byte byte0 = new Byte((byte) (-81));
      assertNotNull(byte0);
      assertEquals((byte) (-81), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-81));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-81), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-113));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-113), (byte)byte2);
      
      Byte byte3 = new Byte((byte)1);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte3);
      
      Byte[] byteArray0 = new Byte[12];
      byteArray0[0] = byte2;
      shortArray0[0] = (short) (byte)byte1;
      Byte byte4 = Byte.valueOf((byte)1);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)1, (byte)byte4);
      
      byteArray0[2] = byte4;
      byteArray0[3] = byte0;
      byteArray0[4] = byte3;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-887.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-887.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)32);
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 32;
      floatArray0[2] = (float) 32;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 1536;
      floatArray0[5] = (float) 1536;
      floatArray0[6] = (float) (byte)32;
      floatArray0[7] = 2727.0F;
      floatArray0[8] = (float) 0;
      ArrayUtils.swap(floatArray0, 0, 2, (int) (byte)1);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {32.0F, 32.0F, 0.0F, 0.0F, 1536.0F, 1536.0F, 32.0F, 2727.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0.0F, (int) (byte)1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-887.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'q');
      assertNotNull(charArray1);
      assertEquals(3, charArray1.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'q', 'q', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'q', '\u0000'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[3] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1237.2790971243);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(1237.2790971243, (double)double3, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1337);
      intArray0[2] = (-1337);
      intArray0[3] = 0;
      ArrayUtils.shift(intArray0, 2, 7, 2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-1337), (-1337), 0}, intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2176);
      shortArray0[1] = (short)291;
      shortArray0[2] = (short)16757;
      shortArray0[3] = (short)2119;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)291, 2036);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-2176), (short)291, (short)16757, (short)2119}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Random.setNextRandom((short)16757);
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1694;
      intArray0[1] = (-114);
      intArray0[2] = (-1);
      intArray0[3] = 32;
      int int0 = 117;
      intArray0[4] = 117;
      intArray0[5] = (-43);
      intArray0[6] = (-3638);
      intArray0[7] = 14;
      intArray0[8] = 2715;
      int int1 = ArrayUtils.indexOf(intArray0, 117, (-114));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1694, (-114), (-1), 32, 117, (-43), (-3638), 14, 2715}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      char[] charArray0 = new char[1];
      char char0 = '2';
      charArray0[0] = '2';
      int int2 = 51;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 51);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byte byte0 = (byte) (-42);
      byteArray0[1] = (byte) (-42);
      Float float1 = new Float((double) (byte)6);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(6.0F, (float)float1, 0.01F);
      
      Float float2 = new Float((double) 2398.144F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(2398.144F, (float)float2, 0.01F);
      
      Float float3 = new Float((-2548.26F));
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-2548.26F), (float)float3, 0.01F);
      
      Float float4 = new Float((double) floatArray0[1]);
      assertNotNull(float4);
      assertEquals(8, floatArray0.length);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((-1.0F), (float)float4, 0.01F);
      
      Float float5 = new Float(3378.48F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals(3378.48F, (float)float5, 0.01F);
      
      Float float6 = new Float((-1.0F));
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals((-1.0F), (float)float6, 0.01F);
      
      Float float7 = new Float((double) floatArray0[1]);
      assertNotNull(float7);
      assertEquals(8, floatArray0.length);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float0, 0.01F);
      assertEquals((float)float7, (float)float4, 0.01F);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float7, 0.01F);
      
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte)6);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 6.0F, 6.0F, 6.0F, 6.0F, 6.0F, 6.0F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-42);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(712, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 712, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, false, false, true}, booleanArray0));
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 50L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2106.312F);
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-2106.312F);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(1, floatArray2.length);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-2106.312F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2106.312F)}, floatArray1, 0.01F);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = (-1260L);
      longArray0[3] = (-335L);
      longArray0[4] = 111L;
      longArray0[5] = (-3130L);
      longArray0[6] = 368L;
      longArray0[7] = (-833L);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-18);
      floatArray0[1] = (float) 368L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1260L), (-335L), 111L, (-3130L), 368L, (-833L), 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1762.1083F);
      floatArray1[1] = (float) (byte) (-18);
      floatArray1[2] = (float) (-1L);
      floatArray1[4] = (float) (-1L);
      floatArray1[5] = (float) (-833L);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(4, floatArray2.length);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {368.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-18.0F), 368.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1762.1083F), (-18.0F), (-1.0F), 0.0F, (-1.0F), (-833.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      ArrayUtils.shift(floatArray0, (-1961), 832, (-711));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.hashCode((Object) null);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)6752;
      shortArray0[1] = (short) (-2407);
      shortArray0[2] = (short)26124;
      shortArray0[3] = (short)13;
      ArrayUtils.reverse(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)13, (short)26124, (short) (-2407), (short)6752}, shortArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short) (-2407), 207);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'t', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'t', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-12);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-12)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-887.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-887.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)32);
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = '3';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'q', '3'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) '3';
      objectArray0[1] = (Object) '3';
      objectArray0[2] = (Object) (byte)1;
      objectArray0[3] = (Object) (-887.0);
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) (byte)1;
      objectArray0[6] = (Object) (byte)1;
      objectArray0[7] = (Object) 'q';
      objectArray0[8] = (Object) (byte)1;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1]);
      assertEquals(9, objectArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 2876.66045);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-1412L);
      longArray0[1] = 1015L;
      longArray0[2] = (-2959L);
      longArray0[3] = (-492L);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1412L), 1015L, (-2959L), (-492L)}, longArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1680);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1680), 1);
      assertNotNull(bitSet0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short) (-1680)}, shortArray0);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 2383.7, (int) (short)1, (-2900.6313160593));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-2959L);
      objectArray0[1] = (Object) (-1412L);
      objectArray0[2] = (Object) (short) (-1680);
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) (-2959L);
      int[] intArray0 = new int[2];
      intArray0[0] = 12;
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2443);
      Character character0 = new Character('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = '*';
      ArrayUtils.shift(charArray0, (-2443));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'*', 'i'}, charArray0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '*';
      charArray0[0] = '*';
      char[] charArray2 = ArrayUtils.subarray(charArray1, (-2443), (-2443));
      assertNotNull(charArray2);
      assertEquals(2, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'*', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      Boolean boolean3 = Boolean.valueOf("A blank string is not a valid number");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean("");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      
      Boolean boolean5 = new Boolean("A blank string is not a valid number");
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5);
      
      boolean boolean6 = ArrayUtils.isNotEmpty((Boolean[]) null);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6);
      
      boolean boolean7 = new Boolean(true);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7);
      
      boolean boolean8 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean7);
      assertFalse(boolean8 == boolean6);
      assertTrue(boolean8);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)93;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-2443);
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "ua9,^_G8%qtBT");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 32;
      floatArray0[3] = (float) (-2469);
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 32;
      floatArray0[7] = (float) 2;
      ArrayUtils.swap(floatArray0, 1536, 0, 0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 32.0F, (-2469.0F), 32.0F, 0.0F, 32.0F, 2.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-2469);
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1536, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, (-2469.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[21];
      int int0 = 832;
      float[] floatArray0 = new float[0];
      int int1 = 16;
      ArrayUtils.shift(floatArray0, (-484), 16, 0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[3];
      Double double0 = new Double(1954.1475602377825);
      assertNotNull(double0);
      assertEquals(1954.1475602377825, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) double0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-985);
      long[] longArray0 = new long[5];
      longArray0[1] = (long) (short) (-985);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-150));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-985)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-150), (short)0, (short) (-985)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.reverse(shortArray0, (int) (short) (-985), (-1));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-985)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      boolean boolean0 = ArrayUtils.contains(shortArray1, (short) (-1478));
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-985)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-150), (short)0, (short) (-985)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = 'b';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'<', '<', 'b', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'<', '<', 'b', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-985), (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-1478);
      floatArray0[1] = (float) (-985L);
      floatArray0[2] = (float) 'b';
      floatArray0[3] = (float) (short) (-1478);
      floatArray0[4] = (float) '<';
      floatArray0[5] = (float) (-985L);
      floatArray0[6] = (float) (short) (-1478);
      floatArray0[7] = (float) (short) (-985);
      floatArray0[8] = 1.0F;
      ArrayUtils.shift(floatArray0, (int) (short) (-985), 2138516289, (int) (short)0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1478.0F), (-985.0F), 98.0F, (-1478.0F), 60.0F, (-985.0F), (-1478.0F), (-985.0F), 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)0;
      long[] longArray0 = new long[0];
      boolean[] booleanArray0 = new boolean[7];
      ArrayUtils.reverse(longArray0, (int) (byte)0, 2962);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 2962);
      assertNotNull(longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[2] = (float) (byte) (-15);
      long[] longArray3 = ArrayUtils.addAll(longArray2, longArray2);
      assertNotNull(longArray3);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-15.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[0];
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-15);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte) (-15);
      intArray0[4] = 2962;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2962, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)13;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)2, (byte)13}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)3;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = (int) (byte)13;
      intArray0[5] = (int) (byte)3;
      intArray0[6] = (int) (byte)2;
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)2;
      byteArray2[1] = (byte)3;
      byteArray2[2] = (byte)2;
      byteArray2[3] = (byte)13;
      byteArray2[4] = (byte)2;
      byteArray2[5] = (byte)2;
      byte[] byteArray3 = new byte[2];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = (byte)12;
      byteArray3[1] = (byte) (-2);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray2, byteArray3);
      assertEquals(2, byteArray3.length);
      assertEquals(6, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-2)}, byteArray3);
      assertArrayEquals(new byte[] {(byte)2, (byte)3, (byte)2, (byte)13, (byte)2, (byte)2}, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)2);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(" is not in the range '0' - '9'");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[0] = (-1.0F);
      ArrayUtils.shift(floatArray0, 0, 808, 808);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray2 = new boolean[9];
      booleanArray2[5] = (boolean) boolean1;
      booleanArray2[1] = (boolean) boolean0;
      booleanArray2[3] = (boolean) boolean0;
      booleanArray2[8] = (boolean) boolean0;
      booleanArray2[5] = (boolean) boolean0;
      booleanArray2[6] = (boolean) boolean0;
      booleanArray2[7] = (boolean) boolean0;
      booleanArray2[8] = (boolean) boolean0;
      boolean[] booleanArray3 = ArrayUtils.removeElements(booleanArray2, booleanArray2);
      assertNotNull(booleanArray3);
      assertEquals(0, booleanArray3.length);
      assertEquals(9, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true, true, true, true}, booleanArray2));
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray2, booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-1);
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-74);
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte) (-1);
      boolean boolean3 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-74), (byte)92, (byte)6, (byte)1, (byte) (-12), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-74), (byte) (-12), (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2469.0F);
      floatArray0[1] = (-2469.0F);
      floatArray0[2] = 2194.0F;
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 1033);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-2469.0F);
      objectArray0[1] = (Object) (-2469.0F);
      objectArray0[2] = (Object) (-2469.0F);
      objectArray0[3] = (Object) (-2469.0F);
      objectArray0[4] = (Object) 2194.0F;
      objectArray0[5] = (Object) 2194.0F;
      objectArray0[6] = (Object) (-2469.0F);
      objectArray0[7] = (Object) (-2469.0F);
      objectArray0[8] = (Object) (-2469.0F);
      ArrayUtils.shuffle(objectArray0);
      assertEquals(9, objectArray0.length);
      
      Object[] objectArray1 = ArrayUtils.toArray(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(9, objectArray1.length);
      assertEquals(9, objectArray0.length);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = 1033;
      intArray0[2] = 1033;
      intArray0[3] = 1;
      intArray0[4] = 1033;
      intArray0[5] = 1033;
      intArray0[6] = 1033;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertArrayEquals(new int[] {4, 1033, 1033, 1, 1033, 1033, 1033}, intArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-50.0), 15);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 2901.2832F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)7036;
      shortArray0[1] = (short) (-6);
      shortArray0[2] = (short)52;
      shortArray0[3] = (short)5849;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)7036, (short) (-6), (short)52, (short)5849}, shortArray0);
      assertArrayEquals(new short[] {(short)7036, (short) (-6), (short)52, (short)5849, (short)7036, (short) (-6), (short)52, (short)5849}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-50.0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-2.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-50.0), (-2.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer integer0 = new Integer(670);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(670, (int)integer0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer1 = new Integer(492);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(492, (int)integer1);
      
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer integer2 = new Integer(492);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(492, (int)integer2);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer2);
      assertNotNull(integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1);
      
      Double[] doubleArray2 = new Double[0];
      Double[] doubleArray3 = ArrayUtils.addAll(doubleArray2, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      ArrayUtils.shift((Object[]) doubleArray3, (-1), 10, (-1));
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2154.8433F);
      floatArray0[1] = 290.54013F;
      floatArray0[2] = 2.0F;
      floatArray0[3] = (-593.79F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 3226.0F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-2154.8433F), 290.54013F, 2.0F, (-593.79F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3226.0F, (-2154.8433F), 290.54013F, 2.0F, (-593.79F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[3] = 32;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1410);
      shortArray0[2] = (short) (-437);
      shortArray0[3] = (short) (-1410);
      intArray0[8] = (int) (short) (-437);
      shortArray0[5] = (short) (-437);
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1410), (short)0, (short) (-437), (short) (-1410), (short)0, (short) (-437), (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)65);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1410);
      doubleArray0[1] = (double) (short) (-1410);
      doubleArray0[2] = (double) (short) (-437);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1410.0), (-1410.0), (-437.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1410.0), (-1410.0), (-437.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1410.0), (-1410.0), (-437.0)}, doubleArray0, 0.01);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short) (-1410);
      longArray0[1] = (long) (short) (-437);
      longArray0[2] = (long) 32;
      longArray0[3] = (long) (short) (-1410);
      longArray0[5] = (long) (byte)65;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 65L);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-1410L), (-437L), 32L, (-1410L), 0L, 65L}, longArray0);
      assertArrayEquals(new long[] {(-1410L), (-437L), 32L, (-1410L), 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift((char[]) null, (-2469));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1582L));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1582L)}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1582L);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1582L);
      doubleArray0[3] = (double) (-1582L);
      doubleArray0[4] = (double) (-1582L);
      doubleArray0[5] = (double) (-1582L);
      doubleArray0[6] = (-768.082);
      doubleArray0[1] = 737.8;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1582.0), 737.8, (-1582.0), (-1582.0), (-1582.0), (-1582.0), (-768.082), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[1] = ')';
      charArray0[2] = 'S';
      charArray0[3] = 'b';
      charArray0[4] = 'Q';
      charArray0[6] = 'w';
      charArray0[7] = 'f';
      charArray0[8] = '>';
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'b';
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'f';
      floatArray0[1] = (float) 'b';
      int int0 = ArrayUtils.indexOf(floatArray0, 98.0F, 16);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {102.0F, 98.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 124L;
      longArray0[2] = (-1260L);
      longArray0[3] = (-335L);
      longArray0[4] = 111L;
      longArray0[5] = (-3130L);
      longArray0[6] = 368L;
      longArray0[7] = (-833L);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-18);
      shortArray0[1] = (short) (byte) (-18);
      shortArray0[2] = (short) (byte) (-18);
      ArrayUtils.shift(shortArray0, (int) (short) (-18));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-18), (short) (-18), (short) (-18)}, shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-18);
      floatArray0[1] = (float) 368L;
      floatArray0[2] = (float) (short) (-18);
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) (-335L);
      floatArray0[5] = (float) (-335L);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-18.0F), 368.0F, (-18.0F), (-1.0F), (-335.0F), (-335.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-18.0F), 368.0F, (-18.0F), (-1.0F), (-335.0F), (-335.0F)}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 492);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 180);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      Object object0 = ArrayUtils.get(objectArray0, 3173);
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[3] = null;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) false;
      objectArray0[7] = (Object) false;
      objectArray0[8] = (Object) false;
      int int1 = ArrayUtils.indexOf(objectArray0, objectArray0[8]);
      assertEquals(9, objectArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-1410L);
      int int2 = ArrayUtils.lastIndexOf(longArray0, (long) 180);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1410L)}, longArray0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Float float0 = new Float(0.07738724603915031);
      assertNotNull(float0);
      assertEquals(0.07738724F, (float)float0, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)291;
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)291);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((short[]) null, (short) (-29944), 512);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      
      bitSet1.set(1584);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(1585, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(1600, bitSet1.size());
      assertEquals("{1584}", bitSet1.toString());
      
      bitSet0.or(bitSet1);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(1600, bitSet0.size());
      assertEquals(1585, bitSet0.length());
      assertEquals("{1584}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1585, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(1600, bitSet1.size());
      assertEquals("{1584}", bitSet1.toString());
      
      int int0 = bitSet0.previousClearBit((short)291);
      assertNotSame(bitSet0, bitSet1);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertEquals(1600, bitSet0.size());
      assertEquals(1585, bitSet0.length());
      assertEquals("{1584}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(291, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) float0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-319);
      longArray0[2] = 1536L;
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 3);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      Class<Long> class1 = Long.class;
      classArray0[1] = class1;
      Class<Long> class2 = Long.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = 'b';
      charArray0[5] = 'b';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'Q', '<', '<', '<', 'b', 'b'}, charArray1);
      assertArrayEquals(new char[] {'Q', '<', '<', '<', 'b', 'b'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(2398.144F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2398.144F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-42), (byte)6, (byte)6}, byteArray0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[1] = 'F';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {']', 'F'}, charArray0);
      assertFalse(boolean0);
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte) (-42);
      boolean boolean1 = ArrayUtils.isEmpty(byteArray2);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-42)}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.reverse((short[]) null);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte) (-42);
      longArray0[1] = (long) (byte)6;
      longArray0[2] = 0L;
      longArray0[3] = (long) (byte) (-42);
      longArray0[4] = (long) (byte)6;
      longArray0[5] = (long) (byte) (-42);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)6, (int) (byte) (-42));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-42L), 6L, 0L, (-42L), 6L, (-42L)}, longArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      Integer[] integerArray0 = new Integer[7];
      int int0 = 6;
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(6, (int)integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) int0);
      assertNotNull(mutableInt0);
      assertEquals(6.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(6, (int)mutableInt0.getValue());
      assertEquals(6, (int)mutableInt0.toInteger());
      assertEquals((byte)6, mutableInt0.byteValue());
      assertEquals((short)6, mutableInt0.shortValue());
      assertEquals("6", mutableInt0.toString());
      assertEquals(6, mutableInt0.intValue());
      assertEquals(6L, mutableInt0.longValue());
      assertEquals(6.0, mutableInt0.doubleValue(), 0.01);
      
      Integer integer1 = mutableInt0.getValue();
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(6.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(6, (int)mutableInt0.getValue());
      assertEquals(6, (int)mutableInt0.toInteger());
      assertEquals((byte)6, mutableInt0.byteValue());
      assertEquals((short)6, mutableInt0.shortValue());
      assertEquals("6", mutableInt0.toString());
      assertEquals(6, mutableInt0.intValue());
      assertEquals(6L, mutableInt0.longValue());
      assertEquals(6.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(6, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = mutableInt0.getValue();
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(6.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(6, (int)mutableInt0.getValue());
      assertEquals(6, (int)mutableInt0.toInteger());
      assertEquals((byte)6, mutableInt0.byteValue());
      assertEquals((short)6, mutableInt0.shortValue());
      assertEquals("6", mutableInt0.toString());
      assertEquals(6, mutableInt0.intValue());
      assertEquals(6L, mutableInt0.longValue());
      assertEquals(6.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(6, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(6, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer2));
      assertEquals(6, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(746);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals(746, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = Integer.getInteger("className");
      assertNull(integer6);
      
      integerArray0[6] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-492);
      shortArray0[1] = (short) (-2424);
      shortArray0[2] = (short) (-1578);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-900));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578), (short) (-900)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = '&';
      charArray0[2] = 'F';
      charArray0[3] = 'o';
      charArray0[4] = '!';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-91);
      byteArray0[2] = (byte)16;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)0, (byte)16, (byte) (-91), (byte)0, (byte)16}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)0, (byte)16}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray2 = new short[3];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)2607;
      shortArray2[1] = (short) (byte)16;
      shortArray2[2] = (short) (-2041);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray2, (short)1, 144);
      assertNotNull(bitSet0);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short)2607, (short)16, (short) (-2041)}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      ArrayUtils.swap(shortArray2, (int) (short) (-1578), (-2461), (int) (byte) (-91));
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short)2607, (short)16, (short) (-2041)}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1578);
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1578.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-1578);
      longArray0[1] = (long) (short) (-1578);
      longArray0[2] = (long) 0;
      longArray0[3] = 3898L;
      longArray0[4] = (long) 0;
      ArrayUtils.reverse(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 3898L, 0L, (-1578L), (-1578L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (-820L));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 3898L, 0L, (-1578L), (-1578L)}, longArray0);
      assertFalse(boolean0);
      
      float[] floatArray2 = ArrayUtils.insert((-469), floatArray1, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      Float[] floatArray3 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray3);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray3.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1578.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)5849);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 111L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (int) (short)5849);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      Float[] floatArray1 = new Float[8];
      Float float0 = new Float(1180.589F);
      assertNotNull(float0);
      assertEquals(1180.589F, (float)float0, 0.01F);
      
      floatArray1[0] = float0;
      Float float1 = new Float((double) 1180.589F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1180.589F, (float)float1, 0.01F);
      
      floatArray1[1] = float1;
      Float float2 = new Float((double) (-1));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      floatArray1[2] = float2;
      Float float3 = new Float((float) 0L);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      
      floatArray1[3] = float3;
      Float float4 = new Float((float) floatArray1[3]);
      assertNotNull(float4);
      assertEquals(8, floatArray1.length);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float4, 0.01F);
      
      floatArray1[4] = float4;
      Float float5 = new Float((-1722.8822));
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((-1722.8822F), (float)float5, 0.01F);
      
      floatArray1[5] = float5;
      Float float6 = new Float(Double.NaN);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals(Float.NaN, (float)float6, 0.01F);
      
      floatArray1[6] = float6;
      Float float7 = new Float((float) 0);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertEquals((float)float7, (float)float3, 0.01F);
      assertEquals(0.0F, (float)float7, 0.01F);
      
      floatArray1[7] = float7;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 518.3438F);
      assertNotNull(floatArray2);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertArrayEquals(new float[] {1180.589F, 1180.589F, (-1.0F), 0.0F, 0.0F, (-1722.8822F), Float.NaN, 0.0F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2.0);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = ArrayUtils.get(doubleArray0, (-606));
      assertNull(double1);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 1L;
      longArray0[2] = (long) (short)1;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 50L);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {(-1L), 1L, 1L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 1L, 1L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (-1172L);
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (float) (short)948;
      floatArray0[5] = (float) (-606);
      floatArray0[6] = (float) (-606);
      floatArray0[7] = (float) 50L;
      floatArray0[8] = (float) (short)1;
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-1172.0F), (-1.0F), 1.0F, 948.0F, (-606.0F), (-606.0F), 50.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      Long long0 = new Long((short)1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(doubleArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1791);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) true;
      objectArray0[3] = (Object) false;
      Double double0 = new Double((-1611.19696626));
      assertNotNull(double0);
      assertEquals((-1611.19696626), (double)double0, 0.01);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (-1));
      assertNull(longArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '7');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 's';
      charArray0[0] = 's';
      charArray0[3] = '2';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Double double0 = new Double(2);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      Double double1 = new Double(5034.712416977748);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(5034.712416977748, (double)double1, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 5034.712416977748);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1656.3927971;
      doubleArray2[1] = (double) '2';
      doubleArray2[2] = 5034.712416977748;
      doubleArray2[3] = 5034.712416977748;
      doubleArray2[4] = 36.0;
      doubleArray2[5] = (double) '2';
      doubleArray2[6] = 5034.712416977748;
      doubleArray2[8] = (-1438.90136603);
      int int0 = ArrayUtils.indexOf(doubleArray2, 5034.712416977748, 37, 100.0);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {1656.3927971, 50.0, 5034.712416977748, 5034.712416977748, 36.0, 50.0, 5034.712416977748, 0.0, (-1438.90136603)}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = 'F';
      charArray0[3] = 'F';
      charArray0[4] = '7';
      charArray0[5] = 'F';
      charArray0[6] = '7';
      charArray0[7] = '7';
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '7';
      doubleArray0[1] = (double) '7';
      doubleArray0[2] = (double) '7';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)6, 1629.7);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {55.0, 55.0, 55.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 54, 54);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 10;
      intArray0[1] = 1997;
      intArray0[2] = (-1140);
      intArray0[3] = 3710;
      intArray0[4] = (-3599);
      intArray0[5] = 0;
      intArray0[6] = 85;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 10);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {10, 1997, (-1140), 3710, (-3599), 0, 85}, intArray0);
      assertEquals(0, int0);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)12);
      assertNotNull(short0);
      assertEquals((short)12, (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)12}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(" is not in the range '0' - '9'");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, (Boolean) null);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      ArrayUtils.shift(floatArray0, 0, 832, 832);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.hashCode((Object) boolean0);
      assertFalse(boolean0.equals((Object)boolean2));
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'o';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 3601, 4402);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'E', 'o'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(" is not in the range '0' - '9'");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, (Boolean) null);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      ArrayUtils.shift(floatArray0, 0, 832, 832);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.hashCode((Object) boolean0);
      assertFalse(boolean0.equals((Object)boolean2));
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'o';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 3601, 4402);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'E', 'o'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      double[] doubleArray3 = ArrayUtils.addAll(doubleArray2, doubleArray0);
      assertNotNull(doubleArray3);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(14, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Float[]) null, (Float) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[5] = (byte)53;
      byteArray0[2] = (byte)0;
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'B');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)1;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) (byte)53;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = 1929.0F;
      floatArray0[4] = (float) 2128309662;
      floatArray0[5] = (float) (short)0;
      ArrayUtils.reverse(booleanArray0, (-2471), 2128309662);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Character[] characterArray1 = ArrayUtils.removeElements(characterArray0, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(0, characterArray1.length);
      assertEquals(0, characterArray0.length);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-3758);
      intArray0[1] = (-3758);
      intArray0[2] = (-3758);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-3758), (-3192));
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-3758), (-3758), (-3758)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-3758);
      objectArray0[1] = (Object) (-3758);
      objectArray0[2] = (Object) (-3758);
      objectArray0[3] = (Object) (-3758);
      objectArray0[4] = (Object) (-3758);
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(5, objectArray0.length);
      assertEquals(5, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      Object[] objectArray2 = ArrayUtils.removeElements(objectArray0, objectArray0);
      assertNotNull(objectArray2);
      assertEquals(5, objectArray0.length);
      assertEquals(0, objectArray2.length);
      assertSame(objectArray0, objectArray1);
      assertNotSame(objectArray0, objectArray2);
      assertNotSame(objectArray2, objectArray0);
      assertNotSame(objectArray2, objectArray1);
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      Float[] floatArray0 = new Float[2];
      try { 
        Float.valueOf("-6KiKF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long[] longArray0 = new long[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (short)5849);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[4] = (double) (short)5849;
      doubleArray0[5] = (double) (short)5849;
      doubleArray0[6] = (double) (short)5849;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-122);
      int int0 = ArrayUtils.indexOf(longArray0, (-1111L));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals((-1), int0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotNull(longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)5849;
      intArray0[1] = 69;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotNull(intArray1);
      assertEquals(1, intArray1.length);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {69}, intArray1);
      assertArrayEquals(new int[] {5849, 69}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = '9';
      charArray0[2] = 'r';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'r');
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'r', '9', 'r'}, charArray0);
      assertArrayEquals(new char[] {'9'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Y', 83);
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'r', '9', 'r'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.contains(floatArray1, 1.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3014;
      shortArray0[1] = (short) (-3095);
      shortArray0[2] = (short) (-122);
      shortArray0[3] = (short) (-2545);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-2656);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)3014, (short) (-3095), (short) (-122), (short) (-2545), (short) (-1), (short) (-2656)}, shortArray1);
      assertArrayEquals(new short[] {(short)3014, (short) (-3095), (short) (-122), (short) (-2545), (short) (-1), (short) (-2656)}, shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      Short[] shortArray2 = new Short[4];
      shortArray2[0] = (Short) (short) (-2545);
      shortArray2[1] = (Short) (short) (-122);
      shortArray2[2] = (Short) (short) (-2545);
      Short short0 = new Short((short)3014);
      assertNotNull(short0);
      assertEquals((short)3014, (short)short0);
      
      shortArray2[3] = short0;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2, (short)3014);
      assertNotNull(shortArray3);
      assertEquals(4, shortArray2.length);
      assertEquals(4, shortArray3.length);
      assertArrayEquals(new short[] {(short) (-2545), (short) (-122), (short) (-2545), (short)3014}, shortArray3);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[2] = 1L;
      longArray0[3] = (-2085L);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 1L;
      ArrayUtils.swap(floatArray0, (-2476), 1852);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      
      Double double0 = new Double(1516.4811941860016);
      assertNotNull(double0);
      assertEquals(1516.4811941860016, (double)double0, 0.01);
      
      Double double1 = new Double((-50.0));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-50.0), (double)double1, 0.01);
      
      Double double2 = new Double(36.0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(36.0, (double)double2, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) 1852);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1516.4811941860016;
      doubleArray1[1] = 240.0;
      doubleArray1[2] = 36.0;
      doubleArray1[3] = (double) (-2085L);
      doubleArray1[4] = (double) (-2085L);
      doubleArray1[5] = 1516.4811941860016;
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, (-1438.90136603));
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {1516.4811941860016, 240.0, 36.0, (-2085.0), (-2085.0), 1516.4811941860016}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1516.4811941860016, 240.0, 36.0, (-2085.0), (-2085.0), 1516.4811941860016}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int int0 = ArrayUtils.indexOf(doubleArray2, 0.1, (-2476), 680.819258656);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {1516.4811941860016, 240.0, 36.0, (-2085.0), (-2085.0), 1516.4811941860016}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1516.4811941860016, 240.0, 36.0, (-2085.0), (-2085.0), 1516.4811941860016}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-606));
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2.0);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = ArrayUtils.get(doubleArray0, (-606));
      assertNull(double1);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)948;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)948}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1, (short)1, (short)948}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.reverse(shortArray0, 427, 37);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)948}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      boolean boolean0 = ArrayUtils.contains(shortArray1, (short)2);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)948}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1, (short)1, (short)948}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 4);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(4, classArray1.length);
      assertEquals(4, classArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = '<';
      charArray0[2] = '0';
      charArray0[3] = 'I';
      charArray0[4] = 'F';
      charArray0[5] = 'e';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'m', '<', '0', 'I', 'F', 'e'}, charArray0);
      assertArrayEquals(new char[] {'m', '<', '0', 'I', 'F', 'e'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 2.147483647E9, 0.0, 2.147483647E9, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.147483647E9, 0.0, 2.147483647E9, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 2.147483647E9, 0.0, 2.147483647E9, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2.147483647E9, 0.0, 2.147483647E9, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      ArrayUtils.swap(doubleArray0, (int) (byte)0, (-680), 56);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.147483647E9, 0.0, 2.147483647E9, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "JbNQ(:5wQ'Oo';=+";
      String string0 = ArrayUtils.get(stringArray0, 2778, "JbNQ(:5wQ'Oo';=+");
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("JbNQ(:5wQ'Oo';=+", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 61.0);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-339);
      intArray0[1] = (-4097);
      intArray0[2] = 466;
      intArray0[3] = 1291;
      intArray0[4] = 3210;
      intArray0[5] = 1870;
      intArray0[6] = (-1798);
      intArray0[7] = 9;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {(-339), (-4097), 466, 1291, 3210, 1870, (-1798), 9}, intArray0);
      assertArrayEquals(new int[] {(-339), (-4097), 466, 1291, 3210, 1870, (-1798), 9}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      charArray0[1] = '%';
      charArray0[2] = 'C';
      charArray0[3] = '-';
      charArray0[4] = 'h';
      charArray0[5] = 'p';
      charArray0[6] = 'u';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '-');
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'v', '%', 'C', '-', 'h', 'p', 'u'}, charArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[4];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-319), 630);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) (-319));
      assertNotNull(float0);
      assertEquals((-319.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) (-319);
      floatArray1[1] = 64.5F;
      floatArray1[2] = 3251.0F;
      floatArray1[3] = (float) 630;
      floatArray1[4] = (float) 630;
      floatArray1[5] = (float) floatArray0[0];
      floatArray1[6] = (float) (-319);
      floatArray1[7] = (float) 630;
      floatArray1[8] = (float) 0;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray2.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-319.0F), 64.5F, 3251.0F, 630.0F, 630.0F, (-319.0F), (-319.0F), 630.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'm');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {''}, charArray0);
      assertArrayEquals(new char[] {'m', ''}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 630;
      intArray0[1] = 630;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-3758), (-319));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {630, 630}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-3758);
      intArray2[1] = (-3758);
      intArray2[2] = 0;
      intArray2[3] = (-319);
      intArray2[4] = (-3758);
      int[] intArray3 = ArrayUtils.removeElements(intArray2, intArray1);
      assertNotNull(intArray3);
      assertEquals(5, intArray3.length);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(5, intArray2.length);
      assertArrayEquals(new int[] {(-3758), (-3758), 0, (-319), (-3758)}, intArray3);
      assertArrayEquals(new int[] {630, 630}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-3758), (-3758), 0, (-319), (-3758)}, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Float float0 = new Float(0.07738724603915031);
      assertNotNull(float0);
      assertEquals(0.07738724F, (float)float0, 0.01F);
      
      Float float1 = new Float((-781.2180951147782));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-781.2181F), (float)float1, 0.01F);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      
      Byte byte0 = new Byte((byte)10);
      assertNotNull(byte0);
      assertEquals((byte)10, (byte)byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)10;
      shortArray0[1] = (short)115;
      shortArray0[3] = (short) (-341);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-4151));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)10, (short)115, (short)0, (short) (-341)}, shortArray0);
      assertArrayEquals(new short[] {(short)10, (short)115, (short)0, (short) (-341)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0, (int) (short)115, (int) (short) (-341));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 124L;
      longArray0[2] = (-1260L);
      longArray0[3] = (-335L);
      longArray0[4] = 111L;
      longArray0[5] = (-3130L);
      longArray0[7] = (-833L);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-18);
      shortArray0[1] = (short) (byte) (-18);
      shortArray0[2] = (short) (byte) (-18);
      ArrayUtils.shift(shortArray0, (int) (short) (-18));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-18), (short) (-18), (short) (-18)}, shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-18);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (short) (-18);
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) (-335L);
      floatArray0[5] = (float) (-335L);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-18.0F), 0.0F, (-18.0F), (-1.0F), (-335.0F), (-335.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-18.0F), 0.0F, (-18.0F), (-1.0F), (-335.0F), (-335.0F)}, floatArray0, 0.01F);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (short) (-18));
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals("{0, 1, 3}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      
      int int0 = ArrayUtils.indexOf(longArray0, (-3130L), (-1622));
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 124L, (-1260L), (-335L), 111L, (-3130L), 0L, (-833L), 0L}, longArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = 'i';
      ArrayUtils.shift(charArray0, (int) '>');
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'=', 'i', '>', '='}, charArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, (int) '>', 2);
      assertNotNull(charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)12, (-421));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)88, (byte)88}, byteArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'i';
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {105}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray3 = ArrayUtils.add(charArray1, 'R');
      assertNotNull(charArray3);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray3.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'R'}, charArray3);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Long[] longArray2 = new Long[7];
      longArray2[0] = (Long) 0L;
      longArray2[1] = (Long) 0L;
      longArray2[2] = (Long) 0L;
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray2[3] = long0;
      longArray2[4] = (Long) 0L;
      longArray2[5] = (Long) 0L;
      longArray2[6] = (Long) 0L;
      Long[] longArray3 = ArrayUtils.subarray(longArray2, (-35), (-2115));
      assertNotNull(longArray3);
      assertEquals(0, longArray3.length);
      assertEquals(7, longArray2.length);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray2, longArray3);
      assertFalse(longArray3.equals((Object)longArray2));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)25;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-20), 979);
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-1), (byte)1, (byte) (-103), (byte) (-75), (byte)25}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)1, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-1), (byte)1, (byte) (-103), (byte) (-75), (byte)25}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-44);
      intArray0[1] = (int) (byte) (-44);
      intArray0[2] = (int) (byte) (-20);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte)25;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = (int) (byte) (-75);
      intArray0[7] = (int) (byte) (-44);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1));
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-44), (-44), (-20), 25, 1, (-75), (-44)}, intArray1);
      assertArrayEquals(new int[] {(-44), (-44), (-20), (-1), 25, 1, (-75), (-44)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      String string0 = ArrayUtils.toString((Object) bitSet0);
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-1), (byte)1, (byte) (-103), (byte) (-75), (byte)25}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-1.0), (-2864.84325));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 454);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, int0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 8;
      floatArray0[2] = (float) 8;
      floatArray0[3] = (float) 8;
      floatArray0[4] = (float) 454;
      floatArray0[5] = 733.6F;
      floatArray0[6] = (float) 454;
      floatArray0[7] = (float) 8;
      floatArray0[8] = (float) 454;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(454, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 454, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = '|';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      Integer integer0 = new Integer((byte) (-44));
      assertNotNull(integer0);
      assertEquals((-44), (int)integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(2271);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2271, (int)integer1);
      
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      ArrayUtils.shift((double[]) null, 612, (int) (byte) (-44), 48);
      boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '*';
      charArray0[2] = '|';
      Double double0 = new Double((-1555.7696));
      assertNotNull(double0);
      assertEquals((-1555.7696), (double)double0, 0.01);
      
      Double double1 = new Double((-1555.7696));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1555.7696), (double)double1, 0.01);
      
      Double double2 = new Double((byte) (-44));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-44.0), (double)double2, 0.01);
      
      Double double3 = new Double((-3503.845926));
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((-3503.845926), (double)double3, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double4 = new Double(240.0);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals(240.0, (double)double4, 0.01);
      
      doubleArray0[2] = double4;
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2984.49));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1555.7696), (-1555.7696), 240.0, (-3503.845926)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, (double) doubleArray0[0]);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {(-1555.7696), (-1555.7696), 240.0, (-3503.845926)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1555.7696), 240.0, (-3503.845926)}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int int0 = ArrayUtils.indexOf(doubleArray2, (-3503.845926), (int) (byte) (-44), (double) doubleArray0[0]);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {(-1555.7696), (-1555.7696), 240.0, (-3503.845926)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1555.7696), 240.0, (-3503.845926)}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44), (byte) (-44)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[4];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-319), (-319));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) (-319));
      assertNotNull(float0);
      assertEquals((-319.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) (-319);
      floatArray1[1] = 64.5F;
      floatArray1[2] = 3251.0F;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte)57;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertNotNull(bitSet0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)42, (byte)121, (byte) (-48), (byte) (-38), (byte)121, (byte) (-1), (byte) (-1), (byte)17, (byte)57}, byteArray0);
      assertEquals(7, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{5, 6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)121;
      doubleArray0[1] = (double) (byte)17;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = 0.1;
      doubleArray0[5] = (double) (byte) (-38);
      doubleArray0[6] = (double) (byte)121;
      doubleArray0[7] = (double) (byte) (-48);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-48));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {121.0, 17.0, (-1.0), (-1.0), 0.1, (-38.0), 121.0, (-48.0)}, doubleArray0, 0.01);
      assertEquals(7, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 7;
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) 7;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {7.0F, (-1.0F), 7.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = (-887.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertEquals(15, doubleArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      Object[] objectArray0 = new Object[3];
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) (byte)1;
      longArray0[2] = (long) (byte)1;
      longArray0[3] = (long) (byte)1;
      longArray0[4] = (long) (byte)1;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      assertNotNull(bitSet0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L}, longArray0);
      assertEquals("{0, 64, 128, 192, 256}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(320, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(257, bitSet0.length());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L}, longArray0);
      assertEquals("{0, 64, 128, 192, 256}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(320, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(257, bitSet0.length());
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) (byte)1;
      objectArray0[2] = (Object) (-887.0);
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(3, objectArray1.length);
      assertEquals(3, objectArray0.length);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 0.1, 2076.27441);
      assertEquals(15, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[9];
      Object[] objectArray0 = new Object[9];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1379;
      int[] intArray3 = ArrayUtils.nullToEmpty(intArray2);
      assertNotNull(intArray3);
      assertEquals(1, intArray2.length);
      assertEquals(1, intArray3.length);
      assertArrayEquals(new int[] {1379}, intArray2);
      assertArrayEquals(new int[] {1379}, intArray3);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertSame(intArray3, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 1080, 1252, (-1488));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1488);
      doubleArray0[1] = (double) 368L;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {368.0, (-1488.0)}, doubleArray0, 0.01);
      
      MutableInt mutableInt0 = new MutableInt(13);
      assertNotNull(mutableInt0);
      assertEquals(13.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)13, mutableInt0.shortValue());
      assertEquals(13, (int)mutableInt0.getValue());
      assertEquals(13, (int)mutableInt0.toInteger());
      assertEquals((byte)13, mutableInt0.byteValue());
      assertEquals("13", mutableInt0.toString());
      assertEquals(13.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(13, mutableInt0.intValue());
      assertEquals(13L, mutableInt0.longValue());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[3], intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[14];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(14, intArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1791.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1122.264F;
      floatArray0[4] = 510.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {1791.0F, 0.0F, (-1.0F), 1122.264F, 510.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1791.0F, 0.0F, (-1.0F), 1122.264F, 510.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1122.264F;
      doubleArray0[1] = (double) 1791.0F;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 510.0F;
      doubleArray0[5] = (double) 1791.0F;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 3218, 3218);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1122.2640380859375, 1791.0, (-1.0), (-1.0), 510.0, 1791.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[] intArray0 = new int[14];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(14, intArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1791.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1122.264F;
      floatArray0[4] = 510.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {1791.0F, 0.0F, (-1.0F), 1122.264F, 510.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1791.0F, 0.0F, (-1.0F), 1122.264F, 510.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1122.264F;
      doubleArray0[1] = (double) 1791.0F;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[5] = (double) 1791.0F;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 3218, 3218);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1122.2640380859375, 1791.0, (-1.0), (-1.0), 0.0, 1791.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-492);
      shortArray0[1] = (short) (-2424);
      shortArray0[2] = (short) (-1578);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-900));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578), (short) (-900)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = '&';
      charArray0[2] = 'F';
      charArray0[3] = 'o';
      charArray0[4] = '!';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)16, (byte)16, (byte) (-91), (byte)16, (byte)16}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)16, (byte)16}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray2 = new short[3];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)2607;
      shortArray2[1] = (short) (byte)16;
      shortArray2[2] = (short) (-2041);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray2, (short)1, 144);
      assertNotNull(bitSet0);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short)2607, (short)16, (short) (-2041)}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) bitSet0);
      assertEquals(3, shortArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new short[] {(short)2607, (short)16, (short) (-2041)}, shortArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      char char0 = 'Z';
      Character character0 = Character.valueOf('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertEquals('Z', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('Z');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character1));
      assertEquals('Z', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('!');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertEquals('!', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('4');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertEquals('4', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character(char0);
      assertNotNull(character5);
      assertTrue(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character0));
      assertEquals('Z', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('b');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char0));
      assertEquals('b', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character(char0);
      assertNotNull(character7);
      assertFalse(character7.equals((Object)character3));
      assertTrue(character7.equals((Object)char0));
      assertTrue(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertTrue(character7.equals((Object)character0));
      assertTrue(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character4));
      assertTrue(character7.equals((Object)character1));
      assertEquals('Z', (char)character7);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '9');
      assertNotNull(charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', '!', '4', 'Z', 'b', '9'}, charArray0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1432);
      shortArray0[1] = (short) (-1767);
      shortArray0[2] = (short) (-299);
      shortArray0[3] = (short)98;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)396;
      shortArray0[6] = (short)645;
      shortArray0[7] = (short)2;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)2);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1432), (short) (-1767), (short)98, (short)2, (short)396, (short)645, (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1432), (short) (-1767), (short) (-299), (short)98, (short)2, (short)396, (short)645, (short)2}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2420.0F));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-417);
      shortArray0[2] = (short)2275;
      shortArray0[3] = (short)819;
      shortArray0[4] = (short) (-4913);
      shortArray0[5] = (short)89;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertArrayEquals(new short[] {(short)2, (short) (-417), (short)2275, (short)819, (short) (-4913), (short)89}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short)819);
      assertEquals((-1), int0);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray2);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray2.length);
      assertArrayEquals(new short[] {(short)2, (short) (-417), (short)2275, (short)819, (short) (-4913), (short)89}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short) (-417), (short)2275, (short)819, (short) (-4913), (short)89}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-417);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-44.0), (-1868.4116190799912));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-417.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      ArrayUtils.shift(floatArray0, 13);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '*';
      charArray0[2] = '|';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      Integer integer0 = new Integer((byte) (-44));
      assertNotNull(integer0);
      assertEquals((-44), (int)integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(2271);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2271, (int)integer1);
      
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Double double0 = new Double(2271);
      assertNotNull(double0);
      assertEquals(2271.0, (double)double0, 0.01);
      
      Double double1 = new Double((byte) (-44));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-44.0), (double)double1, 0.01);
      
      Double double2 = new Double(240.0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(240.0, (double)double2, 0.01);
      
      Double double3 = new Double((double) integerArray0[1]);
      assertNotNull(double3);
      assertEquals(8, integerArray0.length);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((-44.0), (double)double3, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double2;
      doubleArray0[2] = double2;
      doubleArray0[3] = double2;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 0.1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) integerArray0[1], (int) (byte) (-44), (double) doubleArray0[3]);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, integerArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2443);
      Character character0 = new Character('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = '*';
      ArrayUtils.shift(charArray0, (-2443));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'*', 'i'}, charArray0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '*';
      charArray1[1] = '*';
      char[] charArray2 = ArrayUtils.subarray(charArray1, (-2443), (-2443));
      assertNotNull(charArray2);
      assertEquals(2, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'*', '*'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      Boolean boolean3 = Boolean.valueOf("A blank string is not a valid number");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean("");
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      
      Boolean boolean5 = new Boolean(true);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5);
      
      boolean boolean6 = ArrayUtils.isNotEmpty((Boolean[]) null);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6);
      
      boolean boolean7 = ArrayUtils.contains(charArray2, 'w');
      assertEquals(2, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'*', '*'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean6);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(boolean7);
      
      boolean boolean8 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean8 == boolean6);
      assertFalse(boolean8 == boolean7);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-2443);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {(-2443)}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2443);
      Character character0 = new Character('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = '*';
      ArrayUtils.shift(charArray0, (-2443));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'*', 'i'}, charArray0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '*';
      charArray1[1] = '*';
      char[] charArray2 = ArrayUtils.subarray(charArray1, (-2443), (-2443));
      assertNotNull(charArray2);
      assertEquals(2, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'*', '*'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      Boolean boolean3 = Boolean.valueOf("A blank string is not a valid number");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean("");
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      
      Boolean boolean5 = new Boolean(true);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5);
      
      boolean boolean6 = ArrayUtils.isNotEmpty((Boolean[]) null);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6);
      
      boolean boolean7 = ArrayUtils.contains(charArray2, 'w');
      assertEquals(2, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'*', '*'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7 == boolean0);
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(boolean7);
      
      boolean boolean8 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean8 == boolean6);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean7);
      assertTrue(boolean8);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-89);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)52);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)18, (byte)75, (byte)82, (byte) (-30), (byte) (-94), (byte) (-89)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)18, (byte)75, (byte)82, (byte) (-30), (byte) (-94), (byte) (-89)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-492);
      shortArray0[1] = (short) (-2424);
      shortArray0[2] = (short) (-1578);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-900));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578), (short) (-900)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      charArray0[1] = '&';
      charArray0[2] = 'F';
      charArray0[3] = 'o';
      charArray0[4] = '!';
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-8548L));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2469);
      Character character0 = new Character('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '*';
      longArray0[1] = (long) (-2469);
      longArray0[2] = (long) (-2469);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {42L, (-2469L), (-2469L)}, longArray0);
      
      long[] longArray2 = ArrayUtils.removeAllOccurences(longArray0, (-1277L));
      assertNotNull(longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray2.length);
      assertArrayEquals(new long[] {42L, (-2469L), (-2469L)}, longArray0);
      assertArrayEquals(new long[] {42L, (-2469L), (-2469L)}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      
      boolean[] booleanArray1 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[1] = (long) (short) (-594);
      longArray0[2] = (long) (short) (-594);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)6;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)101);
      assertNotNull(bitSet0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91, (byte)32, (byte)91, (byte)91, (byte) (-5), (byte)91, (byte)6, (byte)91, (byte)6}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (int) (byte)6, (int) (byte)6);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, false, false, true}, booleanArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 120;
      intArray0[1] = 120;
      ArrayUtils.swap(intArray0, 120, 3358);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {120, 120}, intArray0);
      
      ArrayUtils.shift(intArray0, (-853));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {120, 120}, intArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) true;
      ArrayUtils.shift(objectArray0, 3358, 58, 5214);
      assertEquals(5, objectArray0.length);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 5214, 3777);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2143393202);
      assertNotNull(integer0);
      assertEquals(2143393202, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1771);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1771, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertNotNull(integer2);
      assertEquals(4, integerArray0.length);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(2143393202, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1771);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(1771, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = '|';
      charArray0[2] = '$';
      charArray0[5] = ' ';
      charArray0[4] = 'X';
      charArray0[5] = '(';
      charArray0[6] = '8';
      char[] charArray1 = ArrayUtils.add(charArray0, 2, 'G');
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'+', '|', '$', '\u0000', 'X', '(', '8'}, charArray0);
      assertArrayEquals(new char[] {'+', '|', 'G', '$', '\u0000', 'X', '(', '8'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Integer[] integerArray0 = new Integer[9];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '\u0000');
      assertNotNull(bitSet0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'+', '|', '$', '\u0000', 'X', '(', '8'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals("{3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '*';
      floatArray0[1] = (float) 'c';
      floatArray0[2] = (float) '*';
      floatArray0[3] = (float) 'c';
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'c';
      intArray0[2] = (int) 'c';
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      Float[] floatArray3 = ArrayUtils.toObject(floatArray2);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, Integer.MAX_VALUE);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {99, 0, 99, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {99, 0, 99, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {42.0F, 99.0F, 42.0F, 99.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.insert((-835), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(14, charArray1.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'c');
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-75);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)96, (int) (byte) (-103));
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-1), (byte)1, (byte) (-103), (byte) (-75), (byte)0}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2021, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2021, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2.0);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = ArrayUtils.get(doubleArray0, (-606));
      assertNull(double1);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-101);
      ArrayUtils.shift(byteArray0, (int) (byte) (-101), 2778, (int) (byte) (-101));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-2), (byte)117}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1431));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1431), (-10));
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1431);
      longArray0[1] = (long) (-10);
      longArray0[2] = (long) (-10);
      longArray0[3] = (long) (-1431);
      longArray0[4] = (long) (-1431);
      longArray0[5] = (long) (-1431);
      longArray0[6] = (long) (-1431);
      longArray0[7] = (long) (-1431);
      longArray0[8] = 3142L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1431L), 1);
      assertNotNull(bitSet0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-1431L), (-10L), (-10L), (-1431L), (-1431L), (-1431L), (-1431L), (-1431L), 3142L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1431);
      doubleArray0[1] = (double) (-1431L);
      doubleArray0[2] = (double) 3142L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-5059.615526), (-1431), 2224.938541);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1431.0), (-1431.0), 3142.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[16];
      Integer integer0 = new Integer(760);
      assertNotNull(integer0);
      assertEquals(760, (int)integer0);
      
      integerArray0[0] = integer0;
      byte byte0 = (byte)89;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)543;
      shortArray0[1] = (short) (byte)89;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.5;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)5849;
      shortArray0[2] = (short)5849;
      shortArray0[3] = (short)5069;
      shortArray0[4] = (short)5849;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)5849);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)5849, (short)0, (short)5849, (short)5069, (short)5849, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((char[]) null);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Short[] shortArray1 = new Short[1];
      shortArray1[0] = (Short) (short)5849;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertArrayEquals(new short[] {(short)5849}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2684L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2684L));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-2684L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.swap(booleanArray0, 51, 7, (int) (short)5849);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false}, booleanArray0));
      
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('!');
      assertNotNull(character0);
      assertEquals('!', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('1');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('1', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('1');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertEquals('1', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('O');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertEquals('O', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('i');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertEquals('i', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('l');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertEquals('l', (char)character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertArrayEquals(new char[] {'!', '1', '1', 'O', 'i', 'l'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.5;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)5849;
      shortArray0[4] = (short)5849;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)5849);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)5849, (short)0, (short)0, (short)0, (short)5849}, shortArray0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((char[]) null);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[4] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Short[] shortArray1 = new Short[1];
      shortArray1[0] = (Short) (short)5849;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray2.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)5849}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2684L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2684L));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-2684L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.swap(booleanArray0, 51, 7, (int) (short)5849);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false}, booleanArray0));
      
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('!');
      assertNotNull(character0);
      assertEquals('!', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('1');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('1', (char)character1);
      
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      Character character2 = Character.valueOf('O');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('O', (char)character2);
      
      characterArray0[3] = character2;
      Character character3 = Character.valueOf('i');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertEquals('i', (char)character3);
      
      characterArray0[4] = character3;
      Character character4 = Character.valueOf('~');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertEquals('~', (char)character4);
      
      characterArray0[5] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertArrayEquals(new char[] {'!', '1', '!', 'O', 'i', '~'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[4] = true;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = (Short) (short)5849;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)5849}, shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2684L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2684L));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-2684L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.swap(booleanArray0, 51, 7, (int) (short)5849);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('!');
      assertNotNull(character0);
      assertEquals('!', (char)character0);
      
      characterArray0[0] = character0;
      characterArray0[2] = character0;
      characterArray0[2] = character0;
      Character character1 = Character.valueOf('O');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('O', (char)character1);
      
      characterArray0[3] = character1;
      Character character2 = Character.valueOf('i');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('i', (char)character2);
      
      characterArray0[4] = character2;
      Character character3 = Character.valueOf('~');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertEquals('~', (char)character3);
      
      characterArray0[5] = character3;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)0;
      long[] longArray0 = new long[0];
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      ArrayUtils.reverse(longArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 2962);
      assertNotNull(longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)90;
      floatArray0[2] = (float) (byte) (-15);
      long[] longArray3 = bitSet0.toLongArray();
      assertNotNull(longArray3);
      assertEquals(0, longArray3.length);
      assertArrayEquals(new long[] {}, longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {90.0F, 0.0F, (-15.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-15);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-15)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-15)}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 2962;
      intArray0[2] = (int) (byte) (-15);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2962, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      short[] shortArray0 = null;
      int int0 = 465;
      short[] shortArray1 = ArrayUtils.subarray((short[]) null, 465, 465);
      assertNull(shortArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 465;
      doubleArray0[1] = (double) 465;
      doubleArray0[2] = (double) 465;
      doubleArray0[3] = (double) 465;
      doubleArray0[4] = (double) 465;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      ArrayUtils.shift(floatArray0, (-1), (-247), (-1));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray0, (-247), (-1));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2755);
      doubleArray0[1] = (double) (-247);
      doubleArray0[2] = 91.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2755.0), (-247.0), 91.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-247.0);
      objectArray0[1] = (Object) 91.0;
      objectArray0[2] = (Object) (-2755.0);
      objectArray0[3] = (Object) (-247.0);
      objectArray0[4] = (Object) 0.0F;
      objectArray0[5] = (Object) (-2755.0);
      ArrayUtils.shift(objectArray0, (-2146614923));
      assertEquals(6, objectArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)126;
      ArrayUtils.shift(byteArray0, 2146453679, 1536, (-765));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)108, (byte)62, (byte) (-63), (byte) (-1), (byte)97, (byte)126}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      ArrayUtils.shift(floatArray0, (-1), (-247), (-1));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2755), 12);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.reverse(floatArray0, (-247), (-1));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2755);
      doubleArray0[1] = (double) (-247);
      doubleArray0[2] = 91.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2755.0), (-247.0), 91.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-247.0);
      objectArray0[1] = (Object) 91.0;
      objectArray0[2] = (Object) (-2755.0);
      objectArray0[3] = (Object) (-247.0);
      objectArray0[4] = (Object) 0.0F;
      objectArray0[5] = (Object) (-2755.0);
      ArrayUtils.shift(objectArray0, (-2146614923));
      assertEquals(6, objectArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)126;
      ArrayUtils.shift(byteArray0, 2146453679, 1536, (-765));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)108, (byte)62, (byte) (-63), (byte) (-1), (byte)97, (byte)126}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) '4';
      floatArray0[2] = (float) '4';
      floatArray0[1] = (float) 'c';
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, 1);
      assertNotNull(integer2);
      assertEquals(2, integerArray0.length);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      Byte byte0 = new Byte((byte) (-87));
      assertNotNull(byte0);
      assertEquals((byte) (-87), (byte)byte0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte) (-87);
      shortArray0[2] = (short) (byte) (-87);
      shortArray0[3] = (short)115;
      shortArray0[4] = (short) (-3024);
      shortArray0[5] = (short) (-341);
      shortArray0[6] = (short) (byte) (-87);
      shortArray0[7] = (short) (byte) (-87);
      shortArray0[8] = (short) (byte) (-87);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-87));
      assertNotNull(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-87), (short) (-87), (short)115, (short) (-3024), (short) (-341), (short) (-87), (short) (-87), (short) (-87)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-87), (short) (-87), (short) (-87), (short)115, (short) (-3024), (short) (-341), (short) (-87), (short) (-87), (short) (-87)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = '9';
      charArray0[2] = 'r';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'r');
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'r', '9', 'r'}, charArray0);
      assertArrayEquals(new char[] {'9'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Y', 83);
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'r', '9', 'r'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3014;
      shortArray0[1] = (short) (-3095);
      shortArray0[2] = (short) (-122);
      shortArray0[3] = (short) (-2545);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-2656);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)3014, (short) (-3095), (short) (-122), (short) (-2545), (short) (-1), (short) (-2656)}, shortArray0);
      assertArrayEquals(new short[] {(short)3014, (short) (-3095), (short) (-122), (short) (-2545), (short) (-1), (short) (-2656)}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      Short[] shortArray2 = new Short[4];
      shortArray2[0] = (Short) (short) (-2545);
      shortArray2[1] = (Short) (short) (-122);
      shortArray2[2] = (Short) (short) (-2545);
      Short short0 = new Short((short)3014);
      assertNotNull(short0);
      assertEquals((short)3014, (short)short0);
      
      shortArray2[3] = short0;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2, (short)3014);
      assertNotNull(shortArray3);
      assertEquals(4, shortArray3.length);
      assertEquals(4, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-2545), (short) (-122), (short) (-2545), (short)3014}, shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[3] = (-2469);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2;
      floatArray0[4] = (float) (-2469);
      floatArray0[5] = (float) (-2469);
      floatArray0[7] = (float) 0;
      ArrayUtils.swap(floatArray0, (-2469), 0, (-2469));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2.0F, 0.0F, 0.0F, (-2469.0F), (-2469.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-2469);
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-323.56169007118);
      doubleArray1[1] = (double) 0;
      floatArray0[3] = (float) (-2469);
      doubleArray0[0] = (double) (-2469.0F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 0.0, (double) 2.0F);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-323.56169007118), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'O';
      charArray0[2] = 'J';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'v');
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'f', 'O', 'J'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.swap(doubleArray0, (-507), 3);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2469.0), (-2469.0), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '*';
      charArray0[3] = '*';
      ArrayUtils.reverse((boolean[]) null, 3, (-3238));
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = (Character) 'c';
      characterArray0[1] = (Character) '*';
      Character character0 = new Character('z');
      assertNotNull(character0);
      assertEquals('z', (char)character0);
      
      characterArray0[2] = character0;
      characterArray0[3] = (Character) '*';
      characterArray0[4] = (Character) '*';
      Character[] characterArray1 = ArrayUtils.removeElements(characterArray0, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(5, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '*';
      floatArray0[1] = (float) 'c';
      floatArray0[2] = (float) '|';
      ArrayUtils.shift(floatArray0, (int) characterArray0[1], 5, 10);
      assertEquals(5, characterArray0.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {42.0F, 99.0F, 124.0F}, floatArray0, 0.01F);
      assertNotSame(characterArray0, characterArray1);
      assertFalse(characterArray0.equals((Object)characterArray1));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[0] = (-2469);
      intArray0[4] = 2;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(11, intArray0.length);
      assertEquals(11, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-2469);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[7] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 2.0F, 0.0F, (-2469.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 9.35056628111297;
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)88, 0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[9];
      floatArray0[4] = (float) 0;
      longArray0[2] = (long) (byte)88;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-2469);
      longArray0[5] = (long) (-2469);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) 2;
      longArray0[8] = (long) 0;
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 88L, 0L, (-2469L), (-2469L), (-1L), 2L, 0L}, longArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2469), (-2043));
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {9.35056628111297, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, (int) (byte)88, 0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
      int[] intArray0 = new int[7];
      intArray0[0] = (-474);
      intArray0[2] = 2097;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[2] = (-628);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 2);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true, false}, booleanArray0));
      assertEquals(2, int0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-257), shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2097;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-474);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {2.0, 2.0, 100.0, 2.0, 0.0, 2097.0, (-1.0), (-474.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, 2.0, 100.0, 2.0, 0.0, 2097.0, (-1.0), (-474.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[0];
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-319);
      longArray0[2] = 1536L;
      longArray0[3] = 1L;
      longArray0[4] = (long) (-319);
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {0L, (-319L), 1536L, 1L, (-319L), 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-319L), 1536L, 1L, (-319L), 0L, 1L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      char[] charArray1 = Character.toChars((int) 'p');
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'p'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-287), (-287));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-319L), 102, (double) 1L);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean1 = ArrayUtils.isArrayIndexValid((Object[]) byteArray0, 102);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = null;
      booleanArray0[1] = null;
      booleanArray0[2] = null;
      booleanArray0[3] = null;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, booleanArray0[2]);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift((float[]) null, (-1073741824), 0, 0);
      ArrayUtils.hashCode((Object) booleanArray0[1]);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 854L;
      longArray0[1] = (-3889L);
      longArray0[2] = 0L;
      longArray0[3] = (-2147483648L);
      longArray0[4] = 1583L;
      longArray0[5] = 481L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 357L);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {854L, (-3889L), 0L, (-2147483648L), 1583L, 481L}, longArray0);
      assertArrayEquals(new long[] {854L, (-3889L), 0L, (-2147483648L), 1583L, 481L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-98);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)12);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-98)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-98)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift((float[]) null, 2, 1, 91);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 2962);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {2962L}, longArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)90;
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(2, longArray2.length);
      assertArrayEquals(new long[] {2962L}, longArray1);
      assertArrayEquals(new long[] {2962L, 2962L}, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {90.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, 1422, (int) (byte)90);
      assertNotNull(floatArray2);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {90.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[0];
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-319);
      longArray0[2] = 1536L;
      longArray0[3] = 1L;
      longArray0[4] = (long) (-319);
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {0L, (-319L), 1536L, 1L, (-319L), 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-319L), 1536L, 1L, (-319L), 0L, 1L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'p', 'p'}, charArray1);
      assertArrayEquals(new char[] {'Q', 'p', 'p'}, charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-287), (-287));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-319L), 102, (double) 1L);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-32);
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte) (-32)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte) (-32)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) (byte) (-32);
      objectArray0[5] = (Object) true;
      objectArray0[7] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 2146363416, objectArray0[0]);
      assertNull(object0);
      assertEquals(8, objectArray0.length);
      
      ArrayUtils.swap(byteArray1, 48, (int) (byte) (-32), 2146363416);
      assertEquals(0, intArray0.length);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte) (-32)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte) (-32)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 2146363416);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146363416, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      char[] charArray0 = new char[4];
      charArray0[1] = '=';
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) '>';
      floatArray0[5] = (float) '=';
      floatArray0[6] = (float) '=';
      floatArray0[7] = (float) 0;
      ArrayUtils.swap(floatArray0, 1534, 1534, 1534);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 62.0F, 0.0F, 61.0F, 61.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 61.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) '\u0000';
      doubleArray0[4] = (double) '>';
      doubleArray0[5] = (double) 0.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3.0, 827);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {61.0, 0.0, 0.0, 0.0, 62.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (-1));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 62.0F, 0.0F, 61.0F, 61.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 62.0F, 0.0F, 61.0F, 61.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.swap((long[]) null, 2, 88, 102);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      doubleArray0[3] = (double) (byte)12;
      byteArray0[3] = (byte) (-56);
      ArrayUtils.swap(byteArray0, 3475, 670, 3040);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)0, (byte) (-56)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long[] longArray0 = new long[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 120L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[0] = (-1347.08186059);
      doubleArray0[4] = (double) 120L;
      doubleArray0[5] = (double) 120L;
      doubleArray0[6] = (double) 120L;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte) (-122), (int) (byte) (-122));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-122);
      floatArray0[1] = (float) (byte) (-122);
      floatArray0[2] = (-0.4135393F);
      floatArray0[3] = (float) (short)5849;
      floatArray0[4] = (float) (byte) (-122);
      floatArray0[5] = (float) 120L;
      floatArray0[6] = (float) (byte) (-122);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-122.0F), (-122.0F), (-0.4135393F), 5849.0F, (-122.0F), 120.0F, (-122.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      ArrayUtils.shift(longArray1, (-1965), (int) (short)5849, (int) (byte) (-122));
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-122);
      intArray0[1] = (int) (byte)87;
      intArray0[2] = (int) (byte)87;
      intArray0[3] = (-3925);
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte) (-122));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-122), 87, 87, (-3925)}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '*';
      floatArray0[1] = (float) 'c';
      floatArray0[2] = (float) '*';
      floatArray0[3] = (float) 'c';
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'c';
      intArray0[1] = (-835);
      intArray0[2] = (int) 'c';
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      Float[] floatArray3 = ArrayUtils.toObject(floatArray2);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray3.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, Integer.MAX_VALUE);
      assertNotNull(intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {99, (-835), 99, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {99, (-835), 99, 0, 0, 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {42.0F, 99.0F, 42.0F, 99.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertNotNull(float0);
      assertEquals(1.5F, (float)float0, 0.01F);
      
      Float float1 = new Float(0.7);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.7F, (float)float1, 0.01F);
      
      Float float2 = new Float((-781.2180951147782));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-781.2181F), (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      floatArray0[2] = float2;
      floatArray0[3] = float0;
      floatArray0[4] = float1;
      floatArray0[5] = floatArray0[1];
      floatArray0[6] = float0;
      floatArray0[7] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1407.0F));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {1.5F, 0.7F, (-781.2181F), 1.5F, 0.7F, 0.7F, 1.5F, (-781.2181F)}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'I';
      intArray0[1] = (int) 'I';
      intArray0[2] = (int) 'I';
      intArray0[3] = (int) 'I';
      intArray0[4] = (-2146614923);
      intArray0[5] = (int) 'I';
      intArray0[6] = (-1700);
      intArray0[7] = 1;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(16, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {73, 73, 73, 73, (-2146614923), 73, (-1700), 1}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) float0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Arguments cannot both be null");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      ArrayUtils.shift((short[]) null, 73, 3363, 73);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = 0.1;
      ArrayUtils.shift((short[]) null, 1534, 1534, 2502);
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, Integer.MIN_VALUE);
      assertNull(intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '|';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = '|';
      charArray0[6] = 'U';
      charArray0[7] = '(';
      char[] charArray1 = Character.toChars((int) '(');
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'('}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = (-2085L);
      longArray0[4] = (-425L);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)948;
      shortArray0[1] = (short)948;
      shortArray0[2] = (short)948;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 427;
      floatArray0[1] = (float) (short)948;
      floatArray0[2] = (float) 1336L;
      floatArray0[3] = (float) (short)948;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 3900.5F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {427.0F, 948.0F, 1336.0F, 948.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {427.0F, 948.0F, 1336.0F, 948.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[2];
      ArrayUtils.swap(charArray0, (-1), (int) (short)948, (int) (short)948);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      float[] floatArray0 = new float[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = '/';
      charArray0[2] = 't';
      charArray0[3] = ':';
      charArray0[4] = 't';
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      charArray0[5] = 't';
      charArray0[6] = 'd';
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'t', 't', ':', 't', 't', 'd', '/'}, charArray0);
      
      ArrayUtils.shift(floatArray0, (int) 'd');
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte)92);
      assertNotNull(byte0);
      assertEquals((byte)92, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-49));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-49), (byte)byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)2);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)2, (byte)byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte) (-57));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte) (-57), (byte)byte4);
      
      byteArray0[4] = byte4;
      Byte byte5 = new Byte((byte) (-96));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertEquals((byte) (-96), (byte)byte5);
      
      byteArray0[5] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte) (-49), (byte)2, (byte) (-57), (byte) (-96)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1791.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1122.264F;
      Byte byte0 = new Byte((byte)88);
      assertNotNull(byte0);
      assertEquals((byte)88, (byte)byte0);
      
      Byte byte1 = new Byte((byte)92);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)92, (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-94));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-94), (byte)byte2);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[1] = byte2;
      byteArray0[2] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-94), (byte)88}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-887.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-887.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 4211);
      assertNull(intArray0);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-887.0)}, doubleArray0, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-887.0)}, doubleArray0, 0.01);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2469.0);
      doubleArray0[3] = 592.455296639428;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 305.01200294637;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-2469.0), 592.455296639428, (-1.0), 305.01200294637}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 9;
      intArray0[1] = 9;
      intArray0[2] = 18;
      intArray0[3] = 1338;
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {9, 9, 18, 1338}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-2469.0), 592.455296639428, (-1.0), 305.01200294637}, doubleArray0, 0.01);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) (-2469.0);
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray1.length);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray0));
      
      Double[] doubleArray3 = new Double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (Double) 305.01200294637;
      doubleArray3[1] = (Double) 305.01200294637;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray3, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[3] = (-2469);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2;
      floatArray0[4] = (float) (-2469);
      floatArray0[5] = (float) (-2469);
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      ArrayUtils.swap(floatArray0, (-2469), 0, (-2469));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2.0F, 0.0F, 0.0F, (-2469.0F), (-2469.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-2469);
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-323.56169007118);
      doubleArray1[1] = (double) 0;
      floatArray0[3] = (float) (-2469);
      doubleArray0[0] = (double) (-2469.0F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 0.0, (double) 2.0F);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-323.56169007118), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'O';
      charArray0[2] = 'J';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'v');
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'f', 'O', 'J'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.swap(doubleArray0, (-507), 3);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2469.0), (-2469.0), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[2] = (-20L);
      longArray0[3] = (-2085L);
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 0L;
      floatArray0[1] = (float) (-20L);
      ArrayUtils.swap(floatArray0, (-2476), 1852);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-20.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[14];
      Boolean boolean0 = new Boolean("java.lang.Double");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(14, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-20L);
      ArrayUtils.reverse((Object[]) booleanArray0, 1852, 1852);
      assertEquals(14, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1431));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 53);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift(byteArray0, (-1431));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils.reverse(byteArray0, 53, (-1431));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1431);
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (long) 53;
      longArray0[3] = (long) (-1431);
      longArray0[4] = (long) (-1431);
      longArray0[5] = (long) (-1431);
      longArray0[6] = (long) (byte)2;
      ArrayUtils.reverse(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {2L, (-1431L), (-1431L), (-1431L), 53L, 2L, (-1431L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1431L));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {2L, (-1431L), (-1431L), (-1431L), 53L, 2L, (-1431L)}, longArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2L;
      floatArray0[1] = (float) (-1431L);
      float[] floatArray1 = ArrayUtils.insert((int) (byte)0, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {2.0F, (-1431.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, (-1431.0F), 2.0F, (-1431.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      char char0 = 'Z';
      Character character0 = Character.valueOf('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertEquals('Z', (char)character1);
      
      characterArray0[0] = character1;
      Character character2 = Character.valueOf('Z');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character1));
      assertEquals('Z', (char)character2);
      
      characterArray0[2] = character2;
      Short short0 = new Short((short)644);
      assertNotNull(short0);
      assertEquals((short)644, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)644, object0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0, "java.lang.Character");
      assertNotNull(stringArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, stringArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1135.0;
      doubleArray0[1] = (double) (char)character1;
      doubleArray0[2] = (double) char0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) character1, (int) character1, (double) (short)644);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1135.0, 90.0, 90.0}, doubleArray0, 0.01);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character2));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-492);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.swap(shortArray0, (int) (short) (-492), (-1));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-492), (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short) (-1));
      assertNotNull(shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-492), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-492), (short)0, (short)0, (short) (-1)}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)41);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (-1), (-1883));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      ArrayUtils.swap((Object[]) null, (int) (byte) (-2), 120);
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, (int) (short) (-492), 'k');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -492, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Random.setNextRandom(89);
      Double double0 = Double.valueOf(317.002577);
      assertNotNull(double0);
      assertEquals(317.002577, (double)double0, 0.01);
      
      ArrayUtils.hashCode((Object) double0);
      int[] intArray0 = new int[5];
      intArray0[0] = 89;
      intArray0[1] = (-843);
      intArray0[2] = 89;
      intArray0[3] = 89;
      intArray0[4] = 89;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {89, (-843), 89, 89, 89}, intArray0);
      assertFalse(boolean0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1272.1986F);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 89);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {89, (-843), 89, 89, 89}, intArray0);
      assertEquals(4, int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 89;
      objectArray0[1] = (Object) (-843);
      ArrayUtils.swap(objectArray0, 89, 89);
      assertEquals(2, objectArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-843);
      longArray0[1] = 103L;
      longArray0[2] = (long) (-843);
      longArray0[3] = 1186L;
      longArray0[4] = (long) (-843);
      longArray0[5] = (long) 4;
      longArray0[6] = (long) 89;
      longArray0[7] = 956L;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 4L, (-843));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-843L), 103L, (-843L), 1186L, (-843L), 4L, 89L, 956L}, longArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 90, 16, 1);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'n';
      charArray0[2] = 'H';
      charArray0[3] = '%';
      ArrayUtils.shift(charArray0, 78, 1791, (-1673));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'q', 'n', 'H', '%'}, charArray0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '%';
      boolean boolean2 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'q', 'n', 'H', '%'}, charArray0);
      assertArrayEquals(new char[] {'%'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = 'i';
      ArrayUtils.shift(charArray0, (int) '>');
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'=', 'i', '>', '='}, charArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, (int) '>', 2);
      assertNotNull(charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.valueOf("A blank string is not a valid number");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[1] = boolean0;
      Boolean boolean1 = new Boolean("A blank string is not a valid number");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[2] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean1);
      assertNotNull(boolean2);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[3] = boolean2;
      boolean boolean3 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean3);
      
      boolean boolean4 = ArrayUtils.contains(charArray1, '1');
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertFalse(boolean4 == boolean3);
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean4);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)127);
      assertEquals((-1), int0);
      
      char[] charArray3 = new char[3];
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      
      charArray3[0] = 'i';
      charArray3[1] = '1';
      charArray3[2] = '=';
      boolean boolean5 = ArrayUtils.isSameLength(charArray2, charArray3);
      assertEquals(3, charArray3.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'i', '1', '='}, charArray3);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(charArray1.equals((Object)charArray3));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray3));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '*';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-44);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 503, (int) (byte) (-44));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44), (byte) (-44), (byte) (-44), (byte)1, (byte) (-44)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      
      char[] charArray1 = ArrayUtils.insert((int) (byte)1, charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {'c', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Map<Object, Object> map0 = ArrayUtils.toMap(classArray1);
      assertNotNull(map0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-44);
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte) (-44);
      shortArray0[3] = (short) (byte) (-44);
      shortArray0[4] = (short) (byte) (-44);
      shortArray0[5] = (short)1045;
      shortArray0[6] = (short) (byte)1;
      ArrayUtils.shift(shortArray0, 2, 3204, (int) (byte) (-44));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-44), (short)1, (short)1, (short) (-44), (short) (-44), (short) (-44), (short)1045}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)1045;
      ArrayUtils.swap(floatArray0, 62, 503, 827);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1045.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-98);
      Double double0 = new Double((byte)64);
      assertNotNull(double0);
      assertEquals(64.0, (double)double0, 0.01);
      
      Double double1 = new Double((byte) (-98));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-98.0), (double)double1, 0.01);
      
      Double double2 = new Double((-973.00344));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-973.00344), (double)double2, 0.01);
      
      Double double3 = new Double((byte) (-55));
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((-55.0), (double)double3, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)64;
      intArray0[1] = (int) (byte) (-98);
      ArrayUtils.shift(intArray0, (int) (byte)64, (-98), (-358));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {64, (-98)}, intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)291;
      shortArray0[1] = (short) (byte) (-98);
      shortArray0[2] = (short)2119;
      shortArray0[3] = (short)16757;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)2119, Integer.MAX_VALUE);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)291, (short) (-98), (short)2119, (short)16757}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Random.setNextRandom((-1898));
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 64;
      integerArray0[1] = (Integer) (-98);
      integerArray0[2] = (Integer) 64;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {64, (-98), 64}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-98);
      longArray0[1] = (long) (short)2119;
      longArray0[2] = (long) (int)integerArray0[1];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {(-98L), 2119L, (-98L)}, longArray0);
      assertArrayEquals(new long[] {(-98L), 2119L, (-98L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 76.0;
      doubleArray0[1] = (double) 64;
      doubleArray0[2] = (double) (short)291;
      doubleArray0[3] = (-973.00344);
      doubleArray0[4] = (double) (short)291;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      doubleArray0[6] = (double) (byte) (-98);
      doubleArray0[7] = (double) Integer.MAX_VALUE;
      ArrayUtils.swap(doubleArray0, (int) (short)2119, 173);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {76.0, 64.0, 291.0, (-973.00344), 291.0, 2.147483647E9, (-98.0), 2.147483647E9}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = ']';
      charArray0[3] = 'F';
      charArray0[4] = '7';
      charArray0[5] = 'F';
      charArray0[6] = '7';
      charArray0[7] = '7';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'7', '7', ']', 'F', '7', 'F', '7', '7'}, charArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[3] = (-2469);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      char[] charArray0 = new char[6];
      charArray0[1] = 'Y';
      charArray0[2] = 'o';
      charArray0[3] = '2';
      boolean boolean0 = ArrayUtils.contains(charArray0, '5');
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'Y', 'o', '2', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-2), 2146363416);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte) (-2), byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-2);
      shortArray0[1] = (short) (byte) (-2);
      shortArray0[2] = (short) (byte) (-2);
      shortArray0[4] = (short) (byte) (-2);
      shortArray0[5] = (short) (byte) (-2);
      shortArray0[6] = (short) (-662);
      ArrayUtils.swap(shortArray0, (int) (short) (-2), 2552, 1810);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2), (short) (-2), (short) (-2), (short)0, (short) (-2), (short) (-2), (short) (-662)}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte) (-2), (int) (short)0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '5';
      longArray0[1] = (long) (-2469);
      int int1 = ArrayUtils.indexOf(longArray0, (-1L), (-2469));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {53L, (-2469L)}, longArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Byte byte1 = Byte.valueOf((byte)99);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)99, (byte)byte1);
      
      Character character0 = new Character('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Object[] objectArray0 = null;
      Integer integer0 = new Integer(2181);
      assertNotNull(integer0);
      assertEquals(2181, (int)integer0);
      
      int int0 = new Integer(2181);
      assertEquals(2181, int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2181;
      longArray0[1] = (long) (-1);
      int int1 = 713;
      ArrayUtils.shift(longArray0, 2181, 2181, 713);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {2181L, (-1L)}, longArray0);
      
      Object object0 = null;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-606));
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2.0);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = ArrayUtils.get(doubleArray0, (-606));
      assertNull(double1);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)948;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)948}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1, (short)1, (short)948}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.reverse(shortArray0, (int) (short)1, 37);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)948, (short)1}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short)948);
      assertNotNull(shortArray2);
      assertEquals(4, shortArray2.length);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)948, (short)1, (short)948}, shortArray2);
      assertArrayEquals(new short[] {(short)1, (short)948, (short)1}, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-32);
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte) (-32)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte) (-32)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[24];
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) (byte) (-32);
      objectArray0[5] = (Object) true;
      objectArray0[7] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 2146363416, objectArray0[0]);
      assertNull(object0);
      assertEquals(24, objectArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-32);
      shortArray0[1] = (short) (byte) (-32);
      shortArray0[2] = (short) (-2888);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-32), 53);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-32), (short) (-32), (short) (-2888)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-32), (short) (-32), (short) (-2888)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-32);
      floatArray0[1] = (float) (byte) (-32);
      floatArray0[2] = (float) (byte) (-32);
      floatArray0[3] = (float) (byte) (-32);
      floatArray0[4] = (float) (short) (-2888);
      floatArray0[5] = (float) 2146363416;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {(-32.0F), (-32.0F), (-32.0F), (-32.0F), (-2888.0F), 2.14636339E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-60);
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte)6;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-98), (byte)64, (byte) (-60), (byte)0, (byte) (-116), (byte)70, (byte)89, (byte)6}, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-60);
      intArray0[1] = (int) (byte) (-98);
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = ']';
      charArray0[2] = '7';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'F', ']', '7'}, charArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-98), (byte)64, (byte) (-60), (byte)0, (byte) (-116), (byte)70, (byte)89, (byte)6}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[16];
      Integer integer0 = new Integer(760);
      assertNotNull(integer0);
      assertEquals(760, (int)integer0);
      
      integerArray0[0] = integer0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)543;
      shortArray0[1] = (short) (byte)89;
      shortArray0[2] = (short) (byte)89;
      shortArray0[3] = (short) (byte)89;
      shortArray0[4] = (short) (byte)89;
      shortArray0[5] = (short) (byte) (-62);
      shortArray0[6] = (short) (byte)122;
      shortArray0[7] = (short)1;
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-155), 2478);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      ArrayUtils.reverse((Object[]) stringArray0, (-451), (int) (short) (-62));
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)122;
      doubleArray0[1] = (double) (short)89;
      doubleArray0[2] = (double) (short)89;
      doubleArray0[3] = (double) (short)122;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {122.0, 89.0, 89.0, 122.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {122.0, 89.0, 89.0, 122.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      charArray0[1] = 'x';
      charArray0[2] = '?';
      charArray0[3] = 'n';
      charArray0[4] = '^';
      charArray0[5] = 'O';
      charArray0[6] = '2';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'Y');
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'_', 'x', '?', 'n', '^', 'O', '2'}, charArray0);
      assertArrayEquals(new char[] {'_', 'x', '?', 'n', '^', 'O', '2'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '\u0016';
      charArray0[2] = '|';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)1;
      int[] intArray0 = new int[2];
      byteArray0[4] = (byte) (-44);
      ArrayUtils.swap(intArray0, 1, 0, 0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      Object[] objectArray0 = new Object[0];
      Long long0 = new Long(1726L);
      assertNotNull(long0);
      assertEquals(1726L, (long)long0);
      
      Object[] objectArray1 = ArrayUtils.addFirst(objectArray0, (Object) long0);
      assertNotNull(objectArray1);
      assertEquals(0, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte) (-44));
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray1 = ArrayUtils.removeAllOccurences((char[]) null, '|');
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.5;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)5069;
      shortArray0[2] = (short)5849;
      shortArray0[3] = (short)5069;
      shortArray0[4] = (short)5849;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)5849);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)5069, (short)0, (short)5849, (short)5069, (short)5849, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((char[]) null);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[1] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Short[] shortArray1 = new Short[1];
      shortArray1[0] = (Short) (short)5069;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertArrayEquals(new short[] {(short)5069}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2684L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2684L));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-2684L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, ',', (int) (short)5849);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)1;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)120, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)120, (byte)1}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-887.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-887.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-887.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2147483647L, 36);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      Double double0 = new Double((-3744.0));
      assertNotNull(double0);
      assertEquals((-3744.0), (double)double0, 0.01);
      
      Double double1 = new Double(59.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(59.0, (double)double1, 0.01);
      
      Double double2 = new Double(3716.093634532435);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(3716.093634532435, (double)double2, 0.01);
      
      Double double3 = new Double((-3744));
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((-3744.0), (double)double3, 0.01);
      
      Double double4 = new Double(1.5);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals(1.5, (double)double4, 0.01);
      
      Double double5 = new Double((-3744.0));
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((-3744.0), (double)double5, 0.01);
      
      Double double6 = new Double(59.0);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals(59.0, (double)double6, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double4;
      doubleArray0[1] = double6;
      doubleArray0[2] = double6;
      Double double7 = new Double((-2699.0354886639));
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertEquals((-2699.0354886639), (double)double7, 0.01);
      
      doubleArray0[3] = double7;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 271.698701842291);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.5, 59.0, 59.0, (-2699.0354886639)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '[', 1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'['}, charArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'b');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'['}, charArray0);
      assertArrayEquals(new char[] {'['}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Byte byte1 = Byte.valueOf((byte)99);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)99, (byte)byte1);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Character character0 = new Character('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      boolean boolean1 = ArrayUtils.isSameType(double0, character0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(false);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      Boolean boolean4 = new Boolean(false);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)99;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte)99}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray1);
      assertNotNull(objectArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, objectArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-457L);
      doubleArray0[1] = (double) (-2085L);
      doubleArray0[2] = (double) 1L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-2085L), (double) 0L);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-457.0), (-2085.0), 1.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = '0';
      charArray0[2] = ',';
      charArray0[3] = '^';
      charArray0[4] = '\\';
      charArray0[5] = '4';
      charArray0[6] = 'm';
      charArray0[7] = 'i';
      char[] charArray1 = ArrayUtils.remove(charArray0, 2);
      assertNotNull(charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'y', '0', '^', '\\', '4', 'm', 'i'}, charArray1);
      assertArrayEquals(new char[] {'y', '0', ',', '^', '\\', '4', 'm', 'i'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-492);
      shortArray0[1] = (short) (-2424);
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-2424);
      longArray0[1] = (long) (short) (-1578);
      longArray0[2] = (long) (short) (-492);
      longArray0[3] = (long) (short) (-2424);
      longArray0[4] = 5647L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1500L);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-2424L), (-1578L), (-492L), (-2424L), 5647L}, longArray0);
      assertArrayEquals(new long[] {(-2424L), (-1578L), (-492L), (-2424L), 5647L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 124L;
      longArray0[2] = (-1260L);
      longArray0[3] = (-335L);
      longArray0[4] = 111L;
      longArray0[5] = (-3130L);
      longArray0[6] = 368L;
      longArray0[7] = (-833L);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-18);
      shortArray0[1] = (short) (byte) (-18);
      shortArray0[2] = (short) (byte) (-18);
      ArrayUtils.shift(shortArray0, (int) (short) (-18));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-18), (short) (-18), (short) (-18)}, shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-18);
      floatArray0[1] = (float) 368L;
      floatArray0[2] = (float) (short) (-18);
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) (-335L);
      floatArray0[5] = (float) (-335L);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-18.0F), 368.0F, (-18.0F), (-1.0F), (-335.0F), (-335.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-18.0F), 368.0F, (-18.0F), (-1.0F), (-335.0F), (-335.0F)}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)14, 57);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-18), (short) (-18), (short) (-18)}, shortArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(0.0);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(186.081F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(186.081F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(0.0);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) floatArray0[1]);
      assertNotNull(float5);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((float) floatArray0[0]);
      assertNotNull(float6);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals(0.0F, (float)float6, 0.01F);
      
      Float float7 = new Float((-3600.16792227363));
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertEquals((-3600.168F), (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 186.081F, 0.0F, 0.0F, 0.0F, (-3600.168F), 0.0F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(0.0);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(186.081F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(186.081F, (float)float3, 0.01F);
      
      Float float4 = new Float(0.0);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float4, 0.01F);
      
      floatArray0[4] = float0;
      Float float5 = new Float((float) floatArray0[1]);
      assertNotNull(float5);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((float) floatArray0[0]);
      assertNotNull(float6);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertEquals(0.0F, (float)float6, 0.01F);
      
      Float float7 = new Float((-3600.16792227363));
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertEquals((-3600.168F), (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-3600.168F), 0.0F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      long[] longArray0 = new long[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (short)5849);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[4] = (double) (short)5849;
      doubleArray0[5] = (double) (short)5849;
      doubleArray0[6] = (double) (short)5849;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte) (-122), (int) (byte)87);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-122);
      floatArray0[1] = (float) (byte) (-122);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (short)5849;
      floatArray0[4] = (float) (byte) (-122);
      floatArray0[5] = (float) (short)5849;
      floatArray0[6] = (float) (byte) (-122);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-122.0F), (-122.0F), 1.0F, 5849.0F, (-122.0F), 5849.0F, (-122.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      ArrayUtils.shift(longArray1, (-1965), (int) (short)5849, (int) (byte) (-122));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      long[] longArray0 = new long[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 120L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[0] = (-1347.08186059);
      doubleArray0[4] = (double) 120L;
      doubleArray0[5] = (double) 120L;
      doubleArray0[6] = (double) 120L;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte) (-122), 2492);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-122);
      floatArray0[1] = (float) (byte) (-122);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (short)5849;
      floatArray0[4] = (float) (byte) (-122);
      floatArray0[5] = (float) 120L;
      floatArray0[6] = (float) (byte) (-122);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-122.0F), (-122.0F), 1.0F, 5849.0F, (-122.0F), 120.0F, (-122.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      ArrayUtils.shift(longArray1, (-1965), (int) (short)5849, (int) (byte) (-122));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      float[] floatArray0 = new float[2];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1578);
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)76;
      longArray0[1] = (long) (short) (-1578);
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {76L, (-1578L)}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shift(shortArray0, (int) (short)76, (int) (short) (-3353), 903);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, Integer.MIN_VALUE);
      assertNull(intArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '(';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '(';
      charArray1[1] = '|';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotNull(charArray2);
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray2.length);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'(', '|'}, charArray1);
      assertArrayEquals(new char[] {'|', '|'}, charArray2);
      assertArrayEquals(new char[] {'|', '|', '|', '('}, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '(';
      characterArray0[1] = (Character) '(';
      characterArray0[2] = (Character) '|';
      Character[] characterArray1 = ArrayUtils.removeAllOccurrences(characterArray0, (Character) '|');
      assertNotNull(characterArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, 0, (byte) (-46));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-46)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short)120, (-1260));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-30)}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-1260));
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(0L);
      assertNotNull(intStream0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((int[]) null, 123, 2621);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
      int[] intArray0 = new int[7];
      intArray0[0] = (-474);
      intArray0[1] = (-646);
      intArray0[2] = 2097;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[2] = (-628);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-646), 35);
      assertNotNull(bitSet0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-474), (-646), (-628), 0, 0, (-1), 0}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-3094L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-3094L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(0);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      
      longArray0[5] = long2;
      Long long3 = new Long((-3094L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertEquals((-3094L), (long)long3);
      
      longArray0[3] = long3;
      longArray0[4] = longArray0[1];
      Long long4 = new Long((long) longArray0[0]);
      assertNotNull(long4);
      assertEquals(6, longArray0.length);
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long2));
      assertEquals(0L, (long)long4);
      
      longArray0[5] = long4;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-33), (int) (byte)39);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 124L;
      longArray0[2] = (-1260L);
      longArray0[3] = (-335L);
      longArray0[4] = 111L;
      longArray0[5] = (-3130L);
      longArray0[6] = 368L;
      longArray0[7] = (-833L);
      longArray0[8] = 1L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (-1041));
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-1L), 124L, (-1260L), (-335L), 111L, (-3130L), 368L, (-833L), 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)56, (byte)91, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)56, (byte)91, (byte) (-1)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '\u0016';
      charArray0[2] = '|';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)1;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-44);
      intArray0[1] = (-26);
      ArrayUtils.swap(intArray0, 1, (-44), (-44));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-44), (-26)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-798), 1080, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 438;
      doubleArray0[1] = (double) '>';
      doubleArray0[2] = (double) '>';
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 607);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals((-1), int0);
      
      ArrayUtils.swap(charArray0, (-572), 0, (-82));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'>', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2469.0F);
      floatArray0[1] = 427.0F;
      floatArray0[2] = 2208.991F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-2469.0F), 427.0F, 2208.991F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2551.94F;
      floatArray1[1] = 2208.991F;
      floatArray1[2] = (float) (short) (-1578);
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray1, (-2469.0F));
      assertNotNull(floatArray2);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertArrayEquals(new float[] {2551.94F, 2208.991F, (-1578.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2551.94F, 2208.991F, (-1578.0F)}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[4];
      floatArray1[0] = 2208.991F;
      doubleArray0[1] = 781.27;
      doubleArray0[2] = (double) (-1578.0F);
      doubleArray0[3] = (double) (short) (-1578);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1578.0), (-1578.0), 781.27, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(747L);
      assertNotNull(long0);
      assertEquals(747L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short) (-1578));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1578L), (long)long1);
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '`', (int) (short) (-1578));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Byte byte1 = Byte.valueOf((byte)99);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)99, (byte)byte1);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Character character0 = new Character('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      boolean boolean1 = ArrayUtils.isSameType(double0, character0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(false);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      Boolean boolean4 = new Boolean(false);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, 837);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 837, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Character character0 = new Character('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('I', (char)character1);
      
      Character[] characterArray1 = ArrayUtils.add(characterArray0, 0, character1);
      assertNotNull(characterArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character1.equals((Object)character0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      ArrayUtils.swap((Object[]) characterArray1, (-1478), 114, (-3));
      assertEquals(1, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertTrue(character0.equals((Object)character1));
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertTrue(character1.equals((Object)character0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)99;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)98);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)98, (byte)2, (byte)68, (byte)99}, byteArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)98;
      doubleArray0[1] = (double) (-3);
      doubleArray0[2] = 1030.5505;
      doubleArray0[3] = (double) (byte)99;
      doubleArray0[4] = (double) (byte)2;
      doubleArray0[5] = (double) (byte)99;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {98.0, (-3.0), 1030.5505, 99.0, 2.0, 99.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1582L));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1582L)}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1582L);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1582L);
      doubleArray0[3] = (double) (-1582L);
      doubleArray0[4] = (double) (-1582L);
      doubleArray0[5] = (double) (-1582L);
      doubleArray0[6] = (-768.082);
      doubleArray0[7] = 737.8;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1582.0), 0.0, (-1582.0), (-1582.0), (-1582.0), (-1582.0), (-768.082), 737.8}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = ')';
      charArray0[2] = 'S';
      charArray0[3] = 'b';
      charArray0[4] = 'Q';
      charArray0[5] = 'p';
      charArray0[6] = 'w';
      charArray0[7] = 'f';
      charArray0[8] = '>';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'I', ')', 'S', 'b', 'Q', 'p', 'w', 'f', '>'}, charArray1);
      assertArrayEquals(new char[] {'I', ')', 'S', 'b', 'Q', 'p', 'w', 'f', '>'}, charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'b';
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      ArrayUtils.swap(objectArray0, (-478), 2, 1780);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Integer integer0 = new Integer(2181);
      assertNotNull(integer0);
      assertEquals(2181, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.swap(booleanArray0, 1, (-1), 78);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)5849;
      shortArray0[1] = (short)12457;
      shortArray0[2] = (short)15420;
      shortArray0[3] = (short)2;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)5849, (short)12457, (short)15420, (short)2}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, 837);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-870);
      shortArray0[1] = (short) (-10);
      short short0 = (short)2;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)512;
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-10);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(837, shortArray0, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 837, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[2] = 'c';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      Integer integer0 = new Integer((byte) (-44));
      assertNotNull(integer0);
      assertEquals((-44), (int)integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(2271);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2271, (int)integer1);
      
      integerArray0[2] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[7] = integer0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer1);
      assertNotNull(integerArray1);
      assertEquals(9, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.5;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)5849;
      shortArray0[2] = (short)5849;
      shortArray0[3] = (short)5069;
      shortArray0[4] = (short)5849;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)5849);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)5849, (short)0, (short)5849, (short)5069, (short)5849, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((char[]) null);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Short[] shortArray1 = new Short[1];
      shortArray1[0] = (Short) (short)5849;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertArrayEquals(new short[] {(short)5849}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2684L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2684L));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-2684L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(399);
      assertNotNull(integer0);
      assertEquals(399, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[2] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[3] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, booleanArray0[1]);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1812.2542F;
      floatArray0[1] = (-1.0F);
      ArrayUtils.shift(floatArray0, 832, 832, 0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1812.2542F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) booleanArray0, (-3), (-3), 0);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      ArrayUtils.reverse((Object[]) booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1812.2542F;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-3);
      ArrayUtils.swap(doubleArray0, 832, (-1202));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1812.254150390625, (-1.0), (-3.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      ArrayUtils.shift(floatArray0, (-1), (-247), (-1));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray0, (-247), (-1));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2755);
      doubleArray0[2] = (double) (-1);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2755.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.insert((-1), (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)1117;
      shortArray0[2] = (short)50;
      shortArray0[3] = (short)50;
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (short)50;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short)0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 50.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 50.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 50.0F;
      objectArray0[1] = (Object) 50.0F;
      objectArray0[2] = (Object) (short)50;
      objectArray0[3] = (Object) (short)50;
      objectArray0[4] = (Object) (-1.0F);
      objectArray0[5] = (Object) 50.0F;
      ArrayUtils.shift(objectArray0, (int) (short)50, (int) (short)1117, (int) (short)50);
      assertEquals(6, objectArray0.length);
      
      long[] longArray0 = ArrayUtils.insert((-1688), (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) '>';
      longArray0[2] = (-1581L);
      longArray0[3] = 0L;
      ArrayUtils.shift(longArray0, 2);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1581L), 0L, 2L, 62L}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {(-1581L), 0L, 2L, 62L}, longArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '=');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)19;
      ArrayUtils.reverse(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)19, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '=';
      charArray0[2] = '=';
      ArrayUtils.shift(longArray0, 2);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '.');
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'.', '=', '=', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'=', '=', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.swap(longArray0, 2, 64, 568);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '=';
      doubleArray0[1] = (double) 64;
      doubleArray0[2] = (double) 64;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) '.';
      doubleArray0[5] = (double) 568;
      doubleArray0[6] = (double) 568;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1445.0334052058558), 568, 1804.33479444962);
      assertNotNull(bitSet0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {61.0, 64.0, 64.0, 0.0, 46.0, 568.0, 568.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1582L));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1582L)}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1582L);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1582L);
      doubleArray0[3] = (double) (-1582L);
      doubleArray0[4] = (double) (-1582L);
      doubleArray0[5] = (double) (-1582L);
      doubleArray0[6] = (-768.082);
      doubleArray0[7] = 737.8;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1582.0), 0.0, (-1582.0), (-1582.0), (-1582.0), (-1582.0), (-768.082), 737.8}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = ')';
      charArray0[2] = 'S';
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'I';
      objectArray0[1] = (Object) (-1582.0);
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) double0, 97);
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
      
      Double double1 = new Double(240.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(240.0, (double)double1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) double1);
      assertNotNull(bitSet0);
      assertEquals(2, objectArray0.length);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, (-1666), (-1666), (-1));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[3] = (-2469);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2;
      floatArray0[4] = (float) (-2469);
      floatArray0[5] = (float) (-2469);
      floatArray0[6] = (float) 2;
      floatArray0[7] = (float) 0;
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) double0, 2);
      assertEquals((-1), int0);
      
      Double double1 = new Double(240.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(240.0, (double)double1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) double0);
      assertNotNull(bitSet0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-2469), (-2469), (-1666));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 240.0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 240.0, 240.0, 240.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1578);
      doubleArray0[1] = (double) 0.0F;
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)76;
      longArray0[1] = (long) (short) (-1578);
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {76L, (-1578L)}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shift(shortArray0, (int) (short)76, (int) (short) (-3353), 903);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, Integer.MIN_VALUE);
      assertNull(intArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '(';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '(';
      charArray1[1] = '|';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotNull(charArray2);
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray2.length);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'(', '|'}, charArray1);
      assertArrayEquals(new char[] {'|', '|'}, charArray2);
      assertArrayEquals(new char[] {'|', '|', '|', '('}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)120;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)3303;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (short)120;
      doubleArray0[3] = (double) (short)3303;
      doubleArray0[4] = (double) (short)120;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short)120, (double) (short)120);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {3303.0, 0.0, 120.0, 3303.0, 120.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 3303.0;
      objectArray0[2] = (Object) 120.0;
      objectArray0[3] = (Object) (short)120;
      objectArray0[4] = (Object) 120.0;
      objectArray0[5] = (Object) 3303.0;
      objectArray0[6] = (Object) 0.0;
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(7, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)3303;
      longArray0[1] = (long) (short)3303;
      longArray0[2] = (long) (short)120;
      longArray0[3] = (long) (short)120;
      longArray0[4] = 1L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-4433), (-4433));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {3303L, 3303L, 120L, 120L, 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Character character0 = new Character('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      Character character1 = new Character('V');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('V', (char)character1);
      
      Character[] characterArray1 = ArrayUtils.add(characterArray0, 0, character1);
      assertNotNull(characterArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(character1.equals((Object)character0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-18);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-3734), (int) character0);
      assertNotNull(bitSet0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-18)}, shortArray0);
      assertFalse(character0.equals((Object)character1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      ArrayUtils.reverse(shortArray0, (-3575), (-3575));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-18)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '|';
      charArray0[2] = '';
      charArray0[3] = '\"';
      charArray0[4] = 'r';
      charArray0[5] = '(';
      int int0 = ArrayUtils.indexOf(charArray0, 'F', 2090970920);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'#', '|', '', '\"', 'r', '('}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'M'}, charArray0);
      assertArrayEquals(new char[] {'M', 'M'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'M';
      objectArray0[1] = (Object) 'M';
      Object object0 = ArrayUtils.get(objectArray0, 6959, (Object) null);
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) 'M';
      objectArray0[4] = (Object) 'M';
      objectArray0[5] = (Object) 'M';
      objectArray0[6] = (Object) 'M';
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[5]);
      assertEquals(7, objectArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'M';
      doubleArray0[1] = (double) 'M';
      doubleArray0[2] = (double) 6959;
      doubleArray0[3] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 6959.0, 10);
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {77.0, 77.0, 6959.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, 10, 10);
      assertNotNull(charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'M'}, charArray0);
      assertArrayEquals(new char[] {'M', 'M'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 'M';
      int int1 = ArrayUtils.indexOf(floatArray0, 10.0F);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {10.0F, 0.0F, 0.0F, 10.0F, 77.0F}, floatArray0, 0.01F);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 'M';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 77L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = '\u0016';
      charArray0[2] = '\u0016';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      byteArray0[1] = (byte)1;
      int[] intArray0 = new int[2];
      byteArray0[4] = (byte) (-44);
      ArrayUtils.swap(intArray0, (-1), 0, 0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '\u0016';
      doubleArray0[1] = (double) 'p';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)1, 0, (-2311.47689802834));
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {22.0, 112.0, 0.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      long[] longArray0 = new long[8];
      longArray0[0] = 2366L;
      longArray0[1] = (long) 'p';
      longArray0[2] = (long) '\u0016';
      longArray0[3] = (long) (byte)1;
      longArray0[4] = (long) (byte) (-44);
      longArray0[5] = (long) (byte)1;
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {2366L, 112L, 22L, 1L, (-44L), 1L, (-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 4123.515661;
      doubleArray0[2] = 2163.4;
      doubleArray0[3] = 1755.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4123.515661;
      doubleArray1[1] = 4123.515661;
      doubleArray1[2] = 1755.0;
      doubleArray1[3] = 4123.515661;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {(-1.0), 4123.515661, 2163.4, 1755.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4123.515661, 4123.515661, 1755.0, 4123.515661}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2163.4}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'w';
      ArrayUtils.shift(charArray0, (-779), 16, 2485);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'w', '[', 'a', 'a'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-779);
      intArray0[1] = (int) 'a';
      intArray0[2] = 11;
      intArray0[3] = (int) 'a';
      intArray0[4] = (int) 'w';
      intArray0[5] = (-779);
      intArray0[6] = 16;
      intArray0[7] = (int) 'a';
      MockRandom mockRandom0 = new MockRandom(97);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (java.util.Random) mockRandom0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {97, 11, 97, 119, (-779), 16, 97, (-779)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      long[] longArray0 = new long[7];
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[2] = 'w';
      charArray0[3] = '!';
      charArray0[4] = '^';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {':', '\u0000', 'w', '!', '^'}, charArray0);
      assertArrayEquals(new char[] {':', '\u0000', 'w', '!', '^', ':', '\u0000', 'w', '!', '^'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 298);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {298}, intArray0);
      
      ArrayUtils.reverse(charArray1, (-2084322363), (-2145781995));
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {':', '\u0000', 'w', '!', '^'}, charArray0);
      assertArrayEquals(new char[] {':', '\u0000', 'w', '!', '^', ':', '\u0000', 'w', '!', '^'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = 'G';
      charArray0[2] = '8';
      charArray0[3] = '[';
      charArray0[4] = '/';
      charArray0[5] = 'b';
      charArray0[6] = 'C';
      charArray0[7] = 'D';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertArrayEquals(new char[] {'>', 'G', '8', '[', '/', 'b', 'C', 'D'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '[';
      intArray0[1] = (int) '[';
      intArray0[2] = (int) '>';
      intArray0[3] = 298;
      intArray0[4] = (int) '[';
      intArray0[5] = (int) 'G';
      intArray0[6] = (int) '>';
      intArray0[7] = (int) 'b';
      intArray0[8] = (int) 'C';
      int[] intArray1 = ArrayUtils.add(intArray0, 62);
      assertNotNull(intArray1);
      assertEquals(10, intArray1.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {91, 91, 62, 298, 91, 71, 62, 98, 67, 62}, intArray1);
      assertArrayEquals(new int[] {91, 91, 62, 298, 91, 71, 62, 98, 67}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.reverse(charArray0, Integer.MAX_VALUE, (-2084322363));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'>', 'G', '8', '[', '/', 'b', 'C', 'D'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3, (int) (byte) (-43));
      assertNotNull(bitSet0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-43), (byte)3, (byte)3, (byte)3, (byte)3, (byte)3, (byte)0, (byte)0}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertEquals("{0, 2, 3, 4, 5, 6}", bitSet0.toString());
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-43), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -43, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      int[] intArray0 = new int[8];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Object[] objectArray0 = new Object[8];
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      long[] longArray0 = new long[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 120L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[0] = (-1347.08186059);
      longArray0[0] = 0L;
      doubleArray0[4] = (double) 120L;
      doubleArray0[5] = (double) 120L;
      doubleArray0[6] = (double) 120L;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-18));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)87, (byte) (-122), (byte) (-122)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)87, (byte) (-122), (byte) (-122)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)87;
      shortArray0[1] = (short) (byte) (-122);
      shortArray0[2] = (short) (byte)87;
      shortArray0[3] = (short)5849;
      byte[] byteArray2 = ArrayUtils.subarray(byteArray0, 1186, 69);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {(byte)87, (byte) (-122), (byte) (-122)}, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short)5849;
      objectArray0[1] = (Object) (byte) (-122);
      objectArray0[2] = (Object) (short)87;
      objectArray0[3] = (Object) (short)5849;
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) (short) (-122);
      objectArray0[6] = (Object) (short)87;
      objectArray0[7] = (Object) 120.0;
      ArrayUtils.swap(objectArray0, 8, (int) (byte)87);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, 2, 65);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(2, int0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2469);
      longArray0[1] = (long) 65;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 32);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-2469L), 65L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3716.093634532435;
      doubleArray0[1] = (double) (-2469);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1029.55344814549);
      doubleArray0[5] = (double) (-2469L);
      doubleArray0[6] = (-957.717871858);
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) (-2469);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-2469.0), 0.0, 0.0, (-1029.55344814549), (-2469.0), (-957.717871858), 2.0, (-2469.0), 3716.093634532435}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-39);
      byteArray1[1] = (byte) (-107);
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte)93;
      byteArray1[4] = (byte)111;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte) (-12);
      byteArray1[7] = (byte)2;
      byteArray1[8] = (byte) (-84);
      int int1 = ArrayUtils.indexOf(byteArray1, (byte)2);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-107), (byte) (-69), (byte)93, (byte)111, (byte)1, (byte) (-12), (byte)2, (byte) (-84)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(int1 == int0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 53;
      floatArray0[1] = (float) 53;
      floatArray0[2] = (float) 53;
      floatArray0[3] = (float) 53;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)20937;
      shortArray0[1] = (short)661;
      shortArray0[2] = (short)20937;
      shortArray0[3] = (short) (-2177);
      shortArray0[4] = (short) (-2482);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short) (-900);
      shortArray0[7] = (short)1;
      shortArray0[8] = (short) (-1237);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1237));
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)20937, (short)661, (short)20937, (short) (-2177), (short) (-2482), (short)2, (short) (-900), (short)1, (short) (-1237)}, shortArray0);
      assertArrayEquals(new short[] {(short)20937, (short)661, (short)20937, (short) (-2177), (short) (-2482), (short)2, (short) (-900), (short)1}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Long[] longArray0 = new Long[0];
      Long long0 = new Long(1028L);
      assertNotNull(long0);
      assertEquals(1028L, (long)long0);
      
      Long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, long0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-18));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-32);
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte) (-32)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte) (-32)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) (byte) (-32);
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) (byte) (-32);
      objectArray0[5] = (Object) true;
      objectArray0[7] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 2146363416, objectArray0[0]);
      assertNull(object0);
      assertEquals(8, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-32);
      doubleArray0[1] = (double) (byte) (-32);
      doubleArray0[2] = (double) (byte) (-32);
      doubleArray0[3] = (double) 2146363416;
      doubleArray0[4] = (double) (byte) (-32);
      doubleArray0[5] = (double) (byte) (-32);
      doubleArray0[6] = (double) (byte) (-32);
      doubleArray0[7] = (-2221.188);
      doubleArray0[8] = (-3156.0);
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-32.0));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-32.0), (-32.0), (-32.0), 2.146363416E9, (-32.0), (-32.0), (-32.0), (-2221.188), (-3156.0)}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0L);
      assertNotNull(doubleStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-798), 1080, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 438;
      doubleArray0[1] = (double) '>';
      doubleArray0[2] = (double) '>';
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) '>';
      doubleArray0[5] = (double) 438;
      doubleArray0[6] = (double) (-798);
      doubleArray0[7] = (double) 438;
      doubleArray0[8] = (double) 0L;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {438.0, 62.0, 0.0, 62.0, 438.0, (-798.0), 438.0, 0.0, 62.0}, doubleArray0, 0.01);
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) ".v%", (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 49);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, 49, 88, 2056);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[16];
      Integer integer0 = new Integer(760);
      assertNotNull(integer0);
      assertEquals(760, (int)integer0);
      
      integerArray0[0] = integer0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)89;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3066, 1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)122, (byte)89}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) integerArray0);
      assertNotNull(objectArray0);
      assertEquals(16, integerArray0.length);
      assertEquals(16, objectArray0.length);
      assertNotSame(integerArray0, objectArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 218.5495127247;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[3] = (-844.308599486678);
      doubleArray0[7] = (-94.947833473);
      doubleArray0[8] = (-811.9603960864);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 4465.934453454959, (-198));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 218.5495127247, (-844.308599486678), 0.0, 0.0, 0.0, (-94.947833473), (-811.9603960864)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-198);
      longArray0[4] = (-3000L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-198L), (-1));
      assertNotNull(bitSet0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-198L), (-3000L)}, longArray0);
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{3}", bitSet0.toString());
      
      Long[] longArray1 = new Long[5];
      longArray1[0] = (Long) (-3000L);
      longArray1[1] = (Long) (-1L);
      longArray1[2] = (Long) (-1L);
      longArray1[3] = (Long) (-1L);
      longArray1[4] = (Long) (-1L);
      Long[] longArray2 = ArrayUtils.clone(longArray1);
      assertNotNull(longArray2);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray2.length);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)36;
      shortArray0[2] = (short) (-1059);
      shortArray0[3] = (short)98;
      ArrayUtils.reverse(shortArray0, 1, (int) (short) (-1059));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)36, (short) (-1059), (short)98}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1956;
      intArray0[2] = 7;
      intArray0[3] = (-1655);
      intArray0[4] = (-51);
      intArray0[5] = (-1410);
      intArray0[6] = 862;
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 7, 'D');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-2469));
      assertNotNull(short0);
      assertEquals((short) (-2469), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2469)}, shortArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-56), (byte) (-25), (byte) (-120), (byte) (-101), (byte) (-27), (byte)10, (byte)76}, byteArray0);
      
      short[] shortArray2 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      long[] longArray0 = new long[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-1347.08186059);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[3] = (float) 0L;
      short[] shortArray0 = new short[7];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (short)0);
      assertNotNull(mutableInt0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray1, (Object) null, Integer.MAX_VALUE);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.indexOf(floatArray0, (float) (-1), (-1));
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = Byte.valueOf(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)2, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)2);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)2, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)2);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertEquals((byte)2, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)127);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertEquals((byte)127, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)0);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 1253.196038774635);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean("tZw4B,x3|r;iN~");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean("C}#MPqqF^7!");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(false);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4);
      
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5);
      
      Boolean boolean6 = Boolean.TRUE;
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6);
      
      Boolean boolean7 = new Boolean(false);
      assertNotNull(boolean7);
      assertTrue(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7);
      
      Boolean boolean8 = Boolean.TRUE;
      assertNotNull(boolean8);
      assertFalse(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean7));
      assertTrue(boolean8);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean3;
      booleanArray0[2] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)22;
      shortArray0[1] = (short)5849;
      shortArray0[2] = (short) (-2288);
      shortArray0[3] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)22, (short)5849, (short) (-2288), (short)0}, shortArray0);
      
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) boolean8, (-1));
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean7));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-18));
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-74);
      shortArray0[1] = (short) (byte) (-18);
      shortArray0[2] = (short) (byte) (-122);
      shortArray0[4] = (short) (byte) (-74);
      shortArray0[5] = (short) (byte) (-122);
      shortArray0[6] = (short) (byte) (-18);
      ArrayUtils.shift(shortArray0, (-767));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-74), (short) (-122), (short) (-18), (short) (-74), (short) (-18), (short) (-122), (short)0}, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("RNyCj9vP,;~ID1S");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("I~tj6yqX");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'x';
      charArray0[2] = '4';
      charArray0[3] = ':';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ':', (int) (short) (-122));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'n', 'x', '4', ':'}, charArray0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) boolean2, (int) (short) (-122));
      assertEquals(9, booleanArray0.length);
      assertFalse(int1 == int0);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean1));
      assertEquals(2, int1);
      
      long[] longArray0 = new long[0];
      boolean boolean4 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-18));
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-74);
      shortArray0[1] = (short) (byte) (-18);
      shortArray0[4] = (short) (byte) (-74);
      shortArray0[5] = (short) (byte) (-122);
      shortArray0[6] = (short) (byte) (-18);
      ArrayUtils.shift(shortArray0, (int) (short) (-18));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-74), (short) (-122), (short) (-18), (short) (-74), (short) (-18), (short)0, (short)0}, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("RNyCj9vP,;~ID1S");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("I~tj6yqX");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'x';
      charArray0[2] = '4';
      charArray0[3] = ':';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ':', (int) (short)0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'n', 'x', '4', ':'}, charArray0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) boolean2, (int) (short) (-122));
      assertEquals(9, booleanArray0.length);
      assertFalse(int1 == int0);
      assertFalse(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertEquals(2, int1);
      
      long[] longArray0 = new long[0];
      boolean boolean4 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)5849;
      shortArray0[2] = (short)5849;
      shortArray0[4] = (short)5849;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)5849);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)5849, (short)0, (short)5849, (short)0, (short)5849, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((char[]) null);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Short[] shortArray1 = new Short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      long[] longArray0 = new long[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (short)5849);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[4] = (double) (short)5849;
      doubleArray0[6] = (double) (short)5849;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte) (-122), (int) (byte)87);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-122);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (short)5849;
      floatArray0[5] = (float) (short)5849;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-122.0F), 0.0F, 1.0F, 5849.0F, 0.0F, 5849.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[0] = (-2469);
      intArray0[1] = 0;
      intArray0[4] = 2;
      intArray0[3] = 32;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(11, intArray0.length);
      assertEquals(11, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 32;
      floatArray0[3] = (float) (-2469);
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) 0;
      floatArray0[7] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 2.0F, 32.0F, (-2469.0F), 32.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) (-2469);
      longArray0[3] = (long) 32;
      longArray0[4] = (long) 0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-2469));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {0L, (-2469L), 0L, 32L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-2469L), 0L, (-2469L), 0L, 32L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-2469), (-2469), 2048);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-2469L), 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2.0F, 32.0F, (-2469.0F), 32.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[22];
      charArray0[0] = '1';
      ArrayUtils.swap(charArray0, 287, 1224, 100);
      assertEquals(22, charArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)345;
      shortArray0[2] = (short) (-1919);
      shortArray0[3] = (short)1592;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-726);
      shortArray0[6] = (short)641;
      shortArray0[7] = (short)65;
      shortArray0[8] = (short) (-1);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)345, (short) (-1919), (short)1592, (short) (-1), (short) (-726), (short)641, (short)65, (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)345, (short) (-1919), (short)1592, (short) (-1), (short) (-726), (short)641, (short)65, (short) (-1)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'c';
      longArray0[1] = (long) 'c';
      longArray0[2] = (-3361L);
      longArray0[3] = 63L;
      longArray0[4] = (-2147483648L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 63L);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {99L, 99L, (-3361L), 63L, (-2147483648L)}, longArray0);
      assertArrayEquals(new long[] {99L, 99L, (-3361L), (-2147483648L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'c');
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'c', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2147483648L);
      doubleArray0[1] = (double) 63L;
      doubleArray0[2] = (double) (-3361L);
      doubleArray0[3] = (double) (-2147483648L);
      doubleArray0[4] = (double) 99L;
      doubleArray0[5] = (double) 'c';
      doubleArray0[6] = (double) 'c';
      doubleArray0[7] = (double) 63L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-4301.0), (-1761));
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-2.147483648E9), 63.0, (-3361.0), (-2.147483648E9), 99.0, 99.0, 99.0, 63.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.reverse((short[]) null, 136, (-874));
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1578);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 1526.1F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1578.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (-1436), (Object) null);
      assertNull(object1);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, 845, (-335), 845);
      assertEquals(1, objectArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 845);
      assertNull(intArray0);
      
      ArrayUtils.shift(objectArray0, 1, (-1920), (-2374));
      assertEquals(1, objectArray0.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-335);
      floatArray0[1] = (float) 845;
      floatArray0[2] = (float) (-1436);
      floatArray0[3] = (-2194.6423F);
      floatArray0[4] = (float) (-445);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-445.0F), (-445));
      assertNotNull(bitSet0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-335.0F), 845.0F, (-1436.0F), (-2194.6423F), (-445.0F)}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1791);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) true;
      objectArray0[3] = (Object) false;
      Double double0 = new Double((-1611.19696626));
      assertNotNull(double0);
      assertEquals((-1611.19696626), (double)double0, 0.01);
      
      Object object0 = ArrayUtils.get(objectArray0, (-3065), (Object) double0);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertEquals((-1611.19696626), object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) true;
      ArrayUtils.shift(objectArray0, 845, (-335), (-3065));
      assertEquals(6, objectArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 1);
      assertNull(intArray0);
      
      ArrayUtils.shift(objectArray0, (-445), 1, (-1));
      assertEquals(6, objectArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1611.19696626);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1611.19696626)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-445);
      floatArray0[1] = (float) 1791;
      floatArray0[2] = (float) (-445);
      floatArray0[3] = (-1443.1F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2194.6423F), (-335));
      assertNotNull(bitSet0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-445.0F), 1791.0F, (-445.0F), (-1443.1F)}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)120;
      shortArray0[1] = (short)3303;
      shortArray0[2] = (short)91;
      shortArray0[3] = (short) (-1939);
      shortArray0[4] = (short)97;
      shortArray0[5] = (short) (-3353);
      shortArray0[6] = (short)48;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)120, (short)3303, (short)91, (short) (-1939), (short)97, (short) (-3353), (short)48}, shortArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)120;
      longArray0[1] = (long) (short)120;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {120L, 120L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shift(shortArray0, (int) (short)91, (-299), (-1167));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)120, (short)3303, (short)91, (short) (-1939), (short)97, (short) (-3353), (short)48}, shortArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-1939);
      floatArray0[1] = (float) (short)3303;
      floatArray0[2] = (float) (short)3303;
      floatArray0[3] = (float) (short)91;
      floatArray0[4] = (float) (short)3303;
      floatArray0[5] = (float) (short)120;
      floatArray0[6] = (float) (short)3303;
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 14);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (short)91);
      assertNotNull(bitSet0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = 't';
      charArray0[2] = '[';
      charArray0[3] = 'q';
      charArray0[4] = 'B';
      charArray0[5] = '$';
      int int0 = ArrayUtils.indexOf(charArray0, 'p');
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'*', 't', '[', 'q', 'B', '$'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[2] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[2] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, booleanArray0[1]);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[3];
      charArray0[2] = 'e';
      ArrayUtils.shift(charArray0, (-330));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'e'}, charArray0);
      
      int[] intArray0 = new int[0];
      boolean[] booleanArray2 = new boolean[6];
      booleanArray2[0] = (boolean) boolean0;
      booleanArray2[1] = (boolean) boolean0;
      booleanArray2[2] = (boolean) boolean0;
      booleanArray2[3] = (boolean) boolean0;
      booleanArray2[4] = (boolean) boolean0;
      booleanArray2[5] = (boolean) boolean0;
      int int0 = ArrayUtils.indexOf(booleanArray2, false, (-330));
      assertEquals(6, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray2));
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((Object[]) booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[3] = 32;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1410);
      shortArray0[2] = (short) (-437);
      shortArray0[3] = (short) (-1410);
      intArray0[8] = (int) (short) (-437);
      shortArray0[5] = (short) (-437);
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1410), (short)0, (short) (-437), (short) (-1410), (short)0, (short) (-437), (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)65);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1410);
      doubleArray0[1] = (double) (short) (-1410);
      doubleArray0[2] = (double) (short) (-437);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1410.0), (-1410.0), (-437.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1410.0), (-1410.0), (-437.0), (-1410.0), (-1410.0), (-437.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1410.0), (-1410.0), (-437.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-20.706472F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1578);
      doubleArray0[1] = (double) (-20.706472F);
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)76;
      longArray0[1] = (long) (short) (-1578);
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {76L, (-1578L)}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shift(shortArray0, (int) (short)76, (int) (short) (-3353), 903);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, Integer.MIN_VALUE);
      assertNull(intArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '(';
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '(';
      charArray1[1] = '|';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotNull(charArray2);
      assertEquals(6, charArray1.length);
      assertEquals(2, charArray2.length);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'(', '|', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'|', '|'}, charArray2);
      assertArrayEquals(new char[] {'|', '|', '|', '('}, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)120;
      shortArray0[1] = (short)3303;
      shortArray0[2] = (short)91;
      shortArray0[3] = (short) (-1939);
      shortArray0[4] = (short)76;
      shortArray0[5] = (short) (-3353);
      shortArray0[6] = (short)843;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)120, (short)3303, (short)91, (short) (-1939), (short)76, (short) (-3353), (short)843}, shortArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)120;
      longArray0[1] = (long) (short)120;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {120L, 120L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shift(shortArray0, (int) (short)91, (-299), (-1167));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)120, (short)3303, (short)91, (short) (-1939), (short)76, (short) (-3353), (short)843}, shortArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-1939);
      floatArray0[1] = (float) (short)3303;
      floatArray0[2] = (float) (short)3303;
      floatArray0[3] = (float) (short)91;
      floatArray0[4] = (float) (short)3303;
      floatArray0[5] = (float) (short)120;
      floatArray0[6] = (float) (short)3303;
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 14);
      assertNull(intArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '(';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'|', '('}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '*';
      charArray0[3] = '*';
      charArray0[4] = 'Q';
      charArray0[5] = '?';
      charArray0[6] = '%';
      ArrayUtils.reverse(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '%', '?', 'Q', '*', '\u0000', '*', 'c'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(boolean0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'c';
      longArray0[1] = (long) 'Q';
      longArray0[2] = 1L;
      longArray0[4] = (long) '\u0000';
      longArray0[5] = (long) '\u0000';
      longArray0[6] = (-2684L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2112L));
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {99L, 81L, 1L, 0L, 0L, 0L, (-2684L)}, longArray1);
      assertArrayEquals(new long[] {99L, 81L, 1L, 0L, 0L, 0L, (-2684L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.swap(shortArray1, 4515, 89);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) 89);
      assertNotNull(float0);
      assertEquals(89.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) 81L);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(81.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 4515);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(4515.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[2] = (-20L);
      longArray0[3] = (-2085L);
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 0L;
      floatArray0[1] = (float) (-20L);
      floatArray0[2] = (float) (-20L);
      ArrayUtils.swap(floatArray0, (-2476), 1852);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-20.0F), (-20.0F), 0.0F}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[14];
      Boolean boolean0 = new Boolean("java.lang.Double");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(14, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-20L);
      ArrayUtils.reverse((Object[]) booleanArray0, 1852, 1852);
      assertEquals(14, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray1, 1852);
      assertEquals(14, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[2] = 1L;
      longArray0[3] = (-2085L);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 1L;
      ArrayUtils.swap(floatArray0, (-2469), 1852);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean("java.lang.Double");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean3 = ArrayUtils.isEmpty(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 2147483647L);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2;
      Boolean boolean0 = new Boolean("nl>B=3vp.JCd?d");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      ArrayUtils.reverse((Object[]) booleanArray0, 7549, (-1));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      long[] longArray0 = new long[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[2] = (-1347.08186059);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[6] = (double) (short)5849;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (short)5849;
      floatArray0[2] = (float) (short)5849;
      floatArray0[3] = (float) 0L;
      floatArray0[5] = (float) (short)5849;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)5849;
      shortArray0[1] = (short)5849;
      shortArray0[2] = (short)5849;
      shortArray0[3] = (short)5849;
      shortArray0[4] = (short)5849;
      shortArray0[5] = (short)5849;
      shortArray0[6] = (short)5849;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)5849, (short)5849, (short)5849, (short)5849, (short)5849, (short)5849, (short)5849}, shortArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (short)5849);
      assertNotNull(mutableInt0);
      assertEquals((short)5849, mutableInt0.shortValue());
      assertEquals(5849.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(5849, mutableInt0.intValue());
      assertEquals(5849L, mutableInt0.longValue());
      assertEquals("5849", mutableInt0.toString());
      assertEquals(5849.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-39), mutableInt0.byteValue());
      assertEquals(5849, (int)mutableInt0.getValue());
      assertEquals(5849, (int)mutableInt0.toInteger());
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray1, (Object) null, Integer.MAX_VALUE);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)5849, (short)5849, (short)5849, (short)5849, (short)5849, (short)5849, (short)5849}, shortArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((int[]) null, (int) (short)5849);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {5849.0, 0.0, (-1347.08186059), 0.0, 0.0, 0.0, 5849.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) 2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) 2.0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      long[] longArray0 = new long[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[2] = (-1347.08186059);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[6] = (double) (short)5849;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (short)5849;
      floatArray0[2] = (float) (short)5849;
      floatArray0[3] = (float) 0L;
      floatArray0[5] = (float) (short)5849;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)5849;
      shortArray0[1] = (short)5849;
      shortArray0[2] = (short)5849;
      shortArray0[3] = (short)5849;
      shortArray0[4] = (short)5849;
      shortArray0[5] = (short)5849;
      shortArray0[6] = (short)5849;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)5849, (short)5849, (short)5849, (short)5849, (short)5849, (short)5849, (short)5849}, shortArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (short)5849);
      assertNotNull(mutableInt0);
      assertEquals(5849, mutableInt0.intValue());
      assertEquals(5849.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-39), mutableInt0.byteValue());
      assertEquals((short)5849, mutableInt0.shortValue());
      assertEquals(5849, (int)mutableInt0.toInteger());
      assertEquals("5849", mutableInt0.toString());
      assertEquals(5849, (int)mutableInt0.getValue());
      assertEquals(5849L, mutableInt0.longValue());
      assertEquals(5849.0, mutableInt0.doubleValue(), 0.01);
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray1, (Object) null, Integer.MAX_VALUE);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)5849, (short)5849, (short)5849, (short)5849, (short)5849, (short)5849, (short)5849}, shortArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((int[]) null, (int) (short)5849);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray1);
      assertNotNull(objectArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, objectArray0.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)5849, (short)5849, (short)5849, (short)5849, (short)5849, (short)5849, (short)5849}, shortArray0);
      assertSame(shortArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[3] = 32;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1410);
      shortArray0[2] = (short) (-437);
      shortArray0[3] = (short) (-1410);
      intArray0[8] = (int) (short) (-437);
      shortArray0[5] = (short) (-437);
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1410), (short)0, (short) (-437), (short) (-1410), (short)0, (short) (-437), (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)65);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1410);
      doubleArray0[1] = (double) (short) (-1410);
      doubleArray0[2] = (double) (short) (-437);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1410.0), (-1410.0), (-437.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1410.0), (-1410.0), (-437.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1410.0), (-1410.0), (-437.0)}, doubleArray0, 0.01);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short) (-1410);
      longArray0[1] = (long) (short) (-437);
      longArray0[2] = (long) 32;
      longArray0[3] = (long) (short) (-1410);
      longArray0[4] = (long) (-437);
      longArray0[5] = (long) (byte)65;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 65L);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-1410L), (-437L), 32L, (-1410L), (-437L), 65L}, longArray0);
      assertArrayEquals(new long[] {(-1410L), (-437L), 32L, (-1410L), (-437L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int int1 = ArrayUtils.hashCode((Object) double0);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 506, 2146363416, (-1));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = 'S';
      charArray0[2] = '3';
      charArray0[3] = 'j';
      charArray0[4] = '7';
      charArray0[5] = 'H';
      charArray0[6] = 'c';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'T');
      assertNotNull(charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\'', 'S', '3', 'j', '7', 'H', 'c'}, charArray1);
      assertArrayEquals(new char[] {'\'', 'S', '3', 'j', '7', 'H', 'c'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)14);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)17, (byte)17}, byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)17}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) '7';
      Object[] objectArray1 = new Object[8];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertNotNull(object0);
      assertEquals(2, objectArray0.length);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals('7', object0);
      
      objectArray1[0] = object0;
      objectArray1[1] = (Object) true;
      objectArray1[2] = (Object) double0;
      objectArray1[3] = (Object) double0;
      objectArray1[4] = (Object) (byte)17;
      Object object1 = ArrayUtils.get(objectArray1, (int) 17);
      assertNull(object1);
      assertEquals(8, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[5] = null;
      objectArray1[6] = (Object) 'S';
      objectArray1[7] = (Object) (byte)17;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-397), objectArray0, objectArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -397, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      Double double0 = new Double((-3744.0));
      assertNotNull(double0);
      assertEquals((-3744.0), (double)double0, 0.01);
      
      Double double1 = new Double(59.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(59.0, (double)double1, 0.01);
      
      Double double2 = new Double(3716.093634532435);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(3716.093634532435, (double)double2, 0.01);
      
      Double double3 = new Double((-3744));
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((-3744.0), (double)double3, 0.01);
      
      Double double4 = new Double(1.5);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals(1.5, (double)double4, 0.01);
      
      Double double5 = new Double((-3744.0));
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((-3744.0), (double)double5, 0.01);
      
      Double double6 = new Double(59.0);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals(59.0, (double)double6, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double4;
      doubleArray0[1] = double6;
      doubleArray0[2] = double6;
      Double double7 = new Double((-2699.0354886639));
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertEquals((-2699.0354886639), (double)double7, 0.01);
      
      doubleArray0[3] = double7;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 271.698701842291);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.5, 59.0, 59.0, (-2699.0354886639)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '[', 1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'b');
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = ')';
      charArray0[2] = 'p';
      charArray0[3] = 'v';
      charArray0[4] = 'y';
      charArray0[5] = 'L';
      charArray0[6] = 'k';
      charArray0[7] = 'O';
      charArray0[8] = '{';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertArrayEquals(new char[] {'s', ')', 'p', 'v', 'y', 'L', 'k', 'O', '{'}, charArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'v';
      intArray0[1] = (int) ')';
      intArray0[2] = (int) 'p';
      intArray0[3] = (int) '{';
      intArray0[4] = (int) 'L';
      intArray0[5] = (int) 'L';
      intArray0[6] = (int) 'L';
      intArray0[7] = (int) 'L';
      intArray0[8] = (int) ')';
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {118, 41, 112, 123, 76, 76, 76, 76, 41}, intArray1);
      assertArrayEquals(new int[] {118, 41, 112, 123, 76, 76, 76, 76, 41}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (int) ')';
      intArray2[1] = (int) 'y';
      intArray2[2] = (int) 'p';
      intArray2[3] = (int) 'L';
      intArray2[4] = (int) 'p';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 121, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      int[] intArray0 = new int[14];
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)51;
      shortArray0[1] = (short) (-1842);
      shortArray0[2] = (short) (-665);
      shortArray0[3] = (short) (-62);
      shortArray0[4] = (short) (-1163);
      shortArray0[5] = (short)1955;
      shortArray0[6] = (short)4154;
      shortArray0[7] = (short)84;
      shortArray0[8] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)51, (short) (-1842), (short) (-665), (short) (-62), (short) (-1163), (short)1955, (short)4154, (short)84, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-1842);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1842L)}, longArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[3] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1237.2790971243);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(1237.2790971243, (double)double3, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2176);
      shortArray0[1] = (short)291;
      shortArray0[2] = (short)16757;
      shortArray0[3] = (short)2119;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)291, 2036);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2176), (short)291, (short)16757, (short)2119}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Random.setNextRandom((short)16757);
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[3] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1237.2790971243);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(1237.2790971243, (double)double3, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1337);
      intArray0[2] = (-1337);
      intArray0[3] = 0;
      ArrayUtils.shift(intArray0, 2, (-8), 2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-1337), (-1337), 0}, intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2176);
      shortArray0[1] = (short)291;
      shortArray0[2] = (short)16757;
      shortArray0[3] = (short)2119;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)291, 2036);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-2176), (short)291, (short)16757, (short)2119}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Random.setNextRandom((short)16757);
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Character character0 = new Character('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('I', (char)character1);
      
      Character[] characterArray1 = ArrayUtils.add(characterArray0, 0, character1);
      assertNotNull(characterArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character1.equals((Object)character0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = (char) character0;
      charArray0[2] = 'I';
      charArray0[3] = (char) character0;
      charArray0[4] = 'I';
      charArray0[5] = 'Y';
      charArray0[6] = 'I';
      charArray0[7] = 'I';
      charArray0[8] = (char) character0;
      ArrayUtils.swap(charArray0, 0, (-1225), (int) character0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'I', 'I', 'I', 'I', 'I', 'Y', 'I', 'I', 'I'}, charArray0);
      assertTrue(character0.equals((Object)character1));
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 15.374096378633341;
      doubleArray0[0] = 0.0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)125;
      byte byte0 = (byte) (-5);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)1;
      byte byte1 = (byte)2;
      byteArray0[4] = (byte)2;
      int int0 = 2630;
      int int1 = (-2346);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2630, (-2346));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-106), (byte)125, (byte) (-5), (byte)1, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Class<MutableInt>[] classArray0 = (Class<MutableInt>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      
      char[] charArray0 = new char[1];
      char char0 = '}';
      charArray0[0] = '}';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 854.0F;
      floatArray0[1] = (-246.50766F);
      floatArray0[2] = 1812.2542F;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-3987);
      shortArray0[1] = (short)18688;
      shortArray0[2] = (short)1975;
      shortArray0[3] = (short) (-3011);
      shortArray0[4] = (short)18688;
      shortArray0[5] = (short) (-779);
      shortArray0[6] = (short)18688;
      shortArray0[7] = (short) (-1653);
      shortArray0[8] = (short) (-1836);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3987), (short)18688, (short)1975, (short) (-3011), (short)18688, (short) (-779), (short)18688, (short) (-1653), (short) (-1836)}, shortArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'K';
      charArray0[2] = 'e';
      charArray0[3] = 'G';
      charArray0[4] = '=';
      charArray0[5] = 'O';
      charArray0[6] = 'y';
      charArray0[7] = 'X';
      charArray0[8] = 'd';
      int int0 = ArrayUtils.indexOf(charArray0, 'O', (int) (short) (-779));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'j', 'K', 'e', 'G', '=', 'O', 'y', 'X', 'd'}, charArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[0] = (-2469);
      intArray0[1] = 0;
      intArray0[4] = 0;
      intArray0[3] = 32;
      intArray0[4] = (-15);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(11, intArray0.length);
      assertEquals(11, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[3] = (float) (-2469);
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) 0;
      floatArray0[7] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-2469.0F), 32.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, (-298), 32);
      assertNotNull(intArray2);
      assertEquals(11, intArray0.length);
      assertEquals(11, intArray1.length);
      assertEquals(11, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-2469.0F), 32.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      ArrayUtils.swap(floatArray0, (-155), 1471, 1783);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-2469.0F), 32.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, Integer.MAX_VALUE);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-779), shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Integer integer0 = new Integer(1543);
      assertNotNull(integer0);
      assertEquals(1543, (int)integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1543, 1543, 1543}, intArray0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      char[] charArray0 = new char[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 2.147483647E9, 0.0, 2.147483647E9, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[1];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ArrayUtils.shift(byteArray0, 2048, (int) (byte)0, 2502);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) (byte)0, (int) (byte)0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 2.147483647E9, 0.0, 2.147483647E9, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.147483647E9, 0.0, 2.147483647E9, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(4, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertNotNull(integer2);
      assertEquals(4, integerArray0.length);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((byte)0);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Character character0 = new Character('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1493.0);
      doubleArray0[1] = (-2627.740283);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 61.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.7;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.7, 0.0, 61.0, 0.0, (-2627.740283), (-1493.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)90;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte)122, (byte)90}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-52);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)101);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-104), (byte)101, (byte) (-1), (byte)69, (byte) (-52)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-104), (byte) (-1), (byte)69, (byte) (-52)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)69;
      intArray0[1] = (int) (byte) (-52);
      intArray0[2] = (int) (byte)101;
      intArray0[3] = (int) (byte)101;
      intArray0[4] = (int) (byte)69;
      intArray0[5] = (int) (byte)101;
      intArray0[6] = (int) (byte)101;
      intArray0[7] = (int) (byte)101;
      intArray0[8] = (int) (byte)101;
      int int0 = ArrayUtils.indexOf(intArray0, 69);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {69, (-52), 101, 101, 69, 101, 101, 101, 101}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)11;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (int) (short)11);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)11}, shortArray0);
      assertArrayEquals(new short[] {(short)11}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 854.0F;
      floatArray0[1] = (-246.50766F);
      floatArray0[2] = 1812.2542F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-233.69F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {854.0F, (-246.50766F), 1812.2542F, 0.0F, (-233.69F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {854.0F, (-246.50766F), 1812.2542F, 0.0F, (-233.69F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {854.0F, (-246.50766F), 1812.2542F, 0.0F, (-233.69F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-155);
      intArray0[1] = 966;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-155), 966}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0);
      assertNotNull(stringArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      boolean[] booleanArray2 = new boolean[1];
      booleanArray2[0] = true;
      boolean[] booleanArray3 = ArrayUtils.addFirst(booleanArray2, false);
      assertNotNull(booleanArray3);
      assertEquals(2, booleanArray3.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray2, booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      Float[] floatArray2 = new Float[3];
      floatArray2[0] = (Float) 1812.2542F;
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray2[1] = float0;
      floatArray2[2] = (Float) 854.0F;
      Float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray2);
      assertNotNull(floatArray3);
      assertEquals(3, floatArray2.length);
      assertEquals(3, floatArray3.length);
      assertSame(floatArray2, floatArray3);
      assertSame(floatArray3, floatArray2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-233.69F);
      doubleArray0[1] = (double) 854.0F;
      doubleArray0[2] = (double) 1471;
      ArrayUtils.swap(doubleArray0, (-155), (-155), 966);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-233.69000244140625), 854.0, 1471.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) floatArray2[2], 1471, (double) (-155));
      assertNotNull(bitSet0);
      assertEquals(3, floatArray2.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-233.69000244140625), 854.0, 1471.0}, doubleArray0, 0.01);
      assertSame(floatArray2, floatArray3);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2001.874056769;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2513.02425);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2001.874056769, 0.0, (-2513.02425)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)55);
      assertNotNull(byte0);
      assertEquals((byte)55, (byte)byte0);
      
      Byte byte1 = Byte.valueOf((byte)99);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)99, (byte)byte1);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Character character0 = new Character('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      boolean boolean1 = ArrayUtils.isSameType(double0, character0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(false);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      Boolean boolean4 = new Boolean(false);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[3] = (-2469);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      char[] charArray0 = new char[6];
      charArray0[1] = 'Y';
      charArray0[2] = 'o';
      charArray0[3] = '2';
      boolean boolean0 = ArrayUtils.contains(charArray0, '5');
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'Y', 'o', '2', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-2), 2146363416);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte) (-2), byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-2);
      shortArray0[1] = (short) (byte) (-2);
      shortArray0[2] = (short) (byte) (-2);
      shortArray0[3] = (short) (byte) (-2);
      shortArray0[4] = (short) (byte) (-2);
      shortArray0[5] = (short) (byte) (-2);
      shortArray0[6] = (short) (-662);
      ArrayUtils.swap(shortArray0, (int) (short) (-2), 2552, 1810);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2), (short) (-2), (short) (-2), (short) (-2), (short) (-2), (short) (-2), (short) (-662)}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte) (-2), (int) (short) (-2));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-779), shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-779);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-82);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-82));
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-50), (byte) (-8), (byte) (-31), (byte)79, (byte)49, (byte)57, (byte)0, (byte) (-82)}, byteArray0);
      assertEquals(8, int0);
      
      ArrayUtils.reverse(shortArray1, 79, (int) (byte)0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte)6;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-98), (byte)64, (byte) (-60), (byte)10, (byte) (-116), (byte)70, (byte)89, (byte)6}, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-60);
      intArray0[1] = (int) (byte)10;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-60), 10}, intArray0);
      assertArrayEquals(new int[] {(-60), 10, (-60), 10}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[9];
      charArray0[1] = ']';
      charArray0[2] = '&';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', ']', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)6, (int) (byte)89);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-98), (byte)64, (byte) (-60), (byte)10, (byte) (-116), (byte)70, (byte)89, (byte)6}, byteArray0);
      assertEquals(8, int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)64;
      shortArray0[1] = (short)3;
      shortArray0[2] = (short) (byte)64;
      shortArray0[3] = (short) (byte)70;
      shortArray0[4] = (short) (byte)70;
      shortArray0[5] = (short) (byte)64;
      shortArray0[6] = (short) (byte)64;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte)10);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)64, (short)3, (short)64, (short)70, (short)70, (short)64, (short)64}, shortArray0);
      assertArrayEquals(new short[] {(short)64, (short)3, (short)64, (short)70, (short)70, (short)64, (short)64, (short)10}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      long[] longArray0 = new long[2];
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)5849);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (double) (short)5849;
      doubleArray0[2] = (-1347.08186059);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 111L;
      doubleArray0[5] = (double) 111L;
      doubleArray0[4] = (double) 111L;
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)5849);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)5849);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (double) (short)5849;
      doubleArray0[2] = (-1347.08186059);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 111L;
      doubleArray0[5] = (double) 111L;
      doubleArray0[6] = (double) 111L;
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-511);
      shortArray0[1] = (short) (-985);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-985)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-511);
      longArray0[1] = (long) (short) (-985);
      ArrayUtils.shift(longArray0, (int) (short) (-985));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-511L), (-985L), 0L, 0L, 0L}, longArray0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = (double) (-2224);
      doubleArray0[2] = (double) (-2224);
      doubleArray0[3] = (double) (short) (-985);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2781.101488822774, 76, (-1758.8038));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.1, (-2224.0), (-2224.0), (-985.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(shortArray1, (-1636), 2505);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-985)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2505;
      floatArray0[1] = (float) 2505;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) (short) (-985);
      floatArray0[4] = (float) (-2224);
      floatArray0[5] = (float) (short) (-511);
      floatArray0[6] = 1.0F;
      floatArray0[7] = (float) 76;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertArrayEquals(new float[] {2505.0F, 2505.0F, (-1.0F), (-985.0F), (-2224.0F), (-511.0F), 1.0F, 76.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[0] = (-2469);
      intArray0[1] = 0;
      intArray0[4] = 2;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(11, intArray0.length);
      assertEquals(11, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-2469);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[7] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 2.0F, 0.0F, (-2469.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)88, 0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[2] = (long) (byte)88;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-2469);
      longArray0[5] = (long) (-2469);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) 2;
      longArray0[8] = (long) 0;
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 88L, 0L, (-2469L), (-2469L), (-1L), 2L, 0L}, longArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2469), (-2043));
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = '/';
      charArray0[2] = 't';
      charArray0[3] = ':';
      charArray0[4] = 't';
      charArray0[5] = 't';
      charArray0[6] = 'd';
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'/', 't', ':', 't', 't', 'd', 't'}, charArray0);
      
      Character character0 = new Character('y');
      assertNotNull(character0);
      assertEquals('y', (char)character0);
      
      Object[] objectArray0 = new Object[0];
      Double double0 = new Double((-328.3326));
      assertNotNull(double0);
      assertEquals((-328.3326), (double)double0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '/';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {47L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-5));
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = '/';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = 't';
      charArray0[5] = 't';
      charArray0[6] = 'd';
      Character character0 = new Character('y');
      assertNotNull(character0);
      assertEquals('y', (char)character0);
      
      Double double0 = new Double((-328.3326));
      assertNotNull(double0);
      assertEquals((-328.3326), (double)double0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '/';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {47L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray2.length);
      assertArrayEquals(new long[] {47L}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte)49;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)75, 0);
      assertNotNull(bitSet0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)4, (byte) (-103), (byte) (-84), (byte)34, (byte) (-119), (byte)69, (byte)64, (byte)49}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-873.2489993413));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      short short0 = (short)120;
      Short short1 = new Short((short)120);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)120, (short)short1);
      
      long long0 = (-716L);
      Long long1 = new Long((-716L));
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-716L), (long)long1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) short1, (Object) long1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      ArrayUtils.shift(floatArray0, (-1), (-247), (-1));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray2);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)8;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte)104, (byte)126, (byte)8}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.reverse((short[]) null);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)126;
      longArray0[1] = (long) (byte)126;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (byte)76;
      longArray0[4] = (long) (byte)104;
      longArray0[5] = (long) ']';
      longArray0[6] = (long) (byte)76;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1066L), (-44));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {126L, 126L, (-1L), 76L, 104L, 93L, 76L}, longArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[4];
      char char0 = ')';
      charArray0[0] = ')';
      charArray0[1] = '0';
      char char1 = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'N';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {')', '0', 'D', 'N'}, charArray0);
      assertTrue(boolean0);
      
      int int0 = 4114;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 4114);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4114, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '*';
      charArray0[2] = '|';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-44);
      doubleArray0[1] = (double) (byte) (-44);
      ArrayUtils.shift(doubleArray0, (int) (byte) (-44), 48, (int) (byte) (-44));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-44.0), (-44.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[0] = (-1652);
      intArray0[1] = 13;
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) (-1652);
      floatArray0[2] = (float) (-1652);
      floatArray0[4] = (float) 13;
      floatArray0[5] = (float) (-1652);
      floatArray0[6] = (float) 13;
      floatArray0[7] = (float) 0;
      ArrayUtils.shift(floatArray0, 13, (-1652), 1565);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1652.0F), (-1652.0F), 0.0F, 13.0F, (-1652.0F), 13.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[1] = 13;
      intArray1[2] = 0;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1652);
      longArray0[1] = (long) 13;
      longArray0[2] = (long) 13;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 13;
      longArray0[5] = (-746L);
      longArray0[6] = (long) (-1652);
      longArray0[7] = (long) 13;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1652L), 13L, 13L, 0L, 13L, (-746L), (-1652L), 13L}, longArray0);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-1507.2791213), 1797);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 13L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-3444.9899);
      doubleArray0[4] = (-413.77);
      doubleArray0[5] = (double) 1565;
      doubleArray0[6] = (double) (-1652.0F);
      doubleArray0[7] = (double) 13L;
      doubleArray0[8] = (double) 0L;
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 13.0, 0.0, (-3444.9899), (-413.77), 1565.0, (-1652.0), 13.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)0;
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)90, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)0;
      Object object0 = ArrayUtils.toPrimitive((Object) (byte)0);
      assertNotNull(object0);
      assertEquals((byte)0, object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte)0;
      ArrayUtils.shift(objectArray0, 13, (-900), (-15));
      assertEquals(3, objectArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 1);
      assertNull(intArray0);
      
      ArrayUtils.shift(objectArray0, 1, (int) (byte)0, 1344);
      assertEquals(3, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte)0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-32);
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte) (-32)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte) (-32)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) (byte) (-32);
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) (byte) (-32);
      ArrayUtils.shift(intArray0, 199, 2146363416, 69);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2176);
      shortArray0[1] = (short) (byte) (-32);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 5153, 1471);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-2176), (short) (-32)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((-1776), longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1652);
      intArray0[1] = 13;
      intArray0[2] = (-2211);
      intArray0[3] = 0;
      intArray0[4] = 13;
      intArray0[6] = 5;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1852;
      shortArray0[1] = (short) (-28246);
      intArray0[0] = (int) (short)70;
      shortArray0[4] = (short) (-1996);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1959154673), 2146481087);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)1852, (short) (-28246), (short)0, (short)0, (short) (-1996)}, shortArray0);
      assertArrayEquals(new short[] {(short)1852, (short) (-28246), (short)0, (short)0, (short) (-1996)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.indexOf(intArray0, (int) (short)2, 70);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {70, 13, (-2211), 0, 13, 0, 5}, intArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 64, 5);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Character character0 = Character.valueOf('<');
      assertNotNull(character0);
      assertEquals('<', (char)character0);
      
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) character0, (Object) boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      MockRandom mockRandom0 = new MockRandom(2609L);
      assertNotNull(mockRandom0);
      
      char char0 = '9';
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = '9';
      charArray0[2] = 'E';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'E');
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'r', '9', 'E'}, charArray0);
      assertArrayEquals(new char[] {'r', '9'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = Double.valueOf((double) 1.0F);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '9';
      intArray0[1] = (int) 'E';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 69, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-2224);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1493.0);
      doubleArray0[1] = (double) (-151L);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (-151L);
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) (-2224);
      doubleArray0[7] = (double) (-2224L);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-2224.0), (-2224.0), 1.0, 1.0, (-151.0), 1.0, (-151.0), (-1493.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)0;
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'B');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)23;
      shortArray0[2] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)1, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)23, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)23, (short)1, (short)23, (short)1}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray1, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)23, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)23, (short)1, (short)23, (short)1}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-512L);
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[0] = 1916L;
      longArray0[0] = (-1L);
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 0L);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)57;
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'B');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-506L), (-369));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), 0L, 0L, 0L, 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals((-1), int0);
      
      Character character0 = new Character('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(characterArray0, (-2906), character0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2906, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (-437);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(10, shortArray0.length);
      assertEquals(20, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.add(shortArray1, (short)3);
      assertNotNull(shortArray2);
      assertEquals(10, shortArray0.length);
      assertEquals(20, shortArray1.length);
      assertEquals(21, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) (short) (-437);
      objectArray0[2] = (Object) (short) (-437);
      objectArray0[3] = (Object) true;
      Double double0 = new Double((-1611.19696626));
      assertNotNull(double0);
      assertEquals((-1611.19696626), (double)double0, 0.01);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) double0);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertEquals(false, object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) false;
      ArrayUtils.shift(objectArray0, 845, (-335), 0);
      assertEquals(6, objectArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 1);
      assertNull(intArray0);
      
      ArrayUtils.swap((int[]) null, (-445), 3464);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-445);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (short) (-437);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (short) (-437);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-944.184384), 1344.8872715);
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-445.0), 1.0, (-437.0), 0.0, (-437.0), 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Double double0 = new Double((-905.7));
      assertNotNull(double0);
      assertEquals((-905.7), (double)double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.1, 2, 0.1);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1804);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (-437);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(10, shortArray0.length);
      assertEquals(20, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.swap(shortArray0, 1804, 0);
      assertEquals(10, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      short[] shortArray2 = ArrayUtils.add(shortArray1, (short)3);
      assertNotNull(shortArray2);
      assertEquals(10, shortArray0.length);
      assertEquals(20, shortArray1.length);
      assertEquals(21, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) (short) (-437);
      objectArray0[2] = (Object) (short) (-437);
      objectArray0[3] = (Object) true;
      Double double0 = new Double((-1611.19696626));
      assertNotNull(double0);
      assertEquals((-1611.19696626), (double)double0, 0.01);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) double0);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertEquals(false, object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) false;
      ArrayUtils.shift(objectArray0, 845, (-335), 0);
      assertEquals(6, objectArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 1);
      assertNull(intArray0);
      
      ArrayUtils.shift(objectArray0, (-445), 30, (-1));
      assertEquals(6, objectArray0.length);
      
      ArrayUtils.swap((int[]) null, (-445), 3464);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-445);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (short) (-437);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (short) (-437);
      doubleArray0[5] = (double) 30;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-944.184384), 1344.8872715);
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-445.0), 1.0, (-437.0), 0.0, (-437.0), 30.0}, doubleArray0, 0.01);
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean1;
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4);
      
      booleanArray0[1] = boolean4;
      Boolean boolean5 = Boolean.valueOf("[$Tr.{#6");
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5);
      
      booleanArray0[2] = boolean5;
      booleanArray0[3] = boolean0;
      boolean[] booleanArray1 = new boolean[2];
      booleanArray1[0] = (boolean) boolean5;
      booleanArray1[1] = false;
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray1, false);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = 0L;
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '=';
      charArray0[2] = '=';
      ArrayUtils.shift(longArray0, (-29));
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '>');
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'>', '=', '=', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'=', '=', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElement(charArray1, '.');
      assertNotNull(charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray2.length);
      assertArrayEquals(new char[] {'>', '=', '=', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'=', '=', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'=', '=', '\u0000'}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[1] = (long) (short) (-594);
      longArray0[2] = (long) (short) (-594);
      longArray0[3] = (long) (short) (-594);
      longArray0[4] = (long) (short) (-594);
      longArray0[7] = (long) (short) (-594);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertArrayEquals(new long[] {0L, (-594L), (-594L), (-594L), (-594L), 0L, 0L, (-594L), 0L}, longArray0);
      
      ArrayUtils.shift((Object[]) booleanArray1, 1095);
      assertEquals(0, booleanArray1.length);
      
      Random.setNextRandom((-202));
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 32;
      floatArray0[3] = (float) (-2469);
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 32;
      floatArray0[7] = (float) 2;
      ArrayUtils.swap(floatArray0, 1536, 0, 0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 32.0F, (-2469.0F), 32.0F, 0.0F, 32.0F, 2.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-2469);
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1536, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, (-2469.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, 1818, 0);
      assertNotNull(intArray2);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {}, intArray2);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(14, intArray0.length);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.swap(objectArray0, 0, 0, 0);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 1536);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 32.0F, (-2469.0F), 32.0F, 0.0F, 32.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 2.0F, 32.0F, (-2469.0F), 32.0F, 0.0F, 32.0F, 2.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (-2436L);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 1818;
      longArray0[4] = (long) 1536;
      longArray0[5] = (long) 0;
      int int1 = ArrayUtils.indexOf(longArray0, (-2147483648L), (-18));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, (-2436L), 0L, 1818L, 1536L, 0L}, longArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '/');
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)59;
      shortArray0[1] = (short)671;
      short short0 = (short) (-792);
      shortArray0[2] = (short) (-792);
      shortArray0[3] = (short) (-6120);
      shortArray0[4] = (short) (-129);
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      shortArray0[5] = (short)61;
      shortArray0[6] = (short) (-57);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short) (-792));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -792, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1437));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) (-1437);
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (-1437);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 2.147483647E9, (-1437.0), 2.147483647E9, 0.0, 0.0, (-1437.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1437);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-1437));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-1437L)}, longArray0);
      assertArrayEquals(new long[] {(-1437L), (-1437L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ArrayUtils.shift(byteArray0, 2048, (int) (byte)0, 2502);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) (byte)0, (int) (byte)0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 2.147483647E9, (-1437.0), 2.147483647E9, 0.0, 0.0, (-1437.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.147483647E9, (-1437.0), 2.147483647E9, 0.0, 0.0, (-1437.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte)95;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)30, 9);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)95}, byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((int[]) null, 2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[3] = (-2469);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      char[] charArray0 = new char[6];
      charArray0[1] = 'Y';
      charArray0[2] = 'o';
      charArray0[3] = '2';
      charArray0[5] = '=';
      boolean boolean0 = ArrayUtils.contains(charArray0, '5');
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'Y', 'o', '2', '\u0000', '='}, charArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3, 2146363416);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)3, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      long[] longArray0 = new long[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[2] = (-1347.08186059);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[6] = (double) (short)5849;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (short)5849;
      floatArray0[2] = (float) (short)5849;
      floatArray0[3] = (float) 0L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'd';
      charArray0[1] = '/';
      charArray0[2] = 'd';
      charArray0[3] = '2';
      charArray0[4] = 'd';
      charArray0[5] = '/';
      charArray0[6] = 'd';
      charArray0[7] = '/';
      charArray0[8] = '/';
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'/', 'd', '2', 'd', '/', 'd', '/', '/', 'd'}, charArray0);
      
      Character character0 = new Character('d');
      assertNotNull(character0);
      assertEquals('d', (char)character0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) character0, 981);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[0] = 1.0;
      Float float0 = new Float((-1619.717086560602));
      assertNotNull(float0);
      assertEquals((-1619.717F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[9];
      Float float1 = new Float(1.0);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      floatArray0[0] = float1;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      Float float2 = new Float((-1786.0F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1786.0F), (float)float2, 0.01F);
      
      floatArray0[5] = float2;
      floatArray0[6] = float0;
      floatArray0[7] = float0;
      floatArray0[8] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[8]);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-1619.717F), (-1619.717F), (-1619.717F), (-1619.717F), (-1786.0F), (-1619.717F), (-1619.717F), (-1619.717F)}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-976);
      intArray0[1] = (-680);
      intArray0[2] = (-680);
      intArray0[3] = (-680);
      intArray0[4] = 1;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = Integer.MAX_VALUE;
      intArray1[1] = (-680);
      intArray1[2] = (-426);
      intArray1[3] = (-976);
      intArray1[4] = (-976);
      int[] intArray2 = ArrayUtils.insert(1, intArray0, intArray1);
      assertNotNull(intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(10, intArray2.length);
      assertArrayEquals(new int[] {(-976), (-680), (-680), (-680), 1}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-680), (-426), (-976), (-976)}, intArray1);
      assertArrayEquals(new int[] {(-976), Integer.MAX_VALUE, (-680), (-426), (-976), (-976), (-680), (-680), (-680), 1}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0, (float) Integer.MAX_VALUE);
      assertNotNull(floatArray2);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray2.length);
      assertArrayEquals(new float[] {1.0F, (-1619.717F), (-1619.717F), (-1619.717F), (-1619.717F), (-1786.0F), (-1619.717F), (-1619.717F), (-1619.717F)}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2452.411F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 275.0F;
      floatArray0[3] = 2646.0789F;
      floatArray0[4] = 2258.41F;
      floatArray0[5] = 120.0F;
      floatArray0[6] = 61.0F;
      floatArray0[7] = 1027.0F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 2, 1.0F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {(-2452.411F), (-1.0F), 275.0F, 2646.0789F, 2258.41F, 120.0F, 61.0F, 1027.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2452.411F), (-1.0F), 1.0F, 275.0F, 2646.0789F, 2258.41F, 120.0F, 61.0F, 1027.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)99;
      Byte byte1 = new Byte((byte)99);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)99, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = Byte.valueOf(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)99, (byte)byte2);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean(false);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) byte0;
      floatArray2[1] = (float) (byte)99;
      floatArray2[2] = (float) byte0;
      floatArray2[3] = 0.0F;
      floatArray2[4] = 0.0F;
      floatArray2[5] = (float) (byte)99;
      floatArray2[6] = 2598.5972F;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray2, (int) (byte)99, 0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = '|';
      charArray0[2] = '$';
      charArray0[3] = ' ';
      charArray0[4] = 'X';
      charArray0[5] = '(';
      charArray0[6] = '8';
      char[] charArray1 = ArrayUtils.add(charArray0, 2, 'G');
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'+', '|', '$', ' ', 'X', '(', '8'}, charArray0);
      assertArrayEquals(new char[] {'+', '|', 'G', '$', ' ', 'X', '(', '8'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)39;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 1803);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1803, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short)565;
      shortArray0[0] = (short)565;
      short short1 = (short)1;
      shortArray0[1] = (short)1;
      short short2 = (short) (-1);
      shortArray0[2] = (short) (-1);
      int int0 = 45;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 45);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      ArrayUtils.shift((long[]) null, 30);
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '@';
      charArray0[2] = 'g';
      charArray0[3] = '_';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\"');
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'&', '@', 'g', '_'}, charArray0);
      assertArrayEquals(new char[] {'&', '@', 'g', '_'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "java.lang.Double");
      assertNull(stringArray0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) "java.lang.Double", 30);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, 1659L, 114);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[4] = (float) 454;
      floatArray0[5] = 733.6F;
      floatArray0[6] = (float) 454;
      floatArray0[8] = (float) 454;
      ArrayUtils.swap((char[]) null, 2621, (-1686), 454);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)46;
      longArray0[1] = (long) (short) (-594);
      longArray0[2] = (long) (short) (-594);
      longArray0[3] = (long) (short) (-594);
      longArray0[4] = (long) (short) (-594);
      longArray0[6] = (long) (short)46;
      longArray0[7] = (long) (short) (-594);
      longArray0[8] = (long) (short)46;
      ArrayUtils.shift(longArray0, (int) (short)46);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {46L, 46L, (-594L), (-594L), (-594L), (-594L), 0L, 46L, (-594L)}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {46L, 46L, (-594L), (-594L), (-594L), (-594L), 0L, 46L, (-594L)}, longArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 'P';
      charArray0[2] = 'D';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'u');
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'M', 'P', 'D'}, charArray0);
      assertArrayEquals(new char[] {'M', 'P', 'D'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'P';
      intArray0[1] = 1163;
      intArray0[2] = (int) 'D';
      boolean boolean0 = ArrayUtils.contains(intArray0, 80);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {80, 1163, 68}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean1;
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4);
      
      booleanArray0[1] = boolean4;
      Boolean boolean5 = Boolean.valueOf("[$Tr.{#6");
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5);
      
      booleanArray0[2] = boolean5;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean2;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, true}, booleanArray1));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)46;
      shortArray0[1] = (short) (-594);
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, int0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = 'P';
      charArray0[2] = 'M';
      charArray0[3] = 'J';
      charArray0[4] = 'h';
      charArray0[5] = 'u';
      charArray0[6] = 'D';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'M');
      assertNotNull(charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'z', 'P', 'J', 'h', 'u', 'D'}, charArray1);
      assertArrayEquals(new char[] {'z', 'P', 'M', 'J', 'h', 'u', 'D'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-512L);
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[0] = 1916L;
      longArray0[5] = (-1L);
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {1916L, 0L, (-1L), 0L, 0L, (-1L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1916L, 0L, (-1L), 0L, 0L, (-1L), 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 0L);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)29;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-115);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(18, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)53, (byte)57, (byte) (-102), (byte) (-91), (byte)29, (byte)0, (byte) (-1), (byte) (-115)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = 't';
      charArray0[2] = '=';
      charArray0[3] = 'P';
      charArray0[4] = '\"';
      charArray0[5] = 'X';
      charArray0[6] = 'H';
      int int0 = ArrayUtils.indexOf(charArray0, 'F');
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'F', 't', '=', 'P', '\"', 'X', 'H'}, charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2469.0F);
      floatArray0[1] = 427.0F;
      floatArray0[2] = 2194.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-2469.0F), 427.0F, 2194.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2128309686;
      intArray0[1] = (-2929);
      intArray0[2] = 611;
      intArray0[3] = (-1505);
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2128309686, (-2929), 611, (-1505), 0}, intArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2929), 0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2128309686, (-2929), 611, (-1505), 0}, intArray0);
      assertEquals((-1), int0);
      
      Double double0 = new Double(1.5);
      assertNotNull(double0);
      assertEquals(1.5, (double)double0, 0.01);
      
      int int1 = ArrayUtils.hashCode((Object) double0);
      assertFalse(int1 == int0);
      
      ArrayUtils.swap(booleanArray0, 41, Integer.MAX_VALUE, 1872);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 1872);
      assertNull(object0);
      assertEquals(6, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) (-2929);
      objectArray0[3] = (Object) (-2929);
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) 2194.0F;
      ArrayUtils.reverse(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = true;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 854.0F;
      floatArray0[1] = (-246.50766F);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-81);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-99), (byte) (-81)}, byteArray0);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray1, (Object) byte0, (int) (byte) (-81));
      assertNotNull(bitSet0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2609.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 4693.6284F;
      floatArray0[3] = (-494.28577F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2598.5972F);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {2609.0F, 1.0F, 4693.6284F, (-494.28577F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, (-2142));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.shift(booleanArray0, (-1));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {2609.0F, 1.0F, 4693.6284F, (-494.28577F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      String string0 = ArrayUtils.toString((Object) boolean2, (String) null);
      assertNotNull(string0);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertEquals("true", string0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-2142);
      longArray0[4] = (long) (-1);
      longArray0[5] = (-1L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1L));
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-2142L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-2142L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-81);
      boolean boolean3 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)124, (byte) (-99), (byte)15, (byte) (-1), (byte) (-81)}, byteArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 305.01200294637;
      doubleArray0[2] = 1564.5;
      doubleArray0[3] = (-1347.08186059);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 305.01200294637, 1564.5, (-1347.08186059)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {305.01200294637, 1564.5, (-1347.08186059)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-3726.5854F);
      floatArray0[1] = 2938.5813F;
      floatArray0[2] = (-1994.51F);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {(-3726.5854F), 2938.5813F, (-1994.51F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {(-3726.5854F), 2938.5813F, (-1994.51F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1564.5;
      doubleArray2[1] = (double) (-3726.5854F);
      doubleArray2[2] = (-841.93857044);
      doubleArray2[3] = (double) (-1994.51F);
      doubleArray2[4] = (double) (-3726.5854F);
      doubleArray2[5] = 0.0;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {1564.5, (-3726.58544921875), (-841.93857044), (-1994.510009765625), (-3726.58544921875), 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean1);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 162);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 37.0;
      ArrayUtils.swap(doubleArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 37.0}, doubleArray0, 0.01);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("C}#MPqqF^7!");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((String) null);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean boolean3 = false;
      Boolean boolean4 = Boolean.valueOf(false);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean2));
      assertTrue(boolean7);
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = new Boolean(boolean3);
      assertNotNull(boolean8);
      assertFalse(boolean8.equals((Object)boolean5));
      assertFalse(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean2));
      assertFalse(boolean8);
      
      booleanArray0[7] = boolean8;
      Boolean boolean9 = Boolean.TRUE;
      assertNotNull(boolean9);
      assertFalse(boolean9.equals((Object)boolean3));
      assertFalse(boolean9.equals((Object)boolean4));
      assertFalse(boolean9.equals((Object)boolean2));
      assertFalse(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean1));
      assertTrue(boolean9);
      
      booleanArray0[8] = boolean9;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, true, false, true}, booleanArray1));
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) boolean2, (int) (short)0);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean2.equals((Object)boolean7));
      assertTrue(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean9));
      assertFalse(boolean2.equals((Object)boolean5));
      assertFalse(boolean2.equals((Object)boolean6));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean8));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean4));
      assertEquals(1, int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1652.5635F));
      assertNotNull(bitSet0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)13;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)2, (byte)13}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)3;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = (int) (byte)13;
      intArray0[5] = (int) (byte)3;
      intArray0[6] = (int) (byte)2;
      intArray0[7] = (int) (byte)3;
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      long[] longArray0 = new long[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 120L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[6] = (-1347.08186059);
      doubleArray0[4] = (double) 120L;
      doubleArray0[5] = (double) 120L;
      doubleArray0[6] = (double) 120L;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)87;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)122, 2492);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)87, (byte)87}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {5849.0, 0.0, 0.0, 0.0, 120.0, 120.0, 120.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)13;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)2, (byte)13}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)3;
      floatArray0[1] = (float) (byte)13;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (byte)13;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {3.0F, 13.0F, 0.0F, 13.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3.0F, 13.0F, 13.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)3;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = (int) (byte)13;
      intArray0[5] = (int) (byte)3;
      intArray0[6] = (int) (byte)2;
      intArray0[7] = (int) (byte)3;
      intArray0[8] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (int) (byte)13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 102;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 1;
      intArray0[3] = (-103);
      intArray0[4] = (-6563);
      intArray0[5] = 1;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {102, Integer.MAX_VALUE, 1, (-103), (-6563), 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)5849;
      shortArray0[4] = (short)5849;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)5849);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)5849, (short)0, (short)0, (short)0, (short)5849}, shortArray0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((char[]) null);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)5849;
      longArray0[1] = (long) (short)5849;
      longArray0[2] = (long) (short)5849;
      ArrayUtils.shift(longArray0, (int) (short)5849, (-900), (-543));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {5849L, 5849L, 5849L}, longArray0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.swap(booleanArray0, 0, 1080, (-1));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      
      MutableInt mutableInt0 = new MutableInt(1140);
      assertNotNull(mutableInt0);
      assertEquals((short)1140, mutableInt0.shortValue());
      assertEquals(1140.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1140.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1140L, mutableInt0.longValue());
      assertEquals("1140", mutableInt0.toString());
      assertEquals(1140, mutableInt0.intValue());
      assertEquals(1140, (int)mutableInt0.getValue());
      assertEquals(1140, (int)mutableInt0.toInteger());
      assertEquals((byte)116, mutableInt0.byteValue());
      
      Long long0 = new Long(4028L);
      assertNotNull(long0);
      assertEquals(4028L, (long)long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1956;
      intArray0[2] = 7;
      intArray0[3] = (-1655);
      intArray0[4] = (-51);
      intArray0[5] = (-1410);
      intArray0[6] = 862;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {1, 1956, 7, (-1655), (-51), (-1410), 862}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertNotNull(intArray2);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {1, 1956, 7, (-1655), (-51), (-1410), 862}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, 1252, 1080, 438);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) false;
      MutableInt mutableInt0 = new MutableInt(14);
      assertNotNull(mutableInt0);
      assertEquals(14.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)14, mutableInt0.shortValue());
      assertEquals(14, (int)mutableInt0.getValue());
      assertEquals(14L, mutableInt0.longValue());
      assertEquals("14", mutableInt0.toString());
      assertEquals(14.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(14, mutableInt0.intValue());
      assertEquals(14, (int)mutableInt0.toInteger());
      assertEquals((byte)14, mutableInt0.byteValue());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, intArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) '4';
      floatArray0[2] = (float) '4';
      floatArray0[1] = (float) 'c';
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'c';
      intArray0[1] = (-835);
      intArray0[2] = (int) '4';
      intArray0[3] = (int) 'c';
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 1);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)4020;
      int[] intArray1 = ArrayUtils.add(intArray0, 2, 2);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {99, (-835), 52, 99, 0, 0}, intArray0);
      assertArrayEquals(new int[] {99, (-835), 2, 52, 99, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)4020, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '*';
      floatArray0[1] = (float) '*';
      floatArray0[2] = (float) '*';
      floatArray0[3] = (float) 'c';
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'c';
      intArray0[1] = (-835);
      intArray0[2] = (int) '*';
      intArray0[3] = (int) 'c';
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 1);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)4020;
      int[] intArray1 = ArrayUtils.add(intArray0, 2, 2);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {99, (-835), 42, 99, 0, 0}, intArray0);
      assertArrayEquals(new int[] {99, (-835), 2, 42, 99, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)4020, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1431));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 53);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertNotNull(map0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      ArrayUtils.swap((Object[]) integerArray0, (int) (short)2, (int) (short)2, 3654);
      assertEquals(0, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[8] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1965);
      shortArray0[1] = (short)13;
      shortArray0[2] = (short)13;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-28246);
      shortArray0[6] = (short)1852;
      shortArray0[7] = (short)70;
      shortArray0[8] = (short) (-1245);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)70, (-1));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1965), (short)13, (short)13, (short)0, (short) (-1), (short) (-28246), (short)1852, (short)70, (short) (-1245)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (short)13;
      objectArray0[3] = (Object) (short)13;
      objectArray0[4] = (Object) (short)1852;
      ArrayUtils.reverse(objectArray0, 846, (int) (short) (-1245));
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)25;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-20), 979);
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-1), (byte)0, (byte) (-103), (byte) (-75), (byte)25}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-1), (byte)0, (byte) (-103), (byte) (-75), (byte)25}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3, (int) (byte)1);
      assertNotNull(bitSet0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)1, (byte)3, (byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertEquals("{2, 3, 4, 5, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)1, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)1, (byte)3, (byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[3] = 32;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-3055);
      shortArray0[2] = (short) (-437);
      shortArray0[3] = (short) (-1410);
      shortArray0[4] = (short) (-437);
      shortArray0[5] = (short) (-437);
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-3055), (short)0, (short) (-437), (short) (-1410), (short) (-437), (short) (-437)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)65);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[3] = 32;
      intArray0[8] = (int) (short) (-437);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)65);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1410);
      doubleArray0[2] = (double) (short) (-1410);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1410.0), 0.0, (-1410.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-1410.0), 0.0, (-1410.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1410.0), 0.0, (-1410.0), (-1410.0), 0.0, (-1410.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      Double double0 = new Double((-3744.0));
      assertNotNull(double0);
      assertEquals((-3744.0), (double)double0, 0.01);
      
      Double double1 = new Double(59.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(59.0, (double)double1, 0.01);
      
      Double double2 = new Double(3716.093634532435);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(3716.093634532435, (double)double2, 0.01);
      
      Double double3 = new Double((-3744));
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((-3744.0), (double)double3, 0.01);
      
      Double double4 = new Double(1.5);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals(1.5, (double)double4, 0.01);
      
      Double double5 = new Double((-3744.0));
      assertNotNull(double5);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((-3744.0), (double)double5, 0.01);
      
      Double double6 = new Double(59.0);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals(59.0, (double)double6, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double4;
      ArrayUtils.swap((float[]) null, 1809, 62, 1809);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1816);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      ArrayUtils.swap((float[]) null, 1018, 1816, 1536);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1816;
      doubleArray0[1] = (double) 1018;
      doubleArray0[2] = (double) 1816;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 3991.3714562429714, 1018);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1816.0, 1018.0, 1816.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) (-1));
      assertNull(floatArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 1816;
      longArray0[2] = (long) 1018;
      longArray0[3] = (long) 1536;
      longArray0[4] = (long) 2146291925;
      longArray0[5] = (long) 2146291925;
      longArray0[6] = 3696L;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) (-1);
      ArrayUtils.swap(longArray0, 1816, 1583, 1536);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 1816L, 1018L, 1536L, 2146291925L, 2146291925L, 3696L, 0L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short)120, (-1260));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-30)}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-1260));
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((float[]) null, (float) 2, (int) (byte) (-30));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      
      int int1 = mockRandom0.nextInt(2);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) doubleArray0[2];
      doubleArray1[1] = 1237.2790971243;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 1237.2790971243;
      doubleArray1[4] = (double) doubleArray0[1];
      doubleArray1[5] = (double) doubleArray0[2];
      ArrayUtils.reverse(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1237.2790971243, 0.0, 1237.2790971243, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1431));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 53);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, (int) (short)2, 122, (int) (short)0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-1431));
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-1410), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1410, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, Integer.MAX_VALUE);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-2580);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)563;
      shortArray0[4] = (short)3882;
      shortArray0[5] = (short)8;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3594), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3594, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1652);
      intArray0[1] = 13;
      intArray0[2] = (-2211);
      intArray0[3] = 0;
      intArray0[4] = 13;
      intArray0[6] = 5;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1852;
      shortArray0[1] = (short) (-28246);
      intArray0[0] = (int) (short)70;
      shortArray0[4] = (short) (-1965);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1959154673), 2146481087);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)1852, (short) (-28246), (short)0, (short)0, (short) (-1965)}, shortArray0);
      assertArrayEquals(new short[] {(short)1852, (short) (-28246), (short)0, (short)0, (short) (-1965)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.indexOf(intArray0, (int) (short)2, 70);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {70, 13, (-2211), 0, 13, 0, 5}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1582L));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1582L)}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1582L);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1582L);
      doubleArray0[3] = (double) (-1582L);
      doubleArray0[4] = (double) (-1582L);
      doubleArray0[5] = (double) (-1582L);
      doubleArray0[6] = (-768.082);
      doubleArray0[7] = 737.8;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1582.0), 0.0, (-1582.0), (-1582.0), (-1582.0), (-1582.0), (-768.082), 737.8}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1582L);
      floatArray0[1] = (float) (-1582L);
      floatArray0[2] = 856.433F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (-1582L);
      floatArray0[5] = (float) (-1582L);
      floatArray0[6] = (float) (-1582L);
      ArrayUtils.swap(floatArray0, 2, 2, 2);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1582.0F), (-1582.0F), 856.433F, 0.0F, (-1582.0F), (-1582.0F), (-1582.0F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 737.8, (-768.082));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1582.0), 0.0, (-1582.0), (-1582.0), (-1582.0), (-1582.0), (-768.082), 737.8}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1147.333157;
      doubleArray0[1] = (-835.5234);
      doubleArray0[2] = 1551.66011888;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1861.201759662376);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1439.44655185451), 3716.093634532435);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1147.333157, (-835.5234), 1551.66011888, 1.0, (-1861.201759662376)}, doubleArray0, 0.01);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)11;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (int) (short)11);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)11}, shortArray0);
      assertArrayEquals(new short[] {(short)11}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short)11;
      doubleArray0[2] = (double) (short)11;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (short)11;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-227.47782853865), 0.0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 11.0, 11.0, 0.0, 11.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-355));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, (int) (short)11, (double) (-1));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 11.0, 11.0, 0.0, 11.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-355);
      longArray0[2] = (long) 0;
      longArray0[3] = 303L;
      longArray0[4] = 53L;
      longArray0[5] = (long) (short)11;
      longArray0[6] = (long) 0;
      int int2 = ArrayUtils.lastIndexOf(longArray0, 1726L, (-1));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-355L), 0L, 303L, 53L, 11L, 0L}, longArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      int[] intArray0 = new int[17];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) (-2469);
      floatArray0[6] = (float) 32;
      floatArray0[7] = (float) 2;
      ArrayUtils.swap(floatArray0, 1536, 0, (-2469));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 0.0F, 0.0F, 32.0F, (-2469.0F), 32.0F, 2.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-2469);
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1536, (-2469));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, (-2469.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (-2469));
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 0.0F, 0.0F, 32.0F, 32.0F, 2.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, 2.0F, 0.0F, 0.0F, 32.0F, (-2469.0F), 32.0F, 2.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 1536;
      ArrayUtils.swap(longArray0, 2, (-1), 2146291925);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {2L, 1536L, 1L, 0L}, longArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2.0F, (-1814.0));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, (-2469.0), 0.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-323.56169007118);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (double) 0L);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-323.56169007118), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-18));
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-74);
      shortArray0[1] = (short) (byte) (-18);
      shortArray0[2] = (short) (byte) (-122);
      shortArray0[4] = (short) (byte) (-74);
      shortArray0[5] = (short) (byte) (-122);
      shortArray0[6] = (short) (byte) (-18);
      ArrayUtils.shift(shortArray0, (-767));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-74), (short) (-122), (short) (-18), (short) (-74), (short) (-18), (short) (-122), (short)0}, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf("RNyCj9vP,;~ID1S");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[2] = boolean1;
      Boolean boolean2 = Boolean.valueOf("I~tj6yqX");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[3] = boolean2;
      Boolean boolean3 = new Boolean("I~tj6yqX");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      booleanArray0[4] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      
      booleanArray0[5] = boolean4;
      Boolean boolean5 = new Boolean((boolean) boolean0);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean3));
      assertFalse(boolean5);
      
      booleanArray0[6] = boolean5;
      Boolean boolean6 = Boolean.valueOf(true);
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6);
      
      booleanArray0[7] = boolean6;
      Boolean boolean7 = Boolean.FALSE;
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean3));
      assertFalse(boolean7);
      
      booleanArray0[8] = boolean7;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-18);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-18.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[3] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1237.2790971243);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(1237.2790971243, (double)double3, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1337);
      intArray0[2] = (-1337);
      intArray0[3] = 0;
      ArrayUtils.shift(intArray0, 2, (-8), 2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-1337), (-1337), 0}, intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2176);
      shortArray0[1] = (short)291;
      shortArray0[2] = (short)16757;
      shortArray0[3] = (short)2119;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)291, 2036);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-2176), (short)291, (short)16757, (short)2119}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Random.setNextRandom((short)16757);
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-60));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '\u0016';
      charArray0[2] = '|';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'c', '\u0016', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray1);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      long[] longArray0 = new long[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      char[] charArray0 = new char[4];
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) '\u0000';
      doubleArray0[2] = (double) '\u0000';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte)6;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-98), (byte)64, (byte) (-60), (byte)10, (byte) (-116), (byte)70, (byte)89, (byte)6}, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-60);
      intArray0[1] = (int) (byte) (-98);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-60), (-98)}, intArray0);
      assertArrayEquals(new int[] {(-60), (-98), (-60), (-98)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = ']';
      charArray0[2] = '&';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'F', ']', '&'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2469);
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = (-2469);
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-2469), 0, 2, (-2469), 0}, intArray0);
      assertArrayEquals(new int[] {(-2469), 0, 2, (-2469), 0}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) (-2469);
      floatArray0[3] = (float) (-2469);
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 2;
      floatArray0[7] = (float) 2;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2469);
      longArray0[1] = (long) (-2469);
      longArray0[2] = (long) (-2469);
      longArray0[3] = (long) (-2469);
      longArray0[4] = (long) 0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-2469));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {(-2469L), (-2469L), (-2469L), (-2469L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-2469L), (-2469L), (-2469L), (-2469L), (-2469L), 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, Integer.MAX_VALUE, (-2232));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-887.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-887.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      int int0 = 1935;
      MutableInt mutableInt0 = new MutableInt(1935);
      assertNotNull(mutableInt0);
      assertEquals((short)1935, mutableInt0.shortValue());
      assertEquals(1935, (int)mutableInt0.getValue());
      assertEquals((byte) (-113), mutableInt0.byteValue());
      assertEquals(1935.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1935, (int)mutableInt0.toInteger());
      assertEquals("1935", mutableInt0.toString());
      assertEquals(1935L, mutableInt0.longValue());
      assertEquals(1935.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1935, mutableInt0.intValue());
      
      int int1 = mutableInt0.getAndAdd((Number) (-887.0));
      assertTrue(int1 == int0);
      assertEquals("1048", mutableInt0.toString());
      assertEquals(1048L, mutableInt0.longValue());
      assertEquals(1048.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1048, mutableInt0.intValue());
      assertEquals((short)1048, mutableInt0.shortValue());
      assertEquals(1048.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1048, (int)mutableInt0.toInteger());
      assertEquals((byte)24, mutableInt0.byteValue());
      assertEquals(1048, (int)mutableInt0.getValue());
      assertEquals(1935, int1);
      
      boolean boolean1 = ArrayUtils.isEquals(mutableInt0, mutableInt0);
      assertFalse(boolean1 == boolean0);
      assertEquals("1048", mutableInt0.toString());
      assertEquals(1048L, mutableInt0.longValue());
      assertEquals(1048.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1048, mutableInt0.intValue());
      assertEquals((short)1048, mutableInt0.shortValue());
      assertEquals(1048.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1048, (int)mutableInt0.toInteger());
      assertEquals((byte)24, mutableInt0.byteValue());
      assertEquals(1048, (int)mutableInt0.getValue());
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) mutableInt0, (Object) mutableInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)11;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (int) (short)11);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)11}, shortArray0);
      assertArrayEquals(new short[] {(short)11}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      MutableInt mutableInt0 = new MutableInt((int) (short)11);
      assertNotNull(mutableInt0);
      assertEquals(11.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("11", mutableInt0.toString());
      assertEquals(11L, mutableInt0.longValue());
      assertEquals((short)11, mutableInt0.shortValue());
      assertEquals(11, mutableInt0.intValue());
      assertEquals((byte)11, mutableInt0.byteValue());
      assertEquals(11.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(11, (int)mutableInt0.toInteger());
      assertEquals(11, (int)mutableInt0.getValue());
      
      mutableInt0.add((Number) (short)11);
      assertEquals(22.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(22, (int)mutableInt0.getValue());
      assertEquals((byte)22, mutableInt0.byteValue());
      assertEquals("22", mutableInt0.toString());
      assertEquals(22, (int)mutableInt0.toInteger());
      assertEquals(22L, mutableInt0.longValue());
      assertEquals(22.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(22, mutableInt0.intValue());
      assertEquals((short)22, mutableInt0.shortValue());
      
      int int0 = mutableInt0.addAndGet((Number) (short)11);
      assertEquals((short)33, mutableInt0.shortValue());
      assertEquals(33.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("33", mutableInt0.toString());
      assertEquals(33, (int)mutableInt0.toInteger());
      assertEquals(33.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(33, (int)mutableInt0.getValue());
      assertEquals((byte)33, mutableInt0.byteValue());
      assertEquals(33, mutableInt0.intValue());
      assertEquals(33L, mutableInt0.longValue());
      assertEquals(33, int0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEquals(mutableInt0, boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean2 == boolean0);
      assertEquals((short)33, mutableInt0.shortValue());
      assertEquals(33.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("33", mutableInt0.toString());
      assertEquals(33, (int)mutableInt0.toInteger());
      assertEquals(33.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(33, (int)mutableInt0.getValue());
      assertEquals((byte)33, mutableInt0.byteValue());
      assertEquals(33, mutableInt0.intValue());
      assertEquals(33L, mutableInt0.longValue());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[14];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = (-87);
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = (-87);
      intArray0[5] = 3;
      ArrayUtils.swap(intArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, 3);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {3, 3, (-87), Integer.MAX_VALUE, (-87), 3}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(14, booleanArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 3;
      floatArray0[1] = (float) 3;
      floatArray0[2] = (-577.84393F);
      floatArray0[3] = (-1431.0F);
      floatArray0[4] = (-1111.5599F);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {3.0F, 3.0F, (-577.84393F), (-1431.0F), (-1111.5599F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 368L;
      longArray0[2] = 0L;
      longArray0[3] = (-2085L);
      longArray0[4] = 368L;
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-2085L);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (-614.5F);
      floatArray0[4] = (float) (-2085L);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-2085.0F), 0.0F, (-614.5F), (-2085.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (-877);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-877)}, intArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<";
      stringArray0[1] = "";
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2307.449F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-2307.449F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'L', 'L', 'L', 'L'}, charArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1709.5723F), 100);
      assertNotNull(bitSet0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-2307.449F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[2] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[3] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, booleanArray0[1]);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1812.2542F;
      floatArray0[1] = (-1.0F);
      ArrayUtils.shift(floatArray0, 858, 858, 0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1812.2542F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) booleanArray0, (-3), (-3), 0);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      ArrayUtils.reverse((Object[]) booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      String[] stringArray0 = ArrayUtils.subarray((String[]) null, 1, (-2113396604));
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = 21;
      intArray0[1] = 21;
      intArray0[2] = 2;
      intArray0[3] = 21;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[4] = (float) 21;
      floatArray0[5] = (float) 21;
      floatArray0[6] = (float) 2;
      floatArray0[7] = (float) 2;
      ArrayUtils.swap(floatArray0, (-1493), 0, 21);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 0.0F, 0.0F, 21.0F, 21.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 21;
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1493), 21);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 21.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 21);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 0.0F, 0.0F, 2.0F, 2.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, 2.0F, 0.0F, 0.0F, 21.0F, 21.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[6];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1347.08186059));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1347.08186059), 2.0, 21.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 21.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Character character0 = Character.valueOf('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
      
      java.util.Random random0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(floatArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      long[] longArray0 = new long[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[2] = (-1347.08186059);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[6] = (double) (short)5849;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (short)5849;
      floatArray0[2] = (float) (short)5849;
      floatArray0[3] = (float) 0L;
      floatArray0[5] = (float) (short)5849;
      floatArray0[6] = (float) (short)5849;
      floatArray0[7] = (float) (short)5849;
      floatArray0[8] = (float) (short)5849;
      ArrayUtils.shift(longArray0, (int) (short)5849);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1791);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      ArrayUtils.swap(booleanArray0, (int) (byte)0, (-21), (-692));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (-21);
      doubleArray0[2] = (double) (-692);
      doubleArray0[3] = 1951.0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-21.0), (-692.0), 1951.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int2 = ArrayUtils.lastIndexOf(shortArray1, (short)12);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (byte)0;
      Object object0 = ArrayUtils.get(objectArray0, (-1), objectArray0[1]);
      assertNotNull(object0);
      assertEquals(5, objectArray0.length);
      assertEquals((short)0, object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "1B&k:|0c($7R`yH");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1427.5833F));
      assertNotNull(float0);
      assertEquals((-1427.5833F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (-1427.5833F));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1427.5833F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-1427.5833F), (-1427.5833F)}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0, "Arguments cannot both be null");
      assertNotNull(stringArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-1);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)90;
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte) (-1);
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (byte) (-1);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-126.644F));
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {90.0F, (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {90.0F, (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1493.0);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1493.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)5, (byte)90, (byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = (-2085L);
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 1L;
      ArrayUtils.swap(floatArray0, (-2469), (-2469));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      
      Long[] longArray1 = new Long[3];
      longArray1[0] = (Long) (-2085L);
      longArray1[1] = (Long) (-2085L);
      longArray1[2] = (Long) (-2085L);
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[0] = (-1652);
      intArray0[1] = 13;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 13;
      floatArray0[1] = (float) (-1652);
      floatArray0[2] = (float) (-1652);
      floatArray0[3] = (float) 13;
      floatArray0[4] = (float) 13;
      floatArray0[5] = (float) (-1652);
      floatArray0[6] = (float) 13;
      floatArray0[7] = (float) 0;
      ArrayUtils.shift(floatArray0, 13, (-1652), 1565);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {13.0F, (-1652.0F), (-1652.0F), 13.0F, 13.0F, (-1652.0F), 13.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 13;
      intArray1[2] = 0;
      intArray1[4] = (-87);
      intArray1[5] = 0;
      ArrayUtils.swap(intArray1, 3, 13, 0);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 13, 0, 0, (-87), 0}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(13);
      assertNotNull(long0);
      assertEquals(13L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = Long.getLong("qn7~d{Je");
      assertNull(long1);
      
      longArray0[1] = null;
      Long long2 = new Long(3);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertEquals(3L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(1315L);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertEquals(1315L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-2147483648L));
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertEquals((-2147483648L), (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((-87));
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertEquals((-87L), (long)long5);
      
      longArray0[5] = long5;
      Long long6 = new Long(0L);
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long5));
      assertEquals(0L, (long)long6);
      
      longArray0[6] = long6;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[2] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[3] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, booleanArray0[1]);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1812.2542F;
      char[] charArray0 = new char[3];
      charArray0[1] = '\u0000';
      charArray0[2] = 'e';
      ArrayUtils.shift(charArray0, (-330));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'e'}, charArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1162, (-1437));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean2 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1812.2542F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2443);
      Character character0 = new Character('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2443);
      floatArray0[1] = (float) (-2443);
      floatArray0[2] = (float) (-2443);
      floatArray0[3] = (float) (-2443);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-2443), (-2443));
      assertNotNull(bitSet0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-2443.0F), (-2443.0F), (-2443.0F), (-2443.0F)}, floatArray0, 0.01F);
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-151L);
      longArray0[2] = 1621L;
      longArray0[3] = 1272L;
      longArray0[4] = 1L;
      ArrayUtils.shift(longArray0, (-2224));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1L, 0L, (-151L), 1621L, 1272L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-151L), (-2224), 2781.101488822774);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = (-2085L);
      longArray0[4] = (-425L);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)948;
      shortArray0[1] = (short)948;
      shortArray0[2] = (short)2;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)948);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)948, (short)948, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)948, (short)948, (short)948, (short)2}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.reverse(shortArray0, (int) (short)948, (int) (short)2);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)948, (short)948, (short)2}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 427;
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) 1336L;
      floatArray0[3] = (float) (short)948;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 3900.5F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {427.0F, 2.0F, 1336.0F, 948.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {427.0F, 2.0F, 1336.0F, 948.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = 'v';
      ArrayUtils.swap(charArray0, (-1), (int) (short)2, (int) (short)948);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'5', 'v'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[0] = (-2469);
      intArray0[3] = 0;
      intArray0[4] = 21;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(11, intArray0.length);
      assertEquals(11, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 21;
      floatArray0[3] = (float) (-2469);
      floatArray0[4] = (float) 21;
      floatArray0[5] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 2.0F, 21.0F, (-2469.0F), 21.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 9.35056628111297;
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)88, 21);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[9];
      floatArray0[4] = (float) 0;
      longArray0[2] = (long) (byte)88;
      longArray0[4] = (long) (-2469);
      longArray0[5] = (long) (-2469);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) 2;
      longArray0[8] = (long) 21;
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 88L, 0L, (-2469L), (-2469L), (-1L), 2L, 21L}, longArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, (int) (byte)88, 0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[0] = (-2469);
      intArray0[1] = 0;
      intArray0[4] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(11, intArray0.length);
      assertEquals(11, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 32;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 32;
      floatArray0[3] = (float) (-2469);
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) 0;
      floatArray0[7] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {32.0F, 2.0F, 32.0F, (-2469.0F), 32.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)88, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-2469);
      longArray0[2] = (long) (byte)88;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-2469);
      longArray0[5] = (long) (-2469);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) 32;
      longArray0[8] = (long) 0;
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, (-2469L), 88L, 0L, (-2469L), (-2469L), (-1L), 32L, 0L}, longArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-2146061265));
      assertNotNull(integer0);
      assertEquals((-2146061265), (int)integer0);
      
      Integer integer1 = Integer.getInteger(", Length: ", integer0);
      assertNotNull(integer1);
      assertEquals((-2146061265), (int)integer1);
      
      integerArray0[0] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertNotNull(integer2);
      assertEquals(6, integerArray0.length);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals((-2146061265), (int)integer2);
      
      integerArray0[1] = integer2;
      Integer integer3 = new Integer(2436);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(2436, (int)integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = new Integer((byte)90);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(90, (int)integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer((byte)90);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertEquals(90, (int)integer5);
      
      integerArray0[4] = integer5;
      Integer integer6 = new Integer((int) integerArray0[3]);
      assertNotNull(integer6);
      assertEquals(6, integerArray0.length);
      assertTrue(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertEquals(90, (int)integer6);
      
      integerArray0[5] = integer6;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0[0], integerArray0[1], 3979).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(6, integerArray0.length);
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) integerArray0, (java.util.Random) mockRandom0);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 65L;
      longArray0[2] = (-87L);
      longArray0[3] = (-1066L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-87L));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1L, 65L, (-87L), (-1066L)}, longArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 80;
      intArray0[1] = 68;
      intArray0[2] = (-829);
      intArray0[3] = 122;
      intArray0[4] = 1905;
      intArray0[5] = 581;
      intArray0[6] = (-1803);
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {80, 68, (-829), 122, 1905, 581, (-1803)}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '=';
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) '>';
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) '=';
      floatArray0[6] = (float) '=';
      floatArray0[7] = (float) 0;
      ArrayUtils.swap(floatArray0, 2726, 2726, 2726);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 62.0F, 0.0F, 61.0F, 61.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 61.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) '>';
      doubleArray0[4] = (double) '>';
      doubleArray0[5] = (double) 0.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3.0, 827);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {61.0, 0.0, 0.0, 62.0, 62.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (-1));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 62.0F, 0.0F, 61.0F, 61.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 62.0F, 0.0F, 61.0F, 61.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.swap((long[]) null, 2, 88, 102);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-56);
      ArrayUtils.swap(byteArray0, (-18), 670, 3040);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)12, (byte) (-56)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      char[] charArray0 = new char[0];
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1162, (int) (byte)0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2502;
      floatArray0[1] = (float) 2502;
      floatArray0[2] = (float) 2502;
      floatArray0[4] = (-1.0F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 1.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2502.0F, 2502.0F, 2502.0F, 0.0F, (-1.0F), 0.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 2502.0F;
      objectArray0[1] = (Object) (-1.0F);
      objectArray0[2] = (Object) 1.0F;
      objectArray0[3] = (Object) 2502.0F;
      objectArray0[4] = (Object) (-1.0F);
      objectArray0[5] = (Object) 2502.0F;
      objectArray0[6] = (Object) (-1.0F);
      objectArray0[7] = (Object) (-1.0F);
      objectArray0[8] = (Object) (-1.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) "Comparator should not be null.");
      assertNotNull(bitSet0);
      assertEquals(9, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 428.1101F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1.0F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 1.0F, 428.1101F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[4] = 'g';
      charArray0[1] = 'U';
      charArray0[2] = 'F';
      charArray0[3] = '7';
      charArray0[4] = '_';
      ArrayUtils.reverse(charArray0, 2, 2875);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'U', '_', '7', 'F'}, charArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-1);
      ArrayUtils.reverse(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)1, (byte) (-53), (byte) (-35), (byte) (-87), (byte)108}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = '|';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      Integer integer0 = new Integer((byte) (-44));
      assertNotNull(integer0);
      assertEquals((-44), (int)integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(2271);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2271, (int)integer1);
      
      integerArray0[2] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Double double0 = new Double((byte) (-44));
      assertNotNull(double0);
      assertEquals((-44.0), (double)double0, 0.01);
      
      Double double1 = new Double(240.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(240.0, (double)double1, 0.01);
      
      Double double2 = new Double((double) integerArray0[1]);
      assertNotNull(double2);
      assertEquals(8, integerArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-44.0), (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 240.0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {240.0, 240.0, 240.0, 240.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 0.1);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {240.0, 240.0, 240.0, 240.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {240.0, 240.0, 240.0, 240.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) integerArray0[1], (int) (byte) (-44), (double) doubleArray0[3]);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(8, integerArray0.length);
      assertArrayEquals(new double[] {240.0, 240.0, 240.0, 240.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray2, 580.33);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {240.0, 240.0, 240.0, 240.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {240.0, 240.0, 240.0, 240.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      long[] longArray0 = new long[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 120L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[0] = (-1347.08186059);
      doubleArray0[4] = (double) 120L;
      doubleArray0[5] = (double) 120L;
      doubleArray0[6] = (double) 120L;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)87;
      shortArray0[1] = (short) (byte) (-122);
      shortArray0[2] = (short) (byte)87;
      shortArray0[3] = (short)5849;
      shortArray0[4] = (short) (byte)87;
      shortArray0[5] = (short) (byte)87;
      ArrayUtils.shift(shortArray0, (int) (short)5849);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-122), (short)87, (short)5849, (short)87, (short)87, (short)87}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)5849);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 120L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[0] = (-1347.08186059);
      longArray0[0] = 0L;
      doubleArray0[4] = (double) 120L;
      doubleArray0[5] = (double) 120L;
      doubleArray0[6] = (double) 120L;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-74);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-18));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)87, (byte) (-122), (byte) (-74)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)87, (byte) (-122), (byte) (-74)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)87;
      shortArray0[1] = (short) (byte) (-122);
      shortArray0[2] = (short) (byte)87;
      shortArray0[3] = (short)5849;
      shortArray0[4] = (short) (byte)87;
      shortArray0[5] = (short) (byte)87;
      ArrayUtils.shift(shortArray0, (int) (short)5849);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-122), (short)87, (short)5849, (short)87, (short)87, (short)87}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)64;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-98);
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-98)}, intArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-679);
      intArray0[1] = (-1239);
      int[] intArray1 = ArrayUtils.add(intArray0, (-1239));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-679), (-1239)}, intArray0);
      assertArrayEquals(new int[] {(-679), (-1239), (-1239)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1239);
      longArray0[1] = (long) (-1239);
      longArray0[2] = (long) (-679);
      longArray0[3] = 1457L;
      longArray0[4] = (long) (-1239);
      longArray0[5] = (long) (-1239);
      longArray0[6] = (long) (-1239);
      longArray0[7] = (long) (-679);
      longArray0[8] = (long) (-679);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-1239L), (-1239L), (-679L), 1457L, (-1239L), (-1239L), (-1239L), (-679L), (-679L)}, longArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (byte)1, (int) (byte)2);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((double[]) null, (-1370), (-1337), (int) (byte)2);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false, false}, booleanArray0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-2146061265));
      assertNotNull(integer0);
      assertEquals((-2146061265), (int)integer0);
      
      Integer integer1 = Integer.getInteger(", Length: ", integer0);
      assertNotNull(integer1);
      assertEquals((-2146061265), (int)integer1);
      
      integerArray0[0] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertNotNull(integer2);
      assertEquals(6, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals((-2146061265), (int)integer2);
      
      integerArray0[1] = integer2;
      Integer integer3 = new Integer(2436);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(2436, (int)integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = new Integer((byte)90);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(90, (int)integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer((byte)90);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals(90, (int)integer5);
      
      integerArray0[4] = integer5;
      Integer integer6 = new Integer((int) integerArray0[3]);
      assertNotNull(integer6);
      assertEquals(6, integerArray0.length);
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertEquals(90, (int)integer6);
      
      integerArray0[5] = integer6;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(6, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Character character0 = new Character('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 2147483647L);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1431));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 53);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, (int) (short)2, 122, (int) (short)0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)2, (short)2, (short)0}, shortArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(9, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1237.2790971243);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(1237.2790971243, (double)double3, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1337), 2);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1337);
      intArray0[2] = (-1337);
      intArray0[3] = 0;
      ArrayUtils.shift(intArray0, 2, (-8), 2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-1337), (-1337), 0}, intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2176);
      shortArray0[1] = (short) (-2482);
      shortArray0[2] = (short)16757;
      shortArray0[3] = (short)2119;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-2482), 2143);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2176), (short) (-2482), (short)16757, (short)2119}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2176), (short) (-2482), (short)16757, (short)2119}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (short)2119;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) (short) (-2176);
      longArray0[5] = (long) 2143;
      longArray0[6] = (long) (-1337);
      longArray0[7] = (long) (short)2119;
      longArray0[8] = (long) (short)16757;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)2119, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2119, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 'c';
      floatArray0[2] = (float) 'c';
      floatArray0[1] = (float) 'c';
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-43));
      assertNotNull(integer0);
      assertEquals((-43), (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Byte byte0 = new Byte((byte) (-87));
      assertNotNull(byte0);
      assertEquals((byte) (-87), (byte)byte0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-43);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2876.66045);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-43.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-43.0), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 99.0F, 99.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[16];
      Integer integer0 = new Integer(760);
      assertNotNull(integer0);
      assertEquals(760, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(8);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(8, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(8);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(8, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(57);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(57, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = ArrayUtils.get(integerArray0, (-451));
      assertNull(integer4);
      assertEquals(16, integerArray0.length);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(59.0);
      assertNotNull(double0);
      assertEquals(59.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-3744));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-3744.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(454);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(454.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.5);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(1.5, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-451));
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((-451.0), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-3744));
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((-3744.0), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(1.5);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals(1.5, (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      doubleArray0[7] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 6027.801);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {59.0, (-3744.0), 454.0, 1.5, (-451.0), (-3744.0), 1.5, (-451.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, (-1507.2791213));
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertArrayEquals(new double[] {59.0, (-3744.0), 454.0, 1.5, (-451.0), (-3744.0), 1.5, (-451.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {59.0, (-3744.0), 454.0, 1.5, (-451.0), (-3744.0), 1.5, (-451.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0F;
      long[] longArray0 = new long[4];
      longArray0[0] = 1761L;
      longArray0[1] = (long) (-3602);
      longArray0[2] = (long) (byte) (-57);
      longArray0[3] = 1761L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-57L), 102);
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1761L, (-3602L), (-57L), 1761L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 1761L;
      ArrayUtils.reverse(longArray1, (-1652), 102);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 1761L}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Long[] longArray2 = new Long[1];
      longArray2[0] = (Long) 1761L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2, (long) 102);
      assertNotNull(longArray3);
      assertEquals(1, longArray2.length);
      assertEquals(1, longArray3.length);
      assertArrayEquals(new long[] {1761L}, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7Uo7y";
      stringArray0[2] = "JU";
      stringArray0[3] = "^MiKI*LOj.Ip&Wrr|";
      stringArray0[4] = "";
      stringArray0[5] = "#%'4K]s~8";
      stringArray0[6] = "";
      stringArray0[7] = "'mq[";
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1437);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1162, (int) (byte)0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-1437)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2502;
      floatArray0[1] = (float) 2502;
      floatArray0[2] = (float) 2502;
      floatArray0[3] = (float) Integer.MAX_VALUE;
      floatArray0[4] = (-1.0F);
      floatArray0[6] = (-1.0F);
      floatArray0[2] = 1.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2502.0F, 2502.0F, 1.0F, 2.14748365E9F, (-1.0F), 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = 'K';
      charArray0[2] = '/';
      charArray0[3] = 'v';
      charArray0[4] = '7';
      charArray0[5] = '#';
      charArray0[6] = 'D';
      charArray0[7] = 'j';
      ArrayUtils.shuffle(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'K', '/', 'v', '7', '#', 'D', 'j', ':'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1437));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1437);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1162, (int) (byte)0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-1437)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2502;
      floatArray0[1] = (float) 2502;
      floatArray0[2] = (float) 2502;
      floatArray0[3] = (float) Integer.MAX_VALUE;
      floatArray0[4] = (-1.0F);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, 3702);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 3702;
      longArray0[2] = (long) 1162;
      longArray0[3] = (long) (-1437);
      longArray0[4] = (long) (byte)0;
      longArray0[5] = 1275L;
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (long) 3702;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1L));
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {0L, 3702L, 1162L, (-1437L), 0L, 1275L, 0L, 3702L}, longArray0);
      assertArrayEquals(new long[] {0L, 3702L, 1162L, (-1437L), 0L, 1275L, 0L, 3702L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 368L;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1488);
      intArray0[2] = (-1488);
      intArray0[3] = 0;
      intArray0[4] = 43;
      intArray0[5] = 0;
      intArray0[6] = (-1488);
      Float float0 = new Float((double) 368L);
      assertNotNull(float0);
      assertEquals(368.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 's';
      charArray0[0] = 's';
      charArray0[3] = '2';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Integer[] integerArray0 = new Integer[0];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 's';
      charArray0[0] = '{';
      charArray0[3] = '2';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 37, 2);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'{', 's', '\u0000', '2'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Integer[] integerArray0 = new Integer[0];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Integer integer0 = new Integer(2181);
      assertNotNull(integer0);
      assertEquals(2181, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.swap(booleanArray0, 1, (-1), 78);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true}, booleanArray0));
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 90, (-4078), 2181);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Integer integer0 = new Integer(2181);
      assertNotNull(integer0);
      assertEquals(2181, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.swap(booleanArray0, (-1), (-1), 78);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray0));
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 90, (-4078), 2181);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, 2146870353);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray2 = new boolean[9];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = false;
      booleanArray2[5] = true;
      booleanArray2[6] = true;
      booleanArray2[7] = true;
      booleanArray2[8] = true;
      ArrayUtils.swap(booleanArray2, (-1302), Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(9, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, true}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[0] = (-1652);
      intArray0[1] = 13;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 13;
      floatArray0[1] = (float) (-1652);
      floatArray0[2] = (float) (-1652);
      floatArray0[3] = (float) 13;
      floatArray0[4] = (float) 13;
      floatArray0[5] = (float) (-1652);
      floatArray0[6] = (float) 13;
      floatArray0[7] = (float) 0;
      ArrayUtils.shift(floatArray0, 13, (-1652), 1565);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {13.0F, (-1652.0F), (-1652.0F), 13.0F, 13.0F, (-1652.0F), 13.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 13;
      intArray1[2] = 0;
      intArray1[3] = Integer.MAX_VALUE;
      intArray1[4] = (-87);
      intArray1[5] = 0;
      ArrayUtils.swap(intArray1, 3, 13, 0);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 13, 0, Integer.MAX_VALUE, (-87), 0}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean1;
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4);
      
      booleanArray0[1] = boolean4;
      Boolean boolean5 = Boolean.valueOf("[$Tr.{#6");
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5);
      
      booleanArray0[2] = boolean5;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean2;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, true}, booleanArray1));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)46;
      shortArray0[1] = (short) (-594);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)46, (short) (-594)}, shortArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (short) (-594));
      assertNotNull(mutableInt0);
      assertEquals((-594L), mutableInt0.longValue());
      assertEquals("-594", mutableInt0.toString());
      assertEquals((-594), (int)mutableInt0.toInteger());
      assertEquals((byte) (-82), mutableInt0.byteValue());
      assertEquals((-594), (int)mutableInt0.getValue());
      assertEquals((short) (-594), mutableInt0.shortValue());
      assertEquals((-594.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-594.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-594), mutableInt0.intValue());
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray1, (Object) mutableInt0, 10);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)46, (short) (-594)}, shortArray0);
      assertEquals((-594L), mutableInt0.longValue());
      assertEquals("-594", mutableInt0.toString());
      assertEquals((-594), (int)mutableInt0.toInteger());
      assertEquals((byte) (-82), mutableInt0.byteValue());
      assertEquals((-594), (int)mutableInt0.getValue());
      assertEquals((short) (-594), mutableInt0.shortValue());
      assertEquals((-594.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-594.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-594), mutableInt0.intValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 32;
      floatArray0[3] = (float) (-2469);
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 32;
      floatArray0[7] = (float) 2;
      ArrayUtils.swap(floatArray0, 1536, 0, 0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 32.0F, (-2469.0F), 32.0F, 0.0F, 32.0F, 2.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-2469);
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1536, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, (-2469.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, 1818, 0);
      assertNotNull(intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(14, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.swap(objectArray0, 0, 0, 0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)13;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shift(floatArray0, (-311));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      float[] floatArray2 = ArrayUtils.insert(Integer.MAX_VALUE, floatArray1, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      long[] longArray0 = new long[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[2] = (-1347.08186059);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[6] = (double) (short)5849;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (short)5849;
      floatArray0[2] = (float) (short)5849;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) (short)5849;
      floatArray0[5] = (float) (short)5849;
      floatArray0[6] = (float) (short)5849;
      floatArray0[7] = (float) (short)5849;
      floatArray0[8] = (float) (short)5849;
      ArrayUtils.shift(floatArray0, (-849));
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 5849.0F, 5849.0F, 5849.0F, 5849.0F, 5849.0F, 0.0F, 5849.0F, 5849.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-319), 630);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2415);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2471, 2146638792);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, (-2415)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2146638792;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) (-2415);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-2415);
      floatArray0[5] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {2.14663885E9F, 1.0F, (-2415.0F), 0.0F, (-2415.0F), 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1993.15412531);
      doubleArray0[1] = 43.0;
      doubleArray0[2] = (-1317.630044);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-404.573017);
      doubleArray0[5] = (-2247.448);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1221.31400305959);
      doubleArray0[8] = 3162.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-1993.15412531), 43.0, (-1317.630044), Double.NaN, (-404.573017), (-2247.448), 0.0, (-1221.31400305959), 3162.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1993.15412531), 43.0, (-1317.630044), Double.NaN, (-404.573017), (-2247.448), 0.0, (-1221.31400305959), 3162.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[16];
      Integer integer0 = new Integer(760);
      assertNotNull(integer0);
      assertEquals(760, (int)integer0);
      
      integerArray0[0] = integer0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)122;
      ArrayUtils.shuffle((Object[]) stringArray0, (java.util.Random) null);
      assertEquals(0, stringArray0.length);
      
      ArrayUtils.reverse((Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)89, 2);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) (byte)122;
      objectArray0[2] = (Object) null;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[3] = null;
      objectArray0[4] = (Object) (byte) (-62);
      objectArray0[5] = (Object) false;
      ArrayUtils.swap(objectArray0, 760, (-3610), 2094);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 368L;
      int[] intArray0 = new int[9];
      ArrayUtils.shift(longArray0, 0, (-1488), (-1));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {1L, 368L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      Object[] objectArray0 = new Object[9];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1379;
      int[] intArray3 = ArrayUtils.nullToEmpty(intArray2);
      assertNotNull(intArray3);
      assertEquals(1, intArray2.length);
      assertEquals(1, intArray3.length);
      assertArrayEquals(new int[] {1379}, intArray2);
      assertArrayEquals(new int[] {1379}, intArray3);
      assertSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray3, intArray1);
      assertSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 1080, 1252, (-1488));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1488);
      doubleArray0[1] = (double) 368L;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {368.0, (-1488.0)}, doubleArray0, 0.01);
      
      MutableInt mutableInt0 = new MutableInt(13);
      assertNotNull(mutableInt0);
      assertEquals(13, mutableInt0.intValue());
      assertEquals("13", mutableInt0.toString());
      assertEquals(13L, mutableInt0.longValue());
      assertEquals(13.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(13, (int)mutableInt0.getValue());
      assertEquals((byte)13, mutableInt0.byteValue());
      assertEquals(13, (int)mutableInt0.toInteger());
      assertEquals((short)13, mutableInt0.shortValue());
      assertEquals(13.0, mutableInt0.doubleValue(), 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[3], intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, 2, 65);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(2, int0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2469);
      longArray0[1] = (long) 65;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 32);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-2469L), 65L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3716.093634532435;
      doubleArray0[1] = (double) (-2469);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1029.55344814549);
      doubleArray0[5] = (double) (-2469L);
      doubleArray0[6] = (-957.717871858);
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) (-2469);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3716.093634532435, 0.0, 0.0, (-1029.55344814549), (-2469.0), (-957.717871858), 2.0, (-2469.0), (-2469.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-2469.0), (-1029.55344814549));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3716.093634532435, 0.0, 0.0, (-1029.55344814549), (-2469.0), (-957.717871858), 2.0, (-2469.0), (-2469.0)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1684));
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[16];
      Integer integer0 = new Integer(760);
      assertNotNull(integer0);
      assertEquals(760, (int)integer0);
      
      integerArray0[0] = integer0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)89;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3066, 1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)122, (byte)89}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)122;
      doubleArray0[1] = (double) (byte)89;
      doubleArray0[2] = (double) 760;
      doubleArray0[3] = (double) 3066;
      doubleArray0[4] = (double) (int)integerArray0[0];
      doubleArray0[5] = (double) (byte) (-62);
      doubleArray0[6] = (-5.841243);
      doubleArray0[7] = (double) (byte)122;
      doubleArray0[8] = (-3498.5534481454897);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-62.0));
      assertNotNull(doubleArray1);
      assertEquals(10, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {122.0, 89.0, 760.0, 3066.0, 760.0, (-62.0), (-5.841243), 122.0, (-3498.5534481454897), (-62.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {122.0, 89.0, 760.0, 3066.0, 760.0, (-62.0), (-5.841243), 122.0, (-3498.5534481454897)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1927;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1927, 2356);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)1927}, shortArray0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)59;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)59, (-1253));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)59}, byteArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3180.40982804346;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1814.0);
      doubleArray0[3] = (double) (-1253);
      doubleArray0[4] = (double) (byte)59;
      doubleArray0[5] = (double) (-1253);
      doubleArray0[6] = (double) (short)1927;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 59.0, 2356);
      assertNotNull(bitSet0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {3180.40982804346, 0.0, (-1814.0), (-1253.0), 59.0, (-1253.0), 1927.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1582L);
      byte byte0 = (byte)76;
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) (byte)76);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(76.0F, (float)float1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1582.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1582L);
      floatArray0[2] = (float) (-1582L);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1582.0F), 0.0F, (-1582.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 2145298792, ' ');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2145298792, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Float float0 = new Float(0.07738724603915031);
      assertNotNull(float0);
      assertEquals(0.07738724F, (float)float0, 0.01F);
      
      Float float1 = new Float((-781.2180951147782));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-781.2181F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[1] = float0;
      floatArray0[2] = float1;
      floatArray0[4] = float0;
      floatArray0[5] = floatArray0[1];
      floatArray0[7] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1427.5833F));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-1427.5833F), 0.07738724F, (-781.2181F), (-1427.5833F), 0.07738724F, 0.07738724F, (-1427.5833F), (-781.2181F)}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'I';
      intArray0[1] = (int) 'I';
      intArray0[2] = (int) 'I';
      intArray0[3] = (int) 'I';
      intArray0[4] = (-2146614923);
      intArray0[5] = (int) 'I';
      intArray0[6] = (-1700);
      intArray0[7] = 1;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(16, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {73, 73, 73, 73, (-2146614923), 73, (-1700), 1}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 1316.64F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-1427.5833F), 0.07738724F, (-781.2181F), (-1427.5833F), 0.07738724F, 0.07738724F, (-1427.5833F), (-781.2181F)}, floatArray1, 0.01F);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) floatArray0, (-2924), 73, 0);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)13;
      shortArray0[4] = (short)13;
      shortArray0[6] = (short)1852;
      shortArray0[7] = (short)298;
      shortArray0[8] = (short)298;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)298, (-2043));
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)13, (short)0, (short)0, (short)13, (short)0, (short)1852, (short)298, (short)298}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) (short)0;
      objectArray0[4] = (Object) (short)1852;
      ArrayUtils.reverse(objectArray0, 846, (int) (short)13);
      assertEquals(5, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short)13, (short)1852);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1965);
      shortArray0[1] = (short)13;
      shortArray0[2] = (short) (-1658);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-28246);
      shortArray0[6] = (short)1852;
      shortArray0[7] = (short)70;
      shortArray0[8] = (short) (-1245);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)70, (-1));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1965), (short)13, (short) (-1658), (short)2, (short) (-1), (short) (-28246), (short)1852, (short)70, (short) (-1245)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1311;
      shortArray0[1] = (short) (-1);
      short short0 = (short)100;
      shortArray0[2] = (short)100;
      shortArray0[3] = (short)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertNotNull(bitSet0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1311, (short) (-1), (short)100, (short)2}, shortArray0);
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      
      int int0 = bitSet0.previousClearBit((short) (-1));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1311, (short) (-1), (short)100, (short)2}, shortArray0);
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = '|';
      charArray0[2] = '$';
      charArray0[3] = ' ';
      charArray0[4] = 'X';
      charArray0[5] = '(';
      charArray0[6] = '8';
      char[] charArray1 = ArrayUtils.add(charArray0, 2, 'G');
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'+', '|', '$', ' ', 'X', '(', '8'}, charArray0);
      assertArrayEquals(new char[] {'+', '|', 'G', '$', ' ', 'X', '(', '8'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)1206;
      shortArray0[2] = (short) (-1);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1206;
      floatArray0[1] = (float) (short) (-1);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 1206.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)120;
      shortArray0[1] = (short) (-2424);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-2424);
      shortArray0[4] = (short) (-2424);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)120, (short) (-2424), (short) (-1), (short) (-2424), (short) (-2424)}, shortArray0);
      assertArrayEquals(new short[] {(short)120, (short) (-2424), (short) (-1), (short) (-2424), (short) (-2424), (short)1}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)16;
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-900);
      shortArray0[1] = (short) (-1578);
      shortArray0[2] = (short) (-1578);
      shortArray0[3] = (short) (-900);
      shortArray0[4] = (short)5;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)273);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-900), (short) (-1578), (short) (-1578), (short) (-900), (short)5}, shortArray0);
      assertArrayEquals(new short[] {(short) (-900), (short) (-1578), (short) (-1578), (short) (-900), (short)5, (short)273}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray1, (short) (-1578));
      assertNotNull(shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-900), (short) (-1578), (short) (-1578), (short) (-900), (short)5}, shortArray0);
      assertArrayEquals(new short[] {(short) (-900), (short) (-1578), (short) (-1578), (short) (-900), (short)5, (short)273}, shortArray1);
      assertArrayEquals(new short[] {(short) (-900), (short) (-900), (short)5, (short)273}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      Byte byte0 = Byte.valueOf((byte)113);
      assertNotNull(byte0);
      assertEquals((byte)113, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      Byte byte2 = new Byte((byte)33);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)33, (byte)byte2);
      
      Byte byte3 = new Byte((byte)109);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)109, (byte)byte3);
      
      ArrayUtils.shift((byte[]) null, (int) (short) (-900));
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      ArrayUtils.swap((Object[]) null, 2766, (int) (short)5, (-2835));
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean0);
      
      long[] longArray0 = new long[20];
      longArray0[0] = 0L;
      longArray0[1] = (-151L);
      longArray0[2] = 1619L;
      longArray0[3] = (-2469L);
      longArray0[4] = 1L;
      ArrayUtils.shift(longArray0, (-2208));
      assertEquals(20, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)25;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-32), 979);
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)0, (byte)1, (byte) (-103), (byte) (-75), (byte)25}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)1, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)0, (byte)1, (byte) (-103), (byte) (-75), (byte)25}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 979;
      doubleArray0[1] = (double) (byte) (-75);
      doubleArray0[2] = (double) (byte) (-75);
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) (byte) (-32);
      doubleArray0[6] = (double) (byte) (-44);
      doubleArray0[7] = 42.0;
      doubleArray0[8] = (double) (byte) (-44);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 979, (double) (byte) (-75));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {979.0, (-75.0), (-75.0), 1.0, 1.0, (-32.0), (-44.0), 42.0, (-44.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
      int[] intArray0 = new int[6];
      intArray0[0] = (-474);
      intArray0[1] = (-646);
      intArray0[2] = 2097;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[2] = (-628);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-646), 35);
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-474), (-646), (-628), 0, 0, (-1)}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-3094L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-3094L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(0);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 50);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) longArray0[0], (double) (-3094L));
      assertEquals(0, doubleArray0.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray1 = new long[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray1, 3159L);
      assertNotNull(bitSet1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (byte)90;
      longArray0[4] = (long) (byte)90;
      ArrayUtils.shift(longArray0, (-973));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 90L, 2L, 2L, 90L}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {0L, 90L, 2L, 2L, 90L}, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'w');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'w'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-973), 22.0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)90;
      shortArray0[1] = (short) (byte)90;
      shortArray0[2] = (short) (-2503);
      shortArray0[3] = (short) (byte)90;
      shortArray0[4] = (short) (byte)90;
      shortArray0[5] = (short) (byte)90;
      shortArray0[6] = (short) (-4025);
      shortArray0[7] = (short) (byte)90;
      ArrayUtils.shift(shortArray0, (int) (short)90, 114, 114);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)90, (short)90, (short) (-2503), (short)90, (short)90, (short)90, (short) (-4025), (short)90}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-128));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-128);
      shortArray0[1] = (short) (byte) (-128);
      shortArray0[2] = (short) (byte) (-128);
      shortArray0[3] = (short) (byte) (-128);
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-128), (short) (-128), (short) (-128), (short) (-128)}, shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-128);
      floatArray0[1] = (float) (short) (-128);
      floatArray0[2] = (-1466.6F);
      floatArray0[3] = (float) (short) (-128);
      floatArray0[4] = 1560.1775F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short) (-128));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-128.0F), (-128.0F), (-1466.6F), (-128.0F), 1560.1775F}, floatArray0, 0.01F);
      assertEquals(3, int0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      int int1 = ArrayUtils.indexOf(byteArray1, (byte) (-128));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 503, Integer.MAX_VALUE);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '=';
      charArray0[1] = '(';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2469.0F);
      floatArray0[1] = 427.0F;
      floatArray0[2] = 2202.0745F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-2469.0F), 427.0F, 2202.0745F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[15];
      intArray0[0] = 2128309686;
      intArray0[1] = (-2929);
      intArray0[2] = 611;
      intArray0[3] = (-1505);
      intArray0[4] = 49;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2128309686);
      assertNotNull(intArray1);
      assertEquals(14, intArray1.length);
      assertEquals(15, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 4);
      Class<Double> class0 = Double.class;
      classArray0[0] = class0;
      Class<Double> class1 = Double.class;
      classArray0[1] = class1;
      Class<Double> class2 = Double.class;
      classArray0[2] = class2;
      Class<Double> class3 = Double.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short)120, (-1260));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1260);
      doubleArray0[1] = (double) (byte) (-30);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-1260.0), (-30.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, 2, 65);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(2, int0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2469);
      longArray0[1] = (long) 65;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 32);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-2469L), 65L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3716.093634532435;
      doubleArray0[1] = (double) (-2469);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1029.55344814549);
      doubleArray0[5] = (double) (-2469L);
      doubleArray0[6] = (-957.717871858);
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) (-2469);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-2469.0), 0.0, 0.0, (-1029.55344814549), (-2469.0), (-957.717871858), 2.0, (-2469.0), 3716.093634532435}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-2469.0), (-1029.55344814549));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-2469.0), 0.0, 0.0, (-1029.55344814549), (-2469.0), (-957.717871858), 2.0, (-2469.0), 3716.093634532435}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '*';
      charArray0[2] = '|';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      Integer integer0 = new Integer((byte) (-44));
      assertNotNull(integer0);
      assertEquals((-44), (int)integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(2271);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2271, (int)integer1);
      
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Double double0 = new Double(2271);
      assertNotNull(double0);
      assertEquals(2271.0, (double)double0, 0.01);
      
      Double double1 = new Double((byte) (-44));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-44.0), (double)double1, 0.01);
      
      Double double2 = new Double(240.0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(240.0, (double)double2, 0.01);
      
      Double double3 = new Double((double) integerArray0[1]);
      assertNotNull(double3);
      assertEquals(8, integerArray0.length);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((-44.0), (double)double3, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double2;
      doubleArray0[2] = double2;
      doubleArray0[3] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 240.0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {2271.0, 240.0, 240.0, 240.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 0.1);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {2271.0, 240.0, 240.0, 240.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2271.0, 240.0, 240.0, 240.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) integerArray0[1], (int) (byte) (-44), (double) doubleArray0[3]);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, integerArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {2271.0, 240.0, 240.0, 240.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = '$';
      charArray0[2] = 'x';
      charArray0[3] = ':';
      charArray0[4] = '4';
      charArray0[5] = 'J';
      charArray0[6] = 'h';
      charArray0[7] = '-';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '$', (-1431));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {')', '$', 'x', ':', '4', 'J', 'h', '-'}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'J';
      intArray0[1] = (-1431);
      intArray0[2] = (int) 'J';
      intArray0[3] = (int) 'J';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1431), 3476);
      assertNotNull(bitSet0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {74, (-1431), 74, 74}, intArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2469.0);
      doubleArray0[3] = 592.455296639428;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 305.01200294637;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, 0.0, (-2469.0), 592.455296639428, (-1.0), 305.01200294637}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 9;
      intArray0[1] = 9;
      intArray0[2] = 18;
      intArray0[3] = 1338;
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {9, 9, 18, 1338}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, 0.0, (-2469.0), 592.455296639428, (-1.0), 305.01200294637}, doubleArray0, 0.01);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2469.0F);
      floatArray0[1] = 427.0F;
      floatArray0[2] = 2194.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-2469.0F), 427.0F, 2194.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2128309686;
      intArray0[1] = (-2929);
      intArray0[2] = 611;
      intArray0[3] = (-1505);
      intArray0[4] = 49;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2128309686);
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-2929), 611, (-1505), 49}, intArray1);
      assertArrayEquals(new int[] {2128309686, (-2929), 611, (-1505), 49}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2119;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2143, (int) (short)2119);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)2119}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)5849);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 111L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[2] = (-1347.08186059);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 111L;
      doubleArray0[5] = (double) 111L;
      doubleArray0[6] = (double) 111L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3358;
      doubleArray0[1] = (double) (-876);
      doubleArray0[2] = (double) (-876);
      doubleArray0[3] = (-693.4977017419);
      ArrayUtils.reverse(doubleArray0, 3947, 3358);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3358.0, (-876.0), (-876.0), (-693.4977017419)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)0;
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)90, (-3602));
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)0, 2146363416);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.reverse(longArray0, (int) (byte)0, 2962);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 2962);
      assertNotNull(longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)90;
      floatArray0[2] = (float) (byte) (-15);
      ArrayUtils.swap(floatArray0, 3476, 0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {90.0F, 0.0F, (-15.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-2153.61135875479);
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte) (-15);
      doubleArray0[5] = (double) (byte)90;
      doubleArray0[6] = (double) (byte)0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 90.0, (-15.0), 0.0, 0.0, (-2153.61135875479), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = 'i';
      ArrayUtils.shift(charArray0, (-1431));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'i', '>', '=', '='}, charArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, (-1431), 2);
      assertNotNull(charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("A blank string is not a valid number");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("A blank string is not a valid number");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean2);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      boolean boolean4 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean4);
      
      boolean boolean5 = ArrayUtils.contains(charArray1, '1');
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertFalse(boolean5 == boolean4);
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)92;
      Byte byte1 = new Byte((byte)92);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)92, (byte)byte1);
      
      byteArray0[0] = byte1;
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1680), (int) byte0);
      assertNotNull(bitSet0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) byte0;
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'b');
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {':', ':', ':'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) (short)120;
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-2637L);
      longArray0[2] = (-2637L);
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-2637L), 0L, (-2637L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-2637L), 0L, (-2637L)}, longArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-2637L);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int int1 = ArrayUtils.hashCode((Object) double0);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 506, 2146363416, (-1));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)17;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)17}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)17}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) (byte) (-32);
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) (byte)17;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) double0;
      objectArray0[7] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 2146363416, objectArray0[0]);
      assertNull(object0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[2] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[3] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, booleanArray0[1]);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1812.2542F;
      floatArray0[1] = (-1.0F);
      ArrayUtils.shift(floatArray0, 832, 832, 0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1812.2542F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) booleanArray0, (-3), (-3), 0);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      ArrayUtils.reverse((Object[]) booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2358.8F);
      floatArray0[1] = (-2069.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      ArrayUtils.swap(floatArray0, (-1029), (-1029), 0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-2358.8F), (-2069.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, '^', 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 0.0F);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, 0.0);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1029);
      ArrayUtils.swap(intArray0, (-187), 1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1029)}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '^';
      ArrayUtils.swap(longArray0, (-1029), (-187));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {94L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray1, (int) (byte) (-1), 'B');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = 0.0;
      doubleArray0[2] = 218.5495127247;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[3] = (-844.308599486678);
      doubleArray0[7] = (-94.947833473);
      doubleArray0[8] = (-811.9603960864);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      ArrayUtils.reverse(byteArray0, (-1), 65536);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, 482.47132230129);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Integer[] integerArray0 = new Integer[16];
      Integer integer0 = new Integer(760);
      assertNotNull(integer0);
      assertEquals(760, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(8);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(8, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(8);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(8, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(57);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(57, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = ArrayUtils.get(integerArray0, (-481));
      assertNull(integer4);
      assertEquals(16, integerArray0.length);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(59.0);
      assertNotNull(double0);
      assertEquals(59.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-3744));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-3744.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(454);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(454.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.5);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(1.5, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-481));
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((-481.0), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-3744));
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((-3744.0), (double)double5, 0.01);
      
      Double double6 = new Double(1.5);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertEquals(1.5, (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-3247.0));
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertEquals((-3247.0), (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 6027.801);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {59.0, (-3744.0), 454.0, 1.5, (-481.0), 6027.801, 1.5, (-3247.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[2] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[3] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, booleanArray0[1]);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1812.2542F;
      floatArray0[1] = 1812.2542F;
      ArrayUtils.shift(floatArray0, 832, 832, 0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1812.2542F, 1812.2542F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) booleanArray0, (-3), (-3), 0);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      ArrayUtils.reverse((Object[]) booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[1];
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1636.99984827);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[16];
      Integer integer0 = new Integer(760);
      assertNotNull(integer0);
      assertEquals(760, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(8);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(8, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(8);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(8, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(57);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(57, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = ArrayUtils.get(integerArray0, (-481));
      assertNull(integer4);
      assertEquals(16, integerArray0.length);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(59.0);
      assertNotNull(double0);
      assertEquals(59.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-3744));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-3744.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(454);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(454.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.5);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(1.5, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-481));
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((-481.0), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-3744));
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((-3744.0), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(1.5);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertEquals(1.5, (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-3247.0));
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertEquals((-3247.0), (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 6027.801);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {59.0, (-3744.0), 454.0, 1.5, (-481.0), (-3744.0), 1.5, (-3247.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-44);
      doubleArray0[1] = (double) (byte) (-44);
      doubleArray0[2] = (double) '|';
      ArrayUtils.shift(doubleArray0, (int) (byte) (-44), (-120), (-2487));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-44.0), (-44.0), 124.0}, doubleArray0, 0.01);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElements((boolean[]) null, booleanArray0);
      assertNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, false}, booleanArray0));
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-120);
      longArray0[1] = (long) (byte) (-44);
      longArray0[2] = (long) '|';
      longArray0[3] = (long) (-2487);
      longArray0[4] = (long) (-120);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, (Boolean) boolean0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1812.2542F;
      floatArray0[1] = (-1.0F);
      ArrayUtils.shift(floatArray0, 832, 832, 0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1812.2542F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray2 = new boolean[9];
      booleanArray2[0] = boolean0;
      booleanArray2[1] = boolean0;
      booleanArray2[2] = boolean0;
      booleanArray2[3] = true;
      booleanArray2[4] = boolean0;
      booleanArray2[5] = true;
      booleanArray2[6] = true;
      booleanArray2[7] = boolean0;
      booleanArray2[8] = boolean0;
      boolean[] booleanArray3 = ArrayUtils.removeElements(booleanArray2, booleanArray2);
      assertNotNull(booleanArray3);
      assertEquals(0, booleanArray3.length);
      assertEquals(9, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray2));
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray2, booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = 'h';
      charArray0[2] = '&';
      charArray0[3] = '!';
      charArray0[4] = 'T';
      charArray0[5] = '1';
      charArray0[6] = 'E';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, ']');
      assertNotNull(charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'', 'h', '&', '!', 'T', '1', 'E'}, charArray1);
      assertArrayEquals(new char[] {'', 'h', '&', '!', 'T', '1', 'E'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-887.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-887.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 101L;
      longArray0[1] = 1015L;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1032);
      intArray0[1] = 1460;
      intArray0[2] = 2;
      intArray0[3] = 1287;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1460, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)5849);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 111L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[2] = (-1347.08186059);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 111L;
      doubleArray0[5] = (double) 111L;
      doubleArray0[6] = (double) 111L;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)5849;
      intArray0[1] = (int) (short)5849;
      intArray0[2] = (int) (short)5849;
      intArray0[3] = (int) (short)5849;
      intArray0[4] = (int) (short)5849;
      intArray0[5] = (int) (short)5849;
      intArray0[6] = (int) (short)5849;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5849, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-2147483648L);
      longArray0[1] = 1799L;
      longArray0[3] = (-2147483648L);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)117;
      ArrayUtils.shift(byteArray0, (int) (byte) (-2), 2146238007, 719);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-2), (byte) (-2), (byte)117, (byte) (-101)}, byteArray0);
      
      Byte byte0 = new Byte((byte)64);
      assertNotNull(byte0);
      assertEquals((byte)64, (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[3];
      charArray0[2] = '\u0000';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '\u0000');
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Y', 83);
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-50);
      ArrayUtils.shift(byteArray0, (int) (byte) (-42), 818, (int) (byte) (-50));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-50), (byte) (-42), (byte) (-1)}, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) '\u0000';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-1), (int) (byte) (-42));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (byte) (-50));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-4744));
      assertNotNull(integer0);
      assertEquals((-4744), (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 7;
      Integer integer1 = new Integer(7);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(7, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-949));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-949), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2008));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals((-2008), (int)integer4);
      
      integerArray0[4] = integer4;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertNotNull(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertArrayEquals(new int[] {(-4744), 7, (-949), 0, (-2008)}, intArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)124;
      ArrayUtils.shift(byteArray0, 2);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)24, (byte)124, (byte) (-127), (byte)21}, byteArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-949);
      floatArray0[1] = (float) (byte)21;
      floatArray0[2] = (float) (int)integerArray0[4];
      floatArray0[3] = (float) (byte)124;
      floatArray0[4] = (float) (-4744);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) (byte)21;
      floatArray0[7] = (float) (byte)24;
      floatArray0[8] = (float) (int)integerArray0[4];
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)24);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-949.0F), 21.0F, (-2008.0F), 124.0F, (-4744.0F), 0.0F, 21.0F, 24.0F, (-2008.0F)}, floatArray0, 0.01F);
      assertTrue(int1 == int0);
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1578);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 1526.1F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1578.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)90;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)114, (byte)61, (byte)90}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)114, (byte)61, (byte)90}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-512L);
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[0] = 1916L;
      longArray0[5] = (-1L);
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {1916L, 0L, (-1L), 0L, 0L, (-1L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1916L, 0L, (-1L), 0L, 0L, (-1L), 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 0L);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-115);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(18, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)53, (byte)57, (byte) (-102), (byte) (-91), (byte)29, (byte)16, (byte) (-1), (byte) (-115)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 368L;
      int[] intArray0 = new int[9];
      ArrayUtils.shift(longArray0, 0, (-1488), (-1));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {1L, 368L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[3] = (Object) 1L;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1379;
      int[] intArray3 = ArrayUtils.nullToEmpty(intArray2);
      assertNotNull(intArray3);
      assertEquals(1, intArray2.length);
      assertEquals(1, intArray3.length);
      assertArrayEquals(new int[] {1379}, intArray2);
      assertArrayEquals(new int[] {1379}, intArray3);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 1080, 1252, (-1488));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1488);
      doubleArray0[1] = (double) 368L;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {368.0, (-1488.0)}, doubleArray0, 0.01);
      
      MutableInt mutableInt0 = new MutableInt(13);
      assertNotNull(mutableInt0);
      assertEquals(13.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(13, (int)mutableInt0.toInteger());
      assertEquals(13, (int)mutableInt0.getValue());
      assertEquals(13, mutableInt0.intValue());
      assertEquals(13L, mutableInt0.longValue());
      assertEquals(13.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)13, mutableInt0.shortValue());
      assertEquals("13", mutableInt0.toString());
      assertEquals((byte)13, mutableInt0.byteValue());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[3], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int int1 = ArrayUtils.hashCode((Object) double0);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 506, 2146363416, (-1));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)17;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)17}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)17}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)17;
      objectArray0[1] = (Object) (byte) (-32);
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) (byte)17;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) double0;
      objectArray0[7] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 2146363416, objectArray0[0]);
      assertNotNull(object0);
      assertEquals(8, objectArray0.length);
      assertEquals((byte)17, object0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)90;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-2));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)90, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14, (byte)90, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)90;
      objectArray0[1] = (Object) (byte)14;
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)14, 2);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[1] = (byte)14;
      byteArray2[3] = (byte)14;
      objectArray0[0] = (Object) (byte)90;
      boolean boolean0 = ArrayUtils.contains(byteArray2, (byte)0);
      assertEquals(6, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)14, (byte)0, (byte)14, (byte)0, (byte)0}, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertTrue(boolean0);
      
      ArrayUtils.shift(objectArray0, (int) (byte) (-2), (-1), 1471);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)0;
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)90, (-3602));
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)0;
      Object object0 = ArrayUtils.toPrimitive((Object) (byte)0);
      assertNotNull(object0);
      assertEquals((byte)0, object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte)0;
      ArrayUtils.shift(objectArray0, 13, (-900), (-15));
      assertEquals(3, objectArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 1);
      assertNull(intArray0);
      
      ArrayUtils.shift(objectArray0, 1, (-3602), 1344);
      assertEquals(3, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2469.0F);
      floatArray0[1] = 427.0F;
      floatArray0[2] = 2194.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-2469.0F), 427.0F, 2194.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2128309686;
      intArray0[2] = 611;
      intArray0[3] = (-1505);
      intArray0[4] = 49;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2128309686);
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 611, (-1505), 49}, intArray1);
      assertArrayEquals(new int[] {2128309686, 0, 611, (-1505), 49}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 2194.0F;
      objectArray0[1] = (Object) (-1505);
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) 49;
      objectArray0[4] = (Object) (-1505);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '<');
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 24;
      intArray0[3] = (-1383);
      intArray0[3] = (-510);
      intArray0[4] = (-48);
      intArray0[5] = (-2183);
      intArray0[6] = (-430);
      ArrayUtils.shift(intArray0, (-1324));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {24, 0, (-510), (-48), (-2183), (-430), 0}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-430);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1383);
      longArray0[2] = (long) (-48);
      floatArray0[3] = (float) 0;
      ArrayUtils.swap(floatArray0, (-214), (-48), (-430));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1383.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)8;
      MockRandom mockRandom0 = new MockRandom(2609L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-11), (byte) (-43), (byte)115, (byte)8, (byte)2}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '9');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'r'}, charArray0);
      assertArrayEquals(new char[] {'r'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)76);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)36, (byte)1, (byte) (-1)}, byteArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      charArray0[1] = '';
      charArray0[2] = '5';
      charArray0[3] = 'Y';
      charArray0[4] = '=';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'c', '', '5', 'Y', '='}, charArray0);
      assertArrayEquals(new char[] {'c', '', '5', 'Y', '=', 'c', '', '5', 'Y', '='}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-57));
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-15), (byte)90, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-15), (byte)90, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1761L, (-3602));
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-801), 2146363416);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.reverse(longArray0, (-801), 2962);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-15), (byte)90, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (-2313);
      shortArray0[2] = (short) (-2313);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-2313);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2836, (int) (short)0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-2313), (short) (-2313), (short)0, (short)0, (short)0, (short) (-2313)}, shortArray0);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, (int) (short)0);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short) (-2313);
      floatArray0[6] = (float) (short) (-2313);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(14, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-2313.0F), (-2313.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 787.5911F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      assertArrayEquals(new float[] {787.5911F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(" is not in the range '0' - '9'");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, (Boolean) null);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      ArrayUtils.shift(floatArray0, 0, 832, 832);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4123.515661;
      doubleArray0[2] = 1755.0;
      doubleArray0[3] = 4123.515661;
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = 'a';
      charArray0[2] = '[';
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '[';
      floatArray0[1] = (float) '[';
      floatArray0[2] = (float) 'a';
      floatArray0[3] = (float) 'a';
      floatArray0[4] = (float) 'a';
      floatArray0[5] = (float) '[';
      floatArray0[6] = 1.0F;
      floatArray0[7] = (float) '[';
      ArrayUtils.shift(floatArray0, (-2224), (-2224), 1);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {91.0F, 91.0F, 97.0F, 97.0F, 97.0F, 91.0F, 1.0F, 91.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)72);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, 97.0F);
      assertNotNull(bitSet1);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {91.0F, 91.0F, 97.0F, 97.0F, 97.0F, 91.0F, 1.0F, 91.0F}, floatArray0, 0.01F);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(5, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{2, 3, 4}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.cardinality());
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1392.303F);
      floatArray0[1] = 642.41F;
      floatArray0[2] = (-94.0F);
      floatArray0[3] = 2037.2764F;
      floatArray0[4] = 32.0F;
      ArrayUtils.reverse(floatArray0, 1899, 10);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1392.303F), 642.41F, (-94.0F), 2037.2764F, 32.0F}, floatArray0, 0.01F);
      
      Float[] floatArray1 = new Float[6];
      floatArray1[0] = (Float) 2037.2764F;
      floatArray1[1] = (Float) 2037.2764F;
      floatArray1[2] = (Float) 642.41F;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1670;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      int int0 = (-2244);
      ArrayUtils.reverse(shortArray0, 539, (-2244));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1670, (short)0, (short)0}, shortArray0);
      
      ArrayUtils.swap(shortArray0, (int) (short)1670, (int) (short)0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1670, (short)0, (short)0}, shortArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = '/';
      charArray0[2] = 't';
      charArray0[3] = ':';
      charArray0[4] = 't';
      charArray0[5] = 't';
      charArray0[6] = 'd';
      ArrayUtils.shift(floatArray0, 286);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      Character character0 = ArrayUtils.get((Character[]) null, (-3676));
      assertNull(character0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) mockRandom0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 286;
      floatArray0[1] = (float) 286;
      floatArray0[2] = (float) 286;
      floatArray0[3] = (float) 286;
      ArrayUtils.shift(floatArray0, 216);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {286.0F, 286.0F, 286.0F, 286.0F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[0];
      Character character0 = ArrayUtils.get(characterArray0, 286);
      assertNull(character0);
      assertEquals(0, characterArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) characterArray0, (Object) null);
      assertEquals(0, characterArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1224);
      intArray0[1] = 2351;
      intArray0[2] = 14;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-778));
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-1224), 2351, 14}, intArray0);
      assertArrayEquals(new int[] {(-1224), 2351, 14}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)88;
      shortArray0[1] = (short)16;
      ArrayUtils.reverse(shortArray0, (int) (short)16, 1175);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)88, (short)16}, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      ArrayUtils.reverse(byteArray0, 2351, (int) (byte) (-1));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-43), (byte)54, (byte) (-1), (byte) (-1)}, byteArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = (Object) 14;
      objectArray0[2] = (Object) (byte) (-43);
      objectArray0[3] = (Object) (-1224);
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertEquals(4, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = (-2085L);
      longArray0[4] = (-425L);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)948;
      shortArray0[1] = (short)948;
      shortArray0[2] = (short)948;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 427;
      floatArray0[1] = (float) (short)948;
      floatArray0[2] = (float) 1336L;
      floatArray0[3] = (float) (short)948;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 3900.5F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {427.0F, 948.0F, 1336.0F, 948.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {427.0F, 948.0F, 1336.0F, 948.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[2];
      ArrayUtils.swap(charArray0, (-1), (int) (short)948, (int) (short)948);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = (-2085L);
      longArray0[4] = (-425L);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)948;
      shortArray0[1] = (short)948;
      shortArray0[2] = (short)2;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)948);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)948, (short)948, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)948, (short)948, (short)948, (short)2}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.reverse(shortArray0, (int) (short)948, (int) (short)2);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)948, (short)948, (short)2}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 427;
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) 1336L;
      floatArray0[3] = (float) (short)948;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 3900.5F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {427.0F, 2.0F, 1336.0F, 948.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {427.0F, 2.0F, 1336.0F, 948.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = 'v';
      ArrayUtils.swap(charArray0, (-1), (int) (short)2, (int) (short)948);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'5', 'v'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-606));
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2.0);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = ArrayUtils.get(doubleArray0, (-606));
      assertNull(double1);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (short) (-1986);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2886L, (-1473));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1986L)}, longArray0);
      assertEquals((-1), int0);
      
      Character character0 = Character.valueOf('6');
      assertNotNull(character0);
      assertEquals('6', (char)character0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) doubleArray0[0], 1860);
      assertEquals(1, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '6';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2817.4F;
      floatArray0[1] = 743.23F;
      floatArray0[2] = 785.0F;
      floatArray0[3] = (-3685.64F);
      floatArray0[4] = 16757.0F;
      floatArray0[5] = (-94.0F);
      floatArray0[6] = (-2841.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {2817.4F, 743.23F, 785.0F, (-3685.64F), 16757.0F, (-94.0F), (-2841.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2817.4F, 743.23F, 785.0F, (-3685.64F), 16757.0F, (-94.0F), (-2841.0F), 1.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '*';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'*', '\u0000', '['}, charArray0);
      
      Character character0 = new Character('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      IntStream intStream0 = mockRandom0.ints(231L);
      assertNotNull(intStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockRandom0;
      ArrayUtils.shift(charArray0, 461, (int) '[', 2939);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'*', '\u0000', '['}, charArray0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[16];
      Integer integer0 = new Integer(760);
      assertNotNull(integer0);
      assertEquals(760, (int)integer0);
      
      integerArray0[0] = integer0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-62);
      byteArray0[2] = (byte)89;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3066, 11);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)0, (byte)89}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1791);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (-437);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(10, shortArray0.length);
      assertEquals(20, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.swap(shortArray0, 1791, 0);
      assertEquals(10, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      short[] shortArray2 = ArrayUtils.add(shortArray1, (short)3);
      assertNotNull(shortArray2);
      assertEquals(10, shortArray0.length);
      assertEquals(20, shortArray1.length);
      assertEquals(21, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) (short) (-437);
      objectArray0[2] = (Object) (short) (-437);
      objectArray0[3] = (Object) false;
      Double double0 = new Double((-1611.19696626));
      assertNotNull(double0);
      assertEquals((-1611.19696626), (double)double0, 0.01);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) double0);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertEquals(true, object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) true;
      ArrayUtils.shift(objectArray0, 845, (-335), 0);
      assertEquals(6, objectArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 1);
      assertNull(intArray0);
      
      ArrayUtils.shift(objectArray0, (-445), 30, (-1));
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1679;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-1742);
      shortArray0[5] = (short)10;
      shortArray0[6] = (short)1528;
      shortArray0[7] = (short) (-1);
      int[] intArray0 = new int[3];
      intArray0[0] = 2502;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1528;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2502, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1791);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = '5';
      charArray0[2] = 'v';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = '5';
      charArray0[6] = '5';
      charArray0[7] = 'v';
      ArrayUtils.swap(charArray0, (-2314), (-2314), 1791);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'v', '5', 'v', '5', '5', '5', '5', 'v'}, charArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (-2314), (-2314));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2358.8F);
      floatArray0[1] = (-2069.0F);
      floatArray0[2] = 0.0F;
      ArrayUtils.swap(floatArray0, (-1029), (-1029), 0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-2358.8F), (-2069.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, '^', 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, 0.0);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1029);
      ArrayUtils.swap(intArray0, (-187), 1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1029)}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '^';
      ArrayUtils.swap(longArray0, (-1029), (-187));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {94L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray1, (int) (byte) (-1), 'B');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-492);
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte) (-55);
      Byte byte1 = new Byte((byte) (-55));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-55), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-55), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2469);
      intArray0[1] = (int) byte0;
      intArray0[2] = (-2557);
      intArray0[3] = 1;
      intArray0[4] = (int) (short) (-492);
      intArray0[5] = (-1337);
      intArray0[6] = (int) byte0;
      intArray0[7] = (int) (short) (-492);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2557);
      intArray1[1] = (-2557);
      intArray1[2] = (int) byte0;
      intArray1[3] = (int) byte0;
      intArray1[4] = 837;
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray1);
      assertNotNull(intArray2);
      assertEquals(5, intArray1.length);
      assertEquals(13, intArray2.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2557), (-2557), (-55), (-55), 837}, intArray1);
      assertArrayEquals(new int[] {(-2469), (-55), (-2557), 1, (-492), (-1337), (-55), (-492)}, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2469);
      longArray0[1] = (long) (-55);
      ArrayUtils.swap(longArray0, (-3031), 5);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-2469L), (-55L)}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 837, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'i';
      floatArray0[1] = (float) 'i';
      floatArray0[2] = (float) 2;
      ArrayUtils.reverse(floatArray0, 2, 2);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {105.0F, 105.0F, 2.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      int int0 = (-779);
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      ArrayUtils.shift(charArray0, (-1310), (-1310), (-779));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'c'}, charArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'c';
      intArray0[1] = (-779);
      intArray0[2] = (-1310);
      intArray0[3] = (-779);
      intArray0[4] = (-1310);
      intArray0[5] = (int) 'c';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 368L;
      int[] intArray0 = new int[9];
      ArrayUtils.shift(longArray0, 0, (-1488), (-1));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {1L, 368L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1325);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)858;
      shortArray0[3] = (short) (-2071);
      shortArray0[4] = (short) (-195);
      shortArray0[5] = (short) (-6339);
      shortArray0[6] = (short)1965;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 1565, (short) (-2490));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1565, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 428.1101F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1.0F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 1.0F, 428.1101F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[4] = 'g';
      charArray0[1] = 'U';
      charArray0[2] = 'F';
      charArray0[3] = '7';
      charArray0[4] = '_';
      ArrayUtils.reverse(charArray0, 2, 2875);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'U', '_', '7', 'F'}, charArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      String string0 = ArrayUtils.toString((Object) "H$O}fT8~W*", "+vsJM|1LX/>825Q)");
      assertNotNull(string0);
      assertEquals("H$O}fT8~W*", string0);
      
      ArrayUtils.shift(longArray0, (-174));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      Float float0 = new Float((-1578.0));
      assertNotNull(float0);
      assertEquals((-1578.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) (-2469));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2469.0F), (float)float1, 0.01F);
      
      Float float2 = new Float(0.0);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1392.303F);
      floatArray0[1] = 642.41F;
      floatArray0[2] = (-94.0F);
      floatArray0[3] = 2037.2764F;
      floatArray0[4] = 32.0F;
      ArrayUtils.reverse(floatArray0, 1899, 10);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1392.303F), 642.41F, (-94.0F), 2037.2764F, 32.0F}, floatArray0, 0.01F);
      
      Float[] floatArray1 = new Float[6];
      floatArray1[0] = (Float) 2037.2764F;
      floatArray1[1] = (Float) 2037.2764F;
      floatArray1[2] = (Float) 642.41F;
      floatArray1[3] = (Float) 642.41F;
      Float float0 = new Float((-2358.3610546269224));
      assertNotNull(float0);
      assertEquals((-2358.361F), (float)float0, 0.01F);
      
      floatArray1[4] = float0;
      floatArray1[5] = (Float) 2037.2764F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-319), 630);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      Float[] floatArray2 = new Float[1];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = float0;
      Class<Float[]> class0 = Float[].class;
      Float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray2, class0);
      assertNotNull(floatArray3);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray3.length);
      assertSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1);
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, stringArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 100.0, (-1));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 630;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 630, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, (-615));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-319), 630);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1670;
      shortArray0[1] = (short)0;
      ArrayUtils.reverse(shortArray0, (int) (short)1670, (int) (short)1670);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1670, (short)0}, shortArray0);
      
      ArrayUtils.swap(shortArray0, (-1), (-615));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1670, (short)0}, shortArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-317);
      intArray0[1] = (-615);
      intArray0[2] = 2545;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)1670;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short)0;
      intArray0[8] = (-319);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2545, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '=';
      charArray0[2] = '=';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)88;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '=';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 61, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte)4;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)4;
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-98);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      Short short0 = ArrayUtils.get(shortArray0, (-529));
      assertNull(short0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-529);
      intArray0[1] = (-529);
      intArray0[2] = (-529);
      intArray0[3] = (-529);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -529, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Class<Object[]> class0 = Object[].class;
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null, class0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2817.4F;
      floatArray0[1] = (-1457.0F);
      floatArray0[2] = (-1366.9F);
      floatArray0[3] = 2548.62F;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1457.0F), (-1366.9F), 2548.62F, 2817.4F}, floatArray0, 0.01F);
      
      ArrayUtils.shift((short[]) null, 5571);
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(91.0);
      assertNotNull(double0);
      assertEquals(91.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2638.102));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2638.102), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2153.241756078567));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-2153.241756078567), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(5571);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(5571.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(2548.62F);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals(2548.6201171875, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      assertNotNull(double5);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals(91.0, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Class<Double[]> class0 = Double[].class;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0, class0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-2153.241756078567);
      doubleArray2[1] = 91.0;
      doubleArray2[2] = (double) (-1366.9F);
      doubleArray2[3] = (double) 2817.4F;
      doubleArray2[4] = 91.0;
      doubleArray2[5] = (double) 2817.4F;
      doubleArray2[6] = 2997.2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray2, 2997.2, (-1965));
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {(-2153.241756078567), 91.0, (-1366.9000244140625), 2817.39990234375, 91.0, 2817.39990234375, 2997.2}, doubleArray2, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)12;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)88, (int) (byte) (-11));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-11), (byte)59, (byte)12}, byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)39;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)39);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)39}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)39;
      objectArray0[1] = (Object) (short)39;
      objectArray0[2] = (Object) (short)39;
      objectArray0[3] = (Object) (short)39;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1]);
      assertNotNull(bitSet0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)39;
      doubleArray0[1] = (-128.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3.0, (double) (short)39);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {39.0, (-128.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)6;
      doubleArray0[1] = 0.7;
      doubleArray0[2] = (double) (byte)6;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 6.0, 419);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {6.0, 0.7, 6.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) (byte)6;
      floatArray0[2] = (float) (byte)6;
      floatArray0[3] = (float) (byte)6;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 2.0F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {2.0F, 6.0F, 6.0F, 6.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {6.0F, 6.0F, 6.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)6;
      longArray0[1] = (long) 419;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      ArrayUtils.swap(longArray0, (-712), (int) (byte)6, (-712));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {6L, 419L, 2L, 2L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-606));
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2.0);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 1536;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-606);
      floatArray0[5] = 1856.7F;
      floatArray0[6] = (float) 0;
      ArrayUtils.swap(floatArray0, 3, (-653), 1536);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-606.0F), 1856.7F, 0.0F, 1536.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 1536.0F, (-653));
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-606.0F), 1856.7F, 0.0F, 1536.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-606.0F), 1856.7F, 1536.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2146291925;
      longArray0[1] = (long) (-653);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 2146291925;
      longArray0[4] = 991L;
      ArrayUtils.swap(longArray0, (-606), 845, 4);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {2146291925L, (-653L), (-1L), 2146291925L, 991L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[0] = (-2469);
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(11, intArray0.length);
      assertEquals(11, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 32;
      floatArray0[3] = (float) (-2469);
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 32;
      floatArray0[7] = (float) 2;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 32.0F, (-2469.0F), 32.0F, 0.0F, 32.0F, 2.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 32;
      longArray0[1] = (long) (-2469);
      longArray0[2] = (long) (-2469);
      longArray0[3] = (long) 32;
      longArray0[4] = (long) 0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-2469));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {32L, (-2469L), (-2469L), 32L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-2469L), 32L, (-2469L), (-2469L), 32L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-2469), (-2469), 2048);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-2469L), 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1652);
      intArray0[1] = 13;
      intArray0[2] = (-2211);
      intArray0[3] = 0;
      intArray0[4] = (-1431);
      intArray0[5] = (-1667);
      intArray0[6] = 5;
      ArrayUtils.swap(intArray0, 120, (-1667));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1652), 13, (-2211), 0, (-1431), (-1667), 5}, intArray0);
      
      ArrayUtils.shift(intArray0, (-2211));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {5, (-1652), 13, (-2211), 0, (-1431), (-1667)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 13;
      objectArray0[1] = (Object) (-1667);
      objectArray0[2] = (Object) 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) boolean0, 2);
      assertNotNull(bitSet0);
      assertEquals(4, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = '&';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '{');
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'S', '&'}, charArray0);
      assertArrayEquals(new char[] {'{', 'S', '&'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short)120, (-1260));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-30)}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) (byte)1;
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1.5);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(143.84157633);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(143.84158F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1459.1616F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 1.5F, 143.84158F}, floatArray1, 0.01F);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0, (String) null);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-779L));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-779L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1212;
      intArray0[1] = 34;
      intArray0[2] = (-2043);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {1212, 34, (-2043)}, intArray0);
      assertArrayEquals(new int[] {1212, 34, (-2043), 1212, 34, (-2043)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = '_';
      charArray0[2] = ':';
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      Byte byte2 = new Byte((byte)4);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)4, (byte)byte2);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[2] = byte2;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '_';
      intArray0[1] = (-2557);
      intArray0[2] = (int) ':';
      intArray0[3] = (-1337);
      intArray0[4] = (int) ':';
      intArray0[5] = 3;
      intArray0[6] = (int) byte0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      assertArrayEquals(new int[] {95, (-2557), 58, (-1337), 58, 3, 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1578);
      doubleArray0[1] = (double) 0.0F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1578.0), (double) (short) (-1578));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1578.0), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '*';
      charArray0[2] = ';';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'*', ';', '['}, charArray0);
      
      Character character0 = new Character('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockRandom0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 2);
      assertEquals(3, objectArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '*';
      doubleArray0[1] = (double) '[';
      doubleArray0[2] = (double) ';';
      doubleArray0[3] = (double) '[';
      doubleArray0[4] = (double) ';';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 59.0, (double) 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {42.0, 91.0, 59.0, 91.0, 59.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(4, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      ArrayUtils.shift((Object[]) integerArray0, 1791);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1791);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-437);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.swap(shortArray0, 1791, 0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      short[] shortArray2 = ArrayUtils.add(shortArray1, (short)3);
      assertNotNull(shortArray2);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertEquals(13, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) (short) (-437);
      objectArray0[2] = (Object) (short) (-437);
      objectArray0[3] = (Object) false;
      Double double0 = new Double((-1611.19696626));
      assertNotNull(double0);
      assertEquals((-1611.19696626), (double)double0, 0.01);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) double0);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertEquals(true, object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) true;
      ArrayUtils.shift(objectArray0, 845, (-335), 0);
      assertEquals(6, objectArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 1);
      assertNull(intArray0);
      
      ArrayUtils.shift(objectArray0, (-445), 1, (-1));
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Integer integer0 = new Integer(2181);
      assertNotNull(integer0);
      assertEquals(2181, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.swap(booleanArray0, 1, (-1), 78);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)5849;
      ArrayUtils.shift(booleanArray0, (-1666), 512, (int) (short)5849);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-32);
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) true;
      objectArray0[4] = (Object) (byte) (-32);
      objectArray0[5] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 2146363416, objectArray0[0]);
      assertNull(object0);
      assertEquals(8, objectArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift(booleanArray1, 1470);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      int[] intArray0 = new int[3];
      intArray0[0] = 1791;
      intArray0[1] = 106;
      intArray0[2] = 1791;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-4));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1791;
      ArrayUtils.swap(floatArray0, 32, 106, 106);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1791.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-1392.303F));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1791.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(booleanArray0, (-1487));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (-2224));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2224, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '*';
      floatArray0[1] = (float) '*';
      floatArray0[2] = (float) '*';
      floatArray0[3] = (float) 'c';
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'c';
      intArray0[1] = (-835);
      intArray0[2] = (int) '*';
      intArray0[3] = (int) 'c';
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 1);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)34;
      shortArray0[1] = (short)4020;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)34, (short)4020}, shortArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 42.0F);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-606));
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2.0);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = ArrayUtils.get(doubleArray0, (-606));
      assertNull(double1);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[2] = (short)948;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)948}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1, (short)0, (short)948}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.reverse(shortArray0, 427, 37);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)948}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) (-606);
      floatArray0[2] = (float) 37;
      floatArray0[3] = (float) 37;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (float) (short)1;
      floatArray0[6] = (float) (short)948;
      floatArray0[7] = (float) 427;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1002.0F));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, (-606.0F), 37.0F, 37.0F, Float.NaN, 1.0F, 948.0F, 427.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, (-606.0F), 37.0F, 37.0F, Float.NaN, 1.0F, 948.0F, 427.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-111));
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)13;
      shortArray0[4] = (short)13;
      shortArray0[6] = (short)1852;
      shortArray0[7] = (short)298;
      shortArray0[8] = (short)298;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)298, (-2043));
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)13, (short)0, (short)0, (short)13, (short)0, (short)1852, (short)298, (short)298}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = objectArray0[0];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1452.0926));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) 2;
      floatArray0[5] = (float) (-2469);
      floatArray0[6] = (float) 32;
      floatArray0[7] = (float) 2;
      ArrayUtils.swap(floatArray0, 1536, 0, (-2469));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2.0F, 0.0F, 0.0F, 0.0F, (-2469.0F), 32.0F, 2.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shuffle(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 0.0F, 0.0F, 0.0F, (-2469.0F), 32.0F, 2.0F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String[] stringArray1 = ArrayUtils.insert(2, stringArray0, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(4, stringArray1.length);
      assertEquals(2, stringArray0.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = ArrayUtils.toStringArray((Object[]) stringArray0);
      assertNotNull(stringArray2);
      assertEquals(2, stringArray2.length);
      assertEquals(2, stringArray0.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1.0F;
      objectArray0[1] = (Object) 1.0F;
      long[] longArray0 = new long[4];
      longArray0[0] = 1761L;
      longArray0[1] = (long) (-3602);
      longArray0[2] = (long) (byte) (-57);
      longArray0[3] = 1761L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-57L), 102);
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1761L, (-3602L), (-57L), 1761L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 1761L;
      ArrayUtils.reverse(longArray1, (-1652), 102);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {1761L}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Long[] longArray2 = new Long[1];
      longArray2[0] = (Long) 1761L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2, (long) 102);
      assertNotNull(longArray3);
      assertEquals(1, longArray2.length);
      assertEquals(1, longArray3.length);
      assertArrayEquals(new long[] {1761L}, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7Uo7y";
      stringArray0[1] = "=/TJux";
      stringArray0[2] = "0X";
      stringArray0[3] = "^MiKI*LOj.Ip&Wrr|";
      stringArray0[4] = "";
      stringArray0[5] = "#%'4K]s~8";
      stringArray0[6] = "";
      stringArray0[7] = "'mq[";
      // Undeclared exception!
      try { 
        ArrayUtils.insert(46, stringArray0, stringArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = '|';
      charArray0[2] = '$';
      charArray0[3] = ' ';
      charArray0[4] = 'X';
      charArray0[5] = '(';
      charArray0[6] = '8';
      char[] charArray1 = ArrayUtils.add(charArray0, 2, 'G');
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'+', '|', '$', ' ', 'X', '(', '8'}, charArray0);
      assertArrayEquals(new char[] {'+', '|', 'G', '$', ' ', 'X', '(', '8'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)1206;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1044);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)10, (short)1206, (short) (-1), (short) (-1044), (short)10, (short)1206, (short) (-1), (short) (-1044)}, shortArray1);
      assertArrayEquals(new short[] {(short)10, (short)1206, (short) (-1), (short) (-1044)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.swap(shortArray0, (-3832), (int) (short)10);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)10, (short)1206, (short) (-1), (short) (-1044)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      short[] shortArray2 = ArrayUtils.add(shortArray1, (short)1947);
      assertNotNull(shortArray2);
      assertEquals(8, shortArray1.length);
      assertEquals(9, shortArray2.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)10, (short)1206, (short) (-1), (short) (-1044), (short)10, (short)1206, (short) (-1), (short) (-1044)}, shortArray1);
      assertArrayEquals(new short[] {(short)10, (short)1206, (short) (-1), (short) (-1044), (short)10, (short)1206, (short) (-1), (short) (-1044), (short)1947}, shortArray2);
      assertArrayEquals(new short[] {(short)10, (short)1206, (short) (-1), (short) (-1044)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)10, (short)1206, (short) (-1), (short) (-1044), (short)10, (short)1206, (short) (-1), (short) (-1044)}, shortArray1);
      assertArrayEquals(new short[] {(short)10, (short)1206, (short) (-1), (short) (-1044)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'B');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)53;
      shortArray0[1] = (short)23;
      shortArray0[2] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)1, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)53, (short)23, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)53, (short)53, (short)23, (short)1, (short)23, (short)1}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray1, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)53, (short)23, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)53, (short)53, (short)23, (short)1, (short)23, (short)1}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      
      ArrayUtils.reverse(byteArray0, (-903), (-2937));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 49.9);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      ArrayUtils.reverse((float[]) null, (-362), (-104));
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false, true}, booleanArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 120;
      intArray0[1] = 120;
      ArrayUtils.swap(intArray0, 120, 3358);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {120, 120}, intArray0);
      
      ArrayUtils.shift(intArray0, (-853));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {120, 120}, intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 120;
      longArray0[1] = (long) 120;
      longArray0[2] = (long) 120;
      longArray0[3] = (long) 3358;
      longArray0[4] = (long) 120;
      longArray0[5] = (long) (-853);
      longArray0[6] = (long) 120;
      longArray0[7] = (long) 120;
      longArray0[8] = (long) 120;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 3493);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3493, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-128));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-128);
      shortArray0[1] = (short) (byte) (-128);
      long[] longArray0 = new long[11];
      longArray0[0] = (-3463L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1140L));
      assertNotNull(longArray1);
      assertEquals(11, longArray0.length);
      assertEquals(12, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(byteArray1, (-164), (int) (byte) (-93), (-164));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-128);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-164), 76);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-128.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-128.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-985.0));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-128.0)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[0];
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = 'i';
      ArrayUtils.shift(charArray0, (int) '>');
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'=', 'i', '>', '='}, charArray0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 2146190761);
      assertNull(intArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) '=';
      objectArray0[1] = (Object) '>';
      ArrayUtils.shift(objectArray0, 1, 2, (-261));
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (-3602);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (-3602);
      longArray0[4] = (long) (-3602);
      longArray0[5] = (-3071L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2699L, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, (-3602L), 0L, (-3602L), (-3602L), (-3071L)}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      ArrayUtils.reverse(longArray0, 13, (-3602));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, (-3602L), 0L, (-3602L), (-3602L), (-3071L)}, longArray0);
      
      Long[] longArray1 = new Long[5];
      longArray1[0] = (Long) (-3602L);
      longArray1[1] = (Long) (-3602L);
      longArray1[2] = (Long) 0L;
      longArray1[3] = (Long) (-3602L);
      longArray1[4] = (Long) (-3071L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 2962);
      assertNotNull(longArray2);
      assertEquals(5, longArray2.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-3602L), (-3602L), 0L, (-3602L), (-3071L)}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      
      long[] longArray3 = ArrayUtils.addAll(longArray2, longArray0);
      assertNotNull(longArray3);
      assertEquals(5, longArray2.length);
      assertEquals(11, longArray3.length);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-3602L), (-3602L), 0L, (-3602L), (-3071L)}, longArray2);
      assertArrayEquals(new long[] {0L, (-3602L), 0L, (-3602L), (-3602L), (-3071L)}, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray3);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray2));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = new Long[1];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 2962);
      assertNotNull(longArray2);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertArrayEquals(new long[] {2962L}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)90;
      floatArray0[2] = (float) (byte) (-15);
      long[] longArray3 = ArrayUtils.addAll(longArray2, longArray2);
      assertNotNull(longArray3);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertEquals(2, longArray3.length);
      assertArrayEquals(new long[] {2962L}, longArray2);
      assertArrayEquals(new long[] {2962L, 2962L}, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {90.0F, 0.0F, (-15.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 368L;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1488);
      intArray0[1] = 1379;
      intArray0[2] = (-1488);
      intArray0[3] = 0;
      intArray0[4] = 43;
      intArray0[5] = 1379;
      intArray0[6] = (-1488);
      Float float0 = new Float((double) 368L);
      assertNotNull(float0);
      assertEquals(368.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 1379);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 42L);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {1L, 368L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1L, 368L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.swap(floatArray1, 7, 7);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)0;
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)90, (-3602));
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)0, 2146363416);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.reverse(longArray0, (int) (byte)0, 2962);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 2962);
      assertNotNull(longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)90;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte) (-15);
      ArrayUtils.swap(floatArray0, 3476, 6);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {90.0F, 0.0F, (-15.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      int[] intArray0 = new int[14];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(14, intArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1791.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1122.264F;
      floatArray0[4] = 510.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {1791.0F, 0.0F, (-1.0F), 1122.264F, 510.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1791.0F, 0.0F, (-1.0F), 1122.264F, 510.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1122.264F;
      doubleArray0[1] = (double) 1791.0F;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[5] = (double) 1791.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3333, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3333, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.5;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)5849;
      shortArray0[1] = (short)5069;
      shortArray0[2] = (short)5849;
      shortArray0[3] = (short)5069;
      shortArray0[4] = (short)5849;
      shortArray0[5] = (short) (-147);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)5849);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)5849, (short)5069, (short)5849, (short)5069, (short)5849, (short) (-147)}, shortArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (short) (-147));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)5069;
      floatArray0[1] = (float) (short)5069;
      floatArray0[2] = (-1103.0F);
      floatArray0[3] = (float) (short) (-147);
      floatArray0[4] = (float) (short)5849;
      floatArray0[5] = (float) (short)5069;
      floatArray0[6] = (float) (short)5849;
      floatArray0[7] = (float) (short)5849;
      floatArray0[8] = (float) (short)5069;
      ArrayUtils.shift(floatArray0, (int) (short)5849, 0, (int) (short) (-147));
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {5069.0F, 5069.0F, (-1103.0F), (-147.0F), 5849.0F, 5069.0F, 5849.0F, 5849.0F, 5069.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1814), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1814, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-319);
      longArray0[2] = 1536L;
      Byte byte0 = new Byte((byte)117);
      assertNotNull(byte0);
      assertEquals((byte)117, (byte)byte0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) byte0, (-3589));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 37.0;
      ArrayUtils.swap(doubleArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 37.0}, doubleArray0, 0.01);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("C}#MPqqF^7!");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((String) null);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean boolean3 = false;
      Boolean boolean4 = Boolean.valueOf(false);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7);
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = new Boolean(boolean3);
      assertNotNull(boolean8);
      assertFalse(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean3));
      assertFalse(boolean8);
      
      booleanArray0[7] = boolean8;
      Boolean boolean9 = Boolean.TRUE;
      assertNotNull(boolean9);
      assertFalse(boolean9.equals((Object)boolean1));
      assertFalse(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean4));
      assertFalse(boolean9.equals((Object)boolean2));
      assertFalse(boolean9.equals((Object)boolean3));
      assertTrue(boolean9);
      
      booleanArray0[8] = boolean9;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, true, false, true}, booleanArray1));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) boolean2, (int) (short)0);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean4));
      assertFalse(boolean2.equals((Object)boolean6));
      assertFalse(boolean2.equals((Object)boolean5));
      assertFalse(boolean2.equals((Object)boolean9));
      assertTrue(boolean2.equals((Object)boolean8));
      assertFalse(boolean2.equals((Object)boolean7));
      assertTrue(boolean2.equals((Object)boolean3));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '*';
      charArray0[2] = ';';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'*', ';', '['}, charArray0);
      
      Character character0 = new Character('W');
      assertNotNull(character0);
      assertEquals('W', (char)character0);
      
      LongStream longStream0 = mockRandom0.longs(1933L);
      assertNotNull(longStream0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockRandom0;
      DoubleStream doubleStream0 = mockRandom0.doubles(0L);
      assertNotNull(doubleStream0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 2);
      assertEquals(3, objectArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0, (java.util.Random) mockRandom0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      int[] intArray0 = new int[7];
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1114.0F;
      floatArray0[1] = 21.0F;
      floatArray0[2] = (-2350.551F);
      ArrayUtils.swap(floatArray0, 0, 0, (-2387));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1114.0F, 21.0F, (-2350.551F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2350.551F);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-2387);
      doubleArray0[3] = (double) (-2350.551F);
      doubleArray0[4] = (double) (-2387);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 21.0F, (-1759));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2350.551025390625), 0.0, (-2387.0), (-2350.551025390625), (-2387.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-2350.551025390625), 0.0, (-2387.0), (-2350.551025390625), (-2387.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2350.551025390625), 0.0, (-2387.0), (-2350.551025390625), (-2387.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2387), 0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.shuffle(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2350.551025390625);
      ArrayUtils.shift(objectArray0, 189);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.swap(objectArray0, 189, (-1759), (-2387));
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      char[] charArray0 = new char[0];
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 0, 56, 0);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2123354617), (-2123354617));
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      int[] intArray0 = new int[5];
      Character character0 = Character.valueOf('(');
      assertNotNull(character0);
      assertEquals('(', (char)character0);
      
      Character character1 = new Character('+');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('+', (char)character1);
      
      Character character2 = new Character('6');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('6', (char)character2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) character0;
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = (-1457.0F);
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'U';
      charArray0[2] = ']';
      charArray0[3] = '>';
      charArray0[4] = '\\';
      charArray0[5] = 'Q';
      charArray0[6] = ']';
      charArray0[7] = 't';
      charArray0[8] = ':';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\\', 1);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'j', 'U', ']', '>', '\\', 'Q', ']', 't', ':'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '=';
      charArray0[2] = '=';
      ArrayUtils.shift(longArray0, 2);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '>');
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'>', '=', '=', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'=', '=', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.lastIndexOf(charArray1, '>');
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'>', '=', '=', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'=', '=', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2358.8F);
      floatArray0[1] = (-2069.0F);
      floatArray0[2] = 0.0F;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "S$Y";
      stringArray0[1] = "";
      stringArray0[2] = "Ih";
      stringArray0[3] = "bp";
      stringArray0[4] = "[t9ck7=IW2jO";
      stringArray0[5] = "~Edo";
      stringArray0[6] = "a`52Cj_N8nvA\"^'g";
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)12;
      shortArray0[1] = (short)12;
      shortArray0[2] = (short) (-3420);
      shortArray0[3] = (short)12;
      shortArray0[4] = (short)12;
      ArrayUtils.swap(shortArray0, 52, (-430), 2146084635);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)12, (short)12, (short) (-3420), (short)12, (short)12}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 2146084635);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = 'j';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'j', (int) (short)12);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'j'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short)120, (-1260));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-30)}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-1260));
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L}, longArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1437));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(1840.95F);
      assertNotNull(float0);
      assertEquals(1840.95F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = Float.valueOf((float) (-1437));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1437.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 120;
      intArray0[1] = (-1437);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {120, (-1437)}, intArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 2802);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-18));
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-74);
      shortArray0[1] = (short) (byte) (-18);
      shortArray0[2] = (short) (byte) (-122);
      shortArray0[4] = (short) (byte) (-74);
      shortArray0[5] = (short) (byte) (-122);
      shortArray0[6] = (short) (byte) (-18);
      ArrayUtils.shift(shortArray0, (-767));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-74), (short) (-122), (short) (-18), (short) (-74), (short) (-18), (short) (-122), (short)0}, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("RNyCj9vP,;~ID1S");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("I~tj6yqX");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("I~tj6yqX");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean((boolean) boolean0);
      assertNotNull(boolean6);
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean4));
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf(true);
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = Boolean.FALSE;
      assertNotNull(boolean8);
      assertTrue(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean4));
      assertFalse(boolean8);
      
      booleanArray0[8] = boolean8;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-18);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-18.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-319), 630);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)59;
      byteArray0[0] = (byte)59;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)59, (int) (byte)59);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-11);
      ArrayUtils.reverse(doubleArray0, (int) (byte)59, (-1));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-11.0), 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1965, booleanArray1, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1965, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 4002;
      intArray0[2] = 4002;
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) 4002;
      integerArray0[1] = (Integer) Integer.MAX_VALUE;
      Integer integer0 = new Integer(201);
      assertNotNull(integer0);
      assertEquals(201, (int)integer0);
      
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) 4002;
      integerArray0[5] = (Integer) Integer.MAX_VALUE;
      integerArray0[6] = (Integer) 4002;
      integerArray0[7] = (Integer) 4002;
      integerArray0[8] = (Integer) 4002;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 808);
      assertNotNull(intArray1);
      assertEquals(9, integerArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {4002, Integer.MAX_VALUE, 808, 201, 4002, Integer.MAX_VALUE, 4002, 4002, 4002}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 201;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) (int)integerArray0[5];
      floatArray0[3] = (float) (int)integerArray0[1];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 2.14748365E9F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {201.0F, 2.14748365E9F, 2.14748365E9F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {201.0F, 2.14748365E9F, 2.14748365E9F, 2.14748365E9F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      ArrayUtils.swap(charArray0, (-2086), Integer.MAX_VALUE, (int) integerArray0[0]);
      assertEquals(9, integerArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'V'}, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (int)integerArray0[3];
      doubleArray0[1] = (double) 2.14748365E9F;
      doubleArray0[2] = (double) 'V';
      doubleArray0[3] = (double) 'V';
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) integerArray0[7], 2, 246.886);
      assertNotNull(bitSet0);
      assertEquals(9, integerArray0.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {201.0, 2.147483648E9, 86.0, 86.0, 2.147483647E9}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[3] = (-2469);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(14, intArray0.length);
      assertSame(intArray0, intArray1);
      assertFalse(boolean0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2469), (-2469));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-2469);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 854.0F;
      floatArray0[1] = (-246.50766F);
      floatArray0[2] = 1812.2542F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-233.69F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {854.0F, (-246.50766F), 1812.2542F, 0.0F, (-233.69F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {854.0F, (-246.50766F), 1812.2542F, 0.0F, (-233.69F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {854.0F, (-246.50766F), 1812.2542F, 0.0F, (-233.69F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-155);
      intArray0[1] = 966;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-155), 966}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0);
      assertNotNull(stringArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      boolean[] booleanArray2 = new boolean[1];
      booleanArray2[0] = true;
      boolean[] booleanArray3 = ArrayUtils.addFirst(booleanArray2, false);
      assertNotNull(booleanArray3);
      assertEquals(2, booleanArray3.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray2, booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray2.length);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {854.0F, (-246.50766F), 1812.2542F, 0.0F, (-233.69F)}, floatArray0, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = '>';
      charArray0[2] = 'q';
      charArray0[3] = 'R';
      charArray0[4] = 'u';
      charArray0[5] = '=';
      charArray0[6] = '';
      charArray0[7] = 'K';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '');
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'', '>', 'q', 'R', 'u', '=', '', 'K'}, charArray0);
      assertArrayEquals(new char[] {'', '', '>', 'q', 'R', 'u', '=', '', 'K'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1726L, (-2969));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)12;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)88, (int) (byte) (-11));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-11), (byte)59, (byte)12}, byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 428.1101F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-2126.1545F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-2126.1545F), (-1.0F), 1.0F, 428.1101F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[4] = 'g';
      charArray0[1] = 'U';
      charArray0[2] = 'F';
      charArray0[3] = '7';
      charArray0[4] = '_';
      ArrayUtils.reverse(charArray0, 2, 2875);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'U', '_', '7', 'F'}, charArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)0;
      long[] longArray0 = new long[0];
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      ArrayUtils.reverse(longArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 2962);
      assertNotNull(longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)90;
      floatArray0[2] = (float) (byte) (-15);
      long[] longArray3 = bitSet0.toLongArray();
      assertNotNull(longArray3);
      assertEquals(0, longArray3.length);
      assertArrayEquals(new long[] {}, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {90.0F, 0.0F, (-15.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)0;
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1761L, (-3602));
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)0, 2146363416);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.reverse(longArray0, (int) (byte)0, 2962);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 2962);
      assertNotNull(longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)50;
      shortArray0[1] = (short)1117;
      shortArray0[2] = (short) (-1473);
      shortArray0[3] = (short) (-1842);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1117);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)50, (short)1117, (short) (-1473), (short) (-1842)}, shortArray0);
      assertArrayEquals(new short[] {(short)50, (short)1117, (short) (-1473), (short) (-1842), (short)1117}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)50;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (short) (-1842);
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.swap(shortArray1, (int) (short)1117, 253, 91);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)50, (short)1117, (short) (-1473), (short) (-1842)}, shortArray0);
      assertArrayEquals(new short[] {(short)50, (short)1117, (short) (-1473), (short) (-1842), (short)1117}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 13;
      intArray0[1] = (int) (short) (-1842);
      intArray0[2] = (int) (short)1117;
      intArray0[3] = (-2749);
      intArray0[4] = (int) (short)1117;
      intArray0[5] = (int) (short)50;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2749), (-1842));
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {13, (-1842), 1117, (-2749), 1117, 50}, intArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertEquals("{3}", bitSet0.toString());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '8';
      charArray0[1] = 'y';
      charArray0[2] = '9';
      charArray0[3] = '$';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'8', 'y', '9', '$'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 32;
      floatArray0[3] = (float) (-2469);
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 32;
      floatArray0[7] = (float) 2;
      ArrayUtils.swap(floatArray0, 1536, 0, 0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 32.0F, (-2469.0F), 32.0F, 0.0F, 32.0F, 2.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-2469);
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1536, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, (-2469.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, 1818, 0);
      assertNotNull(intArray2);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {}, intArray2);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 2674L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {2674L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-511);
      floatArray0[1] = 1560.1775F;
      floatArray0[2] = (float) (short) (-511);
      floatArray0[3] = 1560.1775F;
      floatArray0[4] = 1560.1775F;
      floatArray0[6] = 1560.1775F;
      floatArray0[7] = (float) (short) (-511);
      floatArray0[8] = (float) (short) (-511);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1560.1775F);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-511.0F), 1560.1775F, (-511.0F), 1560.1775F, 1560.1775F, 0.0F, 1560.1775F, (-511.0F), (-511.0F)}, floatArray0, 0.01F);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)63);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)63;
      shortArray0[1] = (short) (byte)63;
      shortArray0[2] = (short) (byte)63;
      shortArray0[3] = (short) (byte)63;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)63, (short)63, (short)63, (short)63}, shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)63;
      floatArray0[1] = (-1466.6F);
      floatArray0[2] = (float) (short)63;
      floatArray0[3] = (-573.55774F);
      floatArray0[4] = (float) (short)63;
      floatArray0[5] = (float) (short)63;
      floatArray0[6] = (float) (byte)63;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)63);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {63.0F, (-1466.6F), 63.0F, (-573.55774F), 63.0F, 63.0F, 63.0F}, floatArray0, 0.01F);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-905.7));
      assertNotNull(double0);
      assertEquals((-905.7), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-905.7)}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1066L);
      longArray0[2] = 928L;
      longArray0[3] = 1275L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1066L));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1066L), 928L, 1275L}, longArray0);
      assertEquals(1, int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, 1);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 1;
      integerArray0[1] = (Integer) 1;
      integerArray0[2] = (Integer) 1;
      integerArray0[3] = (Integer) 1;
      integerArray0[4] = (Integer) 1;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[2]);
      assertNotNull(intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(5, integerArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)2);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      int int2 = ArrayUtils.indexOf(shortArray0, (short) (-169), (-3955));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) integerArray0[4]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)99;
      Byte byte1 = new Byte((byte)99);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)99, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = Byte.valueOf(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)99, (byte)byte2);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(boolean0);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)99, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertEquals((byte)99, (byte)byte4);
      
      byteArray0[3] = byte4;
      byte byte5 = (byte)0;
      Byte byte6 = new Byte((byte)0);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertEquals((byte)0, (byte)byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte5);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte5 == byte0);
      assertEquals((byte)0, (byte)byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte)0);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte2));
      assertTrue(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte3));
      assertEquals((byte)0, (byte)byte8);
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte((byte)0);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte4));
      assertTrue(byte9.equals((Object)byte5));
      assertTrue(byte9.equals((Object)byte8));
      assertTrue(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte3));
      assertTrue(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte9);
      
      byteArray0[7] = byte9;
      byte byte10 = (byte)4;
      Byte byte11 = new Byte((byte)4);
      assertNotNull(byte11);
      assertFalse(byte11.equals((Object)byte4));
      assertFalse(byte11.equals((Object)byte8));
      assertFalse(byte11.equals((Object)byte9));
      assertTrue(byte11.equals((Object)byte10));
      assertFalse(byte11.equals((Object)byte0));
      assertFalse(byte11.equals((Object)byte7));
      assertFalse(byte11.equals((Object)byte2));
      assertFalse(byte11.equals((Object)byte1));
      assertFalse(byte11.equals((Object)byte5));
      assertFalse(byte11.equals((Object)byte6));
      assertFalse(byte11.equals((Object)byte3));
      assertEquals((byte)4, (byte)byte11);
      
      byteArray0[8] = byte11;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)4;
      shortArray0[1] = (short) (byte)4;
      shortArray0[2] = (short) (-182);
      shortArray0[3] = (short) byte5;
      shortArray0[4] = (short) byte10;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) byte5);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)4, (short)4, (short) (-182), (short)0, (short)4, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)4, (short)4, (short) (-182), (short)0, (short)4}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(byte5 == byte10);
      assertFalse(byte5 == byte0);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2469);
      Character character0 = new Character('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[16];
      Integer integer0 = new Integer(760);
      assertNotNull(integer0);
      assertEquals(760, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 8;
      Integer integer1 = new Integer(8);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(8, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(8);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(8, (int)integer2);
      
      integerArray0[2] = integer2;
      int int1 = 57;
      Integer integer3 = new Integer(57);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertEquals(57, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = ArrayUtils.get(integerArray0, (-481));
      assertNull(integer4);
      assertEquals(16, integerArray0.length);
      
      int[] intArray0 = new int[25];
      intArray0[0] = (-481);
      intArray0[1] = 454;
      intArray0[3] = (-481);
      intArray0[4] = int0;
      intArray0[5] = (-3744);
      intArray0[6] = 57;
      intArray0[7] = int1;
      ArrayUtils.reverse(intArray0);
      assertEquals(25, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = (-5);
      Integer integer0 = new Integer((-5));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-5), (int)integer0);
      
      integerArray0[0] = integer0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) (-5);
      floatArray0[2] = (float) (-5);
      ArrayUtils.shift(floatArray0, (-5), (-5), (-5));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-5.0F), (-5.0F), (-5.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'W';
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)119;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)127, (int) (byte) (-24));
      assertNotNull(bitSet0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-24), (byte)0, (byte) (-1), (byte)1, (byte)74, (byte)119}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-94);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 2);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-94.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-94.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte) (-24), 2157);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'{', 'W', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'{', 'W', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'W';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)119;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)127, (int) (byte) (-24));
      assertNotNull(bitSet0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-24), (byte)0, (byte) (-1), (byte)1, (byte)74, (byte)119}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-94);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 2);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-94.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-94.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte) (-24), 2157);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'{', 'W', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'{', 'W', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray2 = ArrayUtils.add(floatArray1, (float) (byte)119);
      assertNotNull(floatArray2);
      assertEquals(2, floatArray2.length);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-94.0F), 119.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-94.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-94.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet1 = (BitSet)ArrayUtils.toPrimitive((Object) bitSet0);
      assertNotNull(bitSet1);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-24), (byte)0, (byte) (-1), (byte)1, (byte)74, (byte)119}, byteArray0);
      assertSame(bitSet1, bitSet0);
      assertSame(bitSet0, bitSet1);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-887.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-887.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 4211);
      assertNull(intArray0);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-887.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-151L);
      longArray0[2] = 1619L;
      longArray0[3] = 1272L;
      longArray0[4] = 1L;
      ArrayUtils.shift(longArray0, (-2224));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1L, 0L, (-151L), 1619L, 1272L}, longArray0);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-2224));
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[0] = (-2469);
      intArray0[1] = 0;
      intArray0[4] = 0;
      intArray0[3] = (-2469);
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 65, (-2469));
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)34;
      shortArray0[1] = (short)4020;
      shortArray0[2] = (short)4020;
      shortArray0[3] = (short)34;
      shortArray0[4] = (short)34;
      shortArray0[5] = (short) (-2591);
      shortArray0[6] = (short)4020;
      shortArray0[7] = (short)4020;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)34, (short)4020, (short)4020, (short)34, (short)34, (short) (-2591), (short)4020, (short)4020}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[3] = (-2469);
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 2, 32, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 2, 32, 0}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 32;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 32;
      floatArray0[7] = (float) 2;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 32.0F, 0.0F, 32.0F, 0.0F, 32.0F, 2.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 32;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 32;
      longArray0[4] = (long) 0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-2469));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {32L, 0L, 0L, 32L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-2469L), 32L, 0L, 0L, 32L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-511);
      shortArray0[1] = (short) (-985);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-985)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-511);
      longArray0[1] = (long) (short) (-985);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 127;
      doubleArray0[2] = (double) (short) (-985);
      doubleArray0[3] = (double) 127;
      doubleArray0[4] = (double) (-985L);
      doubleArray0[5] = (double) 127;
      doubleArray0[6] = (double) 127;
      doubleArray0[7] = (double) (-985L);
      ArrayUtils.shift(doubleArray0, 127, 127, 1072);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 127.0, (-985.0), 127.0, (-985.0), 127.0, 127.0, (-985.0)}, doubleArray0, 0.01);
      
      Random.setNextRandom((-548));
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(2398.144F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2398.144F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-4428.167F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-4428.167F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) 2398.144F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(2398.144F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(2701.0F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals(2701.0F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) floatArray0[3]);
      assertNotNull(float5);
      assertEquals(8, floatArray0.length);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertEquals(2398.144F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float(1.0F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals(1.0F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float(0.0);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertEquals(0.0F, (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 2398.144F, (-4428.167F), 2398.144F, 2701.0F, 2398.144F, 1.0F, 0.0F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1347.08186059);
      doubleArray0[1] = (double) (float)floatArray0[5];
      doubleArray0[2] = (double) (float)floatArray0[0];
      doubleArray0[3] = (double) (float)floatArray0[5];
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (float)floatArray0[4];
      doubleArray0[6] = (double) (float)floatArray0[5];
      ArrayUtils.shift(doubleArray0, (-1), (-1), 127);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1347.08186059), 2398.14404296875, (-1.0), 2398.14404296875, 0.0, 2701.0, 2398.14404296875}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-4252);
      shortArray0[1] = (short)14;
      shortArray0[2] = (short) (-4832);
      shortArray0[3] = (short)7;
      shortArray0[4] = (short)8;
      shortArray0[5] = (short)12;
      shortArray0[6] = (short)12;
      ArrayUtils.swap(shortArray0, (-1113), 54, 127);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4252), (short)14, (short) (-4832), (short)7, (short)8, (short)12, (short)12}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.9664312F;
      floatArray0[4] = (float) 454;
      floatArray0[5] = 733.6F;
      floatArray0[6] = (float) 454;
      floatArray0[8] = (float) 454;
      ArrayUtils.swap((char[]) null, 2621, (-1686), 454);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)101;
      shortArray0[1] = (short)2691;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2147277704, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147277704, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1494;
      shortArray0[1] = (short)2502;
      short[] shortArray1 = ArrayUtils.insert(0, (short[]) null, shortArray0);
      assertNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1494, (short)2502}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-410);
      shortArray0[1] = (short) (-891);
      shortArray0[2] = (short)678;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)11818;
      shortArray0[5] = (short) (-743);
      shortArray0[6] = (short) (-2953);
      shortArray0[7] = (short)4292;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)678);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-410), (short) (-891), (short)678, (short)0, (short)11818, (short) (-743), (short) (-2953), (short)4292}, shortArray0);
      assertArrayEquals(new short[] {(short)678, (short) (-410), (short) (-891), (short)678, (short)0, (short)11818, (short) (-743), (short) (-2953), (short)4292}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1816);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-437);
      shortArray0[1] = (short) (-4449);
      shortArray0[2] = (short)128;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1410);
      shortArray0[5] = (short) (-3055);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1018, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1018, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-1175.935015202185));
      assertNull(doubleArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Byte byte1 = Byte.valueOf((byte)99);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)99, (byte)byte1);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Character character0 = new Character('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameType(double0, character0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)99;
      intArray0[1] = (int) '*';
      intArray0[2] = (int) '*';
      intArray0[3] = (int) '*';
      intArray0[4] = (int) '*';
      intArray0[5] = (int) (byte)99;
      boolean boolean3 = ArrayUtils.contains(intArray0, 42);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {99, 42, 42, 42, 42, 99}, intArray0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 42);
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {42, 99, 42, 42, 42, 42, 99}, intArray1);
      assertArrayEquals(new int[] {99, 42, 42, 42, 42, 99}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte)99);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[2] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1791);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (-446);
      ArrayUtils.shift(booleanArray0, (int) (short) (-446), 1791, 512);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short) (-446);
      objectArray0[1] = (Object) (short) (-446);
      objectArray0[2] = (Object) (short) (-446);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-446', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-507L);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1935;
      Integer[] integerArray0 = new Integer[12];
      integerArray0[0] = (Integer) 1935;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, (Integer) 1935);
      assertNotNull(integerArray1);
      assertEquals(12, integerArray0.length);
      assertEquals(11, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, (int) integerArray0[3], true);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(12, integerArray0.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      
      Object object0 = ArrayUtils.get((Object[]) integerArray1, (-389));
      assertNull(object0);
      assertEquals(12, integerArray0.length);
      assertEquals(11, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray1, (Object) null, 3533);
      assertNotNull(bitSet0);
      assertEquals(12, integerArray0.length);
      assertEquals(11, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 2, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 2, 0, 0}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 2;
      Integer integer0 = ArrayUtils.get(integerArray0, 980);
      assertNull(integer0);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.reverse(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 2, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 2, 0, 0}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-291L);
      Integer[] integerArray0 = new Integer[16];
      Integer integer0 = new Integer(760);
      assertNotNull(integer0);
      assertEquals(760, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 56;
      Integer integer1 = new Integer(56);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(56, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(56);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(56, (int)integer2);
      
      integerArray0[2] = integer2;
      int int1 = 57;
      Integer integer3 = new Integer(57);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(57, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = ArrayUtils.get(integerArray0, (-481));
      assertNull(integer4);
      assertEquals(16, integerArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-481);
      intArray0[1] = 454;
      intArray0[2] = 3339;
      intArray0[3] = (-481);
      intArray0[4] = int0;
      intArray0[5] = (-3744);
      intArray0[6] = 57;
      intArray0[7] = int1;
      ArrayUtils.reverse(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {57, 57, (-3744), 56, (-481), 3339, 454, (-481)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)120;
      shortArray0[1] = (short)3303;
      shortArray0[2] = (short)91;
      shortArray0[3] = (short) (-1939);
      shortArray0[4] = (short)97;
      shortArray0[5] = (short) (-3353);
      shortArray0[6] = (short)48;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)120, (short)3303, (short)91, (short) (-1939), (short)97, (short) (-3353), (short)48}, shortArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)120;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)44);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.subarray((byte[]) null, (-2587), (int) (short)3303);
      assertNull(byteArray2);
      
      ArrayUtils.swap((Object[]) null, (int) (byte)44, 331);
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 7424, 'k');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7424, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 368L;
      longArray0[2] = 0L;
      longArray0[3] = (-2085L);
      longArray0[4] = (-425L);
      longArray0[5] = (-668L);
      longArray0[6] = 1336L;
      longArray0[7] = 0L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {1L, 368L, 0L, (-2085L), (-425L), (-668L), 1336L, 0L}, longArray0);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 59;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {59, 0}, intArray0);
      assertArrayEquals(new int[] {59, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)122;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1534), 0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-62), (byte)89, (byte)16, (byte)122}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = '_';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '6';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {54}, intArray0);
      assertArrayEquals(new int[] {54, 54}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 6, 46);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '_';
      longArray0[1] = (long) 46;
      longArray0[2] = (long) '6';
      longArray0[3] = (long) '6';
      longArray0[4] = (long) 46;
      longArray0[5] = (-2931L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 54L);
      assertNotNull(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {95L, 46L, 46L, (-2931L)}, longArray1);
      assertArrayEquals(new long[] {95L, 46L, 54L, 54L, 46L, (-2931L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object1, 0);
      assertEquals(1, objectArray0.length);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '*';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      objectArray0[2] = (Object) mockRandom0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 2);
      assertEquals(3, objectArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4123.515661;
      doubleArray0[1] = 4123.515661;
      doubleArray0[2] = 1755.0;
      doubleArray0[3] = 4123.515661;
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-94.947833473), (-198));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {4123.515661, 4123.515661, 1755.0, 4123.515661}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 42L;
      longArray0[1] = (-3000L);
      longArray0[2] = (long) 'a';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {42L, (-3000L), 97L}, longArray0);
      assertArrayEquals(new long[] {42L, (-3000L), 97L, 42L, (-3000L), 97L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (long) (-198), 3533);
      assertNotNull(bitSet0);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {42L, (-3000L), 97L}, longArray0);
      assertArrayEquals(new long[] {42L, (-3000L), 97L, 42L, (-3000L), 97L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3533;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs(928L, 928L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      float[] floatArray0 = new float[6];
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1875.082178593548);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-1577));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1875.082178593548)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-50.29646F));
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.swap((long[]) null, 2, (-1577), 13);
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = '$';
      charArray0[2] = 'm';
      charArray0[3] = 'x';
      charArray0[4] = '-';
      charArray0[5] = 'P';
      charArray0[6] = '\'';
      charArray0[7] = 'O';
      charArray0[8] = '8';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'G', '$', 'm', 'x', '-', 'P', '\'', 'O', '8'}, charArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-2191);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)633;
      shortArray0[4] = (short)825;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-1);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-120));
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2191), (short)0, (short)633, (short)825, (short)0, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2191), (short)0, (short)633, (short)825, (short)0, (short) (-1), (short) (-120)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2119;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2143, (int) (short)2119);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)2119}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '=';
      charArray0[2] = '=';
      ArrayUtils.shift(longArray0, (int) '=');
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '>');
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'>', '=', '=', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'=', '=', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-4264);
      shortArray0[1] = (short)1111;
      shortArray0[2] = (short)15;
      shortArray0[3] = (short) (-287);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-534), (int) (short)15);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-4264), (short)1111, (short)15, (short) (-287)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4264), (short)1111, (short)15, (short) (-287)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(14, intArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift(intArray0, Integer.MAX_VALUE, 4947, (-579));
      assertEquals(14, intArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 2.0F;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) (-2469);
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) (-2469);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[4], (-412));
      assertNotNull(bitSet0);
      assertEquals(5, objectArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals("{2, 4}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2816.3018F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2548.62F;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2548.62F, 2816.3018F}, floatArray0, 0.01F);
      
      ArrayUtils.shift((short[]) null, 5571);
      Short[] shortArray0 = new Short[3];
      short short0 = (short)76;
      Short short1 = new Short((short)76);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)76, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)76);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short)76, (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) (-2231));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short) (-2231), (short)short3);
      
      shortArray0[2] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)169);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)76, (short)76, (short) (-2231)}, shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) short0;
      intArray0[1] = (int) (short)169;
      intArray0[2] = (int) (short)169;
      intArray0[3] = (int) (short)shortArray0[2];
      intArray0[4] = (int) short0;
      intArray0[5] = (int) (short)169;
      intArray0[6] = (int) (short) (-2231);
      intArray0[7] = 5571;
      ArrayUtils.swap(intArray0, (-2304), (-1073741823), 36);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {76, 169, 169, (-2231), 76, 169, (-2231), 5571}, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-68);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-68));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)68, (byte)63, (byte) (-68)}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      ArrayUtils.shift(objectArray0, 1136, 48, (-84));
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2358.8F);
      floatArray0[1] = (-2069.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      ArrayUtils.swap(floatArray0, (-1029), (-1029), 0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-2358.8F), (-2069.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, '^', 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 0.0F);
      assertFalse(boolean0);
      
      char[] charArray2 = ArrayUtils.toPrimitive((Character[]) null, ':');
      assertNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '@');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)5849);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 111L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[1] = 323.25905495570544;
      doubleArray0[2] = (-1347.08186059);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 111L;
      doubleArray0[5] = (double) 111L;
      doubleArray0[6] = (double) 111L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) (short)5849, (double) 0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5849, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.5;
      short[] shortArray0 = new short[21];
      shortArray0[0] = (short)5849;
      shortArray0[2] = (short)5849;
      shortArray0[8] = (short)5069;
      shortArray0[4] = (short)5849;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)5849);
      assertEquals(21, shortArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)5069;
      floatArray0[2] = (-1103.0F);
      shortArray0[20] = (short) (-147);
      floatArray0[4] = (float) (short)5849;
      floatArray0[5] = (float) (short)0;
      floatArray0[7] = (float) (short)5849;
      floatArray0[8] = (float) (short)5069;
      ArrayUtils.shift(floatArray0, (int) (short)5849, 0, (int) (short)0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 5069.0F, (-1103.0F), 0.0F, 5849.0F, 0.0F, 0.0F, 5849.0F, 5069.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1814), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1814, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.5;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)5849;
      shortArray0[1] = (short)5069;
      shortArray0[2] = (short)5849;
      shortArray0[3] = (short)5069;
      shortArray0[4] = (short)5849;
      shortArray0[5] = (short) (-147);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)5849);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)5849, (short)5069, (short)5849, (short)5069, (short)5849, (short) (-147)}, shortArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (short) (-147));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      Object[] objectArray0 = new Object[3];
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)5069;
      intArray0[1] = 2;
      intArray0[2] = (-1);
      intArray0[3] = (int) (short)5849;
      intArray0[4] = (int) (short)5849;
      intArray0[5] = (int) (short) (-147);
      intArray0[6] = (int) (short)5069;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short)845;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)99;
      shortArray0[4] = (short)61;
      shortArray0[5] = (short) (-4690);
      ArrayUtils.swap(shortArray0, (int) (short) (-1), (int) (short)9, (int) (short)845);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)9, (short)845, (short) (-1), (short)99, (short)61, (short) (-4690)}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)52);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)9, (short)845, (short) (-1), (short)99, (short)61, (short) (-4690)}, shortArray0);
      assertArrayEquals(new short[] {(short)9, (short)845, (short) (-1), (short)99, (short)61, (short) (-4690)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 1280, (int) (short) (-4690));
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = ']';
      charArray0[2] = 'd';
      charArray0[3] = 'j';
      charArray0[4] = '4';
      ArrayUtils.reverse(charArray0, 121, 36);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'w', ']', 'd', 'j', '4'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-492);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.swap(shortArray0, (int) (short) (-492), (-1));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-492), (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short) (-1));
      assertNotNull(shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-492), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-492), (short)0, (short)0, (short) (-1)}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-492), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-492), (short)0, (short)0, (short) (-1)}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-383.4F);
      floatArray0[1] = (float) (short) (-492);
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) (short) (-492);
      floatArray0[4] = 1.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-407.51F), 1);
      assertNotNull(bitSet0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-383.4F), (-492.0F), (-1.0F), (-492.0F), 1.0F}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray1);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-507.4);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 218.5495127247;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[3] = (-844.308599486678);
      doubleArray0[7] = (-94.947833473);
      doubleArray0[8] = (-811.9603960864);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 4465.934453454959, (-198));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-507.4), 0.0, 218.5495127247, (-844.308599486678), 0.0, 0.0, 0.0, (-94.947833473), (-811.9603960864)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-198);
      longArray0[4] = (-3000L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-198L), (-3000L), (-1L), (-1L), (-1L), (-198L), (-3000L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-198L), (-3000L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (-198L), (-1));
      assertNotNull(bitSet0);
      assertEquals(10, longArray1.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-198L), (-3000L), (-1L), (-1L), (-1L), (-198L), (-3000L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-198L), (-3000L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.length());
      assertEquals("{3, 8}", bitSet0.toString());
      
      long[] longArray2 = ArrayUtils.remove(longArray0, 3);
      assertNotNull(longArray2);
      assertEquals(4, longArray2.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-3000L)}, longArray2);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-198L), (-3000L)}, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 35;
      intArray0[1] = 35;
      intArray0[2] = 35;
      intArray0[3] = 35;
      intArray0[4] = 35;
      intArray0[5] = 35;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 35, 35);
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {35, 35, 35, 35, 35, 35}, intArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 35;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) 35;
      floatArray0[3] = (float) 35;
      floatArray0[4] = (float) 35;
      floatArray0[5] = (float) 35;
      floatArray0[6] = (float) 35;
      floatArray0[7] = (float) 35;
      floatArray0[8] = (float) 35;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {35.0F, 1.0F, 35.0F, 35.0F, 35.0F, 35.0F, 35.0F, 35.0F, 35.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Long long0 = new Long(2147483647L);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
      
      Long long1 = new Long(35);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(35L, (long)long1);
      
      Long long2 = new Long((-7280L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-7280L), (long)long2);
      
      Long long3 = new Long((-3094L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-3094L), (long)long3);
      
      MutableInt mutableInt0 = new MutableInt(1.0F);
      assertNotNull(mutableInt0);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 35.0F;
      objectArray0[1] = (Object) long1;
      objectArray0[2] = (Object) long2;
      objectArray0[3] = (Object) 35;
      objectArray0[4] = (Object) 35;
      objectArray0[5] = (Object) 35;
      Object[] objectArray1 = ArrayUtils.removeAllOccurences(objectArray0, (Object) null);
      assertNotNull(objectArray1);
      assertEquals(6, objectArray0.length);
      assertEquals(6, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 35;
      longArray0[1] = (long) 35;
      longArray0[2] = (-1690L);
      longArray0[3] = (-7280L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1690L));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {35L, 35L, (-1690L), (-7280L)}, longArray0);
      assertArrayEquals(new long[] {(-1690L), 35L, 35L, (-1690L), (-7280L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
      int[] intArray0 = new int[7];
      intArray0[0] = (-474);
      intArray0[2] = 2097;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[2] = (-628);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0, 35);
      assertNotNull(bitSet0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-474), 0, (-628), 0, 0, (-1), 0}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-3094L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-3094L), (long)long1);
      
      Long long2 = new Long(0);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      Long long3 = new Long((-3094L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-3094L), (long)long3);
      
      Object[] objectArray0 = new Object[0];
      MutableInt mutableInt0 = new MutableInt((Number) (-474));
      assertNotNull(mutableInt0);
      assertEquals("-474", mutableInt0.toString());
      assertEquals((-474.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-474), mutableInt0.shortValue());
      assertEquals((-474), mutableInt0.intValue());
      assertEquals((-474.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)38, mutableInt0.byteValue());
      assertEquals((-474L), mutableInt0.longValue());
      assertEquals((-474), (int)mutableInt0.toInteger());
      assertEquals((-474), (int)mutableInt0.getValue());
      
      Object[] objectArray1 = ArrayUtils.removeAllOccurences(objectArray0, (Object) mutableInt0);
      assertNotNull(objectArray1);
      assertEquals(0, objectArray1.length);
      assertEquals(0, objectArray0.length);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals("-474", mutableInt0.toString());
      assertEquals((-474.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-474), mutableInt0.shortValue());
      assertEquals((-474), mutableInt0.intValue());
      assertEquals((-474.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)38, mutableInt0.byteValue());
      assertEquals((-474L), mutableInt0.longValue());
      assertEquals((-474), (int)mutableInt0.toInteger());
      assertEquals((-474), (int)mutableInt0.getValue());
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
      int[] intArray0 = new int[7];
      intArray0[0] = (-474);
      intArray0[1] = (-646);
      intArray0[2] = 2097;
      intArray0[3] = 0;
      int int0 = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[2] = (-628);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-646), 35);
      assertNotNull(bitSet0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-474), (-646), (-628), 0, 0, (-1), 0}, intArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-3094L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-3094L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(0);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-3094L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertEquals((-3094L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(35);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertEquals(35L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((long) longArray0[0]);
      assertNotNull(long5);
      assertEquals(6, longArray0.length);
      assertFalse(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long2));
      assertEquals(0L, (long)long5);
      
      longArray0[5] = long5;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-646), longArray0[5]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -646, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, (Boolean) boolean0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1812.2542F;
      floatArray0[1] = (-1.0F);
      ArrayUtils.shift(floatArray0, 832, 832, 0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1812.2542F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) booleanArray0, (-3), (-3), 0);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      ArrayUtils.reverse((Object[]) booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-70), 832);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 1428.289F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1812.2542F, (-1.0F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1812.2542F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[1];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-319), 630);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) (-319));
      assertNotNull(float0);
      assertEquals((-319.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      ArrayUtils.swap(doubleArray0, (-674), (-319), 1471);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[0] = (-1652);
      intArray0[1] = 13;
      float[] floatArray0 = new float[10];
      floatArray0[1] = (float) (-1652);
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1582L));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1582L)}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1582L);
      doubleArray0[7] = 0.0;
      doubleArray0[2] = (double) (-1582L);
      doubleArray0[3] = (double) (-1582L);
      doubleArray0[4] = (double) (-1582L);
      doubleArray0[5] = (double) (-1582L);
      doubleArray0[6] = (-768.082);
      doubleArray0[7] = 737.8;
      ArrayUtils.swap(longArray0, 2146028713, (-47), (-1));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1582L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1431));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)100;
      shortArray0[1] = (short)100;
      ArrayUtils.shift((Object[]) null, (int) (short)100);
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)100;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)100, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 24;
      intArray0[3] = (-1383);
      intArray0[3] = (-510);
      intArray0[4] = (-48);
      intArray0[5] = (-2183);
      intArray0[6] = (-430);
      ArrayUtils.shift(intArray0, (-1324));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {24, 0, (-510), (-48), (-2183), (-430), 0}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-430);
      Character character0 = Character.valueOf('&');
      assertNotNull(character0);
      assertEquals('&', (char)character0);
      
      Character character1 = Character.valueOf('d');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('d', (char)character1);
      
      Character character2 = Character.valueOf('d');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertEquals('d', (char)character2);
      
      Character character3 = Character.valueOf('d');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertEquals('d', (char)character3);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1564.1907189097453;
      doubleArray0[2] = (-4188.9503);
      doubleArray0[3] = 2072.6590866166466;
      doubleArray0[4] = 99.0;
      doubleArray0[5] = 876.956;
      doubleArray0[6] = (-2060.612095464563);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1564.1907189097453, (-4188.9503), 2072.6590866166466, 99.0, 876.956, (-2060.612095464563)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1564.1907189097453, (-4188.9503), 2072.6590866166466, 99.0, 876.956, (-2060.612095464563)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1371);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1059;
      shortArray0[3] = (short) (-1784);
      shortArray0[4] = (short)3596;
      shortArray0[5] = (short)2304;
      ArrayUtils.shift(shortArray0, (int) (short)1059, (int) (short)1059, (int) (short) (-1));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1371), (short) (-1), (short)1059, (short) (-1784), (short)3596, (short)2304}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) (short)2304);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2304.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      int[] intArray0 = new int[17];
      intArray0[8] = (-2469);
      intArray0[1] = (-2469);
      intArray0[3] = 32;
      Character[] characterArray0 = new Character[2];
      char char0 = '~';
      Character character0 = Character.valueOf('~');
      assertNotNull(character0);
      assertEquals('~', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('~', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[2] = 2;
      intArray0[3] = (-2469);
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[4] = (float) (-2469);
      floatArray0[5] = (float) (-2469);
      floatArray0[6] = (float) 2;
      floatArray0[7] = (float) 2;
      ArrayUtils.swap(floatArray0, 1536, 0, (-2469));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 0.0F, 0.0F, (-2469.0F), (-2469.0F), 2.0F, 2.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-2469);
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1536, (-2469));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, (-2469.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (-2469));
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 0.0F, 0.0F, 2.0F, 2.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, 2.0F, 0.0F, 0.0F, (-2469.0F), (-2469.0F), 2.0F, 2.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1044);
      shortArray0[1] = (short) (-1044);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1044);
      shortArray0[5] = (short) (-1);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1044), (short) (-1044), (short) (-1), (short) (-1044), (short)0, (short) (-1)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1347.08186059));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1347.08186059), 2.0, (-2469.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, (-2469.0), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Character[] characterArray0 = new Character[4];
      char char0 = 'm';
      Character character0 = Character.valueOf('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('m', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertEquals('m', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char0);
      assertNotNull(character3);
      assertEquals('m', (char)character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(4, characterArray1.length);
      assertEquals(4, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-291L);
      Integer[] integerArray0 = new Integer[16];
      Integer integer0 = new Integer(760);
      assertNotNull(integer0);
      assertEquals(760, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(56);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(56, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(56);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(56, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(57);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(57, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = ArrayUtils.get(integerArray0, (-481));
      assertNull(integer4);
      assertEquals(16, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2147483648L));
      assertNotNull(bitSet0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-291L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '*';
      charArray0[2] = '|';
      charArray0[3] = '*';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-44);
      doubleArray0[1] = (double) (byte) (-44);
      ArrayUtils.shift(doubleArray0, (int) (byte) (-44), 48, (int) (byte) (-44));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-44.0), (-44.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 195.2714;
      int int0 = 0;
      ArrayUtils.shift(doubleArray0, 0, 48, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, (-1.0), 195.2714}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      Character character0 = new Character('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 2147483647L);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      ArrayUtils.swap(intArray0, 2725, (int) character0, 2725);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)14);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 0, 65);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)73;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-18));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)73}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)73, (byte) (-18)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-18);
      shortArray0[1] = (short) (byte)65;
      shortArray0[2] = (short)4027;
      shortArray0[3] = (short) (byte)73;
      shortArray0[4] = (short) (byte)73;
      shortArray0[5] = (short) (byte)65;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-18), (short)65, (short)4027, (short)73, (short)73, (short)65}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(2398.144F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2398.144F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1.0F));
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) 2398.144F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(2398.144F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(2701.0F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals(2701.0F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) floatArray0[3]);
      assertNotNull(float5);
      assertEquals(8, floatArray0.length);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertEquals(2398.144F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((-1.0F));
      assertNotNull(float6);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((-1.0F), (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float(0.0);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 2398.144F, (-1.0F), 2398.144F, 2701.0F, 2398.144F, (-1.0F), 0.0F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1347.08186059);
      doubleArray0[1] = (double) (float)floatArray0[5];
      doubleArray0[2] = (double) (float)floatArray0[0];
      doubleArray0[3] = (double) (float)floatArray0[5];
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (float)floatArray0[4];
      doubleArray0[6] = (double) (float)floatArray0[5];
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-2469));
      assertNotNull(short0);
      assertEquals((short) (-2469), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2469), (short) (-2469), (short) (-2469), (short) (-2469), (short) (-2469), (short) (-2469), (short) (-2469)}, shortArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 89L;
      longArray0[1] = (long) (short)shortArray0[0];
      longArray0[2] = (long) (short)shortArray0[0];
      longArray0[3] = (long) (short)shortArray0[0];
      longArray0[4] = (long) (short) (-2469);
      longArray0[5] = (long) (short) (-2469);
      longArray0[6] = 1929L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray1, (short) shortArray0[0]);
      assertNotNull(shortArray2);
      assertEquals(8, shortArray2.length);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2469), (short) (-2469), (short) (-2469), (short) (-2469), (short) (-2469), (short) (-2469), (short) (-2469), (short) (-2469)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-2469), (short) (-2469), (short) (-2469), (short) (-2469), (short) (-2469), (short) (-2469), (short) (-2469)}, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) ':';
      intArray0[1] = (int) (short) (-1578);
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = (-26);
      intArray0[5] = (int) (byte)1;
      intArray0[6] = (int) 't';
      intArray0[7] = (int) ':';
      ArrayUtils.swap(intArray0, (-1239), (-1239), (-1239));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {58, (-1578), 1, 1, (-26), 1, 116, 58}, intArray0);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)50;
      shortArray0[1] = (short)1117;
      shortArray0[2] = (short) (-1473);
      shortArray0[3] = (short) (-1842);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1117);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)50, (short)1117, (short) (-1473), (short) (-1842)}, shortArray0);
      assertArrayEquals(new short[] {(short)50, (short)1117, (short) (-1473), (short) (-1842), (short)1117}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)50;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (short) (-1842);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short)50);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {50.0F, (-1.0F), (-1842.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {50.0F, 50.0F, (-1.0F), (-1842.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.swap(shortArray1, (int) (short)1117, 253, 91);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)50, (short)1117, (short) (-1473), (short) (-1842)}, shortArray0);
      assertArrayEquals(new short[] {(short)50, (short)1117, (short) (-1473), (short) (-1842), (short)1117}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-905.7));
      assertNotNull(double0);
      assertEquals((-905.7), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-511);
      shortArray0[1] = (short) (-985);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-985)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-511);
      longArray0[1] = (long) (short) (-985);
      longArray0[2] = (long) (short) (-985);
      longArray0[3] = (-1172L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 1536);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-511L), (-985L), (-985L), (-1172L), 0L}, longArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-182), (int) (short) (-182));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (short) (-182);
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-182.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-182.0F), (-1.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Float[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-3361L);
      longArray0[1] = (-3361L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-3361L));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-3361L), (-3361L)}, longArray0);
      assertArrayEquals(new long[] {(-3361L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '*';
      charArray0[2] = '/';
      charArray0[3] = 'G';
      charArray0[4] = 'y';
      charArray0[5] = 'r';
      charArray0[5] = '*';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'y');
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'7', '*', '/', 'G', 'y', '*', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'7', '*', '/', 'G', '*', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-226);
      ArrayUtils.shift(shortArray0, (int) (short) (-226), 410, 237);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-226)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-492);
      shortArray0[1] = (short) (-2424);
      shortArray0[2] = (short) (-1578);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-900));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578), (short) (-900)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray1, (short) (-1578));
      assertNotNull(shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578), (short) (-900)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-900)}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      Byte byte0 = Byte.valueOf((byte)113);
      assertNotNull(byte0);
      assertEquals((byte)113, (byte)byte0);
      
      Byte byte1 = new Byte((byte)109);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)109, (byte)byte1);
      
      Byte byte2 = new Byte((byte)33);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)33, (byte)byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte3);
      
      Byte byte4 = new Byte((byte)109);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte)109, (byte)byte4);
      
      ArrayUtils.shift(shortArray2, (-445), 123, 123);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578), (short) (-900)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-900)}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertNotNull(map0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2358.8F);
      floatArray0[1] = (-2069.0F);
      floatArray0[2] = 0.0F;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "S$Y";
      stringArray0[1] = "";
      stringArray0[2] = "Ih";
      stringArray0[3] = "bp";
      stringArray0[4] = "[t9ck7=IW2jO";
      stringArray0[5] = "~Edo";
      stringArray0[6] = "a`52Cj_N8nvA\"^'g";
      boolean boolean0 = ArrayUtils.isNotEmpty(stringArray0);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1285);
      ArrayUtils.shift(shortArray0, (-1162), 3021, (int) (short) (-1));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1285)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[3] = doubleArray0[0];
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double1;
      Integer integer0 = new Integer(2143);
      assertNotNull(integer0);
      assertEquals(2143, (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      MutableInt mutableInt0 = new MutableInt(832);
      assertNotNull(mutableInt0);
      assertEquals((short)832, mutableInt0.shortValue());
      assertEquals("832", mutableInt0.toString());
      assertEquals(832, (int)mutableInt0.getValue());
      assertEquals((byte)64, mutableInt0.byteValue());
      assertEquals(832.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(832, (int)mutableInt0.toInteger());
      assertEquals(832.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(832L, mutableInt0.longValue());
      assertEquals(832, mutableInt0.intValue());
      
      mutableInt0.add((Number) integer0);
      assertEquals(2975.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)2975, mutableInt0.shortValue());
      assertEquals(2975, (int)mutableInt0.getValue());
      assertEquals(2975, (int)mutableInt0.toInteger());
      assertEquals((byte) (-97), mutableInt0.byteValue());
      assertEquals(2975, mutableInt0.intValue());
      assertEquals(2975L, mutableInt0.longValue());
      assertEquals("2975", mutableInt0.toString());
      assertEquals(2975.0, mutableInt0.doubleValue(), 0.01);
      
      Integer integer1 = mutableInt0.getValue();
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2975.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)2975, mutableInt0.shortValue());
      assertEquals(2975, (int)mutableInt0.getValue());
      assertEquals(2975, (int)mutableInt0.toInteger());
      assertEquals((byte) (-97), mutableInt0.byteValue());
      assertEquals(2975, mutableInt0.intValue());
      assertEquals(2975L, mutableInt0.longValue());
      assertEquals("2975", mutableInt0.toString());
      assertEquals(2975.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2975, (int)integer1);
      
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1047));
      assertNotNull(intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2975, 2143}, intArray0);
      
      ArrayUtils.shift((byte[]) null, 36);
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 1136);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, (float) (-1047));
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1047.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-887.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-887.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2041);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-2041);
      shortArray0[4] = (short)2456;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2041), (-202));
      assertNotNull(bitSet0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2041), (short)1, (short)1, (short) (-2041), (short)2456}, shortArray0);
      assertEquals("{0, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      
      ArrayUtils.swap(shortArray0, 490, (-3442), 490);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2041), (short)1, (short)1, (short) (-2041), (short)2456}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1431));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 53);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {53}, intArray0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, (int) (short)0, 122, (int) (short)0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-905.7));
      assertNotNull(double0);
      assertEquals((-905.7), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-905.7)}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1066L);
      longArray0[2] = 928L;
      longArray0[3] = 1275L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1916L);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1066L), 928L, 1275L}, longArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (-1));
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      integerArray0[4] = (Integer) (-1);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[2]);
      assertNotNull(intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(5, integerArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1)}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)2);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      int int2 = ArrayUtils.indexOf(shortArray0, (short) (-169), (-3955));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Object[] objectArray0 = new Object[6];
      objectArray0[5] = (Object) true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[2]);
      assertNull(object0);
      assertEquals(6, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, 2578);
      assertNotNull(bitSet0);
      assertEquals(6, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2578;
      doubleArray0[1] = (double) 1470;
      doubleArray0[2] = (double) 1470;
      doubleArray0[3] = (double) 2578;
      doubleArray0[4] = (double) 2578;
      doubleArray0[5] = (double) 1470;
      doubleArray0[6] = (double) 1470;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (-1.0);
      ArrayUtils.swap(doubleArray0, 0, 2578);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2578.0, 1470.0, 1470.0, 2578.0, 2578.0, 1470.0, 1470.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(objectArray0, 0, (int) (byte) (-32));
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean(" is not in the range '0' - '9'");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, boolean4);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1812.2542F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      Integer integer0 = new Integer(1963);
      assertNotNull(integer0);
      assertEquals(1963, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer1;
      integerArray0[7] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, 4027);
      assertNull(integer2);
      assertEquals(8, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) null, object1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = '|';
      charArray0[1] = '$';
      charArray0[0] = ' ';
      charArray0[4] = 'X';
      charArray0[5] = ' ';
      charArray0[6] = '8';
      char[] charArray1 = ArrayUtils.add(charArray0, 2, 'C');
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {' ', '$', '\u0000', '\u0000', 'X', ' ', '8'}, charArray0);
      assertArrayEquals(new char[] {' ', '$', 'C', '\u0000', '\u0000', 'X', ' ', '8'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)10;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) ' ';
      ArrayUtils.swap(longArray0, 2, (-3345), 971);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {32L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) 2;
      floatArray0[5] = (float) (-2469);
      floatArray0[6] = (float) 32;
      floatArray0[7] = (float) 2;
      ArrayUtils.swap(floatArray0, 1536, 0, (-2469));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2.0F, 0.0F, 0.0F, 0.0F, (-2469.0F), 32.0F, 2.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (-2469);
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1536, (-2469));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2469.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (-2469));
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2.0F, 0.0F, 0.0F, 0.0F, 32.0F, 2.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2.0F, 0.0F, 0.0F, 0.0F, (-2469.0F), 32.0F, 2.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 2;
      ArrayUtils.swap(longArray0, 2, (-1), 2146291925);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {2L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 305.01200294637;
      doubleArray0[2] = 1564.5;
      doubleArray0[3] = (-1347.08186059);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 305.01200294637, 1564.5, (-1347.08186059)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {305.01200294637, 1564.5, (-1347.08186059)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-3726.5854F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-3726.5854F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3726.5854F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 1);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)34;
      shortArray0[1] = (short) (-521);
      shortArray0[2] = (short)4020;
      shortArray0[3] = (short)34;
      shortArray0[4] = (short)4020;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)34, (short) (-521), (short)4020, (short)34, (short)4020}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1431));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = new BitSet((byte)0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 53);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertNotNull(map0);
      assertEquals(0, integerArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      ArrayUtils.swap((Object[]) integerArray0, (int) (short)2, (int) (short)2, 3654);
      assertEquals(0, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[2] = 1L;
      longArray0[4] = (-425L);
      Byte byte0 = new Byte((byte)25);
      assertNotNull(byte0);
      assertEquals((byte)25, (byte)byte0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      ArrayUtils.swap((Object[]) null, (-89), 122, 122);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)25;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)25}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)99;
      Byte byte1 = new Byte((byte)99);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)99, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = Byte.valueOf(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)99, (byte)byte2);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean(false);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)3, (-840));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short)34;
      shortArray0[2] = (short) (byte)3;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)34, (short)3}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '\u0016';
      charArray0[2] = '|';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[5] = (byte) (-44);
      byteArray0[4] = (byte)1;
      byteArray0[4] = (byte) (-44);
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-182));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)99;
      Byte byte1 = new Byte((byte)99);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)99, (byte)byte1);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray1, (short) (-4500));
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      byteArray0[0] = byte1;
      Byte byte2 = Byte.valueOf(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)99, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)99, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertEquals((byte)99, (byte)byte4);
      
      byteArray0[3] = byte4;
      byte byte5 = (byte)0;
      Byte byte6 = new Byte((byte)0);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte5));
      assertEquals((byte)0, (byte)byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte5);
      assertNotNull(byte7);
      assertFalse(byte5 == byte0);
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte)0);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte4));
      assertEquals((byte)0, (byte)byte8);
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte((byte)0);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte1));
      assertTrue(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte0));
      assertTrue(byte9.equals((Object)byte8));
      assertTrue(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte3));
      assertTrue(byte9.equals((Object)byte6));
      assertEquals((byte)0, (byte)byte9);
      
      byteArray0[7] = byte9;
      Byte byte10 = new Byte((byte)4);
      assertNotNull(byte10);
      assertFalse(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte1));
      assertFalse(byte10.equals((Object)byte2));
      assertFalse(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte4));
      assertFalse(byte10.equals((Object)byte9));
      assertFalse(byte10.equals((Object)byte5));
      assertFalse(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte6));
      assertEquals((byte)4, (byte)byte10);
      
      byteArray0[8] = byte10;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 1566;
      intArray0[2] = 68;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 1566, 68}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-887);
      doubleArray0[1] = (double) (-887);
      doubleArray0[2] = (double) (-887);
      doubleArray0[3] = (double) (-887);
      doubleArray0[4] = (double) (-887);
      doubleArray0[5] = (-1814.0);
      doubleArray0[6] = (double) (-887);
      doubleArray0[7] = (double) (-887);
      doubleArray0[8] = (double) (-887);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-887.0), (-887));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-887.0), (-887.0), (-887.0), (-887.0), (-887.0), (-1814.0), (-887.0), (-887.0), (-887.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<";
      stringArray0[1] = "";
      boolean boolean0 = ArrayUtils.isNotEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1814);
      shortArray0[1] = (short) (-1285);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)0, (int) (short) (-1814), (int) (short) (-1285));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1814), (short) (-1285), (short) (-1), (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short) (-1814);
      doubleArray0[2] = (double) (short) (-1814);
      doubleArray0[3] = (-1029.55344814549);
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) (short) (-1285);
      int int0 = ArrayUtils.indexOf(doubleArray0, 305.01200294637, (-887));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1814.0), (-1814.0), (-1029.55344814549), 0.0, 0.0, 0.0, 0.0, (-1285.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, (Boolean) null);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      ArrayUtils.shift(floatArray0, 0, 832, 832);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.hashCode((Object) boolean0);
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean(" is not in the range '0' - '9'");
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, boolean4);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1812.2542F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      ArrayUtils.shift(floatArray0, 832, 832, 0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1812.2542F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) booleanArray0, (-3), (-3), 0);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1808);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (-437);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(10, shortArray0.length);
      assertEquals(20, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.swap(shortArray0, 1808, 0);
      assertEquals(10, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-437), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ArrayUtils.swap(intArray0, (-1431), 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      ArrayUtils.shift(intArray0, (-2211));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[2] = 1536L;
      longArray0[3] = 1L;
      longArray0[4] = (long) (-319);
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 1536L, 1L, (-319L), 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1536L, 1L, (-319L), 0L, 1L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-287), (-287));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0L, 0, (double) 1L);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertSame(floatArray2, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      Random.setNextRandom(13);
      int[] intArray0 = new int[5];
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 13;
      intArray0[3] = 13;
      intArray0[4] = 13;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 13);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {13, 13, 13, 13, 13}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray1);
      assertNotNull(intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {13, 13, 13, 13, 13}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 2643L, 13);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      Random.setNextRandom(13);
      int[] intArray0 = new int[5];
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 13;
      intArray0[3] = 13;
      intArray0[4] = 13;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 13);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {13, 13, 13, 13, 13}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray1);
      assertNotNull(intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {13, 13, 13, 13, 13}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '@');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[21];
      intArray0[0] = (int) ':';
      intArray0[1] = (int) ':';
      intArray0[2] = (int) ':';
      intArray0[3] = (int) ':';
      intArray0[4] = (int) ':';
      int int0 = ArrayUtils.indexOf(intArray0, 1733, (-4742));
      assertEquals(21, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 368L;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1488);
      intArray0[1] = 1379;
      ArrayUtils.shift(longArray0, 1379, (-1227), (-1));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {1L, 368L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1431));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 53);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift(byteArray0, (-1431));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-36);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-36);
      doubleArray0[1] = 37.0;
      ArrayUtils.swap(doubleArray0, (int) (byte) (-36), (int) (byte) (-36), (int) (byte) (-36));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-36.0), 37.0}, doubleArray0, 0.01);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("C}#MPqqF^7!");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((String) null);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean boolean3 = false;
      Boolean boolean4 = Boolean.valueOf(false);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf((String) null);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7);
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = new Boolean(boolean3);
      assertNotNull(boolean8);
      assertFalse(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean5));
      assertFalse(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean4));
      assertFalse(boolean8);
      
      booleanArray0[7] = boolean8;
      Boolean boolean9 = Boolean.TRUE;
      assertNotNull(boolean9);
      assertFalse(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean4));
      assertFalse(boolean9.equals((Object)boolean1));
      assertFalse(boolean9.equals((Object)boolean2));
      assertFalse(boolean9.equals((Object)boolean5));
      assertFalse(boolean9.equals((Object)boolean3));
      assertTrue(boolean9);
      
      booleanArray0[8] = boolean9;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, true, false, true}, booleanArray1));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-36);
      shortArray0[1] = (short) (byte) (-36);
      shortArray0[2] = (short) (byte) (-36);
      shortArray0[3] = (short) (byte) (-36);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-36), (short) (-36), (short) (-36), (short) (-36)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray1);
      assertNotNull(objectArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, objectArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-425L);
      doubleArray0[1] = (double) (-2085L);
      doubleArray0[2] = (double) 1L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-2085L), (double) 0L);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-425.0), (-2085.0), 1.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      short[] shortArray0 = new short[9];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-425L);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-2085L), (double) 0L);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-425.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int int1 = ArrayUtils.hashCode((Object) double0);
      assertFalse(int1 == int0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(3162.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3162.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 0.0F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3162.0F;
      doubleArray0[2] = (double) 1471;
      doubleArray0[3] = (double) (float)floatArray0[2];
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (float)floatArray0[1];
      ArrayUtils.swap(doubleArray0, 1471, 3358, (-1982));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3162.0, 1471.0, 0.0, 0.0, 3162.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-445.0), 0, (double) floatArray0[2]);
      assertNotNull(bitSet0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3162.0, 1471.0, 0.0, 0.0, 3162.0}, doubleArray0, 0.01);
      assertSame(floatArray0, floatArray1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 391.069;
      doubleArray0[2] = 1841.097;
      doubleArray0[3] = 922.35548296437;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {391.069, 1841.097, 922.35548296437, 0.1}, doubleArray0, 0.01);
      
      MutableInt mutableInt0 = new MutableInt((-1825));
      assertNotNull(mutableInt0);
      assertEquals((-1825.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1825L), mutableInt0.longValue());
      assertEquals((-1825), mutableInt0.intValue());
      assertEquals((short) (-1825), mutableInt0.shortValue());
      assertEquals((-1825.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-33), mutableInt0.byteValue());
      assertEquals("-1825", mutableInt0.toString());
      assertEquals((-1825), (int)mutableInt0.getValue());
      assertEquals((-1825), (int)mutableInt0.toInteger());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null, 0L);
      assertNull(longArray1);
      
      long[] longArray2 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray2);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) '=';
      floatArray0[3] = (float) '>';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 61.0F, 0.0F, 62.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {(-1), 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = null;
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-69));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      ArrayUtils.swap(floatArray0, (-2224), (int) (byte) (-69), (-2224));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (byte) (-69));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int1 = ArrayUtils.indexOf(floatArray0, (float) 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 123);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 123, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 4123.515661;
      doubleArray0[2] = 2163.4;
      doubleArray0[3] = 1755.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4123.515661;
      doubleArray1[1] = 4123.515661;
      doubleArray1[2] = 1755.0;
      doubleArray1[3] = 4123.515661;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {(-1.0), 4123.515661, 2163.4, 1755.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4123.515661, 4123.515661, 1755.0, 4123.515661}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2163.4}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      ArrayUtils.shift(charArray0, (-779), 16, 2485);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '[', 'a', 'a'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1431));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = (float) (byte)2;
      floatArray0[3] = 1.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-10));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -10, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-50.0), 15);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)7036;
      shortArray0[1] = (short) (-6);
      shortArray0[2] = (short)52;
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      ArrayUtils.shift(charArray0, 15, (int) (short)52, (int) (short)52);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'Z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)837;
      shortArray0[1] = (short)6;
      shortArray0[2] = (short) (-2101);
      shortArray0[3] = (short)1353;
      shortArray0[4] = (short) (-18);
      shortArray0[5] = (short)100;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1574));
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)837, (short)6, (short) (-2101), (short)1353, (short) (-18), (short)100}, shortArray0);
      assertArrayEquals(new short[] {(short)837, (short)6, (short) (-2101), (short)1353, (short) (-18), (short)100}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2358.8F);
      floatArray0[1] = (-2069.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3484.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-2358.8F), (-2069.0F), 0.0F, 0.0F, 0.0F, 3484.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'L';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'i', 'L'}, charArray0);
      assertTrue(boolean0);
      
      float[] floatArray2 = new float[0];
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray2, 3484.0F, 100);
      assertNotNull(bitSet0);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      char[] charArray0 = new char[0];
      long[] longArray0 = new long[8];
      longArray0[0] = (-511L);
      longArray0[1] = 111L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = 1916L;
      longArray0[5] = (-2116L);
      longArray0[6] = 0L;
      longArray0[7] = 552L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {(-511L), 111L, (-1L), 0L, 1916L, (-2116L), 0L, 552L}, longArray0);
      assertArrayEquals(new long[] {(-511L), 111L, (-1L), 0L, 1916L, (-2116L), 0L, 552L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = '_';
      charArray0[2] = ':';
      charArray0[3] = 'C';
      charArray0[4] = 't';
      charArray0[5] = '/';
      charArray0[6] = 'd';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'6', ':', 'C', 't', '/', 'd', '\u0000', '_'}, charArray0);
      
      Object[] objectArray0 = new Object[0];
      Character character0 = new Character('\u0000');
      assertNotNull(character0);
      assertEquals('\u0000', (char)character0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) character0, 56);
      assertEquals(0, objectArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(3);
      assertNotNull(long0);
      assertEquals(3L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(2372L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(2372L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[1]);
      assertNotNull(long2);
      assertEquals(7, longArray0.length);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(2372L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(1L);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals(1L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(124L);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertEquals(124L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((long) longArray0[1]);
      assertNotNull(long5);
      assertEquals(7, longArray0.length);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long1));
      assertEquals(2372L, (long)long5);
      
      longArray0[5] = long5;
      Long long6 = new Long(2813L);
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long2));
      assertEquals(2813L, (long)long6);
      
      longArray0[6] = long6;
      Long[] longArray1 = ArrayUtils.toArray(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1825));
      assertNotNull(mutableInt0);
      assertEquals((-1825L), mutableInt0.longValue());
      assertEquals((-1825.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1825", mutableInt0.toString());
      assertEquals((-1825), (int)mutableInt0.getValue());
      assertEquals((-1825), (int)mutableInt0.toInteger());
      assertEquals((byte) (-33), mutableInt0.byteValue());
      assertEquals((-1825.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1825), mutableInt0.shortValue());
      assertEquals((-1825), mutableInt0.intValue());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      int int0 = ArrayUtils.lastIndexOf(intArray1, 2, 65);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(2, int0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2469);
      longArray0[1] = (long) 65;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 32);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-2469L), 65L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)13;
      shortArray0[4] = (short)13;
      shortArray0[6] = (short)1852;
      ArrayUtils.shift(shortArray0, (int) (short)1852);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)13, (short)0, (short)1852, (short)0, (short)0, (short)0, (short)13}, shortArray0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-603), (int) (short)13);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1909;
      intArray0[1] = (-1568);
      intArray0[2] = 4;
      intArray0[3] = (-1175);
      intArray0[4] = 4;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 4);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1909, (-1568), 4, (-1175), 4}, intArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = 32;
      int[] intArray0 = new int[5];
      intArray0[0] = 32;
      intArray0[1] = 0;
      int int1 = (-779);
      intArray0[2] = (-779);
      intArray0[3] = 0;
      intArray0[4] = 32;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {32, 0, (-779), 0, 32}, intArray0);
      assertArrayEquals(new int[] {32, 0, (-779), 0, 32}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      int int2 = Integer.MAX_VALUE;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-779);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) 0;
      int int3 = (-298);
      ArrayUtils.swap(floatArray0, 0, (-298), 0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-779.0F), 0.0F, 2.14748365E9F, 0.0F}, floatArray0, 0.01F);
      
      int int4 = ArrayUtils.lastIndexOf(intArray0, (-779));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {32, 0, (-779), 0, 32}, intArray0);
      assertSame(intArray0, intArray1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(2, int4);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 368L;
      longArray0[2] = 0L;
      longArray0[3] = (-2085L);
      longArray0[4] = (-425L);
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)41);
      assertNotNull(byte0);
      assertEquals((byte)41, (byte)byte0);
      
      Byte byte1 = new Byte((byte)110);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)110, (byte)byte1);
      
      Byte byte2 = new Byte((byte)51);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)51, (byte)byte2);
      
      Byte byte3 = new Byte((byte)41);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)41, (byte)byte3);
      
      Byte byte4 = new Byte((byte)0);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte4);
      
      Byte byte5 = new Byte((byte)49);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte)49, (byte)byte5);
      
      Byte byte6 = new Byte((byte) (-118));
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertEquals((byte) (-118), (byte)byte6);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)49;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte) (-118));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)49}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)49, (short) (-118)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2194.6423F);
      floatArray0[1] = (-2194.6423F);
      floatArray0[2] = (-2194.6423F);
      floatArray0[3] = (-2194.6423F);
      floatArray0[4] = (-2194.6423F);
      floatArray0[5] = (-2194.6423F);
      floatArray0[6] = (-2194.6423F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2194.6423F), 65);
      assertNotNull(bitSet0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-2194.6423F), (-2194.6423F), (-2194.6423F), (-2194.6423F), (-2194.6423F), (-2194.6423F), (-2194.6423F)}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (-151L);
      longArray0[2] = 1L;
      longArray0[3] = (-151L);
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2358.8F);
      floatArray0[1] = (-2069.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, '^', 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 7);
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 7;
      longArray0[1] = (long) 7;
      longArray0[2] = (long) 7;
      longArray0[3] = (long) 7;
      longArray0[4] = (long) 7;
      longArray0[5] = (long) 7;
      longArray0[6] = (long) 7;
      longArray0[7] = (long) 7;
      long[] longArray1 = ArrayUtils.insert(7, longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      assertArrayEquals(new long[] {7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 7;
      longArray0[1] = (long) 7;
      longArray0[2] = (long) 7;
      longArray0[3] = (long) 7;
      longArray0[4] = (long) 7;
      longArray0[7] = (long) 7;
      long[] longArray1 = ArrayUtils.insert(7, longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      assertArrayEquals(new long[] {7L, 7L, 7L, 7L, 7L, 0L, 0L, 7L}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2469);
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-2469), 0, 2, 32, 0}, intArray0);
      assertArrayEquals(new int[] {(-2469), 0, 2, 32, 0}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 32;
      floatArray0[3] = (float) (-2469);
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 32;
      floatArray0[7] = (float) 2;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 32.0F, (-2469.0F), 32.0F, 0.0F, 32.0F, 2.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 32;
      longArray0[1] = (long) (-2469);
      longArray0[2] = (long) (-2469);
      longArray0[3] = (long) 32;
      longArray0[4] = (long) 0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-2469));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {32L, (-2469L), (-2469L), 32L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-2469L), 32L, (-2469L), (-2469L), 32L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-291L);
      Integer[] integerArray0 = new Integer[16];
      Integer integer0 = new Integer(760);
      assertNotNull(integer0);
      assertEquals(760, (int)integer0);
      
      integerArray0[0] = integer0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)62;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)88, (int) integerArray0[0]);
      assertEquals(16, integerArray0.length);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88, (byte)62}, byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-291L), 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)12;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)88, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)59, (byte)12}, byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) '4';
      floatArray0[2] = (float) '4';
      floatArray0[1] = (float) 'c';
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-43));
      assertNotNull(integer0);
      assertEquals((-43), (int)integer0);
      
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)23;
      shortArray0[1] = (short)23;
      shortArray0[2] = (short)23;
      shortArray0[3] = (short)23;
      shortArray0[4] = (short)23;
      shortArray0[5] = (short)23;
      shortArray0[6] = (short)23;
      shortArray0[7] = (short)23;
      short[] shortArray1 = ArrayUtils.insert(int0, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)23, (short)23, (short)23, (short)23, (short)23, (short)23, (short)23, (short)23}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'c';
      intArray0[1] = (-2146757259);
      intArray0[2] = (-43);
      intArray0[3] = (int) (short)23;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {99, (-2146757259), (-43), 23}, intArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray1, shortArray0);
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)23, (short)23, (short)23, (short)23, (short)23, (short)23, (short)23, (short)23}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(floatArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1578);
      doubleArray0[1] = (double) 0.0F;
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)76;
      longArray0[1] = (long) (short) (-1578);
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {76L, (-1578L)}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1578.0)}, doubleArray0, 0.01);
      
      MutableInt mutableInt0 = new MutableInt((int) (short)76);
      assertNotNull(mutableInt0);
      assertEquals(76, mutableInt0.intValue());
      assertEquals("76", mutableInt0.toString());
      assertEquals((short)76, mutableInt0.shortValue());
      assertEquals((byte)76, mutableInt0.byteValue());
      assertEquals(76.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(76, (int)mutableInt0.toInteger());
      assertEquals(76.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(76, (int)mutableInt0.getValue());
      assertEquals(76L, mutableInt0.longValue());
      
      MutableInt mutableInt1 = new MutableInt(0.0F);
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals("0", mutableInt1.toString());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0L, mutableInt1.longValue());
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)120;
      shortArray0[1] = (short)3303;
      shortArray0[2] = (short)91;
      shortArray0[3] = (short) (-1939);
      shortArray0[4] = (short)76;
      shortArray0[5] = (short) (-3353);
      shortArray0[6] = (short)843;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)120, (short)3303, (short)91, (short) (-1939), (short)76, (short) (-3353), (short)843}, shortArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)120;
      longArray0[1] = (long) (short)120;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {120L, 120L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shift(shortArray0, (int) (short)91, (-299), (-1167));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)120, (short)3303, (short)91, (short) (-1939), (short)76, (short) (-3353), (short)843}, shortArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-1939);
      floatArray0[1] = (float) (short)3303;
      floatArray0[2] = (float) (short)3303;
      floatArray0[3] = (float) (short)91;
      floatArray0[4] = (float) (short)3303;
      floatArray0[5] = (float) (short)120;
      floatArray0[6] = (float) (short)3303;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 1061.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(floatArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (-2424);
      intArray0[2] = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-3028));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3028, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      int int1 = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      ArrayUtils.swap(intArray0, 337, (int) (byte)1, (-1275));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3358;
      intArray0[3] = 3358;
      intArray0[4] = 3358;
      ArrayUtils.swap(intArray0, 3358, 3358);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 3358, 3358, 3358}, intArray0);
      
      ArrayUtils.shift((int[]) null, (-2));
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      
      ArrayUtils.swap((int[]) null, 2064, 84);
      ArrayUtils.shift((int[]) null, 1341);
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = 2146363416;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-32);
      Object[] objectArray0 = new Object[10];
      booleanArray0[1] = false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) (byte) (-32);
      objectArray0[5] = (Object) false;
      objectArray0[7] = (Object) false;
      Object object0 = ArrayUtils.get(objectArray0, 2146363416, objectArray0[0]);
      assertNull(object0);
      assertEquals(10, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-32);
      int[] intArray0 = new int[6];
      intArray0[0] = 1494;
      intArray0[1] = (int) (byte) (-32);
      intArray0[2] = (int) (byte) (-32);
      intArray0[3] = (int) (byte) (-32);
      intArray0[4] = (int) (byte) (-32);
      intArray0[5] = 2146363416;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146363416, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      char char0 = 'Z';
      Character character0 = Character.valueOf('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertEquals('Z', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('Z');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character1));
      assertEquals('Z', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('!');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertEquals('!', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('4');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertEquals('4', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character(char0);
      assertNotNull(character5);
      assertTrue(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character0));
      assertEquals('Z', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('b');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertEquals('b', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character(char0);
      assertNotNull(character7);
      assertTrue(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertTrue(character7.equals((Object)character1));
      assertTrue(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character3));
      assertTrue(character7.equals((Object)char0));
      assertTrue(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character4));
      assertEquals('Z', (char)character7);
      
      characterArray0[7] = character7;
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = (char) character6;
      charArray0[2] = (char) character3;
      charArray0[3] = 'Z';
      charArray0[4] = (char) character4;
      charArray0[5] = 'b';
      charArray0[6] = '-';
      charArray0[7] = (char) character5;
      char[] charArray1 = ArrayUtils.add(charArray0, '4');
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'<', 'b', '!', 'Z', '4', 'b', '-', 'Z'}, charArray0);
      assertArrayEquals(new char[] {'<', 'b', '!', 'Z', '4', 'b', '-', 'Z', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'Z';
      doubleArray0[1] = (double) 'b';
      doubleArray0[2] = (double) 'Z';
      doubleArray0[3] = (double) 'b';
      doubleArray0[4] = (double) '4';
      doubleArray0[5] = (double) '<';
      doubleArray0[6] = (double) 'b';
      doubleArray0[7] = Double.NaN;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '<';
      intArray0[1] = (int) (char)character1;
      intArray0[2] = (int) '<';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      char char0 = 'I';
      Character character0 = new Character('I');
      assertNotNull(character0);
      assertTrue(character0.equals((Object)char0));
      assertEquals('I', (char)character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      int int0 = 0;
      Character character1 = new Character((char) character0);
      assertNotNull(character1);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertEquals('I', (char)character1);
      
      Character[] characterArray1 = ArrayUtils.add(characterArray0, 0, character1);
      assertNotNull(characterArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'I';
      doubleArray0[1] = (double) (char)character0;
      doubleArray0[2] = 3421.62316;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (char)character0;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      Character character0 = new Character('6');
      assertNotNull(character0);
      assertEquals('6', (char)character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      Character character1 = Character.valueOf('f');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('f', (char)character1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(characterArray0, (int) character0, character1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-492);
      shortArray0[1] = (short) (-2424);
      shortArray0[2] = (short) (-1578);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-900));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578), (short) (-900)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = '2';
      charArray0[2] = 'F';
      charArray0[3] = 'o';
      charArray0[4] = '!';
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = (Character) 'F';
      characterArray0[1] = (Character) '2';
      characterArray0[2] = (Character) '2';
      characterArray0[3] = (Character) '!';
      characterArray0[4] = (Character) '!';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'B');
      assertNotNull(charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(5, characterArray0.length);
      assertArrayEquals(new char[] {'F', '2', '2', '!', '!'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'o';
      longArray0[1] = (long) '2';
      longArray0[2] = (long) 'k';
      longArray0[3] = (long) 'k';
      longArray0[4] = (long) 'k';
      int int0 = ArrayUtils.indexOf(longArray0, 50L, 3259);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {111L, 50L, 107L, 107L, 107L}, longArray0);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(characterArray0, 688, (Character) 'o');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 688, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0L);
      assertNotNull(doubleStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '=';
      charArray0[2] = 'o';
      charArray0[3] = 'i';
      ArrayUtils.shift(charArray0, (-1431));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'i', '>', '=', 'o'}, charArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, (-1431), 2);
      assertNotNull(charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4123.515661;
      doubleArray0[1] = 4123.515661;
      doubleArray0[2] = 1755.0;
      doubleArray0[3] = 4123.515661;
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'a';
      charArray0[2] = '0';
      charArray0[3] = 'w';
      ArrayUtils.shift(charArray0, (-779), (int) '0', 2485);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'w', '[', 'a', '0'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = '/';
      charArray0[2] = 't';
      charArray0[3] = ':';
      charArray0[4] = 't';
      charArray0[5] = 't';
      charArray0[6] = 'd';
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'/', 't', ':', 't', 't', 'd', 't'}, charArray0);
      
      ArrayUtils.shift(floatArray0, 286);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-1578), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1578, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 4123.515661;
      doubleArray0[2] = 2163.4;
      doubleArray0[3] = 1755.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4123.515661;
      doubleArray1[1] = 4123.515661;
      doubleArray1[2] = 1755.0;
      doubleArray1[3] = 4123.515661;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {(-1.0), 4123.515661, 2163.4, 1755.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4123.515661, 4123.515661, 1755.0, 4123.515661}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2163.4}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'a';
      charArray0[2] = '0';
      charArray0[3] = 'w';
      int int0 = 2485;
      ArrayUtils.shift(charArray0, (-779), 0, 2485);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'[', 'a', '0', 'w'}, charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '0';
      floatArray0[1] = (float) 'a';
      floatArray0[2] = (float) '0';
      floatArray0[3] = (float) 'w';
      floatArray0[4] = (float) 'w';
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (float) '0';
      floatArray0[7] = (float) '0';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2485, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2485, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)50;
      shortArray0[1] = (short)1117;
      shortArray0[2] = (short) (-1473);
      shortArray0[3] = (short) (-1842);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1117);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)50, (short)1117, (short) (-1473), (short) (-1842)}, shortArray0);
      assertArrayEquals(new short[] {(short)50, (short)1117, (short) (-1473), (short) (-1842), (short)1117}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)50;
      floatArray0[1] = (float) (short)50;
      Double double0 = new Double(37.0);
      assertNotNull(double0);
      assertEquals(37.0, (double)double0, 0.01);
      
      Double double1 = new Double(50.0F);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(50.0, (double)double1, 0.01);
      
      Double double2 = new Double((-1347.08186059));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-1347.08186059), (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double0;
      doubleArray0[5] = double2;
      doubleArray0[6] = double2;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      char[] charArray0 = new char[0];
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Integer[] integerArray0 = new Integer[6];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 53);
      assertNotNull(intArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {53, 53, 53, 53, 53, 53}, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)933;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 266.6681F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {933.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {933.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.swap(charArray0, 841, (int) (short)933, (int) (byte)0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2836;
      shortArray0[1] = (short) (-2313);
      shortArray0[2] = (short) (-2613);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = 'k';
      charArray0[2] = 'i';
      charArray0[3] = '8';
      ArrayUtils.swap(charArray0, 886, 1593);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'b', 'k', 'i', '8'}, charArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '>');
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'b', 'k', 'i', '8'}, charArray0);
      assertArrayEquals(new char[] {'b', 'k', 'i', '8', '>'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-1939), (short) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1939, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 's';
      charArray0[2] = ';';
      charArray0[3] = '#';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 37, 2);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'{', 's', ';', '#'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 's';
      charArray0[0] = ';';
      charArray0[3] = '2';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 37, 2);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {';', 's', '\u0000', '2'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[0] = (-2469);
      intArray0[1] = 0;
      intArray0[4] = 0;
      intArray0[3] = 32;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(11, intArray0.length);
      assertEquals(11, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[3] = (float) (-2469);
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) 0;
      floatArray0[7] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-2469.0F), 32.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, (-298), 32);
      assertNotNull(intArray2);
      assertEquals(11, intArray0.length);
      assertEquals(11, intArray1.length);
      assertEquals(11, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-2469.0F), 32.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-2224);
      longArray0[1] = (-151L);
      longArray0[2] = 1L;
      longArray0[3] = (-151L);
      ArrayUtils.shift(longArray0, (-2224));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-2224L), (-151L), 1L, (-151L)}, longArray0);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-2224));
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 614, 614);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1431));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1431);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1162, (int) (byte)0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-1431)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2502;
      floatArray0[1] = (float) 2502;
      floatArray0[2] = (float) 2502;
      floatArray0[3] = (float) Integer.MAX_VALUE;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) Integer.MAX_VALUE;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 1.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2502.0F, 2502.0F, 2502.0F, 2.14748365E9F, (-1.0F), 2.14748365E9F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-905.7));
      assertNotNull(double0);
      assertEquals((-905.7), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-905.7)}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1066L);
      longArray0[2] = 928L;
      longArray0[3] = 1275L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1916L);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1066L), 928L, 1275L}, longArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 1183;
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, Integer.MAX_VALUE, 2502);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), 1183, (-1), (-1), (-1)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1066L);
      floatArray0[2] = (-1.0F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1066.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[2] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[3] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, booleanArray0[1]);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[3];
      charArray0[2] = 'e';
      ArrayUtils.shift(charArray0, (-330));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'e'}, charArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1162, (-1437));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.addFirst(intArray1, 1162);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(218, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 218, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)90;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-2));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)5, (byte)90, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)90, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray0, (int) (byte) (-2), 120);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)5, (byte)90, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)90, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)90;
      int[] intArray0 = ArrayUtils.insert(1, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      int int0 = 1492;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, 1492);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1492, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(0.0);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(186.081F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(186.081F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(0.0);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(0.0F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) floatArray0[1]);
      assertNotNull(float5);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float(305.45486F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals(305.45486F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((-3600.16792227363));
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertEquals((-3600.168F), (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      Float float8 = new Float((double) floatArray0[1]);
      assertNotNull(float8);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertEquals((float)float8, (float)float4, 0.01F);
      assertEquals((float)float8, (float)float2, 0.01F);
      assertEquals((float)float8, (float)float5, 0.01F);
      assertEquals(0.0F, (float)float8, 0.01F);
      
      floatArray0[8] = float8;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 186.081F, 0.0F, 0.0F, 305.45486F, (-3600.168F), 0.0F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-679);
      Object[] objectArray0 = new Object[0];
      MockRandom mockRandom0 = new MockRandom(25L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (java.util.Random) mockRandom0);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 305.01200294637;
      doubleArray0[2] = 1564.5;
      doubleArray0[3] = (-1347.08186059);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 305.01200294637, 1564.5, (-1347.08186059)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {305.01200294637, 1564.5, (-1347.08186059)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-3726.5854F);
      floatArray0[1] = 2938.5813F;
      floatArray0[2] = (-1994.51F);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {(-3726.5854F), 2938.5813F, (-1994.51F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {(-3726.5854F), 2938.5813F, (-1994.51F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1564.5;
      doubleArray2[1] = (double) (-3726.5854F);
      doubleArray2[2] = (-841.93857044);
      doubleArray2[3] = (double) (-1994.51F);
      doubleArray2[4] = (double) (-3726.5854F);
      doubleArray2[5] = 0.0;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {1564.5, (-3726.58544921875), (-841.93857044), (-1994.510009765625), (-3726.58544921875), 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-679);
      intArray0[1] = (-1239);
      int[] intArray1 = ArrayUtils.add(intArray0, (-1239));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-679), (-1239)}, intArray0);
      assertArrayEquals(new int[] {(-679), (-1239), (-1239)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1239);
      longArray0[1] = (long) (-1239);
      longArray0[2] = (long) (-679);
      longArray0[3] = 1457L;
      longArray0[4] = (long) (-1239);
      longArray0[5] = (long) (-1239);
      longArray0[6] = (long) (-1239);
      longArray0[8] = (long) (-679);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-1239L), (-1239L), (-679L), 1457L, (-1239L), (-1239L), (-1239L), 0L, (-679L)}, longArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (byte)1, (int) (byte)2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-57));
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-15), (byte)90, (byte)0, (byte)9, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-15), (byte)90, (byte)0, (byte)9, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1761L, (-3602));
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      Object[] objectArray0 = new Object[9];
      double[] doubleArray0 = new double[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-2037.44), 90);
      assertNotNull(bitSet1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = '4';
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'4', '4', '4', '4', '\\'}, charArray0);
      
      Character character0 = new Character('4');
      assertNotNull(character0);
      assertEquals('4', (char)character0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) bitSet1, (-801));
      assertEquals(9, objectArray0.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, Double.NaN);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'T';
      Double double0 = new Double((-3503.845926));
      assertNotNull(double0);
      assertEquals((-3503.845926), (double)double0, 0.01);
      
      Double double1 = new Double((-3503.845926));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-3503.845926), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2984.49));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-3503.845926), (-3503.845926)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (-2984.49), 1072, 479.2119);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-3503.845926), (-3503.845926)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals((-1), int0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'h';
      floatArray0[1] = (float) 'h';
      floatArray0[2] = (float) 'h';
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {104.0F, 104.0F, 104.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {104.0F, 104.0F, 104.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, 55.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-3503.845926), (-3503.845926)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertTrue(int1 == int0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      Character character0 = new Character('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      Object[] objectArray0 = new Object[1];
      Character character1 = new Character('a');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('a', (char)character1);
      
      Object object0 = ArrayUtils.get(objectArray0, 56, (Object) character1);
      assertNotNull(object0);
      assertEquals(1, objectArray0.length);
      assertFalse(character1.equals((Object)character0));
      assertFalse(object0.equals((Object)character0));
      assertEquals('a', object0);
      
      objectArray0[0] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) character1, (-3869));
      assertEquals(1, objectArray0.length);
      assertFalse(character1.equals((Object)character0));
      assertEquals((-1), int0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = ArrayUtils.get(booleanArray0, (-1253), boolean1);
      assertNotNull(boolean2);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(2, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = null;
      int int0 = ArrayUtils.indexOf((int[]) null, 0, 65);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-63);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte) (-38), (byte) (-38));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -38, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2358.8F);
      floatArray0[1] = (-2069.0F);
      floatArray0[2] = 0.0F;
      Double double0 = new Double((-1347.08186059));
      assertNotNull(double0);
      assertEquals((-1347.08186059), (double)double0, 0.01);
      
      Double double1 = new Double((-2358.8F));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2358.800048828125), (double)double1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted((Double[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)5;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)21, (byte) (-94));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 21, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "5p/Qd*%hSk";
      stringArray0[1] = "~`zn!QXyG1=4(pd}Fh|";
      stringArray0[2] = "java.lang.Double";
      stringArray0[3] = "";
      stringArray0[4] = "java.lang.Double";
      stringArray0[5] = "The type must not be null";
      boolean boolean0 = ArrayUtils.isArrayIndexValid(stringArray0, (-1734));
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-679);
      intArray0[1] = (-1239);
      int[] intArray1 = ArrayUtils.add(intArray0, (-1239));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-679), (-1239)}, intArray0);
      assertArrayEquals(new int[] {(-679), (-1239), (-1239)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1239);
      longArray0[1] = (long) (-1239);
      longArray0[2] = (long) (-679);
      longArray0[3] = 1457L;
      longArray0[4] = (long) (-1239);
      longArray0[5] = (long) (-1239);
      longArray0[6] = (long) (-1239);
      longArray0[7] = (long) (-679);
      longArray0[8] = (long) (-679);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-1239L), (-1239L), (-679L), 1457L, (-1239L), (-1239L), (-1239L), (-679L), (-679L)}, longArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)62;
      char[] charArray0 = ArrayUtils.add((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1582L));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1582L)}, longArray0);
      
      double[] doubleArray0 = new double[8];
      Float[] floatArray0 = new Float[0];
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-492);
      shortArray0[1] = (short) (-2424);
      shortArray0[2] = (short) (-1578);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-900));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578), (short) (-900)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = '2';
      charArray0[2] = 'F';
      charArray0[3] = 'o';
      charArray0[4] = '!';
      charArray0[5] = '7';
      charArray0[6] = '-';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)53;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertNotNull(bitSet0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)53, (byte)53}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      Double double0 = new Double(0.0F);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double(0.0F);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      Double double2 = new Double(372.5891);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(372.5891, (double)double2, 0.01);
      
      Double double3 = new Double(0.0F);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted((Double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)5849);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 111L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)5849;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 111L;
      doubleArray0[5] = (double) 111L;
      doubleArray0[6] = (double) 111L;
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-492);
      shortArray0[1] = (short) (-2424);
      shortArray0[2] = (short) (-1578);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-900));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578), (short) (-900)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = '2';
      charArray0[2] = 'F';
      charArray0[3] = 'o';
      charArray0[4] = '!';
      charArray0[5] = '7';
      charArray0[6] = '-';
      char[] charArray1 = ArrayUtils.add(charArray0, '-');
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'k', '2', 'F', 'o', '!', '7', '-'}, charArray0);
      assertArrayEquals(new char[] {'k', '2', 'F', 'o', '!', '7', '-', '-'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2424));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 902L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[4] = 0L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {902L, 0L, 0L, (-1L), 0L}, longArray0);
      assertFalse(boolean0);
      
      ArrayUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1237.2790971243);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(1237.2790971243, (double)double3, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1337), 2);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-57));
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-15), (byte)90, (byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-15), (byte)90, (byte)0, (byte) (-1), (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1761L, (-3602));
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-801), 2146363416);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      ArrayUtils.swap((char[]) null, 2621, (-1686), (-1686));
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1686);
      longArray0[1] = (long) 2621;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1686L), 2621L, 0L}, longArray0);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-1686L), 5);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-44);
      longArray0[1] = (long) (byte) (-44);
      longArray0[2] = (long) (byte) (-44);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-44L), (-44L), (-44L)}, longArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 2147483647L);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-91), (int) (byte) (-91));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 's';
      charArray0[2] = '2';
      char[] charArray1 = ArrayUtils.subarray(charArray0, Integer.MAX_VALUE, 114);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'Q', 's', '2'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'Q';
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {81}, intArray0);
      assertArrayEquals(new int[] {81, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-492);
      shortArray0[1] = (short) (-2424);
      shortArray0[2] = (short) (-1578);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (byte)2);
      assertNotNull(bitSet0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertEquals("{2, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[2] = integer0;
      Integer integer2 = ArrayUtils.get(integerArray0, 760);
      assertNull(integer2);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, 760);
      assertNull(integer3);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = (-2085L);
      longArray0[4] = (-425L);
      longArray0[6] = 1336L;
      longArray0[7] = 0L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {1L, 0L, 0L, (-2085L), (-425L), 0L, 1336L, 0L}, longArray0);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-425L);
      objectArray0[1] = (Object) 1L;
      objectArray0[2] = (Object) (-425L);
      objectArray0[3] = (Object) 0L;
      Character character0 = Character.valueOf('W');
      assertNotNull(character0);
      assertEquals('W', (char)character0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) character0, 2);
      assertEquals(4, objectArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 's';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 's';
      floatArray0[1] = (float) '{';
      floatArray0[2] = (float) 's';
      floatArray0[3] = (float) '{';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 115.0F);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {115.0F, 123.0F, 115.0F, 123.0F}, floatArray0, 0.01F);
      assertEquals(2, int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertTrue(int1 == int0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '*';
      charArray0[2] = ';';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'*', ';', '['}, charArray0);
      
      Character character0 = new Character('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockRandom0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 2);
      assertEquals(3, objectArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 454);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(0, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      float[] floatArray0 = ArrayUtils.insert(454, (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {(-1), 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      ArrayUtils.swap(floatArray0, (-2224), (int) (byte) (-69), (-2224));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (byte) (-69));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int1 = ArrayUtils.indexOf(floatArray0, (float) 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int int2 = ArrayUtils.lastIndexOf(intArray1, 101, (-1));
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {(-1), 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '*';
      charArray0[2] = ';';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'*', ';', '['}, charArray0);
      
      Character character0 = new Character('W');
      assertNotNull(character0);
      assertEquals('W', (char)character0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'*', ';', '['}, charArray0);
      assertArrayEquals(new char[] {'*', ';', '['}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '*';
      charArray0[2] = ';';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'*', ';', '['}, charArray0);
      
      Character character0 = new Character('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ';';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockRandom0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 2);
      assertEquals(3, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      char[] charArray0 = new char[4];
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) '\u0000';
      doubleArray0[2] = (double) '\u0000';
      ArrayUtils.swap(charArray0, (-572), 0, (-82));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object1, 0);
      assertEquals(0, objectArray0.length);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = '_';
      charArray0[2] = ':';
      charArray0[3] = 'C';
      charArray0[4] = 't';
      charArray0[5] = '/';
      charArray0[6] = 'd';
      charArray0[7] = '4';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'_', ':', 'C', 't', '/', 'd', '4', '6'}, charArray0);
      
      Object[] objectArray0 = new Object[0];
      Character character0 = new Character('4');
      assertNotNull(character0);
      assertEquals('4', (char)character0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) character0, 56);
      assertEquals(0, objectArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = (-2085L);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 1L;
      ArrayUtils.swap(floatArray0, (-2469), 1852);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2469);
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-2469), 0, 2, 32, 0}, intArray0);
      assertArrayEquals(new int[] {(-2469), 0, 2, 32, 0}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 32;
      floatArray0[3] = (float) (-2469);
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 32;
      floatArray0[7] = (float) 2;
      ArrayUtils.swap(floatArray0, Integer.MAX_VALUE, 0, 0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 32.0F, (-2469.0F), 32.0F, 0.0F, 32.0F, 2.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, 760);
      assertNull(integer3);
      assertEquals(3, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integer0, (Object) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      short short0 = (short)1136;
      Short short1 = Short.valueOf((short)1136);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1136, (short)short1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) short1, (Object) short1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0F;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3197);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3197), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3197, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1.0F;
      objectArray0[1] = (Object) 1.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(objectArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)5;
      longArray0[1] = (long) (byte)5;
      longArray0[2] = (long) (byte)90;
      longArray0[3] = (long) (byte)90;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {5L, 5L, 90L, 90L}, longArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-1568), (-1568), (int) (byte)90);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1167);
      doubleArray0[1] = (double) (-299);
      doubleArray0[2] = (double) 5L;
      doubleArray0[3] = (double) 5L;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1167.0), (-299.0), 5.0, 5.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (byte)5);
      assertNotNull(bitSet0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1431));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 53);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, (int) (short)2, 122, (int) (short)0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertNotNull(map0);
      assertEquals(0, integerArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      ArrayUtils.swap((Object[]) integerArray0, (int) (short)2, (int) (short)2, 3654);
      assertEquals(0, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-319), (int) (short)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -319, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 368L;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1488);
      intArray0[1] = 1379;
      intArray0[2] = (-3454);
      intArray0[3] = 0;
      intArray0[4] = 43;
      intArray0[5] = (-3454);
      intArray0[6] = (-1488);
      Float float0 = new Float((double) 368L);
      assertNotNull(float0);
      assertEquals(368.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 1379);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-680), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -680, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 2147483647L);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'c';
      ArrayUtils.shift(floatArray0, 0, 0, (-1));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {99.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = ArrayUtils.insert(0, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.shift((long[]) null, (-2146487134));
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) (-1));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(" is not in the range '0' - '9'");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean1;
      Float float0 = new Float((-539.535F));
      assertNotNull(float0);
      assertEquals((-539.535F), (float)float0, 0.01F);
      
      Float float1 = new Float((-539.535F));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-539.535F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float1;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-539.535F));
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-539.535F), (-539.535F), (-539.535F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<";
      stringArray0[1] = "";
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2307.449F);
      floatArray0[1] = (-1.3261032F);
      floatArray0[2] = (-2307.449F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-2307.449F), (-1.3261032F), (-2307.449F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'L', 'L', 'L', 'L'}, charArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1709.5723F), 100);
      assertNotNull(bitSet0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-2307.449F), (-1.3261032F), (-2307.449F)}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Character character0 = Character.valueOf('}');
      assertNotNull(character0);
      assertEquals('}', (char)character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      ArrayUtils.reverse((boolean[]) null);
      int[] intArray0 = new int[6];
      intArray0[0] = 9;
      intArray0[1] = 3358;
      intArray0[2] = 120;
      intArray0[3] = (-1029);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = 3358;
      ArrayUtils.swap(intArray0, 2, 0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {120, 3358, 9, (-1029), 0, 3358}, intArray0);
      
      ArrayUtils.shift(intArray0, 1168);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {9, (-1029), 0, 3358, 120, 3358}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {9, (-1029), 0, 3358, 120, 3358}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = 1L;
      longArray0[0] = 1L;
      longArray0[1] = 368L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 368L);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {1L, 368L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 368L;
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 32.0F;
      floatArray0[4] = (float) 1L;
      floatArray0[5] = (float) 1L;
      floatArray0[6] = (-182.0F);
      floatArray0[7] = (float) 1L;
      floatArray0[8] = (float) 1L;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {368.0F, 1.0F, (-1.0F), 32.0F, 1.0F, 1.0F, (-182.0F), 1.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, 1.0F);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {368.0F, 1.0F, (-1.0F), 32.0F, 1.0F, 1.0F, (-182.0F), 1.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, true, true}, booleanArray0));
      
      Long long1 = new Long(368L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(368L, (long)long1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(long1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<";
      stringArray0[1] = "";
      boolean boolean0 = ArrayUtils.isNotEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1814);
      shortArray0[1] = (short) (-1285);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)0, (int) (short) (-1814), (int) (short) (-1285));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1814), (short) (-1285), (short) (-1), (short)0, (short)0}, shortArray0);
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray2));
      assertSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      short[] shortArray0 = new short[20];
      shortArray0[1] = (short) (-985);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(20, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) (short) (-985);
      longArray0[2] = (long) (short) (-985);
      longArray0[3] = (-1172L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-985L));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, (-985L), (-985L), (-1172L), 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-985L), (-1172L), 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-1172L));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      Long long0 = new Long(917L);
      assertNotNull(long0);
      assertEquals(917L, (long)long0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[18];
      booleanArray0[1] = true;
      Object[] objectArray0 = new Object[6];
      objectArray0[2] = (Object) true;
      objectArray0[5] = (Object) true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(18, booleanArray0.length);
      assertEquals(19, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[2]);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(true, object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0, 2578);
      assertNotNull(bitSet0);
      assertEquals(6, objectArray0.length);
      assertTrue(object0.equals((Object)boolean0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertEquals(18, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'c';
      longArray0[1] = (long) 'c';
      longArray0[2] = (long) 'c';
      longArray0[4] = (-2147483648L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {99L, 99L, 99L, 0L, (-2147483648L)}, longArray0);
      assertArrayEquals(new long[] {99L, 99L, 99L, (-2147483648L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'c');
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'c', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-511);
      shortArray0[1] = (short) (-985);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-511), (short) (-985)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-511);
      longArray0[1] = (long) (short) (-985);
      longArray0[2] = (long) (short) (-985);
      longArray0[3] = (-1172L);
      longArray0[4] = (long) (short) (-511);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-985L));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {(-511L), (-985L), (-985L), (-1172L), (-511L)}, longArray0);
      assertArrayEquals(new long[] {(-511L), (-985L), (-1172L), (-511L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-1172L));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (short) (-985));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Long long0 = new Long(917L);
      assertNotNull(long0);
      assertEquals(917L, (long)long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      int[] intArray0 = new int[6];
      intArray0[0] = (-853);
      intArray0[1] = (int) 'j';
      intArray0[2] = (int) 'j';
      intArray0[3] = (int) 'j';
      intArray0[4] = (int) 'j';
      intArray0[5] = 0;
      ArrayUtils.shift(intArray0, 2167);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-853), 106, 106, 106, 106}, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1652);
      intArray0[1] = 13;
      intArray0[2] = (-2211);
      intArray0[3] = 0;
      intArray0[4] = (-1431);
      intArray0[5] = (-1667);
      intArray0[6] = 5;
      ArrayUtils.swap(intArray0, 120, (-1667));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1652), 13, (-2211), 0, (-1431), (-1667), 5}, intArray0);
      
      ArrayUtils.shift(intArray0, (-2211));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {5, (-1652), 13, (-2211), 0, (-1431), (-1667)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 24;
      intArray0[2] = (-1383);
      intArray0[3] = (-510);
      intArray0[4] = (-48);
      intArray0[5] = (-2183);
      intArray0[6] = (-430);
      ArrayUtils.shift(intArray0, (-1324));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {24, (-1383), (-510), (-48), (-2183), (-430), 0}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-430);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1383);
      floatArray0[1] = (float) (-430);
      floatArray0[2] = (float) (-48);
      floatArray0[3] = (float) (-1383);
      ArrayUtils.swap(floatArray0, (-214), (-48), (-430));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1383.0F), (-430.0F), (-48.0F), (-1383.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 3358;
      intArray0[1] = 3358;
      intArray0[2] = (int) (byte)90;
      intArray0[3] = 3358;
      intArray0[4] = 3358;
      intArray0[5] = 3358;
      intArray0[6] = 3358;
      intArray0[7] = (int) (byte)90;
      intArray0[8] = 790;
      ArrayUtils.shift(intArray0, 0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {3358, 3358, 90, 3358, 3358, 3358, 3358, 90, 790}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-8);
      intArray0[1] = (-8);
      intArray0[2] = (-8);
      intArray0[3] = (-8);
      intArray0[4] = (-8);
      intArray0[5] = (-8);
      intArray0[6] = (-8);
      ArrayUtils.shift(intArray0, (-1107), 2146073612, 3939);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-8), (-8), (-8), (-8), (-8), (-8), (-8)}, intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2176);
      shortArray0[1] = (short)2119;
      shortArray0[2] = (short)16757;
      shortArray0[3] = (short)2119;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)2119, (-8));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2176), (short)2119, (short)16757, (short)2119}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Random.setNextRandom((-2831));
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-8);
      integerArray0[1] = (Integer) (-8);
      integerArray0[2] = (Integer) (-8);
      integerArray0[3] = (Integer) (-8);
      integerArray0[4] = (Integer) (-8);
      integerArray0[5] = (Integer) (-8);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {(-8), (-8), (-8), (-8), (-8), (-8)}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-2469));
      assertNotNull(short0);
      assertEquals((short) (-2469), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2469)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 5;
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)492;
      shortArray0[2] = (short) (-1378);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-3023);
      shortArray0[6] = (short) (-8209);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)2, (short)492, (short) (-1378), (short)0, (short) (-1), (short) (-3023), (short) (-8209)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-606));
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2.0);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = ArrayUtils.get(doubleArray0, (-606));
      assertNull(double1);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1986);
      shortArray0[2] = (short)948;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short) (-1986), (short)948}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1, (short) (-1986), (short)948}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.reverse(shortArray0, 427, 37);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short) (-1986), (short)948}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) (-606);
      floatArray0[2] = (float) 37;
      floatArray0[3] = (float) 37;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (float) (short)1;
      floatArray0[6] = (float) (short)948;
      floatArray0[7] = (float) 427;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1002.0F));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, (-606.0F), 37.0F, 37.0F, Float.NaN, 1.0F, 948.0F, 427.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, (-606.0F), 37.0F, 37.0F, Float.NaN, 1.0F, 948.0F, 427.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-679);
      intArray0[1] = (-1239);
      int[] intArray1 = ArrayUtils.add(intArray0, (-1239));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-679), (-1239)}, intArray0);
      assertArrayEquals(new int[] {(-679), (-1239), (-1239)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1239);
      longArray0[1] = (long) (-1239);
      longArray0[2] = (long) (-679);
      longArray0[3] = 1457L;
      longArray0[4] = (long) (-1239);
      longArray0[5] = (long) (-1239);
      longArray0[6] = (long) (-1239);
      longArray0[7] = (long) (-679);
      longArray0[8] = (long) (-679);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-1239L), (-1239L), (-679L), 1457L, (-1239L), (-1239L), (-1239L), (-679L), (-679L)}, longArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)53;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)53);
      assertNotNull(bitSet0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)2, (byte)23, (byte)62, (byte)53}, byteArray0);
      assertEquals("{4}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)32);
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)35);
      assertNotNull(byte0);
      assertEquals((byte)35, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)78);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)78, (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = ArrayUtils.removeAllOccurrences(byteArray2, (byte) (-10));
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 173;
      intArray0[1] = 5;
      intArray0[2] = (-1383);
      intArray0[3] = (-510);
      intArray0[4] = (-48);
      intArray0[5] = (-2183);
      intArray0[6] = (-430);
      ArrayUtils.shift(intArray0, 173);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1383), (-510), (-48), (-2183), (-430), 173, 5}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-430);
      longArray0[1] = (long) (-1383);
      longArray0[2] = (long) (-510);
      longArray0[3] = (long) 5;
      longArray0[4] = (long) (-1383);
      ArrayUtils.shuffle(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1383L), (-510L), 5L, (-1383L), (-430L)}, longArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)59;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-43));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)8, (byte)59}, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)59}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean(true);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5);
      
      booleanArray0[5] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 266.6681F;
      floatArray0[1] = (float) (short)933;
      floatArray0[2] = 266.6681F;
      floatArray0[3] = 266.6681F;
      floatArray0[4] = 266.6681F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 851.918F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {266.6681F, 933.0F, 266.6681F, 266.6681F, 266.6681F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {266.6681F, 933.0F, 266.6681F, 266.6681F, 266.6681F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = '8';
      charArray0[2] = 'Z';
      ArrayUtils.swap(charArray0, (int) (short)933, 185, (-2477));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'u', '8', 'Z'}, charArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)933;
      boolean boolean2 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)933}, shortArray0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-797.52F);
      floatArray0[3] = 2719.4585F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3536.4329F);
      floatArray0[6] = (-3918.59F);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1888);
      intArray0[1] = (-212);
      intArray0[2] = 583;
      intArray0[3] = 1;
      intArray0[4] = (-1970);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 583, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 391.069;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1536;
      ArrayUtils.swap(floatArray0, 897, (-155), (-155));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1536.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 391.069, 897);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.1, 391.069, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.swap((long[]) null, 1, 2220, 2146291886);
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 1536, 1);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2817.4F;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1457.0F);
      doubleArray0[1] = (double) 2817.4F;
      doubleArray0[2] = (double) 2817.4F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2817.39990234375, 886);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1457.0), 2817.39990234375, 2817.39990234375}, doubleArray0, 0.01);
      assertEquals(2, int0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2443.0F));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {2817.4F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2817.4F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[2];
      int int1 = ArrayUtils.indexOf(charArray0, '\u0000', 2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-507.4);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 218.5495127247;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-844.308599486678);
      doubleArray0[7] = (-94.947833473);
      doubleArray0[8] = (-811.9603960864);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 4465.934453454959, (-198));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-507.4), 0.0, 218.5495127247, 1.0, 0.0, 0.0, (-844.308599486678), (-94.947833473), (-811.9603960864)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) false;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) false;
      Object object0 = ArrayUtils.get(objectArray0, 2146363416, objectArray0[0]);
      assertNull(object0);
      assertEquals(8, objectArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift(booleanArray1, 1470);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2069);
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
      int[] intArray0 = new int[7];
      intArray0[0] = (-474);
      intArray0[1] = (-646);
      intArray0[2] = 2097;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-474);
      ArrayUtils.reverse(longArray0, 2097, (-2993));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-474L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'q';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'q';
      charArray1[2] = '%';
      charArray1[3] = 'R';
      charArray1[4] = ']';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2469));
      assertNotNull(bitSet0);
      assertEquals(14, intArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.147483647E9, 0.0, 0.0, 2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.147483647E9, 0.0, 0.0, 2.147483647E9}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addAll(doubleArray0, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(9, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.147483647E9, 0.0, 0.0, 2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.147483647E9, 0.0, 0.0, 2.147483647E9, 2.147483647E9, 2.147483647E9}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, 267.101, 0.0);
      assertNotNull(bitSet0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.147483647E9, 0.0, 0.0, 2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-507.4);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 218.5495127247;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      ArrayUtils.shift((char[]) null, (-2469), 0, 2485);
  }

  @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4123.515661;
      doubleArray0[2] = 1755.0;
      doubleArray0[3] = 4123.515661;
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      ArrayUtils.shift(charArray0, (-779), 0, (-779));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = ArrayUtils.addAll(doubleArray2, doubleArray0);
      assertNotNull(doubleArray3);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(14, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Float[]) null, (Float) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1431));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1431), 2);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 4123.515661;
      doubleArray0[2] = 2163.4;
      doubleArray0[3] = 1755.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4123.515661;
      doubleArray1[1] = 4123.515661;
      doubleArray1[2] = 1755.0;
      doubleArray1[3] = 4123.515661;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {(-1.0), 4123.515661, 2163.4, 1755.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4123.515661, 4123.515661, 1755.0, 4123.515661}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2163.4}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'a';
      charArray0[2] = '0';
      charArray0[3] = 'w';
      ArrayUtils.shift(charArray0, (-779), 0, 2485);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'[', 'a', '0', 'w'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1431));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.swap(shortArray0, (-1), (-584));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      short[] shortArray2 = ArrayUtils.add(shortArray1, (short)999);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)999}, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1431);
      floatArray0[2] = (float) (-1431);
      floatArray0[3] = (float) (short)9;
      floatArray0[4] = (float) (-584);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F, (-3563));
      assertNotNull(bitSet0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1431.0F), (-1431.0F), 9.0F, (-584.0F)}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-492);
      shortArray0[1] = (short) (-2424);
      shortArray0[2] = (short) (-1578);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-900));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578), (short) (-900)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray1, (short) (-1578));
      assertNotNull(shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578), (short) (-900)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-900)}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      Byte byte0 = Byte.valueOf((byte)102);
      assertNotNull(byte0);
      assertEquals((byte)102, (byte)byte0);
      
      Byte byte1 = new Byte((byte)102);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)102, (byte)byte1);
      
      Byte byte2 = new Byte((byte)33);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)33, (byte)byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte3);
      
      Byte byte4 = new Byte((byte)102);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertEquals((byte)102, (byte)byte4);
      
      Byte byte5 = new Byte((byte) (-1));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte5);
      
      Byte byte6 = new Byte((byte) (-1));
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertEquals((byte) (-1), (byte)byte6);
      
      Byte byte7 = new Byte((byte)102);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte4));
      assertEquals((byte)102, (byte)byte7);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte4;
      byteArray0[2] = byte3;
      byteArray0[3] = byte4;
      byteArray0[4] = byte4;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-728));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -728, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 535.0968F;
      floatArray0[2] = 3900.5F;
      int int0 = ArrayUtils.indexOf(floatArray0, 535.0968F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {Float.NaN, 535.0968F, 3900.5F}, floatArray0, 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      byte byte0 = (byte) (-115);
      Byte byte1 = new Byte((byte) (-115));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-115), (byte)byte1);
      
      MutableInt mutableInt0 = new MutableInt((Number) byte1);
      assertNotNull(mutableInt0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((-115.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-115), mutableInt0.shortValue());
      assertEquals((-115.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-115", mutableInt0.toString());
      assertEquals((-115), mutableInt0.intValue());
      assertEquals((-115), (int)mutableInt0.getValue());
      assertEquals((byte) (-115), mutableInt0.byteValue());
      assertEquals((-115L), mutableInt0.longValue());
      assertEquals((-115), (int)mutableInt0.toInteger());
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertNotNull(mutableInt1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals((-115.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-115), mutableInt0.shortValue());
      assertEquals((-115.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-115", mutableInt0.toString());
      assertEquals((-115), mutableInt0.intValue());
      assertEquals((-115), (int)mutableInt0.getValue());
      assertEquals((byte) (-115), mutableInt0.byteValue());
      assertEquals((-115L), mutableInt0.longValue());
      assertEquals((-115), (int)mutableInt0.toInteger());
      assertEquals((-115L), mutableInt1.longValue());
      assertEquals((-115), mutableInt1.intValue());
      assertEquals((-115), (int)mutableInt1.getValue());
      assertEquals((byte) (-115), mutableInt1.byteValue());
      assertEquals((-115), (int)mutableInt1.toInteger());
      assertEquals((-115.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-115), mutableInt1.shortValue());
      assertEquals((-115.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals("-115", mutableInt1.toString());
      
      mutableIntArray0[0] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(mutableInt1);
      assertNotNull(mutableInt2);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertEquals((-115.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-115), mutableInt0.shortValue());
      assertEquals((-115.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-115", mutableInt0.toString());
      assertEquals((-115), mutableInt0.intValue());
      assertEquals((-115), (int)mutableInt0.getValue());
      assertEquals((byte) (-115), mutableInt0.byteValue());
      assertEquals((-115L), mutableInt0.longValue());
      assertEquals((-115), (int)mutableInt0.toInteger());
      assertEquals((-115L), mutableInt1.longValue());
      assertEquals((-115), mutableInt1.intValue());
      assertEquals((-115), (int)mutableInt1.getValue());
      assertEquals((byte) (-115), mutableInt1.byteValue());
      assertEquals((-115), (int)mutableInt1.toInteger());
      assertEquals((-115.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-115), mutableInt1.shortValue());
      assertEquals((-115.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals("-115", mutableInt1.toString());
      assertEquals((-115.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals("-115", mutableInt2.toString());
      assertEquals((byte) (-115), mutableInt2.byteValue());
      assertEquals((short) (-115), mutableInt2.shortValue());
      assertEquals((-115), mutableInt2.intValue());
      assertEquals((-115L), mutableInt2.longValue());
      assertEquals((-115.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-115), (int)mutableInt2.toInteger());
      assertEquals((-115), (int)mutableInt2.getValue());
      
      mutableIntArray0[1] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt((int) (byte) (-115));
      assertNotNull(mutableInt3);
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertEquals((-115), (int)mutableInt3.toInteger());
      assertEquals((byte) (-115), mutableInt3.byteValue());
      assertEquals((-115.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals((-115), (int)mutableInt3.getValue());
      assertEquals((-115L), mutableInt3.longValue());
      assertEquals((-115), mutableInt3.intValue());
      assertEquals((short) (-115), mutableInt3.shortValue());
      assertEquals((-115.0), mutableInt3.doubleValue(), 0.01);
      assertEquals("-115", mutableInt3.toString());
      
      mutableIntArray0[2] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt((-211));
      assertNotNull(mutableInt4);
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertEquals((-211.0F), mutableInt4.floatValue(), 0.01F);
      assertEquals((short) (-211), mutableInt4.shortValue());
      assertEquals("-211", mutableInt4.toString());
      assertEquals((byte)45, mutableInt4.byteValue());
      assertEquals((-211L), mutableInt4.longValue());
      assertEquals((-211), (int)mutableInt4.toInteger());
      assertEquals((-211), (int)mutableInt4.getValue());
      assertEquals((-211), mutableInt4.intValue());
      assertEquals((-211.0), mutableInt4.doubleValue(), 0.01);
      
      mutableIntArray0[3] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt((-211));
      assertNotNull(mutableInt5);
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertTrue(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertEquals((-211), (int)mutableInt5.toInteger());
      assertEquals((-211), mutableInt5.intValue());
      assertEquals((-211), (int)mutableInt5.getValue());
      assertEquals((-211L), mutableInt5.longValue());
      assertEquals((-211.0), mutableInt5.doubleValue(), 0.01);
      assertEquals((-211.0F), mutableInt5.floatValue(), 0.01F);
      assertEquals((short) (-211), mutableInt5.shortValue());
      assertEquals("-211", mutableInt5.toString());
      assertEquals((byte)45, mutableInt5.byteValue());
      
      mutableIntArray0[4] = mutableInt5;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(mutableIntArray0, 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-182), 0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)59;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)12, (-1253));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)12, (byte)59}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1311;
      shortArray0[1] = (short) (-1);
      short short0 = (short)100;
      shortArray0[2] = (short)100;
      shortArray0[3] = (short)1311;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertNotNull(bitSet0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1311, (short) (-1), (short)100, (short)1311}, shortArray0);
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      
      int int0 = bitSet0.previousClearBit((short) (-1));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1311, (short) (-1), (short)100, (short)1311}, shortArray0);
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-492);
      shortArray0[1] = (short) (-2424);
      shortArray0[2] = (short) (-1578);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-900));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578), (short) (-900)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray1, (short) (-1578));
      assertNotNull(shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-1578), (short) (-900)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-492), (short) (-2424), (short) (-900)}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      Byte byte0 = Byte.valueOf((byte)113);
      assertNotNull(byte0);
      assertEquals((byte)113, (byte)byte0);
      
      Byte byte1 = new Byte((byte)109);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)109, (byte)byte1);
      
      Byte byte2 = new Byte((byte)33);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)33, (byte)byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte3);
      
      ArrayUtils.shift((byte[]) null, (int) (short) (-1578));
  }

  @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-182), 0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-182));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Float[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[3] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, boolean0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1812.2542F;
      floatArray0[1] = (-1.0F);
      ArrayUtils.shift(floatArray0, 832, 832, (-89));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1812.2542F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) booleanArray0, (-3), (-3), (-89));
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      ArrayUtils.reverse((Object[]) booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-89), (-89));
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      ArrayUtils.shift(floatArray0, 832, 832, 832);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.hashCode((Object) boolean0);
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-246.50766F);
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray1, (Object) byte0, (int) (byte) (-81));
      assertNotNull(bitSet0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      ArrayUtils.shift(floatArray0, 0, 0, 0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 6;
      intArray0[2] = 97;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 7);
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 7;
      longArray0[1] = (long) 7;
      longArray0[2] = (long) 7;
      longArray0[3] = (long) 7;
      longArray0[4] = (long) 7;
      longArray0[7] = (long) 7;
      long[] longArray1 = ArrayUtils.insert(7, longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      assertArrayEquals(new long[] {7L, 7L, 7L, 7L, 7L, 0L, 0L, 7L}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 7;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)53;
      shortArray0[1] = (short) (-638);
      shortArray0[2] = (short)878;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)963;
      int int0 = (-1462);
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-1462), (short)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1462, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)59;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)12;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 12.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)59;
      longArray0[2] = (long) (byte)59;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)12;
      longArray0[5] = (long) (byte)59;
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (long) (byte)0;
      longArray0[8] = (long) (byte)59;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 277L);
      assertNotNull(longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {277L, 0L, 59L, 59L, 0L, 12L, 59L, 0L, 0L, 59L}, longArray1);
      assertArrayEquals(new long[] {0L, 59L, 59L, 0L, 12L, 59L, 0L, 0L, 59L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(byteArray0, 1093, (int) (byte)12, 65536);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)59, (byte)0}, byteArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 918.60956581, (int) (byte)12);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 12.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 12.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1755;
      intArray0[1] = (-3498);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 1755, (-1332));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1755, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-779), shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-779);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-779.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-350.2394245);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 1896, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1896, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.5, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      byte byte0 = (byte)63;
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)63);
      assertNull(byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) (byte)63, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 63, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Character character0 = Character.valueOf('[');
      assertNotNull(character0);
      assertEquals('[', (char)character0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '[';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 91.0F);
      assertNotNull(bitSet0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {91.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {91.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      int int0 = 0;
      byte[] byteArray0 = bitSet0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new float[] {91.0F}, floatArray0, 0.01F);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      BitSet bitSet1 = bitSet0.get(0, 0);
      assertNotNull(bitSet1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {91.0F}, floatArray0, 0.01F);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, bitSet1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)25, (int) (byte) (-75));
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      byte[] byteArray1 = ArrayUtils.insert(979, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)90;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-2));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)5, (byte)90, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)90, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray0, (int) (byte) (-2), 120);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)5, (byte)90, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)90, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)90;
      objectArray0[1] = (Object) (byte)5;
      objectArray0[2] = (Object) (byte)5;
      ArrayUtils.swap(objectArray0, (int) (byte) (-2), (int) (byte) (-18));
      assertEquals(3, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, (int) (byte) (-2), 'k');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-887.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-887.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)32);
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = '3';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'q', '3'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) (byte)1, (-1));
      assertNotNull(bitSet1);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, 92, (int) (byte)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 53;
      longArray0[1] = (long) 53;
      longArray0[2] = (long) 53;
      longArray0[3] = (long) 53;
      longArray0[4] = (long) 53;
      longArray0[5] = (long) 53;
      longArray0[6] = 2948L;
      longArray0[7] = (long) 53;
      longArray0[8] = (long) 53;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 53L);
      assertNotNull(bitSet0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {53L, 53L, 53L, 53L, 53L, 53L, 2948L, 53L, 53L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4, 5, 7, 8}", bitSet0.toString());
      assertEquals(8, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-319);
      longArray0[2] = 1536L;
      longArray0[3] = 1L;
      longArray0[4] = (long) (-319);
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {0L, (-319L), 1536L, 1L, (-319L), 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-319L), 1536L, 1L, (-319L), 0L, 1L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'p', 'p'}, charArray1);
      assertArrayEquals(new char[] {'Q', 'p', 'p'}, charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-287), (-287));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-319L), 102, (double) 1L);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '*';
      charArray0[2] = '|';
      charArray0[3] = '*';
      charArray0[4] = 'Q';
      charArray0[5] = '?';
      charArray0[6] = '%';
      ArrayUtils.reverse(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '%', '?', 'Q', '*', '|', '*', 'c'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(boolean0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'c';
      longArray0[1] = (long) 'Q';
      longArray0[2] = (long) '\u0000';
      longArray0[3] = (long) '*';
      longArray0[4] = (long) '\u0000';
      longArray0[5] = (long) '\u0000';
      longArray0[6] = (-2684L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2112L));
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {99L, 81L, 0L, 42L, 0L, 0L, (-2684L)}, longArray1);
      assertArrayEquals(new long[] {99L, 81L, 0L, 42L, 0L, 0L, (-2684L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[4] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 95L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test870()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)13;
      shortArray0[6] = (short)1852;
      ArrayUtils.shift(shortArray0, (int) (short)1852);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)1852, (short)0, (short)0, (short)0, (short)13}, shortArray0);
      
      Short[] shortArray1 = new Short[4];
      shortArray1[0] = (Short) (short)1852;
      shortArray1[1] = (Short) (short)1852;
      shortArray1[2] = (Short) (short)1852;
      shortArray1[3] = (Short) (short)1852;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertArrayEquals(new short[] {(short)1852, (short)1852, (short)1852, (short)1852}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test871()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = '*';
      charArray0[2] = '|';
      charArray0[3] = '*';
      charArray0[4] = 'Q';
      charArray0[5] = '?';
      charArray0[6] = '%';
      ArrayUtils.reverse(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'%', '?', 'Q', '*', '|', '*', 'c'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(boolean0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'c';
      longArray0[1] = (long) '|';
      longArray0[2] = 1L;
      longArray0[3] = (long) '*';
      longArray0[4] = (long) '%';
      longArray0[5] = (long) '?';
      longArray0[6] = (-2684L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2112L));
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {99L, 124L, 1L, 42L, 37L, 63L, (-2684L)}, longArray1);
      assertArrayEquals(new long[] {99L, 124L, 1L, 42L, 37L, 63L, (-2684L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test872()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1549.3F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.NaN;
      int int0 = ArrayUtils.indexOf(floatArray0, 1180.589F, 2);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1549.3F, (-1.0F), 0.0F, Float.NaN}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test873()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-905.7));
      assertNotNull(double0);
      assertEquals((-905.7), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-905.7)}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 85, 85);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test874()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)120;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0, (int) (byte)32);
      assertNotNull(bitSet0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-6), (byte)23, (byte)17, (byte)0, (byte)32, (byte)120}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test875()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, 1640);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-1175.935015202185));
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 1640;
      intArray0[4] = 43;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      intArray0[8] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1640, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test876()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2469);
      intArray0[1] = (-2469);
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(14, intArray0.length);
      assertEquals(14, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) (-2469);
      floatArray0[6] = (float) 32;
      floatArray0[7] = (float) 2;
      ArrayUtils.swap(floatArray0, 1536, 0, (-2469));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 0.0F, 0.0F, 32.0F, (-2469.0F), 32.0F, 2.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-2469);
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1536, (-2469));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, (-2469.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (-2469));
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 0.0F, 0.0F, 32.0F, 32.0F, 2.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, 2.0F, 0.0F, 0.0F, 32.0F, (-2469.0F), 32.0F, 2.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 1536;
      ArrayUtils.swap(longArray0, 2, (-1), 2146291925);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {2L, 1536L, 1L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test877()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'V';
      charArray0[2] = 'r';
      charArray0[3] = 'U';
      charArray0[4] = 'c';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'V';
      intArray0[1] = (int) 'U';
      intArray0[2] = (int) 'r';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test878()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'T';
      charArray0[3] = 'z';
      charArray0[4] = '1';
      charArray0[5] = '\'';
      charArray0[6] = '*';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertArrayEquals(new char[] {'h', 'T', '\u0000', 'z', '1', '\'', '*'}, charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'v';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test879()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 5;
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {5, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = null;
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test880()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-319);
      longArray0[2] = 1536L;
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 1765);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1765, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test881()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = 1L;
      ArrayUtils.shuffle(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L), 0L, 1L, 1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test882()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(12, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test883()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0L);
      assertNotNull(doubleStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '=';
      charArray0[2] = 'o';
      charArray0[3] = 'i';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'>', '=', 'o', 'i'}, charArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1935;
      intArray0[1] = (int) '=';
      intArray0[2] = (int) 'i';
      intArray0[3] = (int) 'i';
      intArray0[4] = (int) 'o';
      intArray0[5] = (int) 'i';
      intArray0[6] = (int) 'o';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1935, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test884()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1679L));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1679L);
      doubleArray0[1] = (double) (-1679L);
      doubleArray0[2] = (double) (-1679L);
      doubleArray0[3] = (double) (-1679L);
      doubleArray0[4] = (double) (-1679L);
      doubleArray0[5] = (double) (-1679L);
      doubleArray0[6] = (double) (-1679L);
      doubleArray0[7] = (double) (-1679L);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 590.0358285872);
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1679.0), (-1679.0), (-1679.0), (-1679.0), (-1679.0), (-1679.0), (-1679.0), (-1679.0)}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test885()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[2] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[3] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, booleanArray0[1]);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1812.2542F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1812.2542F, 1);
      assertNotNull(bitSet0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1812.2542F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test886()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '*';
      floatArray0[1] = (float) '*';
      charArray0[2] = '*';
      floatArray0[3] = (float) 'c';
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'c';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {42.0F, 42.0F, 0.0F, 99.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {42.0F, 42.0F, 0.0F, 99.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test887()  throws Throwable  {
      short[] shortArray0 = new short[20];
      shortArray0[1] = (short) (-985);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(20, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) (short) (-985);
      longArray0[2] = (long) (short) (-985);
      longArray0[3] = (-1172L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-985L));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, (-985L), (-985L), (-1172L), 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-985L), (-1172L), 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-1172L));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      Long long0 = new Long((short) (-985));
      assertNotNull(long0);
      assertEquals((-985L), (long)long0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test888()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 53;
      floatArray0[1] = (float) 53;
      floatArray0[2] = (float) 53;
      floatArray0[3] = (float) 53;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(53, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test889()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (-18), Integer.MAX_VALUE, 1369);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test890()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Byte byte1 = Byte.valueOf((byte)99);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)99, (byte)byte1);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test891()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      Character character0 = Character.valueOf('`');
      assertNotNull(character0);
      assertEquals('`', (char)character0);
      
      char char0 = 'h';
      Character character1 = Character.valueOf('h');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('h', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('u');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertEquals('u', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('$');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertEquals('$', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('j');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character2));
      assertEquals('j', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('!');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertEquals('!', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertNotNull(character6);
      assertTrue(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertEquals('h', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf('o');
      assertNotNull(character7);
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character5));
      assertEquals('o', (char)character7);
      
      characterArray0[7] = character7;
      Character[] characterArray1 = ArrayUtils.addFirst(characterArray0, character3);
      assertNotNull(characterArray1);
      assertEquals(8, characterArray0.length);
      assertEquals(9, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertFalse(character3.equals((Object)character6));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character5));
      assertFalse(character3.equals((Object)character7));
      assertFalse(character3.equals((Object)character4));
  }

  @Test(timeout = 4000)
  public void test892()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-75);
      ArrayUtils.shift(byteArray0, 0, 2301, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-44), (byte)9, (byte)1, (byte) (-103), (byte) (-75)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test893()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      booleanArray0[3] = boolean3;
      ArrayUtils.removeAllOccurences(booleanArray0, (Boolean) boolean0);
      boolean[] booleanArray1 = new boolean[1];
      booleanArray1[0] = boolean0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray1, (-750), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -750, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test894()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2817.4F;
      floatArray0[2] = 2817.4F;
      floatArray0[3] = 2817.4F;
      ArrayUtils.shuffle(floatArray0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(5, stringArray0, stringArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test895()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 1033);
      Object[] objectArray0 = new Object[9];
      ArrayUtils.shuffle(objectArray0);
      Object[] objectArray1 = ArrayUtils.toArray(objectArray0);
      assertEquals(9, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test896()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-296L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(0.0F);
      floatArray0[0] = float0;
      Float float1 = new Float((float) 0);
      Float[] floatArray1 = ArrayUtils.addFirst(floatArray0, float1);
      assertEquals(2, floatArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      ArrayUtils.swap(byteArray0, 0, (int) (byte)7);
      float[] floatArray2 = new float[9];
      floatArray2[0] = (float) floatArray0[0];
      floatArray2[1] = (float) 0;
      floatArray2[2] = (float) (-296L);
      floatArray2[3] = 0.0F;
      floatArray2[4] = (float) (byte)7;
      floatArray2[5] = 0.0F;
      floatArray2[6] = (float) 0L;
      floatArray2[7] = (float) (-296L);
      floatArray2[8] = (float) 0L;
      float[] floatArray3 = ArrayUtils.clone(floatArray2);
      assertNotNull(floatArray3);
      assertEquals(9, floatArray3.length);
  }

  @Test(timeout = 4000)
  public void test897()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2469.0F);
      doubleArray0[1] = (-42.0);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2469.0F);
      ArrayUtils.shift(doubleArray0, 0, 0, (-3192));
      Double double0 = new Double((-2469.0F));
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test898()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = 0;
      int int1 = 48;
      ArrayUtils.shift(doubleArray0, 0, 48, 0);
      boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test899()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 0);
      Byte[] byteArray0 = new Byte[0];
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test900()  throws Throwable  {
      int int0 = 0;
      int int1 = 48;
      boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test901()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 195.2714;
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test902()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
      int[] intArray0 = new int[7];
      intArray0[0] = (-490);
      intArray0[1] = (-646);
      intArray0[2] = 2097;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[6] = (-628);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-646), 36);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test903()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = '';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'', 'R'}, charArray0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[]";
      stringArray0[1] = "xe<]hC";
      stringArray0[2] = "p)->QkD6;)A|!5,Qi!g";
      stringArray0[3] = "Can't find a public method for ";
      stringArray0[4] = ", Length: 0";
      stringArray0[5] = "";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "7g~o");
      assertEquals(6, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test904()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1582L));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1582L);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1582L);
      doubleArray0[3] = (double) (-1582L);
      doubleArray0[4] = (double) (-1582L);
      doubleArray0[5] = (double) (-1582L);
      long[] longArray1 = ArrayUtils.insert(130, longArray0, (long[]) null);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1582L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test905()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayUtils.reverse(charArray0, 549, 549);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2875;
      longArray0[1] = (long) 2875;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 549;
      longArray0[5] = (long) 2;
      longArray0[6] = 37L;
      longArray0[7] = (long) '-';
      longArray0[8] = (long) '-';
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test906()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1121.6646F;
      floatArray0[1] = 428.1101F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-2126.1545F);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-2126.1545F), (-1.0F), 1.0F, 428.1101F, 1121.6646F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = 'U';
      charArray0[2] = 'F';
      charArray0[3] = '7';
      charArray0[4] = 'a';
      ArrayUtils.reverse(charArray0, 2, 2875);
      assertArrayEquals(new char[] {'g', 'U', 'a', '7', 'F'}, charArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test907()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-2069.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3484.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test908()  throws Throwable  {
      ArrayUtils.nullToEmpty((String[]) null);
      Integer[] integerArray0 = new Integer[16];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)89;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2048, 0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test909()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.nullToEmpty((Object[]) shortArray1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0L, (double) 0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test910()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-291L);
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test911()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 67, 14);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test912()  throws Throwable  {
      char[] charArray0 = new char[0];
      byte[] byteArray0 = new byte[0];
      ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (byte)0);
      Integer[] integerArray0 = new Integer[6];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)933;
      ArrayUtils.removeElement(floatArray0, 266.6681F);
      ArrayUtils.swap(charArray0, 841, (int) (short)933, (int) (byte)0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test913()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '*';
      charArray0[2] = '|';
      charArray0[3] = '*';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-44);
      ArrayUtils.subarray(byteArray0, 503, (int) (byte) (-44));
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      ArrayUtils.insert((int) (byte)1, charArray0, charArray0);
      Map<Object, Object> map0 = ArrayUtils.toMap(classArray1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test914()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '*';
      charArray0[2] = '|';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-44);
      ArrayUtils.subarray(byteArray0, 503, (int) (byte) (-44));
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      ArrayUtils.insert((int) (byte)2, charArray0, charArray0);
      Map<Object, Object> map0 = ArrayUtils.toMap(classArray1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test915()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 368L;
      longArray0[2] = 0L;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-72);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-56), (int) (byte) (-56));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test916()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3557.294;
      doubleArray0[1] = 553.318391625735;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 553.318391625735);
      assertArrayEquals(new double[] {3557.294}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test917()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)12;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)88, (int) (byte) (-11));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0);
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test918()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)88, (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test919()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Object[] objectArray0 = new Object[6];
      objectArray0[2] = (Object) true;
      objectArray0[5] = (Object) true;
      ArrayUtils.get(objectArray0, 2146363416, objectArray0[0]);
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      
      float[] floatArray0 = new float[0];
      ArrayUtils.removeElements(floatArray0, floatArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      charArray0[1] = '';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'a');
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'a', 'a', '', 'a', 'a', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      ArrayUtils.subarray(intArray0, (-2109), 1271);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, (String) null);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test920()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-42));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test921()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = '|';
      charArray0[2] = '$';
      charArray0[3] = ' ';
      charArray0[4] = 'X';
      charArray0[5] = '(';
      charArray0[6] = '8';
      char[] charArray1 = ArrayUtils.add(charArray0, 2, 'G');
      assertArrayEquals(new char[] {'+', '|', 'G', '$', ' ', 'X', '(', '8'}, charArray1);
      
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.nullToEmpty(integerArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '8';
      doubleArray0[1] = (double) '$';
      doubleArray0[2] = (double) '$';
      doubleArray0[3] = (double) 'X';
      doubleArray0[4] = (double) 'X';
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 88.0);
      assertArrayEquals(new double[] {56.0, 36.0, 36.0, 88.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test922()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (byte) (-70));
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test923()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      ArrayUtils.removeElement(byteArray0, (byte)0);
      ArrayUtils.subarray(byteArray0, (int) (byte)90, 120);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)5;
      ArrayUtils.swap(objectArray0, (int) (byte)5, (int) (byte) (-18));
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, (int) (byte)5, 'k');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test924()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 1791, (double) 1791);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test925()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 's';
      charArray0[2] = ';';
      charArray0[3] = '#';
      ArrayUtils.subarray(charArray0, 37, 2);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test926()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = 'D';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '%');
      assertArrayEquals(new char[] {'%', '-', 'D'}, charArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '%';
      doubleArray0[1] = (double) 'D';
      doubleArray0[2] = (double) '-';
      doubleArray0[3] = (double) 'D';
      doubleArray0[4] = (double) '%';
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 'D';
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 37.0);
      assertArrayEquals(new double[] {68.0, 45.0, 68.0, 37.0, 0.0, 68.0}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)51, (byte)85, (byte) (-1), (byte) (-68), (byte) (-51), (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test927()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      long[] longArray0 = new long[1];
      ArrayUtils.indexOf(longArray0, 1801L);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-794);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)36;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-664);
      shortArray0[7] = (short) (-165);
      shortArray0[8] = (short)2258;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(shortArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test928()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.indexOf(booleanArray0, true, (-10));
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-437);
      ArrayUtils.swap(shortArray0, (-10), 0);
      ArrayUtils.add(shortArray0, (short)3);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) (short) (-437);
      objectArray0[2] = (Object) (short) (-437);
      objectArray0[3] = (Object) false;
      Double double0 = new Double((-1611.19696626));
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) true;
      ArrayUtils.shift(objectArray0, 845, (-335), 0);
      ArrayUtils.removeAllOccurences((int[]) null, 1);
      ArrayUtils.shift(objectArray0, (-445), 1, 0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test929()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      ArrayUtils.removeElement(byteArray0, (byte) (-57));
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1761L, (-3602));
      Object[] objectArray0 = new Object[9];
      double[] doubleArray0 = new double[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-2037.44), 90);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test930()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1147.333157;
      doubleArray0[1] = (-835.5234);
      long[] longArray0 = new long[2];
      longArray0[0] = (-2684L);
      longArray0[1] = 5647L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 3702L);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2684L), 5647L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test931()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) (short)120;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)120;
      longArray0[1] = (long) (short)120;
      boolean boolean0 = ArrayUtils.contains(longArray0, 120L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test932()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[14];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.removeAllOccurrences(booleanArray0, true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<";
      stringArray0[1] = "";
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2307.449F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      ArrayUtils.toObject(floatArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      ArrayUtils.isNotEmpty(charArray0);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1709.5723F), 100);
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test933()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-1395), (-1395));
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test934()  throws Throwable  {
      ArrayUtils.toPrimitive((Byte[]) null, (byte)63);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)63;
      shortArray0[1] = (short) (byte)63;
      shortArray0[2] = (short) (byte)63;
      shortArray0[3] = (short) (byte)63;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((long) (short)63);
      mockRandom0.doubles();
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new short[] {(short)63, (short)63, (short)63, (short)63}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test935()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.indexesOf(booleanArray0, false);
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.indexOf(longArray0, 1801L);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-794);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)36;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-664);
      shortArray0[7] = (short) (-165);
      shortArray0[8] = (short)2258;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(shortArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test936()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.add(booleanArray0, false);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 4114);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4114, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test937()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      mockRandom0.nextGaussian();
      char[] charArray0 = new char[4];
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) '\u0000';
      ArrayUtils.isSorted(charArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test938()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test939()  throws Throwable  {
      Double double0 = new Double(0.0);
      int int0 = ArrayUtils.indexOf((int[]) null, 0, 65);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test940()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-905.7));
      doubleArray0[0] = double0;
      ArrayUtils.toPrimitive(doubleArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = (-2094L);
      longArray0[1] = (-1066L);
      longArray0[2] = 928L;
      longArray0[3] = 1275L;
      ArrayUtils.lastIndexOf(longArray0, (-1066L));
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
  }

  @Test(timeout = 4000)
  public void test941()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 99L;
      longArray0[1] = 58L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test942()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test943()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2836;
      shortArray0[1] = (short) (-2313);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)1469;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2613), (int) (short)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test944()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)2502, (int) (short)1469);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test945()  throws Throwable  {
      float[] floatArray0 = new float[1];
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      ArrayUtils.shift(floatArray0, (int) ':');
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte)92);
      byteArray0[0] = byte0;
      ArrayUtils.nullToEmpty(floatArray0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(1185, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test946()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2836;
      shortArray0[1] = (short) (-2313);
      shortArray0[2] = (short) (-2613);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)1469;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2613), (int) (short)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test947()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      char char0 = 'Z';
      Character character0 = Character.valueOf('Z');
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('Z');
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('!');
      characterArray0[3] = character3;
      Character character4 = new Character('4');
      characterArray0[4] = character4;
      Character character5 = new Character(char0);
      characterArray0[5] = character5;
      Character character6 = new Character('b');
      characterArray0[6] = character6;
      Character character7 = new Character(char0);
      characterArray0[7] = character7;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '9');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', '!', '4', 'Z', 'b', 'Z'}, charArray0);
  }
}
